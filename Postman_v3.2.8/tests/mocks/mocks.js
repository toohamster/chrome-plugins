var mockCollection = {"id":"2dd2b664-c410-d3b4-8e33-79fbd4c5b580","name":"HttpBin Local","order":["c456be6d-9c21-bd3a-c212-2573993f5005","10d05644-8c2a-dd0d-a052-abf2df9009d7","68ff636a-b8eb-dfef-8446-ca0f476e1ff6","e28d2912-bb25-93c8-0748-0d5ae373a4d9","0d2ba987-30d5-ecd8-8863-c0de47db9389","da2ca5ea-bc34-2297-7e3f-d1230f178ebc","7f3daadf-ac3a-fbf3-f2de-e8d8880f483f","b260df94-3aff-7bd2-e72e-1c5aad2dd67e","b9849126-ae5f-6104-cf25-213ef2678f9c","1c8412a5-823e-4639-3d12-ffdeb2756d9d"],"timestamp":1374398513014,"requests":[{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"0d2ba987-30d5-ecd8-8863-c0de47db9389","name":"GET","description":"Send a simple GET request to the local server","url":"http://localhost:5000/get","method":"GET","headers":"","data":[],"dataMode":"params","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"10d05644-8c2a-dd0d-a052-abf2df9009d7","name":"Post URLEncoded","description":"","url":"http://localhost:5000/post","method":"POST","headers":"","data":[{"key":"but","value":"this","type":"text"},{"key":"is","value":"going","type":"text"},{"key":"to","value":"be","type":"text"},{"key":"urle","value":"encodeded asda asd ","type":"text"}],"dataMode":"urlencoded","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"1c8412a5-823e-4639-3d12-ffdeb2756d9d","name":"Purge","description":"","url":"http://localhost:5000/get","method":"PURGE","headers":"Content-Type: text/json\n","data":[{"key":"test","value":"blah","type":"text"},{"key":"something","value":"new","type":"text"},{"key":"is","value":"coming","type":"text"},{"key":"to","value":"town","type":"text"}],"dataMode":"params","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"68ff636a-b8eb-dfef-8446-ca0f476e1ff6","name":"POST - application/json","description":"","url":"http://localhost:5000/post","method":"POST","headers":"Content-Type: application/json\n","data":"{\n  \"json\": \"is quite cool\"\n}","dataMode":"raw","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"7f3daadf-ac3a-fbf3-f2de-e8d8880f483f","name":"Head","description":"","url":"http://localhost:5000/head","method":"HEAD","headers":"","data":[],"dataMode":"params","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"b260df94-3aff-7bd2-e72e-1c5aad2dd67e","name":"Options","description":"","url":"http://localhost:5000/options","method":"OPTIONS","headers":"","data":[],"dataMode":"params","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"b9849126-ae5f-6104-cf25-213ef2678f9c","name":"PUT - text/html","description":"","url":"http://localhost:5000/put","method":"PUT","headers":"Content-Type: text/html\n","data":"<html>\n  XML not so much\n</html","dataMode":"raw","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"c456be6d-9c21-bd3a-c212-2573993f5005","name":"Post FormData","description":"","url":"http://localhost:5000/post","method":"POST","headers":"","data":[{"key":"test","value":"blah","type":"text"},{"key":"something","value":"new","type":"text"},{"key":"is","value":"coming","type":"text"},{"key":"to","value":"town","type":"text"}],"dataMode":"params","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"da2ca5ea-bc34-2297-7e3f-d1230f178ebc","name":"Delete","description":"","url":"http://localhost:5000/delete","method":"DELETE","headers":"","data":[],"dataMode":"params","responses":[],"version":2},{"collectionId":"bc406201-5235-cc70-bfd8-d4f1de4b17b9","id":"e28d2912-bb25-93c8-0748-0d5ae373a4d9","name":"POST - application/xml","description":"","url":"http://localhost:5000/post","method":"POST","headers":"Content-Type: application/xml\n","data":"<html>\n  XML not so much\n</html","dataMode":"raw","responses":[],"version":2}]};

var mockCollections = {
    "noRequests": {"id":"196868a1-727c-9050-36dc-78b200c32750","name":"Games","order":[],"folders":[{"id":"15865cbc-0d3e-c19a-90c0-99324aeee5d5","name":"Half Life","description":"","order":[]},{"id":"eed76b02-1c5a-c01a-b901-87319c2d8976","name":"Fear","description":"","order":[]},{"id":"9347a850-8d8b-d1f0-9b6b-158e9aa058f3","name":"Serious Sam","description":"","order":[]}],"timestamp":0,"requests":[]},
    "withFoldersAndRequests": {"id":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","name":"HTTPBin Folders","order":["917d0ebd-530e-2497-6a4f-5a8bd157aeb4","99845a96-e97f-2367-ad60-82054567b59c"],"folders":[{"id":"7f8b07b9-066f-3b36-6b43-7b233b2c451a","name":"POST","description":"","order":["5ff93c34-7a27-915a-c32e-d795c670f840","5229b24e-f255-12a3-a058-d23d070152dd","3a961ae9-2f2d-f77c-5374-1d8265616689","917d0ebd-530e-2497-6a4f-5a8bd157aeb4"]},{"id":"82e71a1e-2c82-bd01-3b41-79cc319902b5","name":"Others","description":"","order":["4796d715-f37a-ab38-79a8-6adc517081dd","197aac5c-83d5-e0a3-bdb2-6e5426bd01d6","cce5967c-6fad-713a-f423-0715ba5c5b75"]}],"timestamp":0,"requests":[{"collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","id":"197aac5c-83d5-e0a3-bdb2-6e5426bd01d6","name":"GET","description":"Send a simple GET request to the local server","url":"http://localhost:5000/get","method":"GET","headers":"","data":[],"dataMode":"params","responses":[],"version":2},{"collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","id":"3a961ae9-2f2d-f77c-5374-1d8265616689","name":"POST - application/json","description":"","url":"http://localhost:5000/post","method":"POST","headers":"Content-Type: application/json\n","data":"{\n  \"json\": \"is quite cool\"\n}","dataMode":"raw","responses":[],"version":2},{"collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","id":"4796d715-f37a-ab38-79a8-6adc517081dd","name":"Delete","description":"","url":"http://localhost:5000/delete","method":"DELETE","headers":"","data":[],"dataMode":"params","responses":[],"version":2},{"collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","id":"5229b24e-f255-12a3-a058-d23d070152dd","name":"Post FormData","description":"","url":"http://localhost:5000/post","method":"POST","headers":"","data":[{"key":"test","value":"blah","type":"text"},{"key":"something","value":"new","type":"text"},{"key":"is","value":"coming","type":"text"},{"key":"to","value":"town","type":"text"}],"dataMode":"params","responses":[],"version":2},{"collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","id":"5ff93c34-7a27-915a-c32e-d795c670f840","name":"POST - application/xml","description":"","url":"http://localhost:5000/post","method":"POST","headers":"Content-Type: application/xml\n","data":"<html>\n  XML not so much\n</html","dataMode":"raw","responses":[],"version":2},{"collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","id":"917d0ebd-530e-2497-6a4f-5a8bd157aeb4","name":"Post URLEncoded","description":"","url":"http://localhost:5000/post","method":"POST","headers":"","data":[{"key":"but","value":"this","type":"text"},{"key":"is","value":"going","type":"text"},{"key":"to","value":"be","type":"text"},{"key":"urle","value":"encodeded asda asd ","type":"text"}],"dataMode":"urlencoded","responses":[],"version":2},{"id":"99845a96-e97f-2367-ad60-82054567b59c","url":"http://localhost:5000/get?foo=bar","data":[],"headers":"","dataMode":"params","method":"GET","version":2,"time":1375713358489,"name":"GET request with params","description":"This is a **get** request","collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc"},{"collectionId":"9ea2a28d-52ff-30f8-a8d0-5829032b62bc","id":"cce5967c-6fad-713a-f423-0715ba5c5b75","name":"Head","description":"","url":"http://localhost:5000/head","method":"HEAD","headers":"","data":[],"dataMode":"params","responses":[],"version":2}]},
    "withFoldersAndResponses": {}
};

var mockImportees = {
    "swagger2": {"swagger": "2.0","info": {"description": "My API","version": "1.0.0","title": "My API","termsOfService": "http://www.domain.com","contact": {"name": "support@domain.com"}},"basePath": "/","schemes": ["http"],"paths": {"Authorization/LoginAPI": {"post": {"summary": "Authenticates you to the system and produces a session token that will be used for future calls","description": "","operationId": "LoginAPI","consumes": ["application/x-www-form-urlencoded"],"produces": ["application/json"],"parameters": [{"in": "formData","name": "UserName","description": "Login Username","required": true,"type": "string"}, {"in": "formData","name": "Password","description": "Password","required": true,"type": "string"}],"responses": {"200": {"description": "API Response with session ID if login is allowed","schema": {"$ref": "#/definitions/Authorization"}}}}}}},
    "swagger1": {"resourcePath": "/account","apis": [{"path": "/account/authenticate/{username}","description": "","operations": [{"parameters": [{"name": "username","description": "A confirmed Wordnik username","required": true,"dataType": "string","allowMultiple": false,"paramType": "path"}],"summary": "Authenticates a User","method": "GET","nickname": "authenticate","responseClass": "AuthenticationToken","errorResponses": [{"reason": "Account not available.","code": 403},{"reason": "User not found.","code": 404}]}]}],"models": {"User": {"uniqueItems": false,"properties": {"id": {"uniqueItems": false,"type": "long","required": false}},"id": "user","type": "any","required": false},"ApiTokenStatus": {"uniqueItems": false,"properties": {},"id": "ApiTokenStatus","type": "any","required": false}},"apiVersion": "4.0","swaggerVersion": "1.0","basePath": "http://api.wordnik.com/v4"},
    "ramlLink": "https://gist.githubusercontent.com/abhijitkane/f8c7d3e6a75375080f11/raw/1c4d894279393302c99827b8e1006f9c80a5a888/api.raml",
    "swagger2_yaml": "# this is an example of the Uber API\n# as a demonstration of an API spec in YAML\nswagger: \"2.0\"\ninfo:\n  title: Uber API\n  description: Move your app forward with the Uber API\n  version: \"1.0.0\"\n# the domain of the service\nhost: api.uber.com\n# array of all schemes that your API supports\nschemes:\n  - https\n# will be prefixed to all paths\nbasePath: /v1\nproduces:\n  - application/json\npaths:\n  /products:\n    get:\n      summary: Product Types\n      description: The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.\n      parameters:\n        - name: latitude\n          in: query\n          description: Latitude component of location.\n          required: true\n          type: number\n          format: double\n        - name: longitude\n          in: query\n          description: Longitude component of location.\n          required: true\n          type: number\n          format: double\n      tags: \n        - Products\n      responses:  \n        200:\n          description: An array of products\n          schema:\n            type: array\n            items:\n              $ref: Product\n        default:\n          description: Unexpected error\n          schema:\n            $ref: Error\n  /estimates/price:\n    get:\n      summary: Price Estimates\n      description: The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.<br><br>The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier.\n      parameters:\n        - name: start_latitude\n          in: query\n          description: Latitude component of start location.\n          required: true\n          type: number\n          format: double\n        - name: start_longitude\n          in: query\n          description: Longitude component of start location.\n          required: true\n          type: number\n          format: double\n        - name: end_latitude\n          in: query\n          description: Latitude component of end location.\n          required: true\n          type: number\n          format: double\n        - name: end_longitude\n          in: query\n          description: Longitude component of end location.\n          required: true\n          type: number\n          format: double\n      tags: \n        - Estimates\n      responses:  \n        200:\n          description: An array of price estimates by product\n          schema:\n            type: array\n            items:\n              $ref: PriceEstimate\n        default:\n          description: Unexpected error\n          schema:\n            $ref: Error\n  /estimates/time:\n    get:\n      summary: Time Estimates\n      description: The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.\n      parameters:\n        - name: start_latitude\n          in: query\n          description: Latitude component of start location.\n          required: true\n          type: number\n          format: double\n        - name: start_longitude\n          in: query\n          description: Longitude component of start location.\n          required: true\n          type: number\n          format: double\n        - name: customer_uuid\n          in: query\n          type: string\n          format: uuid\n          description: Unique customer identifier to be used for experience customization.\n        - name: product_id\n          in: query\n          type: string\n          description: Unique identifier representing a specific product for a given latitude & longitude.\n      tags: \n        - Estimates\n      responses:  \n        200:\n          description: An array of products\n          schema:\n            type: array\n            items:\n              $ref: Product\n        default:\n          description: Unexpected error\n          schema:\n            $ref: Error\n  /me:\n    get:\n      summary: User Profile\n      description: The User Profile endpoint returns information about the Uber user that has authorized with the application.\n      tags: \n        - User\n      responses:\n        200:\n          description: Profile information for a user\n          schema:\n            $ref: Profile\n        default:\n          description: Unexpected error\n          schema:\n            $ref: Error\n  /history:\n    get:\n      summary: User Activity\n      description: The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.\n      parameters:\n        - name: offset\n          in: query\n          type: integer\n          format: int32\n          description: Offset the list of returned results by this amount. Default is zero.\n        - name: limit\n          in: query\n          type: integer\n          format: int32 \n          description: Number of items to retrieve. Default is 5, maximum is 100.\n      tags: \n        - User\n      responses:\n        200:\n          description: History information for the given user\n          schema:\n            $ref: Activities\n        default:\n          description: Unexpected error\n          schema:\n            $ref: Error\ndefinitions:\n  Product:\n    properties:\n      product_id:\n        type: string\n        description: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.\n      description:\n        type: string\n        description: Description of product.\n      display_name:\n        type: string\n        description: Display name of product.\n      capacity:\n        type: string\n        description: Capacity of product. For example, 4 people.\n      image:\n        type: string\n        description: Image URL representing the product.\n  PriceEstimate:\n    properties:\n      product_id:\n        type: string\n        description: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles\n      currency_code:\n        type: string\n        description: \"[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.\"\n      display_name:\n        type: string\n        description: Display name of product.\n      estimate: \n        type: string\n        description: Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI.\n      low_estimate:\n        type: number\n        description: Lower bound of the estimated price.\n      high_estimate:\n        type: number\n        description: Upper bound of the estimated price.\n      surge_multiplier:\n        type: number\n        description: Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.\n  Profile:\n    properties:\n      first_name:\n        type: string\n        description: First name of the Uber user.\n      last_name:\n        type: string\n        description: Last name of the Uber user.\n      email:\n        type: string\n        description: Email address of the Uber user\n      picture:\n        type: string\n        description: Image URL of the Uber user.\n      promo_code:\n        type: string\n        description: Promo code of the Uber user.   \n  Activity:\n    properties:\n      uuid:\n        type: string\n        description: Unique identifier for the activity\n  Activities:\n    properties:\n      offset:\n        type: integer\n        format: int32\n        description: Position in pagination.\n      limit:\n        type: integer\n        format: int32\n        description: Number of items to retrieve (100 max).\n      count:\n        type: integer\n        format: int32\n        description: Total number of items available.\n      history:\n        type: array\n        $ref: Activity\n  Error:\n    properties:\n      code:\n        type: integer\n        format: int32\n      message:\n        type: string\n      fields:\n        type: string\n",
    "wadl": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<application xmlns=\"http://research.sun.com/wadl/2006/10\">\n    <doc xmlns:jersey=\"http://jersey.dev.java.net/\" \n    \t\tjersey:generatedBy=\"Jersey: 1.0-ea-SNAPSHOT 10/02/2008 12:17 PM\"/>\n    <resources base=\"http://localhost:9998/storage/\">\n        <resource path=\"/containers\">\n            <method name=\"GET\" id=\"getContainers\">\n                <response>\n                    <representation mediaType=\"application/xml\"/>\n                </response>\n            </method>\n            <resource path=\"{container}\">\n                <param xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" \n\t\t\t\t\t\t\t\t\ttype=\"xs:string\" style=\"template\" name=\"container\"/>\n                <method name=\"PUT\" id=\"putContainer\">\n                    <response>\n                        <representation mediaType=\"application/xml\"/>\n                    </response>\n                </method>\n                <method name=\"DELETE\" id=\"deleteContainer\"/>\n                <method name=\"GET\" id=\"getContainer\">\n                    <request>\n                        <param xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" \n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"xs:string\" style=\"query\" name=\"search\"/>\n                    </request>\n                    <response>\n                        <representation mediaType=\"application/xml\"/>\n                    </response>\n                </method>\n                <resource path=\"{item: .+}\">\n                    <param xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" \n\t\t\t\t\t\t\t\t\t\t\ttype=\"xs:string\" style=\"template\" name=\"item\"/>\n                    <method name=\"PUT\" id=\"putItem\">\n                        <request>\n                            <representation mediaType=\"*/*\"/>\n                        </request>\n                        <response>\n                            <representation mediaType=\"*/*\"/>\n                        </response>\n                    </method>\n                    <method name=\"DELETE\" id=\"deleteItem\"/>\n                    <method name=\"GET\" id=\"getItem\">\n                        <response>\n                            <representation mediaType=\"*/*\"/>\n                        </response>\n                    </method>\n                </resource>\n            </resource>\n        </resource>\n    </resources>\n</application>",
    "curl": "curl -u fred:fred -X GET -H \"Content-Type: application/json\" http://httpbin.org/rest/tempo-rest/1.0/timesheet-approval?period=0813"
};

// TODO Simplify using JSMockito
function getSettingsMock() {
    var settings = {
        getSetting: function(key) {
            if (key === "variableDelimiter") {
                return "{{...}}";
            }
            else if (key === "selectedEnvironmentId") {
                return "1";
            }
        }
    };

    return settings;
}

// TODO Really need a better way to mock this
function getEnvironmentsMock() {
    var environments = {
        on: function(a1, a2, a3) {

        },

        get: function(key) {
            if (key === "1") {
                return {
                    toJSON: function() {
                        return {
                            values: [
                                {
                                    key: "env_foo",
                                    value: "env_bar"
                                }
                            ]
                        };
                    }
                };
            }
        }
    };

    return environments;
}

function getGlobalsMock() {
    var globals = {
        get: function(key) {
            if (key === "globals") {
                return [
                    {
                        key: "foo",
                        value: "bar"
                    },
                    {
                        key: "something",
                        value: "new"
                    }
                ];
            }
        }
    };

    return globals;
}

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	window.pm = window.pm || {};

	var Features = __webpack_require__(1).Features;
	var TestPurchaser = __webpack_require__(2);
	var Purchases = __webpack_require__(4);
	var Tester = __webpack_require__(5);
	var TestRuns = __webpack_require__(6);
	var TCPReader = __webpack_require__(12);
	var TCPReaderStatus = __webpack_require__(13);
	var TCPManager = __webpack_require__(14);
	var PostmanAPI = __webpack_require__(15);
	var InterceptorIntro = __webpack_require__(16);
	var InterceptorCapture = __webpack_require__(17);
	var CurlCapture = __webpack_require__(18);
	var PmCollections = __webpack_require__(19);
	var AddCollectionModal = __webpack_require__(20);
	var AddFolderModal = __webpack_require__(21);
	var EditFolderModal = __webpack_require__(22);
	var DeleteFolderModal = __webpack_require__(23);
	var EditCollectionModal = __webpack_require__(24);
	var DeleteCollectionModal = __webpack_require__(25);
	var ImportModal = __webpack_require__(26);
	var ShareCollectionModal = __webpack_require__(27);
	var ShareCollectionAccessControlModal = __webpack_require__(28);
	var OverwriteCollectionModal = __webpack_require__(202);
	var AddCollectionRequestModal = __webpack_require__(203);
	var AddMultipleCollectionRequestsModal = __webpack_require__(204);
	var EditCollectionRequestModal = __webpack_require__(205);
	var DeleteCollectionRequestModal = __webpack_require__(206);
	var CollectionMainView = __webpack_require__(207);
	var SyncLogger = __webpack_require__(234);
	var CrashReporter = __webpack_require__(235);
	var LocalChanges = __webpack_require__(237);
	var SyncManagerNew = __webpack_require__(238);
	var SyncSettingsModal = __webpack_require__(239);
	var SubscriptionHandler = __webpack_require__(240);
	var SyncStatusNotif = __webpack_require__(241);
	var TestRunnerSync = __webpack_require__(242);
	var ConflictResolverModal = __webpack_require__(243);
	var MinVersionModal = __webpack_require__(244);
	var History = __webpack_require__(245);
	var Globals = __webpack_require__(246);
	var Environments = __webpack_require__(247);
	var VariableProcessor = __webpack_require__(248);
	var EnvironmentsSelector = __webpack_require__(249);
	var EnvironmentManagerModal = __webpack_require__(250);
	var QuickLookPopOver = __webpack_require__(251);
	var AppState = __webpack_require__(252);
	var App = __webpack_require__(253);
	var HeaderPresets = __webpack_require__(257);
	var HeaderPresetsModal = __webpack_require__(258);
	var HeaderPresetsRequestEditor = __webpack_require__(259);
	var URLCache = __webpack_require__(260);
	var Request = __webpack_require__(7).Request;
	var RequestEditor = __webpack_require__(261);
	var ResponseViewer = __webpack_require__(286);
	var BasicAuthProcessor = __webpack_require__(298);
	var HawkAuthProcessor = __webpack_require__(299);
	var DigestAuthProcessor = __webpack_require__(300);
	var OAuth1Processor = __webpack_require__(301);
	var OAuth2TokenFetcher = __webpack_require__(302);
	var AWSAuthProcessor = __webpack_require__(303);
	var Helpers = __webpack_require__(304);
	var OAuth2Tokens = __webpack_require__(305);
	var OAuth2TokenList = __webpack_require__(306);
	var HelperManager = __webpack_require__(307);
	var TabManager = __webpack_require__(315);
	var TabSwitcher = __webpack_require__(316);
	var AppUpdateNotifier = __webpack_require__(318);
	var Storage = __webpack_require__(319);
	var RequestMethods = __webpack_require__(320);
	var SidebarState = __webpack_require__(321);
	var Sidebar = __webpack_require__(322);
	var Directory = __webpack_require__(327);
	var DirectoryBrowser = __webpack_require__(328);
	var TeamDirectory = __webpack_require__(330);
	var TeamDirectoryBrowser = __webpack_require__(331);
	var Tracker = __webpack_require__(332);
	var Header = __webpack_require__(333);
	var User = __webpack_require__(344);
	var ReenterPasswordModal = __webpack_require__(345);
	var UserSyncDataDeleteModal = __webpack_require__(346);
	var UserUnsyncedDataDeleteModal = __webpack_require__(347);
	var UserStatus = __webpack_require__(348);
	var UserCollections = __webpack_require__(349);
	var UserSigninModal = __webpack_require__(351);
	var Postman3Splash = __webpack_require__(352);
	var Mediator = __webpack_require__(353);
	var AppWindow = __webpack_require__(354);
	var Settings = __webpack_require__(355);
	var Legal = __webpack_require__(356);
	var SettingsModal = __webpack_require__(357);
	var ThemeManager = __webpack_require__(360);
	var Onboarding = __webpack_require__(361);
	var BrowserLogin = __webpack_require__(362); //this is needed for chrome too

	//electron only
	if(postman_electron) {
	    var CookieManager = __webpack_require__(363);
	    var CookieModal = __webpack_require__(364);
	    var InterceptorInstaller = __webpack_require__(365);
	    var ElectronTCPReader = __webpack_require__(366);
	    
	    pm.mainProcess = __webpack_require__(256);
	    pm.mainProcessApp = pm.mainProcess.require('app');
	}

	pm.filesystem = __webpack_require__(367);
	pm.indexedDB = __webpack_require__(368);
	pm.broadcasts = __webpack_require__(369);
	pm.alerts = __webpack_require__(370);

	pm.targets = {
	    CHROME_LEGACY_APP: 0,
	    CHROME_PACKAGED_APP: 1,
	    NODE_WEBKIT_APP: 2,
	    MACGAP_APP: 3,
	    BRACKETS_APP: 4,
	    ELECTRON_APP: 5
	};

	pm.target = pm.targets.CHROME_PACKAGED_APP;
	if(postman_webkit) {
	    pm.target = pm.targets.NODE_WEBKIT_APP;
	    _ = lodash;
	}
	if(postman_brackets) {
	    pm.target = pm.targets.BRACKETS_APP;
	}
	if(postman_macgap) {
	    pm.target = pm.targets.MACGAP_APP;
	}
	if(postman_electron) {
	    pm.target = pm.targets.ELECTRON_APP;
	    //require("remote").getCurrentWindow().toggleDevTools();
	}

	// Flags are set inside config.js
	pm.isTesting = postman_flag_is_testing;
	pm.databaseName = postman_database_name;
	pm.webUrl = postman_web_url;
	pm.apiUrl = postman_api_url;

	pm.features = new Features();

	pm.debug = false;

	pm.arePurchasesInBeta = "false";

	pm.syncSocket = null;
	pm.syncManager = null;
	pm.syncQueue = [];

	pm.environments = null;
	pm.globals = null;

	// pm.indexedDB = {};
	// pm.indexedDB.db = null;
	// pm.indexedDB.modes = {
	//     readwrite:"readwrite",
	//     readonly:"readonly"
	// };

	pm.globalPrScriptNotif = null;

	pm.fs = {};
	pm.gaClientId = "";
	pm.hasPostmanInitialized = false;

	pm.isDraggingSidebar = false;


	// TODO Check if still being used
	pm.bannedHeaders = [
	    'accept-charset',
	    'accept-encoding',
	    'access-control-request-headers',
	    'access-control-request-method',
	    'connection',
	    'content-length',
	    'cookie',
	    'cookie2',
	    'content-transfer-encoding',
	    'date',
	    'expect',
	    'host',
	    'keep-alive',
	    'origin',
	    'referer',
	    'te',
	    'trailer',
	    'transfer-encoding',
	    'upgrade',
	    'user-agent',
	    'via'
	];

	// IndexedDB implementations still use API prefixes
	var indexedDB = window.indexedDB || // Use the standard DB API
	    window.mozIndexedDB || // Or Firefox's early version of it
	    window.webkitIndexedDB;            // Or Chrome's early version
	// Firefox does not prefix these two:
	var IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;
	var IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;
	var IDBCursor = window.IDBCursor || window.webkitIDBCursor;

	window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;

	pm.init = function () {
	    Handlebars.partials = Handlebars.templates;

	    Handlebars.registerHelper('ifEditable', function(editable, options) {
	        return (editable!==false)?options.fn(this):options.inverse(this);
	    });

	    Handlebars.registerHelper('ifEditableItem', function(write, owner, options) {
	        return (write!==false || pm.user.id==owner)?options.fn(this):options.inverse(this);
	    });

	    function initializePurchases() {
	        var testPurchaser = new TestPurchaser({model: {}});
	        pm.purchases = new Purchases();
	    }

	    function initializeTester() {
	        var tester = new Tester();
	        var testRuns = new TestRuns();
	        pm.testRuns = testRuns;
	    }

	    function initializeTCPReader() {
	        var tcpReader = null;
	        if(postman_electron) {
	            tcpReader = new ElectronTCPReader();
	        }
	        else {
	            tcpReader = new TCPReader();
	        }
	        var tcpReaderStatus = new TCPReaderStatus({model: tcpReader});
	        var tcpManager = new TCPManager({model: tcpReader});
	        pm.tcpReader = tcpReader;
	    }

	    function initializePostmanAPI() {
	        pm.api = new PostmanAPI();
	    }

	    function initializeInterceptor() {
	        console.log("Initialize interceptor");
	        if(postman_electron) {
	            var interceptorInstaller = new InterceptorInstaller();
	        }
	        var interceptorIntro = new InterceptorIntro({model: {}});
	        var interceptorCapture = new InterceptorCapture();
	        var curlCapture = new CurlCapture();
	    }

	    function initializeCollections() {
	        pm.collectionValidator = postmanvalidator;

	        var pmCollections = new PmCollections();

	        var addCollectionModal = new AddCollectionModal({model: pmCollections});
	        var addFolderModal = new AddFolderModal({model: pmCollections});
	        var editFolderModal = new EditFolderModal({model: pmCollections});
	        var deleteFolderModal = new DeleteFolderModal({model: pmCollections});
	        var editCollectionModal = new EditCollectionModal({model: pmCollections});
	        var deleteCollectionModal = new DeleteCollectionModal({model: pmCollections});
	        var importModal = new ImportModal({model: pmCollections});
	        var shareCollectionAccessControlModal = new ShareCollectionAccessControlModal({model: pmCollections});
	        /* remove this when access control is rolled out to production */
	        var shareCollectionModal = new ShareCollectionModal({model: pmCollections});

	        var overwriteCollectionModal = new OverwriteCollectionModal({model: pmCollections});

	        var addCollectionRequestModal = new AddCollectionRequestModal({model: pmCollections});
	        var addMultipleCollectionRequestsModal = new AddMultipleCollectionRequestsModal({model: pmCollections});
	        var editCollectionRequestModal = new EditCollectionRequestModal({model: pmCollections});
	        var deleteCollectionRequestModal = new DeleteCollectionRequestModal({model: pmCollections});

	        var collectionMainView = new CollectionMainView({model: pmCollections});

	        pm.collections = pmCollections;
	    }

		function initializeSync() {
	        //Disabling Sync News section
			//pm.syncStatusManager = new SyncStatusManager();
			//var syncStatusSidebar = new SyncStatusSidebar({model: pm.syncStatusManager});
	        
			pm.syncLogger = new SyncLogger();
			var localChanges = new LocalChanges();
			pm.syncManager = new SyncManagerNew();
	        var syncSettings = new SyncSettingsModal({model: pm.syncManager});

	        pm.localChanges = localChanges;

	        pm.subscriptionManger = new SubscriptionHandler();

			var syncStatusNotif = new SyncStatusNotif({model: pm.syncManager});
	        var testRunnerSync = new TestRunnerSync();
	        pm.conflictResolverModal = new ConflictResolverModal();

	        var minVersionModal = new MinVersionModal();
		}

	    function initializeHistory() {
	        var history = new History();
	        pm.history = history;
	    }

	    function initializeEnvironments() {
	        var globals = new Globals();
	        var environments = new Environments();

	        var variableProcessor = new VariableProcessor({
	            "environments": environments,
	            "globals": globals
	        });

	        var environmentSelector = new EnvironmentsSelector({
	            "environments": environments,
	            "variableProcessor": variableProcessor
	        });

	        var environmentManagerModal = new EnvironmentManagerModal({
	            "environments": environments,
	            "globals": globals
	        });

	        var quicklookPopOver = new QuickLookPopOver({
	            "environments": environments,
	            "globals": globals,
	            "variableProcessor": variableProcessor
	        });

	        pm.envManager = variableProcessor;
	        pm.environments = environments;
	        pm.globals = globals;

	        var appState = new AppState({
	            "globals": globals,
	            "environments": environments,
	            "variableProcessor": variableProcessor
	        });

	        pm.app = new App({model: appState});
	    }

	    function initializeHeaderPresets() {
	        pm.headerPresets = new HeaderPresets();

	        var headerPresetsModal = new HeaderPresetsModal({model: pm.headerPresets});
	        var headerPresetsRequestEditor = new HeaderPresetsRequestEditor({model: pm.headerPresets});
	    }

	    function initializeRequester() {
	        pm.urlCache = new URLCache();

	        var request = new Request();
	        var requestEditor = new RequestEditor({model: request});
	        var responseViewer = new ResponseViewer({model: request});

	        var basicAuthProcessor = new BasicAuthProcessor({request: request});
	        var digestAuthProcessor = new DigestAuthProcessor({request: request});
	        var oAuth1Processor = new OAuth1Processor({request: request});
	        var oAuth2TokenFetcher = new OAuth2TokenFetcher({request: request});
	        var hawkAuthProcessor = new HawkAuthProcessor({request: request});
	        var awsAuthProcessor = new AWSAuthProcessor({request: request});

	        var helpers = new Helpers({
	            "basicAuth": basicAuthProcessor,
	            "digestAuth": digestAuthProcessor,
	            "oAuth1": oAuth1Processor,
	            "oAuth2": oAuth2TokenFetcher,
	            "hawkAuth": hawkAuthProcessor,
	            "awsSigV4": awsAuthProcessor,
	            "request": request
	        });

	        var oAuth2TokenList = new OAuth2TokenList({
	            model: new OAuth2Tokens()
	        });

	        pm.helpers = new HelperManager({model: helpers});


	        pm.request = request;
	        initializeExtensionListener();
	        initializeUpdateNotifier();
	    }

	    function initializeTabs() {
	        pm.tabManager = new TabManager();
	        var tabSwitcher = new TabSwitcher({model: pm.tabManager});
	    }

	    function initializeExtensionListener() {
	        if(postman_electron) {
	            //AppWindow initializes interceptor callback
	        }
	        else if(postman_electron===false) {
	            chrome.runtime.onMessageExternal.addListener(function (request, sender, sendResponse) {
	                pm.mediator.trigger("onMessageExternal", request, sender, sendResponse);
	            });
	        }
	    }

	    function initializeUpdateNotifier() {
	        var updateNotifier = new AppUpdateNotifier();
	        pm.updateNotifier = updateNotifier;
	    }

	    function initializeStorage() {
	        pm.storage = new Storage();
	    }

	    function initializeRequestMethods() {
	        pm.methods = new RequestMethods();
	    }

	    function initializeSidebar() {
	        var sidebarState = new SidebarState({history: pm.history, collections: pm.collections});
	        var sidebar = new Sidebar({ model: sidebarState });
	    }

	    function initializeRightSidebar() {
	        //var rightSidebarState = new RightSidebarState();
	        // var rightSidebar = new RightSidebar({environments: pm.environments, globals: pm.globals, headerPresets: pm.headerPresets});
	    }

	    function initializeDirectory() {
	        var directory = new Directory();
	        var directoryBrowser = new DirectoryBrowser({model: directory});
	    }

	    function initializeTeamDirectory() {
	        var directory = new TeamDirectory();
	        pm.team_directory = directory;
	        var directoryBrowser = new TeamDirectoryBrowser({model: directory});
	    }

	    function initializeTracker() {
	        pm.tracker = new Tracker();
	    }

	    function initializeUser() {
	        var header = new Header();

	        var p3Splash = new Postman3Splash();
	        var user = new User();
	        pm.user = user;
	        var SyncDataDeleteModal = new UserSyncDataDeleteModal({model: user});
	        var UnsyncedDataDeleteModal = new UserUnsyncedDataDeleteModal({model:user});
	        var ReenterPasswordModalToUse2 = new ReenterPasswordModal({model: user});

	        var userStatus = new UserStatus({model: user});
	        var userCollections = new UserCollections({model: user});

	        pm.usm = new UserSigninModal({model: user});
	    }

	    pm.mediator = Mediator;

	    // Local storage or chrome.storage
	    initializeStorage();
	    initializePurchases();

	    // Current app window
	    pm.appWindow = new AppWindow();
	    pm.settings = new Settings();
	    var legal = new Legal();

	    // RequestMethods is not being used right now
		  var oldThis = this;
	    pm.methods = new RequestMethods(function() {
	        console.log("Waiting for settins..");
	        pm.settings.init(function() {
	            console.log("Loaded settings");

	            //set a unique ID for this INSTALLATION of the app
	            if(!pm.settings.getSetting("installation_id")) {
	                pm.settings.setSetting("installation_id", guid());
	            }

	            var settingsModal = new SettingsModal({model: pm.settings});

	            pm.filesystem.init();

	            pm.indexedDB.open(function() {
	                console.log("Loaded Database");
	                // TODO
	                // Initialize theme here
	                pm.themeManager = new ThemeManager();

	                if(postman_electron) {
	                    pm.cookieManager = new CookieManager();
	                    var cookieModal = new CookieModal({model: pm.cookieManager});
	                }

	                pm.browserLogin = new BrowserLogin();

	                initializeSync();
	                initializePostmanAPI();
	                initializeRequester();
	                initializeTabs();
	                initializeInterceptor();
	                initializeHistory();
	                initializeCollections();
	                initializeTester();

	                initializeEnvironments();
	                initializeHeaderPresets();

	                initializeSidebar();
	                //initializeRightSidebar();

	                pm.broadcasts.init();

	                initializeTracker();

	                initializeUser();
	                initializeDirectory();
	                initializeTeamDirectory();

	                initializeTCPReader();
	                pm.onboarding = new Onboarding();
	                pm.crashReporter = new CrashReporter();

	                pm.hasPostmanInitialized = true;

	                pm.mediator.trigger("postmanInitialized");

	                // If the app has been opened by clicking on a URL, this tells background.js that postman is initialized
	                // only for chrome. Electron will have a different URL-handling mechanism
	                pm.appWindow.sendMessageWrapper('postmanInitialized');

	                // This is actually used somewhere
	                try {
	                    pm.gaClientId = window.fu;
	                }
	                catch(e) {
	                    // console.log("Could not find client id for GA");
	                }
	            });
	        });
	    });
	};


	pm.electronVersion = "0.3";
	pm.codebaseVersion = "3.0.6.6";
	pm.getCodebaseVersion = function() {
	    if(postman_electron) {
	        return pm.codebaseVersion;
	    }
	    return chrome.runtime.getManifest()["version"];
	}
	pm.getVersion = function() {
	    if(postman_electron) {
	        return pm.electronVersion;
	    }
	    return chrome.runtime.getManifest()["version"];
	}

	$(document).ready(function () {
	    pm.init();
	});


/***/ },
/* 1 */
/***/ function(module, exports) {

	var FEATURES = {
	  TESTER: "tester",
	  ACTIVITY_FEED: "activity_feed",
	  NOTIFICATIONS: "notifications",
	  ACCESS_CONTROL: "access_control"
	};

	var Features = Backbone.Model.extend({
	  defaults: function() {
	    var obj = {};
	    obj[FEATURES.TESTER] = true;
	    obj[FEATURES.ACTIVITY_FEED] = false;
	    obj[FEATURES.NOTIFICATIONS] = false;
	    obj[FEATURES.ACCESS_CONTROL] = false;

	    return obj;
	  },

	  isEnabled: function(feature) {
	    return this.get(feature);
	  },

	  enable: function(feature) {
	    if(this.get(feature)) {
	      return;
	    }
	    this.set(feature, true);
	    pm.mediator.trigger('feature:enabled:'+feature);
	  },

	  disable: function(feature) {
	    if(!this.get(feature)) {
	      return;
	    }
	    this.set(feature, false);
	    pm.mediator.trigger('feature:disabled:'+feature);
	  }
	})

	module.exports = {
	  Features: Features,
	  FEATURES: FEATURES
	}


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var TestPurchaserWebView = __webpack_require__(3);

	var TestPurchaser = Backbone.View.extend({
		initialize: function() {
			var view = this;

			pm.mediator.on("startPurchaseFlow", this.onStartPurchaseFlow, this);		

			this.purchaserView = new TestPurchaserWebView();
			
			pm.mediator.on("closeTestPurchaser", this.onCloseTestPurchaser, this);
			pm.mediator.on("purchaseComplete", this.onPurchaseComplete, this);		

			$("#modal-test-purchaser").on("shown", function () {		    
			    pm.app.trigger("modalOpen", "#modal-test-purchaser");
			});

			$("#modal-test-purchaser").on("hidden", function () {
			    pm.app.trigger("modalClose");
			});

			pm.mediator.on("onMessageExternal", function(request, sender, sendResponse) {			
				if (request) {
					if (request.postmanMessage) {
						if (request.postmanMessage.type === "purchase") {
							pm.tracker.trackEvent('test_runner', 'collection_runner', 'purchase_complete');
							pm.mediator.trigger("purchaseComplete", request.postmanMessage.purchase);

							sendResponse({"result":"success"});

							$("#modal-jetpacks-about").modal("hide");
							$("#modal-jetpacks-intro").modal("show");
						}
					}
				}
			});
			
			$("body").on("click", ".buy-jetpacks", function() {
				view.purchase();
			});

			$("body").on("click", ".try-jetpacks", function() {
				view.startTrial();
			});
		},

		onCloseTestPurchaser: function() {
			// console.log("Hide modal");
			$("#modal-test-purchaser").modal("hide");
		},

		onPurchaseComplete: function(purchase) {
			if (purchase.id === "collection-runner") {
				// console.log("Time to hide modal");
				// $("#modal-test-purchaser").modal("hide");
			}
		},

		startTrial: function() {
			pm.mediator.trigger("startTrial", "collection-runner");
			$("#modal-jetpacks-about").modal("hide");
		},

		purchase: function() {
			pm.mediator.trigger("onStartPurchase", "collection-runner");

			var url = pm.webUrl + '/buy/jetpacks';
			url += "?key=collection-runner";
			url += "&is_beta=" + pm.arePurchasesInBeta;
			url += "&user_id=" + pm.user.get("id");
	    	url += "&access_token=" + pm.user.get("access_token");
	    	url += "&random=" + Math.random();
	    	url += "&ga_client_id=" + pm.gaClientId;
			if(!postman_webkit && !postman_macgap) {
				url += "&app_name=" + app_name;
				url += "&app_version=" + pm.getVersion();
				url += "&tracker_id=" + tracker_id;
			}
			else {
				url += "&app_name=Postman";
				console.log("Could not get app version for a webkit app");
				url += "&tracker_id=NONE";
			}

			pm.app.openWindow(url);
		},

		onStartPurchaseFlow: function() {
			if (pm.purchases.isTrialCompleted("collection-runner")) {
				$("#modal-jetpacks-about .try-jetpacks").remove();
			}

			$("#modal-jetpacks-about").modal("show");
		}
	});

	module.exports = TestPurchaser;


/***/ },
/* 3 */
/***/ function(module, exports) {

	var TestPurchaserWebView = Backbone.View.extend({
		initialize: function() {
			var model = this.model;
			var view = this;

			this.webview = document.getElementById("test-purchaser-webview");		
			this.webview.addEventListener("loadstart", this.onLoadStart);
			this.webview.addEventListener("loadstop", this.onLoadStop);		

			window.addEventListener("message", function(event) {
				if (event.hasOwnProperty("data")) {
					// console.log(event.data);
					if (event.data.message_type === "purchase") {
						pm.tracker.trackEvent('test_runner', 'collection_runner', 'purchase_complete');
						pm.mediator.trigger("purchaseComplete", event.data.purchase);
					}
					else if (event.data.message_type === "token") {
						pm.tracker.trackEvent('user', 'login', 'purchase');
						pm.mediator.trigger("receiveTokenFromPurchaseFlow", event.data.token);
					}
					else if (event.data.message_type == "finish_purchase") {
						pm.mediator.trigger("closeTestPurchaser");
					}
					
				}			
			});

			this.webview.addEventListener('newwindow', function(e) {
				var targetUrl = e.targetUrl;
				var a = document.createElement('a'); 
			    a.href = targetUrl; 
			    a.target='_blank'; 
			    a.click(); 
			});

			this.webview.addEventListener("contentload", function(event) {
				// console.log("Posting message");
				event.target.contentWindow.postMessage({}, "*");			
			});		
		},

		onContentLoad: function(event) {
			// console.log("Content load called");				
		},

		onLoadStart: function(event) {
			// console.log("onLoadStart");
			$("#modal-test-purchaser .preloader").css("display", "inline-block");
		},

		onLoadStop: function(event) {		
			// console.log("onLoadStop");
			$("#modal-test-purchaser .preloader").css("display", "none");
			event.target.executeScript({ code: "document.innerHTML = 'blah';" });
		},

		loadUrl: function(url) {
			this.webview.src = url;
		}
	});

	module.exports = TestPurchaserWebView;


/***/ },
/* 4 */
/***/ function(module, exports) {

	var Purchase = Backbone.Model.extend({
		defaults: function() {
			return {
				"id": "",
				"license_key": "",
				"timestamp": "",
				"is_beta": false, // is_beta is for non-production versions
				"is_trial": false,
				"trial_completed": false,
				"trial_start_time": 0,
				"trial_elapsed_time": 0,
				"trial_end_time": 0,
				"trial_duration": postman_trial_duration // All times in millisecs
			}
		},

		isPurchased: function() {
			if (this.get("license_key") !== "") {
				return true;
			}
			else {
				return false;
			}
		},

		isTrialCompleted: function() {
			return this.get("trial_completed");
		},

		getDaysLeft: function() {
			var startTime = this.get("trial_start_time");
			var elapsedTime = this.get("trial_elapsed_time");

			var days = Math.round(14 - (elapsedTime - startTime) / (1000 * 60 * 60 * 24));
			return days;
		},

		isTrialValid: function() {
			var startTime = this.get("trial_start_time");
			var elapsedTime = this.get("trial_elapsed_time");
			var duration = this.get("trial_duration");
			var completed = this.get("trial_completed");

			if (startTime === 0 || completed === true) {
				return false;
			}
			else {
				if (elapsedTime - startTime <= duration) {
					return true;
				}
				else {
					return false;
				}
			}
		}
	});
	var Purchases = Backbone.Collection.extend({
		model: Purchase,

		initialize: function() {
			var collection = this;

			this.loadPurchases();

			pm.mediator.on("startTrial", this.onStartTrial, this);

			pm.mediator.on("purchaseComplete", this.onPurchaseComplete, this);
			pm.mediator.on("loadedPurchasesFromServer", this.onLoadedPurchasesFromServer, this);

			pm.mediator.on("postmanInitialized", function() {
				pm.mediator.trigger("loadedPurchases", collection);
			});

			pm.mediator.on("loadedPurchases", function() {
				// Check for trials. Update elapsed trial time
				collection.updateTrialElapsedTimes();
			});
		},

		onStartTrial: function(key) {
			this.startTrial(key);
		},

		isTrialCompleted: function(key) {
			var purchase = this.get(key);

			if (purchase) {
				return purchase.isTrialCompleted();
			}
			else {
				return false;
			}

		},

		isUpgradeAvailable: function(key) {
			return true; //Jetpacks is always enabled

			var purchase = this.get(key);

			if (postman_all_purchases_available) {
				return true;
			}
			else if(key==="collection-runner" && (pm.user && pm.user.get("teamSyncEnabled"))) { //enabled for all team sync members
				return true;
			}
			else if(key==="collection-runner" && !!pm.user.get("organizations").length) { //all team members have jetpacks
				return true;
			}
			else {
				if (!purchase) {
					return false;
				}
				else {
					if (purchase.get("license_key") !== "" || purchase.isTrialValid()) {
						return true;
					}
					else {
						return false;
					}
				}
			}
		},

		onPurchaseComplete: function(newPurchase) {
			var p = new Purchase();
			p.set("id", newPurchase.id);
			p.set("license_key", newPurchase.license_key);
			p.set("timestamp", new Date().getTime());
			p.set("is_beta", newPurchase.is_beta);

			this.add(p, { merge: true });

			this.savePurchases();
		},

		onLoadedPurchasesFromServer: function(data) {
			// Do not override if a trial is already active
			// and the purchases length is 0
			if (data.hasOwnProperty("purchases")) {
				if (data.purchases.length > 0) {
					this.reset([]);
					var purchases = data.purchases;
					for(var i = 0; i < purchases.length; i++) {
						purchases[i].timestamp = new Date(purchases[i].created_at).getTime();
					}

					this.add(data.purchases, { merge: true });

					this.savePurchases();

					pm.mediator.trigger("loadedPurchases", this);
				}
			}
		},

		loadPurchases: function() {
			var collection = this;

			pm.storage.getValue("purchases", function(kvpair) {
				if (kvpair != null) {
					if(kvpair instanceof Array) {
						collection.add(kvpair);
					}
					else {
						collection.add(JSON.parse(kvpair));
					}
				}

				pm.mediator.trigger("loadedPurchases", this);
			});
		},

		savePurchases: function() {
			if(postman_webkit || postman_brackets || postman_electron) {
				var strToSave;
				var tojson = this.toJSON();
				strToSave = JSON.stringify(tojson);
				var purchases = {
					"purchases": strToSave
				};

				pm.storage.setValue(purchases, function() {
					console.log("Purchase saved");
				})
			}
			else {
				var purchases = {
					"purchases": this.toJSON()
				};

				pm.storage.setValue(purchases, function() {
					console.log("Purchase saved");
				})
			}
		},

		// TODO Need to add body
		startTrial: function(key) {
			var p = new Purchase();
			p.set("id", key);
			p.set("license_key", "");
			p.set("timestamp", new Date().getTime());
			p.set("is_beta", false);

			p.set("is_trial", true);
			p.set("trial_completed", false);
			p.set("trial_start_time", new Date().getTime());
			p.set("trial_elapsed_time", new Date().getTime());
			p.set("trial_end_time", 0);
			p.set("trial_duration", postman_trial_duration); // Change this to a configurable setValue

			this.add(p, { merge: true });

			this.savePurchases();

			pm.mediator.trigger("loadedPurchases", this);

			// TODO trackEvent call
			pm.mediator.trigger("onTrialStart", p);
		},

		// key and id are the same
		endTrial: function(key) {
			var p = this.get(key);

			p.set("trial_elapsed_time", new Date().getTime());
			p.set("trial_completed", true);
			p.set("trial_end_time", new Date().getTime());

			this.add(p, { merge: true });

			this.savePurchases();

			// TODO trackEvent call
			pm.mediator.trigger("onTrialEnd", p);
		},

		updateTrialElapsedTimes: function() {
			var i;
			var p;

			for (i = 0; i < this.models.length; i++) {
				p = this.models[i];

				if (!p.isPurchased()) {
					if (!p.isTrialCompleted()) {
						if (!p.isTrialValid()) {
							this.endTrial(p.get("id"));
						}
						else {
							p.set("trial_elapsed_time", new Date().getTime());
							this.add(p, { merge: true });
							this.savePurchases();
						}
					}
				}
			}
		}
	});

	module.exports = Purchases;


/***/ },
/* 5 */
/***/ function(module, exports) {

	var Tester = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "sandbox": null
	        };
	    },

	    runTest: function(request, data, iteration, callback) {
	        $("#test-error").hide();

	        var testCode = request.get("tests");

	        // Wrapper function
	        var baseCode = "(function(){var tests={};";
	        baseCode += testCode;
	        baseCode += "\nreturn tests;})()";

	        var response = request.get("response");

	        var selectedEnv = pm.envManager.get("selectedEnv");
	        var selectedEnvJson = {};
	        var globals = getKeyValPairsAsAssociativeArray(pm.envManager.get("globals").get("globals"));

	        if (selectedEnv) {
	            selectedEnvJson = getKeyValPairsAsAssociativeArray(selectedEnv.toJSON().values);
	        }

	        var environment = {
	            "request": request.getForTester(), // Get separately
	            "responseBody": response.get("text"),
	            "responseHeaders": response.getHeadersAsKvPairs(), // TODO Get key value pairs
	            "responseTime": response.get("time"),
	            "responseCookies": response.get("cookies"),
	            "responseCode": response.get("responseCode"),
	            "environment": selectedEnvJson,
	            "globals": globals,
	            "data": data,
	            "iteration": iteration
	        };

	        var fileList = request.get("sandboxFiles");
	        if(!postman_webkit && !postman_electron) {
	            fileList = null;
	        }

	        this.postCode(baseCode, environment, fileList);

	        this.listenToOnce(pm.mediator, "resultReceived", function(data) {
	            if (callback) {
	                callback(data, "result");
	            }
	        });

	        this.listenToOnce(pm.mediator, "resultError", function(data) {
	            if (callback) {
	                callback(data, "error");
	            }
	        });
	    },

	    postCode: function(code, environment, fileList) {
	        var sandbox = this.get("sandbox");
	        var message = {
	            command: "runtest",
	            code: code,
	            environment: environment,
	            fileList: fileList,
	            scriptType: "test"
	        };

	        sandbox.contentWindow.postMessage(message, '*');
	    },

	    initialize: function() {
	        var model = this;

	        var sandbox = document.getElementById("tester_sandbox");
	        this.set("sandbox", sandbox);

	        window.addEventListener('message', function(event) {
	            var type = event.data.type;

	            if (event.data.type === "test_result") {
	                pm.mediator.trigger("resultReceived", event.data.result);
	                var numTests = _.size(event.data.result);
	                pm.tracker.trackEvent("request","test","execute",numTests);
	            }
	            if (event.data.type === "test_error" && event.data.scriptType=="test") {
	                pm.mediator.trigger("resultError", event.data.errorMessage);
	            }
	            else if (type === "set_environment_variable") {
	                pm.mediator.trigger("setEnvironmentVariable", event.data.variable);
	            }
	            else if (type === "set_global_variable") {
	                pm.mediator.trigger("setGlobalVariable", event.data.variable);
	            }
	            else if (type === "clear_environment_variables") {
	                pm.mediator.trigger("clearEnvironmentVariables");
	            }
	            else if (type === "clear_global_variables") {
	                pm.mediator.trigger("clearGlobalVariables");
	            }
	            else if (type === "clear_environment_variable") {
	                pm.mediator.trigger("clearEnvironmentVariable", event.data.variable);
	            }
	            else if (type === "clear_global_variable") {
	                pm.mediator.trigger("clearGlobalVariable", event.data.variable);
	            }
	        });

	        pm.mediator.on("resultError", this.showTestScriptError, this);
	        pm.mediator.on("runRequestTest", this.runTest, this);
	    },

	    showTestScriptError: function(msg) {
	        $("#test-error").show().text("There was an error evaluating the test script. " + msg).css('display','inline-block');
	    }
	});

	module.exports = Tester;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var Request = __webpack_require__(7).Request;
	var PmCollection = __webpack_require__(10);
	var Environment = __webpack_require__(11);

	var TestRun = Backbone.Model.extend({
		defaults: function() {
			return {
				"id": "",
				"name": "Default",
				"timestamp": 0,
				"collection_id": "",
				"folder_id": "",
				"target_type": "",
				"environment_id": "",
				"delay": 0,
				"count": 0,
				"collection": null,
				"folder": null,
				"environment": null,
				"globals": null,
				"results": null
			}
		},

		initialize: function() {
	        pm.appWindow.trigger("registerInternalEvent", "allRunsDeleted", this.onAllRunsDeleted, this);
	    },

	    onAllRunsDeleted: function() {
	        this.deleteAllTestRuns();
	    },


	    getAsJSON: function() {
			var collection;

			var obj = {
				"id": this.get("id"),
				"name": this.get("name"),
				"timestamp": this.get("timestamp"),
				"collection_id": this.get("collection_id"),
				"folder_id": this.get("folder_id"),
				"target_type": this.get("target_type"),
				"environment_id": this.get("environment_id"),
				"count": this.get("count"),
				"collection": null,
				"folder": this.get("folder"),
				"globals": this.get("globals"),
				"results": this.get("results"),
				"environment": null
			};

			if (this.get("collection")) {
				obj["collection"] = this.get("collection").getAsJSON();
			}

			if (this.get("environment")) {
				obj["environment"] = this.get("environment").toJSON();
			}

			return obj;
		},

		getTestsAsArray: function(tests, counts) {
			var d = "";
			var success = 0;
			var failure = 0;
			var total = 0;

			var testsArray = [];
			var r;
			var obj;

			for (var key in tests) {
				if (tests.hasOwnProperty(key)) {

					if (tests[key] && counts[key]["fail"] == 0) {
						r = "pass";
					}
					else {
						r = "fail";
					}

					obj = {
						key: key,
						value: r
					}

					if (counts) {
						obj["passCount"] = counts[key]["pass"];
						obj["failCount"] = counts[key]["fail"];
					}

					testsArray.push(obj);
				}
			}

			return testsArray;
		},

		getTestKeysAsArray: function(tests) {
			var keys = [];
			for (var key in tests) {
				if (tests.hasOwnProperty(key)) {
					keys.push(key);
				}
			}

			return keys;
		},

		// Do not store external data
		start: function(data) {
			var collection = this.get("collection");
			var folder = this.get("folder");
			var target_type = this.get("target_type");
			var environment = this.get("environment");
			var globals = this.get("globals");

			if(!collection) {
				pm.alerts.error("Please select a collection or folder to run");
				return;
			}

			// Set up environment and globals
			if (environment) {
				// console.log("TESTRUNNER: Setting environment", environment);
				pm.envManager.setEnvironment(environment);
			}
			else {
				pm.envManager.disableEnvironment();
			}

			pm.envManager.setGlobals(globals);

			// Filter executable requests
			var allRequests;

			if (target_type === "folder") {
				allRequests = collection.getRequestsInFolder(folder);
			}
			else {
				allRequests = collection.getRequestsInCollection();
			}

			this.addToDataStore(this.getAsJSON());
			this.runRequests(allRequests, this.get("count"), data, this.get("delay"));
		},

		addToDataStore: function(testRun) {
			pm.indexedDB.testRuns.addTestRun(testRun, function(data) {
			});
		},

		updateInDataStore: function(testRun) {
			pm.indexedDB.testRuns.updateTestRun(testRun, function(data) {
			});
		},

		deleteFromDataStore: function(id) {
			pm.indexedDB.testRuns.deleteTestRun(id, function() {
			});
		},

		runRequests: function(requests, runCount, data, delay) {
			var externalData = data;

			var model = this;

			var currentRunCount = 0;
			pm.runCount = runCount;

			this.set("requests", requests);
			var requestCount = requests.length;
			var currentRequestIndex = 0;
			var testRequest;
			//var request;
			var response;

			var result;

			//var results = [];
			pm.results = [];


			//pm.results = [];
			this.set("results", pm.results);

			function setPassFailTestCounts(result, newResult) {
				for(key in newResult.tests) {
					if (newResult.tests.hasOwnProperty(key)) {
						if (result["testPassFailCounts"].hasOwnProperty(key)) {
							if (!!newResult.tests[key]) {
								passedCount = result["testPassFailCounts"][key]["pass"] + 1;
								failedCount = result["testPassFailCounts"][key]["fail"];
							}
							else {
								passedCount = result["testPassFailCounts"][key]["pass"];
								failedCount = result["testPassFailCounts"][key]["fail"] + 1;
							}

							result["testPassFailCounts"][key] = {
								"pass": passedCount,
								"fail": failedCount
							};
						}
						else {
							if (!!newResult.tests[key]) {
								passedCount = 1;
								failedCount = 0;
							}
							else {
								passedCount = 0;
								failedCount = 1;
							}

							result["testPassFailCounts"][key] = {
								"pass": passedCount,
								"fail": failedCount
							};
						}
					}
				}
			}

			function addResult(newResult, forcePurge) {
				var index = arrayObjectIndexOf(pm.results, newResult.id, "id");
				var r;
				var passedCount = 0;
				var failedCount = 0;

				if (index >= 0) {
					r = pm.results[index];
					r["responseCode"] = newResult.responseCode;
					r["totalTime"] += newResult.time;
					r["tests"] = newResult.tests;

					setPassFailTestCounts(r, newResult);

					result["showCount"] = true;

					r["times"].push(newResult.responseTime);
					r["allTests"].push(newResult.tests);

					// TODO through the tests array, calculate which counts of failures and successes of tests
					pm.mediator.trigger("updateResult", r, model);
				}
				else {
					result["times"] = [newResult.responseTime];

					if ("tests" in newResult) {
						result["allTests"] = [newResult.tests];
						setPassFailTestCounts(result, newResult);
					}
					else {
						// result["testPassFailCounts"] = [];
						result["allTests"] = [];
					}

					pm.results.push(result);
					pm.mediator.trigger("addResult", result, model);
				}
			}

			function onSentRequest(request) {
				result = {
					"id": request.get("id"),
					"name": request.get("name"),
					"url": request.get("url"),
					"totalTime": 0,
					"responseCode": {
						"code": 0,
						"name": "",
						"detail": ""
					},
					"tests": {},
					"testPassFailCounts": {},
					"times": [],
					"allTests": []
				}
				pm.lastResult = _.cloneDeep(result);
			}

			function onLoadResponse(response) {
				testRequest = pm.lastTestRequest;
				result["responseCode"] = response.get("responseCode");
				result["time"] = response.get("time");

				var tests = testRequest.get("tests");

				var externalDataVariables = {};
				if (externalData) {
					if (externalData.length > 0) {
						if (currentRunCount < externalData.length) {
							externalDataVariables = externalData[currentRunCount];
						}
					}
				}

				if (tests) {
					testRequest.set("response", response);
					pm.mediator.trigger("runRequestTest", testRequest, externalDataVariables, currentRunCount, onFinishTests);
				}
				else {
					finishRequestRun();
				}

			}


			function onFinishTests(data, testResultType) {
				if (testResultType === "result") {
					result["tests"] = data;
					finishRequestRun();
				}
				else if (testResultType === "error") {
					result["tests"] = {"Error": false};
					pm.alerts.error("Something is wrong with your test scripts. Please fix them in the editor first. Message: " + data, {
	          dedupeId: 'test-error'
	        });
					model.updateInDataStore(model.getAsJSON());
					pm.mediator.trigger("finishedTestRun", model);
				}
			}

			function finishRequestRun() {
				result.id = testRequest.get("id");
				result.url = testRequest.get("url");
				result.name = testRequest.get("name");
				addResult(result);


				if (currentRequestIndex < requestCount - 1) {
					// console.log("TESTRUNS:finishRequestRun, Send another request");
					currentRequestIndex += 1;
					sendRequest(currentRequestIndex, currentRunCount);
				}
				else {
					currentRunCount += 1;

					// console.log("TESTRUNS:finishRequestRun", currentRunCount, runCount);

					if (currentRunCount >= pm.runCount) {
						// console.log("TESTRUNS:finishRequestRun, Finish run");
						model.updateInDataStore(model.getAsJSON());
						pm.mediator.trigger("finishedTestRun", model);
						currentRunCount = 0;
						currentRequestIndex = 0;
					}
					else {
						// console.log("TESTRUNS:finishRequestRun, Create another run");
						// Re-initiate run
						currentRequestIndex = 0;
						sendRequest(0, currentRunCount);
					}
				}
			}
			function sendRequest(index, thisCount) {
				setTimeout(function() {
					// Set variables in envManager here
					var externalDataVariables = {};
					if (externalData) {
						if (externalData.length > 0) {
							if (currentRunCount < externalData.length) {
								externalDataVariables = externalData[currentRunCount];
								pm.envManager.setExternalDataVariables(externalData[currentRunCount]);
							}
						}
					}

					testRequest = new Request();
					testRequest.loadRequest(requests[index], true, false, true);
					if(testRequest.get("url") == "") {
						//NO URL for request
						pm.alerts.error("The URL for request " + testRequest.get("name") + " is blank.");
						$("a#new-test-run").click();
						return;
					}
					//request.disableHelpers(); // TODO Should get rid of this call later

					//add helper data
					var currentHelper = testRequest.get("currentHelper") || "normal";
					var helperAttributes = testRequest.get("helperAttributes");

					if(currentHelper!=="normal") {
						var helperModel = pm.helperModel.get(currentHelper);
						if(helperModel) {
							for (var property in helperAttributes) {
								if (helperAttributes.hasOwnProperty(property)) {
									helperModel.set(property,helperAttributes[property]);
								}
							}

							if(currentHelper === "oAuth1") {
								helperModel.generateHelper();
							}

							try {
								helperModel.processCustomRequest(testRequest);
							}
							catch(e) {
								console.error("Could not process helper for currentHelper: " , currentHelper);
							}
						}
					}

					// Attach listeners for request and response
					testRequest.on("sentRequest", onSentRequest);
					response = testRequest.get("response");

					response.on("loadResponse", onLoadResponse);
					pm.lastTestRequest = testRequest;

					//have a separate listener for test runner requests
					if(pm.settings.getSetting("useInterceptor")) {
						pm.mediator.once("onMessageExternal", function(request, sender, sendResponse) {
					        if(request.postmanMessage) {
					            if (request.postmanMessage.type === "xhrResponse") {
					                var xhrResponse = request.postmanMessage.response;
					                var xhrCookies = request.postmanMessage.cookies;
					                var messageGuid = request.postmanMessage.guid;
				                    response.set("cookies", xhrCookies);

				                    xhrResponse.getResponseHeader = function(header) {
				                        return xhrResponse.headers[header];
				                    }

				                    xhrResponse.getAllResponseHeaders = function() {
				                        return xhrResponse.rawHeaders;
				                    }

				                    xhrResponse.fromInterceptor = true;
				                    _.bind(response.load, testRequest)(xhrResponse, null);
					            }
					            else if (request.postmanMessage.type === "xhrError") {
					                var messageGuid = request.postmanMessage.guid;

					                if (messageGuid === testRequest.get("messageGuid")) {
					                    var xhrError = request.postmanMessage.error;
					                    var errorUrl = pm.envManager.getCurrentValue(testRequest.get("url"));
					                    response.trigger("failedRequest", errorUrl, null);
					                }
					            }
					        }
					    });
					}
					
	                var thisRequest = testRequest;
	                //add a callback to restore env vars
	                testRequest.get("prScripter").runPreRequestScript(testRequest, externalDataVariables, thisCount, function(data, result) {
		                thisRequest.get("body").setDataForXHR();
	                    thisRequest.send("text", "display", true);
	                });
				}, delay);
			}

			// Initiate request
			if (requestCount > 0) {
				sendRequest(0, 0);
			}
			else {
				model.updateInDataStore(model.getAsJSON());
				pm.mediator.trigger("finishedTestRun", model);
			}
		},

		getPassCount: function() {
			// Results for all requests
			var results = this.get("results");

			if (!results) {
				return {
					"passed": 0,
					"total": 0,
					"percentage": 0
				};
			}

			var count = results.length;

			var r;
			var allTests;
			var allTestCount;
			var tests;

			var passedTestCount = 0;
			var totalTestCount = 0;

			for(var i = 0; i < count; i++) {
				r = results[i];
				//because of my sync madness
				if(typeof r === "string") {
					try {
						r = JSON.parse(r);
					}
					catch(e) {
						throw e;
					}
				}
				allTests = r["allTests"];
				allTestCount = allTests.length;

				if (allTestCount > 0) {
					for(var k = 0; k < allTestCount; k++) {
						tests = allTests[k];

						for(var key in tests) {
							if (tests.hasOwnProperty(key)) {
								val = tests[key];
								totalTestCount++;

								if (!!val) {
									passedTestCount++;
								}
							}
						}
					}
				}
			}

			var percentage = Math.round(passedTestCount/totalTestCount * 100);

			return {
				"passed": passedTestCount,
				"failed": totalTestCount - passedTestCount,
				"total": totalTestCount,
				"percentage": percentage
			};
		},

		getAverageResponseTime: function() {
			var results = this.get("results");

			if (!results) {
				return 0;
			}

			var count = results.length;

			var r;
			var totalTime = 0;

			for(var i = 0; i < count; i++) {
				r = results[i];
				totalTime += r["time"];
			}

			var average = Math.round(totalTime/count, 2);

			return average;
		}
	});

	// TODO Reload collection data when something is updated in the requester window
	var TestRuns = Backbone.Collection.extend({
		model: TestRun,

		comparator: function(a, b) {
		    var counter;

		    var aTimestamp = a.get("timestamp");
		    var bTimestamp = b.get("timestamp");

		    return aTimestamp < bTimestamp;
		},

		initialize: function() {
			var model = this;

			var areEnvironmentsLoaded = false;
			var areCollectionsLoaded = false;

			pm.mediator.on("loadedEnvironments", function() {
				areEnvironmentsLoaded = true;

				if (areEnvironmentsLoaded === true && areCollectionsLoaded === true) {
					model.loadAllTestRuns();
				}
			});
			pm.mediator.on("loadedCollections", function() {
				areCollectionsLoaded = true;

				if (areEnvironmentsLoaded === true && areCollectionsLoaded === true) {
					model.loadAllTestRuns();
				}
			});

			pm.mediator.on("loadTestRunFromId", this.loadTestRunStats, this);
			pm.mediator.on("loadTestRunFromIdWithoutShowing", this.loadTestRunStatsWithoutShowing, this);
			pm.mediator.on("startTestRun", this.onStartTestRun, this);
			pm.mediator.on("showTestRun", this.onShowTestRun, this);
			pm.mediator.on("showTestRunWithoutShowing", this.onShowTestRunWithoutShowing, this);

	        pm.mediator.on("finishedTestRun", this.sendTestRunForSync, this);
	        pm.mediator.on("deleteTestRun", this.deleteTestRunForSync, this);
	        pm.appWindow.trigger("registerInternalEvent", "testRunAddedRemotely", this.onTestRunAddedRemotely, this);
	        pm.appWindow.trigger("registerInternalEvent", "testRunDeletedRemotely", this.onTestRunDeletedRemotely, this);
		},

	  sendTestRunForSync: function(model) {
	    	//also show the newman link
	    	$("#small-newman-message").show();

	        if(!model) {
	            return;
	        }
	        var testRun = model.toJSON();
	        var testRunToSend = {};
	        if(testRun.collection && testRun.folder) {
	            testRunToSend["name"] = testRun.collection.get("name")+"/"+testRun.folder.name;
	            testRunToSend["target_type"] = "folder";
	            testRunToSend["collection"] = testRun.collection_id;
	            testRunToSend["folder"] = testRun.folder_id;
	        }
	        else if(testRun.collection) {
	            testRunToSend["name"] = testRun.collection.get("name");
	            testRunToSend["target_type"] = "collection";
	            testRunToSend["collection"] = testRun.collection_id;
	        }
	        else {
	            testRunToSend["name"] = "Test run for collection " + testRun.collection_id;
	            testRunToSend["target_type"] = "collection";
	            testRunToSend["collection"] = testRun.collection_id;
	        }

	        testRunToSend["environment"] = testRun.environment_id;
	        if(testRunToSend.environment === "0") {
	            delete testRunToSend.environment;
	        }

	        testRunToSend.count = testRun.count;
	        testRunToSend.delay = testRun.delay;
	        testRunToSend.results = JSON.stringify(testRun.results);
	        testRunToSend.id = testRun.id;
	        testRunToSend.owner = pm.user.id;

	        var message = {
	            "id": "test_runner",
	            "event": "testRunAdded",
	            "object": testRunToSend
	        };

	        if(postman_electron) {
	        	return;
	        }
	        pm.appWindow.sendMessageWrapper(message);
	    },

	    deleteTestRunForSync: function(id) {
	        var message = {
	            "id": "test_runner",
	            "event": "testRunDeleted",
	            "object": {id: id}
	        };
	        if(postman_electron) {
	        	return;
	        }

	        pm.appWindow.sendMessageWrapper(message);
	    },

	    onTestRunAddedRemotely: function(runJson) {
	        this.importTestRunData(runJson);
	        //console.log("Run added remotely");
	    },

	    onTestRunDeletedRemotely: function(msg) {
	        this.deleteTestRun(msg.id);
	        //console.log("Run removed remotely")
	    },

		onShowTestRun: function(testRun) {
			pm.mediator.trigger("loadTestRun", testRun, this);
		},

		onShowTestRunWithoutShowing: function(testRun) {
			//pm.mediator.trigger("loadTestRunWithoutShowing", testRun, this);
		},

		getAsJSON: function() {
			var runs = [];

			for(var i = 0; i < this.models.length; i++) {
				runs.push(this.models[i].getAsJSON());
			}

			return runs;
		},

		loadTestRunStats: function(id) {
			var testRun = this.get(id);
			pm.mediator.trigger("showTestRun", testRun);
		},

		loadTestRunStatsWithoutShowing: function(id) {
			var testRun = this.get(id);
			//pm.mediator.trigger("showTestRunWithoutShowing", testRun);
		},

	    deleteAllTestRuns: function() {
	        this.reset();
	    },

	    deleteTestRun: function(id) {
	        var collection = this;

	        pm.indexedDB.testRuns.deleteTestRun(id, function() {
	            collection.remove(id);
	            pm.mediator.trigger("deleteTestRun", id);
	        });
	    },

	    deleteTestRunFromSync: function(id) {
	        var collection = this;
	        collection.remove(id);
	        pm.mediator.trigger("deleteTestRun", id);
	    },


	    importTestRunData: function(testRunParams) {
	        var existingRun = this.get(testRunParams.id);

	        if (!existingRun) {
	            var testRun = new TestRun(testRunParams);

	            this.add(testRun);

	            testRun.set("collection", new PmCollection(testRunParams.collection));
	            testRun.set("environment", new Environment(testRunParams.environment));

	            testRun.addToDataStore(testRunParams);

	            pm.mediator.trigger("importedTestRun", testRun);
	        }
	    },

	    importTestRunDataFromSync: function(testRunParams) {
	        var existingRun = this.get(testRunParams.id);

	        if (!existingRun) {
	            var testRun = new TestRun(testRunParams);

	            this.add(testRun);

	            testRun.set("collection", new PmCollection(testRunParams.collection));
	            testRun.set("environment", new Environment(testRunParams.environment));

	            pm.mediator.trigger("importedTestRun", testRun);
	        }
	    },

		importTestRuns: function(files) {
			console.log(files);

			var collection = this;

	        // Loop through the FileList
	        for (var i = 0, f; f = files[i]; i++) {
	            var reader = new FileReader();

	            // Closure to capture the file information.
	            reader.onload = (function (theFile) {
	                return function (e) {
	                    // Render thumbnail.
	                    var data = e.currentTarget.result;
	                    try {
	                        var testRun = JSON.parse(data);
	                        collection.importTestRunData(testRun);
	                    }
	                    catch(e) {
	                        pm.mediator.trigger("failedTestRunImport");
	                    }
	                };
	            })(f);

	            // Read in the image file as a data URL.
	            reader.readAsText(f);
	        }

			pm.tracker.trackEvent("collection_runner", "import", "files", files.length);
		},

		downloadTestRun:function (id) {
		    var testRun = this.get(id);

		    testRun.set("synced", false);

		    var collectionName = testRun.get("collection").get("name");
		    var name = collectionName + ".postman_test_run";
		    var type = "application/json";
		    var filedata = JSON.stringify(testRun.toJSON(), null, '\t');
		    pm.filesystem.saveAndOpenFile(name, filedata, type, function () {
	        pm.alerts.success('Saved test run to disk');
		    });

			pm.tracker.trackEvent("collection_runner", "export");
		},

		loadAllTestRuns: function() {

			var collection = this;
			var testRun;
			var environment_id;

			pm.indexedDB.testRuns.getAllTestRuns(function(testRuns) {
				var filteredRuns = [];

				for (var i = 0; i < testRuns.length; i++) {
					testRun = testRuns[i];
					environment_id = testRun.environment_id;

					testRun.collection = pm.collections.get(testRun.collection_id);
					testRun.environment = pm.envManager.get("environments").get(environment_id);

					if(testRun.results instanceof Array) {
						if(testRun.results.length>0) {
							if(typeof testRun.results[0] === "string") {
								testRun.results = JSON.parse(testRun.results[0]);
							}
						}
					}

					if (testRun.collection) {
						filteredRuns.push(testRun);
					}
				}

				collection.add(filteredRuns, { merge: true });
				pm.mediator.trigger("loadedAllTestRuns");
			});
		},

		onStartTestRun: function(params) {
			var files = params.files;
			var model = this;

			if(pm.isTesting) {
				if(params.customFileData) {
					params.data = this.getDataObjectFromStringAndType(params.customFileData, params.customFileFormat);
				}
				else {
					params.data = [];
				}
				this.startTestRun(params);
				return;
			}
			if (files.length > 0) {
				// TODO Only one file
				this.importDataFile(files[0], params.fileDataType, function(data) {
					params.data = data;

					console.log("Data loaded from file", params.data);

					pm.mediator.trigger("loadedDataFile");
					model.startTestRun(params);
				});
			}
			else {
				params.data = [];
				this.startTestRun(params);
			}
		},

		startTestRun: function(params) {
			console.log(params);
			console.log(params.data);

			var data = [];
			if (params.hasOwnProperty("data")) {
				data = params.data;
			}

			var collection_id = params["collection_id"];
			var folder_id = params["folder_id"];
			var target_type = params["target_type"];
			var environment_id = params["environment_id"];
			var count = params["count"];
			var delay = params["delay"];

			var collection = pm.collections.get(collection_id);
			var folder;

			if (folder_id !== "0" && folder_id !== 0) {
				folder = collection.getFolderById(folder_id);
			}

			var environment;

			if (environment_id !== "0") {
				environment = pm.envManager.get("environments").get(environment_id);
			}

			var globals = pm.envManager.get("globals").get("globals");

			var testRunParams = {
				"id": guid(),
				"name": "Default",
				"timestamp": new Date().getTime(),
				"collection_id": collection_id,
				"folder_id": folder_id,
				"target_type": target_type,
				"environment_id": environment_id,
				"count": count,
				"delay": delay,
				"collection": collection,
				"folder": folder,
				"environment": environment,
				"globals": globals
			};

			var testRun = new TestRun(testRunParams);
			pm.mediator.trigger("startedTestRun", testRun);
			testRun.start(data);
			this.add(testRun);
		},

		getPreviousRuns: function(testRun) {
			var count = this.length;
			var run;

			var targetCollectionId = testRun.get("collection_id");
			var targetFolderId = testRun.get("folder_id");
			var targetEnvironmentId = testRun.get("environment_id");
			var targetId = testRun.get("id");

			var itemCollectionId;
			var itemFolderId;
			var itemEnvironmentId;

			var matchedRuns = [];

			for(var i = 0; i < count; i++) {
				run = this.models[i];

				itemEnvironmentId = run.get("environment_id");
				itemFolderId = run.get("folder_id");
				itemCollectionId = run.get("collection_id");
				itemId = run.get("id");

				if (itemCollectionId === targetCollectionId
					&& itemEnvironmentId === targetEnvironmentId
					&& itemFolderId == targetFolderId
					&& itemId !== targetId) {
					matchedRuns.push(run);
				}
			}

			return matchedRuns;
		},

		getDataObjectFromStringAndType: function(data, fileDataType) {
			if (fileDataType === "json") {
				var object = JSON.parse(data);
				if(!(object instanceof Array)) {
					throw "The JSON must be an array";
				}
				return object;
			}
			else if (fileDataType === "csv") {
				var object = [];
				var csvArray = CSV.csvToArray(data);

				console.log("DEBUG: Loaded CSV data", csvArray);

				if (csvArray.length > 0) {
					var keys = csvArray[0];
					var numKeys = keys.length;
					var count = csvArray.length;

					for (j = 0; j < numKeys; j++) {
						keys[j] = keys[j].trim();
					}

					for(i = 1; i < count; i++) {
						kvpair = {};
						if(csvArray[i].length!==numKeys) {
							throw "Each row must have an equal number of columns"
						}
						for (j = 0; j < numKeys; j++) {
							kvpair[keys[j]] = csvArray[i][j];
						}

						object.push(kvpair);
					}
				}

				return object;
			}
			else {
				throw "Invalid format"
			}
		},

		loadDataFromFile: function(data, fileDataType, callback, errorCallback) {
			if (callback) {
				var object;
				var kvpair;
				var i, j;

				try {

					if (fileDataType === "json" || fileDataType === "csv") {
						object = this.getDataObjectFromStringAndType(data, fileDataType);
						callback(object);
					}
					else {
						//Wrong format - not JSON or CSV
						pm.alerts.error("Unable to determine file format. Please select JSON or CSV");
						errorCallback();
					}
				}
				catch (e) {
					pm.alerts.error("Data file format is not right: " + e);
					errorCallback();
				}

			}
		},

		importDataFile: function(file, fileDataType, callback) {
			var model = this;

		    var reader = new FileReader();

		    // Closure to capture the file information.
		    reader.onload = (function (theFile) {
		        return function (e) {
		            model.loadDataFromFile(e.currentTarget.result, fileDataType, callback, function(){
						$("#test-data-file-remove-container").css("display", "block");
		            });
		        };
		    })(file);

		    // Read in the image file as a data URL.
		    reader.readAsText(file);
		}
	});

	module.exports = TestRuns;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var RequestBody = __webpack_require__(8);
	var PreRequestScripter = __webpack_require__(9);

	var Request = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            id:"",
	            url:"",
				folderId: null,
	            pathVariables:{},
	            urlParams:{},
	            name:"",
	            description:"",
	            descriptionFormat:"markdown",
	            bodyParams:{},
	            headers:[],
	            method:"GET",
	            dataMode:"params",

	            transformedUrl:"",

	            isFromCollection:false,
	            collectionRequestId:"",
	            methodsWithBody:["POST", "PUT", "PATCH", "DELETE", "LINK", "UNLINK", "LOCK", "PROPFIND", "VIEW"],
	            areListenersAdded:false,
	            startTime:0,
	            endTime:0,
	            xhr:null,
	            editorMode:0,
	            responses:[],
	            body:null,
	            data:null,
	            previewHtml:"",
	            curlHtml:"",
	            preRequestScript:null,
	            tests:null,
	            sandboxFiles: "",
	            testResults:null,
	            testErrors:null,
	            areHelpersEnabled:true,
	            selectedHelper:null,
	            sendMethod: "xhr",

	            //FOR TABS:
	            uiState: {},

	            jsonIsCurrent: false,
	            xmlIsCurrent: false,
	            htmlIsCurrent: false,
	            jsonPreParse: "",
	            xmlPreParse: "",
	            htmlPreParse: "",
	            jsonSearchString: "",
	            xmlSearchString: "",
	            htmlSearchString: "",
	            inHtmlMode: false,
	            write: true,


	        };
	    },

	    // Fixed
	    initialize: function(firstRequest) {
	        if(typeof firstRequest === "undefined") {
	            firstRequest = false;
	        }

	        var requestBody = new RequestBody();
	        var preRequestScripter = new PreRequestScripter();
	        var response = new Response();

	        this.set("body", requestBody);
	        this.set("prScripter", preRequestScripter);
	        this.set("response", response);

	        this.set("uiState", {
	            areHeadersOpen: false,
	            areUrlParamsOpen: false,
	            areRequestMetaOpen: true,
	            activeRequestTab: "auth",
	            waitingForInterceptorResponse: false,
	            waitingForResponse: false
	        });

	        //map from interceptor messageId to tabId
	        this.set("interceptorTabMap", {});

	        this.on("cancelRequest", this.onCancelRequest, this);
	        this.on("startNew", this.onStartNew, this);
	        this.on("send", this.onSend, this);

	        response.on("finishedLoadResponse", this.onFinishedResponseLoaded, this);

	        pm.mediator.on("updateCollectionRequest", this.checkIfCurrentRequestIsUpdated, this);

	        if(!pm.hasRequestInitializedOnce) {
	            pm.mediator.on("addRequestURLParam", this.onAddRequestURLParam, this);
	            pm.mediator.on("addRequestHeader", this.onAddRequestHeader, this);
	            //add urlparams / header to the current request
	            pm.mediator.on("loadRequest", this.loadRequest, this);
	            if(!pm.testRunner) {
	                pm.mediator.on("onMessageExternal", this.onExternalExtensionMessage, this);
	            }

	            pm.hasRequestInitializedOnce = true;
	        }
	    },

	    trimUrl: function() {
	        var url = this.get("url");
	        if(url) {
	            var newUrl = url.trim();
	            if(newUrl != url) {
	                this.set("url", newUrl);
	            }
	        }
	    },

	    setBlankValues: function() {
	    },

	    setResponse: function(responseJSON) {
	        var response = new Response(responseJSON);
	        response.on("finishedLoadResponse", this.onFinishedResponseLoaded, this);
	        this.set("response", response);
	    },

	    destroy: function() {
	    },

	    // Used to communicate with the Postman Interceptor
	    onExternalExtensionMessage: function(request, sender, sendResponse) {
	        // console.log("onExternalExtensionMessage called", request);
	        //if(this.get("waitingForInterceptorResponse")!==true) {
	            //console.log("Not expecting interceptor response. Ignoring. Cancel request may have been hit.");
	          //  return;
	        //}
	        //this.set("waitingForInterceptorResponse", false);
	        if(request.postmanMessage) {
	            if (request.postmanMessage.type === "xhrResponse") {
	                var xhrResponse = request.postmanMessage.response;
	                var xhrCookies = request.postmanMessage.cookies;
	                var messageGuid = request.postmanMessage.guid;
	                //console.log("Received interceptor response for msgId: " + messageGuid);

	                //if (messageGuid === this.get("messageGuid")) {
	                    this.get("response").set("cookies", xhrCookies);

	                    xhrResponse.getResponseHeader = function(header) {
	                        return xhrResponse.headers[header];
	                    }

	                    xhrResponse.getAllResponseHeaders = function() {
	                        return xhrResponse.rawHeaders;
	                    }

	                    var oldITMap = this.get("interceptorTabMap");
	                    var tabId = oldITMap[messageGuid];
	                    delete oldITMap[messageGuid];
	                    this.set("interceptorTabMap", oldITMap);
	                    xhrResponse.fromInterceptor = true;
	                    _.bind(this.get("response").load, this)(xhrResponse, tabId);
	                /*}
	                else {

	                }*/
	            }
	            else if (request.postmanMessage.type === "xhrError") {
	                var messageGuid = request.postmanMessage.guid;

	                if (messageGuid === this.get("messageGuid")) {
	                    var xhrError = request.postmanMessage.error;
	                    var errorUrl = pm.envManager.getCurrentValue(this.get("url"));
	                    this.get("response").trigger("failedRequest", errorUrl, tabId);
	                }
	            }
	        }
	    },

	    onAddRequestURLParam: function(param) {
	        var urlParams = this.getUrlParams();
	        var index = arrayObjectIndexOf(urlParams, "access_token", "key");

	        if (index >= 0) {
	            urlParams.splice(index, 1);
	        }

	        urlParams.push(param);
	        this.setUrlParamString(urlParams);
	        this.trigger("customURLParamUpdate");
	    },

	    onAddRequestHeader: function(param) {
	        this.setHeader(param.key, param.value);
	        this.trigger("customHeaderUpdate");
	    },

	    onGetRequest: function(callback) {
	        callback(this);
	    },

	    onCancelRequest: function() {
	        this.cancel();
	    },

	    onStartNew: function() {
	        this.startNew();
	    },

	    onSend: function(type, action) {
	        var thisRequest = this;
	        //add a callback to restore env vars
	        thisRequest.send(type, action);
	    },

	    onFinishedResponseLoaded: function(runTests) {
	        if(typeof runTests === "undefined") {
	            runTests = true;
	        }
	        if(!runTests) {
	            return;
	        }

	        var request = this;
	        var tests = this.get("tests");

	        //only execute the tests here for the testRunner
	        if (tests !== null && pm.testRunner) {
	            pm.mediator.trigger("runRequestTest", this, {}, 1, function(data, result) {
	                if (result === "result") {
	                    request.set("testResults", data);
	                    request.set("testErrors", null);
	                }
	                else if (result === "error") {
	                    //console.log("Error message", data);
	                    request.set("testResults", null);
	                    request.set("testErrors", data);
	                }

	                //Hack for github https://github.com/a85/POSTMan-Chrome-Extension/issues/889
	                pm.envManager.get("globals").trigger("change");
	            });
	        }
	        else {
	            this.set("testResults", null);
	            this.set("testErrors", null);
	        }

	    },

	    isMethodWithBody:function (method) {
	        return pm.methods.isMethodWithBody(method);
	    },

		packHeaders:function (headers) {
			var headersLength = headers.length;
			var paramString = "";
			for (var i = 0; i < headersLength; i++) {
				var h = headers[i];
	            var prefix = "";
				if(h.enabled === false) {
					prefix = "//";
				}
				if (h.name && h.name !== "") {
					paramString += prefix + h.name + ": " + h.value + "\n";
				}
			}

			return paramString;
		},

	    getHeaderValue:function (key) {
	        var headers = this.get("headers");

	        key = key.toLowerCase();
	        for (var i = 0, count = headers.length; i < count; i++) {
	            var headerKey = headers[i].key.toLowerCase();

	            if (headerKey === key) {
	                return headers[i].value;
	            }
	        }

	        return false;
	    },

	    saveCurrentRequestToLocalStorage:function () {
	        pm.settings.setSetting("lastRequest", this.getAsJson());
	    },

	    clearCurrentRequestFromStorage: function() {
	        pm.settings.setSetting("lastRequest", null);
	    },

	    getTotalTime:function () {
	        var totalTime = this.get("endTime") - this.get("startTime");
	        this.set("totalTime", totalTime);
	        return totalTime;
	    },

	    getPackedHeaders:function () {
	        return this.packHeaders(this.get("headers"));
	    },

	    unpackHeaders:function (data) {
	        if(data instanceof Array) {
	            return data; //in a sample response, data is already an array. No need to unpack
	            //fix for github #1597
	        }
	        if ((!data) || typeof data !== "string") {
	            return [];
	        }
	        else {
	            var vars = [], hash;
	            var hashes = data.split('\n');
	            var header;

	            for (var i = 0; i < hashes.length; i++) {
	                hash = hashes[i];
	                if (!hash) {
	                    continue;
	                }

	                var loc = hash.search(':');

	                if (loc !== -1) {
	                    var name = $.trim(hash.substr(0, loc));
	                    var enabled=true;
	                    if(name.indexOf("//")==0) {
	                        enabled = false;
	                        name = name.substring(2);
	                    }
	                    var value = $.trim(hash.substr(loc + 1));
	                    header = {
	                        "name":$.trim(name),
	                        "key":$.trim(name),
	                        "value":$.trim(value),
	                        "enabled":enabled,
	                        "description":headerDetails[$.trim(name).toLowerCase()]
	                    };

	                    vars.push(header);
	                }
	            }

	            return vars;
	        }
	    },

	    // Add Github bug number
	    decodeLink:function (link) {
	        return $(document.createElement('div')).html(link).text();
	    },

	    setPathVariables: function(params) {
	        this.set("pathVariables", params);
	    },

	    getPathVariables: function() {
	        return this.get("pathVariables");
	    },

	    getUrlParams: function() {
	        var params = getUrlVars(this.get("url"));
	        return params;
	    },

	    setUrlParams: function(params) {
	        this.set("urlParams", params);
	    },

		setUrlParamStringWithOptBlankValRemoval: function(params, silent, removeBlankParams, url) {
			if(!url) {
				url = this.get("url");
			}
			var paramArr = [];

			var existingUrlParams = {};
			if(url.split("?").length>1) {
				_.each(url.split("?")[1].split("&"), function(param) {
				    existingUrlParams[param.split("=")[0]] = param;
				});
				//this is an object { key: key=value, key2: key2=value2)
			}

			for (var i = 0; i < params.length; i++) {
				var p = params[i];
				if (p.key && p.key !== "") {
					p.key = p.key.replace(/&/g, '%26');
	                if(!p.value) {
	                    p.value="";
	                }
					p.value = p.value.replace(/&/g, '%26');
					if(removeBlankParams == false || p.value !== "") {
						var equals = (p.value.length===0)?"":"=";
						if(_.keys(existingUrlParams).indexOf(p.key)!==-1 && existingUrlParams[p.key].indexOf("=")!==-1) {
							//if the URL bar has this param with an = sign, don't remove it
							equals = "=";
						}
						paramArr.push(p.key + equals + p.value);
					}
				}
			}

			var baseUrl = url.split("?")[0];
			if (paramArr.length > 0) {
				url = baseUrl + "?" + paramArr.join('&');
			}
			else {
				//Has key/val pair
				if (url.indexOf("?") > 0 && url.indexOf("=") > 0) {
					url = baseUrl;
				}
			}

			if (silent) {
				this.set("url", url, { "silent": true });
				this.trigger("updateURLInputText");
			}
			else {
				this.set("url", url);
			}

		},

	    setUrlParamString:function (params, silent, url) {
	        this.setUrlParamStringWithOptBlankValRemoval(params, silent, false, url);
	    },

	    encodeUrl:function (url) {
	        var quesLocation = url.indexOf('?');

	        if (quesLocation > 0) {
	            var urlVars = getUrlVars(url);
	            var baseUrl = url.substring(0, quesLocation);
	            var urlVarsCount = urlVars.length;
	            var newUrl = baseUrl + "?";
	            for (var i = 0; i < urlVarsCount; i++) {
	                newUrl += (urlVars[i].key) + "=" + (urlVars[i].value) + "&";
	            }

	            newUrl = newUrl.substr(0, newUrl.length - 1);
	            return url;
	        }
	        else {
	            return url;
	        }
	    },

	    getFinalRequestUrl: function(url) {
	        var finalUrl;

	        finalUrl = replaceURLPathVariables(url, this.get("pathVariables"));
	        finalUrl = this.encodeUrl(finalUrl);
	        finalUrl = pm.envManager.getCurrentValue(finalUrl);
	        finalUrl = ensureProperUrl(finalUrl);

	        return finalUrl.trim();
	    },

	    prepareHeadersForProxy:function (headers) {
	        var count = headers.length;
	        for (var i = 0; i < count; i++) {
	            var key = headers[i].key.toLowerCase();
	            if (_.indexOf(pm.bannedHeaders, key) >= 0) {
	                headers[i].key = "Postman-" + headers[i].key;
	                headers[i].name = "Postman-" + headers[i].name;
	            }
	        }

	        return headers;
	    },

	    processUrl:function (url) {
	        var finalUrl = pm.envManager.getCurrentValue(url);
	        finalUrl = ensureProperUrl(finalUrl);
	        return finalUrl;
	    },

		splitUrlIntoHostAndPath: function(url) {
			var path = "";
			var host;

			var parts = url.split('/');
			host = parts[2];
			var prefix=parts[0]+"/"+parts[1]+"/";
			var partsCount = parts.length;
			for(var i = 3; i < partsCount; i++) {
				path += "/" + parts[i];
			}

			var quesLocation = path.indexOf('?');
			var hasParams = quesLocation >= 0 ? true : false;

			if (hasParams) {
				parts = getUrlVars(path);
				var count = parts.length;
				var encodedPath = path.substr(0, quesLocation + 1);
				for (var j = 0; j < count; j++) {
					var value = parts[j].value;
					var key = parts[j].key;
	//				value = encodeURIComponent(value);
	//				key = encodeURIComponent(key);
					var equals = (parts[j].equals)?"=":"";
					encodedPath += key + equals + value + "&";
				}

	            //only do this to remove the trailing '&' if params are present
	            if(count>0) {
	                encodedPath = encodedPath.substr(0, encodedPath.length - 1);
	            }

				path = encodedPath;
			}

			return { host: host, path: path, prefix: prefix};
		},

	    getAsObject: function(saveHelperToRequest) {
	        if(typeof saveHelperToRequest === "undefined") {
	            saveHelperToRequest = false;
	        }

	        var body = this.get("body");

	        var request = {
	            name: this.get("name"),
	            description: this.get("description"),
	            url: this.get("url"),
	            pathVariables: this.get("pathVariables"),
	            data: body.get("dataAsObjects"),
	            headers: this.getPackedHeaders(),
	            dataMode: body.get("dataMode"),
	            method: this.get("method"),
	            tests: this.get("tests"),
	            sandboxFiles: this.get("sandboxFiles"),
	            sendMethod: this.get("sendMethod"),
	            preRequestScript: this.get("preRequestScript"),
	            isFromCollection: this.get("isFromCollection"),
	            write: this.get("write"),
	            version: 2
	        };

	        //add helper data as well
	         /* TODO: Move this to getAsObject() */
	        var currentHelper = pm.helpers.getActiveHelperType();
	        var helperData, helperAttributes, saveHelperToRequest;
	        if(currentHelper!=="normal") {
	            helperData = pm.helpers.getHelper(currentHelper).attributes;
	            helperAttributes = this.getHelperProperties(helperData);
	            saveHelperToRequest = $("#request-helper-"+currentHelper+"-saveHelper").is(":checked");
	        }

	        if(saveHelperToRequest===false) {
	            currentHelper = "normal";
	            helperAttributes = {};
	        }

	        if(request.isFromCollection) {
	            request.id = this.get("id");
	            request.collectionId = this.attributes.collectionId;
	        }

	        request.currentHelper = currentHelper;
	        request.helperAttributes = helperAttributes;
	        return request;
	    },

	    getAsObjectForResponse: function() {
	        var body = this.get("body");

	        var request = {
	            name: this.get("name"),
	            description: this.get("description"),
	            url: this.get("url"),
	            pathVariables: this.get("pathVariables"),
	            data: body.get("dataAsObjects"),
	            headers: this.getPackedHeaders(),
	            dataMode: body.get("dataMode"),
	            method: this.get("method"),
	            tests: this.get("tests"),
	            isFromCollection: this.get("isFromCollection"),
	            write: this.get("write"),
	            version: 2
	        };

	        if(request.isFromCollection) {
	            request.id = this.get("id");
	            request.collectionId = this.attributes.collectionId;
	        }
	        return request;
	    },

	    trimJsonForResponse: function(json) {
	        var retVal = {
	            name: json.name,
	            description: json.description,
	            url: json.url,
	            pathVariables: json.pathVariables,
	            data: json.data,
	            headers: json.headers,
	            dataMode: json.dataMode,
	            method: json.method,
	            tests: json.tests,
	            isFromCollection: json.isFromCollection,
	            write: json.write,
	            version: json.version
	        };

	        return retVal;

	    },

	    getAsObjectForTab: function(saveHelperToRequest) {
	        var request = this.getAsObject(saveHelperToRequest);
	        var thisUiState = this.get("uiState");
	        request.id = this.get("id");
	        request.testResults = this.get("testResults");
	        request.testErrors = this.get("testErrors");
	        request.responses = this.get("responses");
	        request.transformedUrl = this.get("transformedUrl");
	        request.body = this.get("body").toJSON();
	        request.headers = this.getPackedHeaders(this.get("headers"));
	        request.transformedHeaders = this.get("transformedHeaders");
	        request.uiState = {};
	        request.uiState.areUrlParamsOpen = (thisUiState)?thisUiState.areUrlParamsOpen : false;
	        request.uiState.areRequestMetaOpen = (thisUiState)?thisUiState.areRequestMetaOpen : true;
	        request.uiState.areHeadersOpen = (thisUiState)?thisUiState.areHeadersOpen : false;
	        request.uiState.activeRequestTab = (thisUiState)?thisUiState.activeRequestTab : "headers";
	        request.uiState.waitingForInterceptorResponse = (thisUiState)?thisUiState.waitingForInterceptorResponse : false;
	        request.uiState.waitingForResponse = (thisUiState)?thisUiState.waitingForResponse : false;
	        request.responses = this.get("responses");
	        return request;
	    },

	    getAsJson:function () {
	        var body = this.get("body");

	        var request = {
	            url: this.get("url"),
	            pathVariables: this.get("pathVariables"),
	            data: body.get("dataAsObjects"), //TODO This should be available in the model itself, asObjects = true
	            headers: this.getPackedHeaders(),
	            dataMode: body.get("dataMode"),
	            method: this.get("method"),
	            tests: this.get("tests"),
	            sandboxFiles: this.get("sandboxFiles"),
	            sendMethod: this.get("sendMethod"),
	            version: 2
	        };

	        return JSON.stringify(request);
	    },

	    getHeadersAsKvPairs: function() {
	        var headers = this.get("headers");
	        var count = headers.length;
	        var kvpairs = {};
	        for(var i = 0; i < count; i++) {
	            kvpairs[headers[i].key] = headers[i].value;
	        }

	        return kvpairs;
	    },

	    getTransformedHeadersAsKvPairs: function() {
	        var headers = this.get("transformedHeaders");
	        var count = headers.length;
	        var kvpairs = {};
	        for(var i = 0; i < count; i++) {
	            kvpairs[headers[i].key] = headers[i].value;
	        }

	        return kvpairs;
	    },

	    saveFinalRequest: function(url, method, headers, data, dataMode) {
	        // this.set("finalRequest", finalRequest);
	    },

	    getForTester:function () {
	        var body = this.get("body");
	        var data = this.get("data");
	        var dataMode = body.get("dataMode");

	        body.loadData(this.get("dataMode"), data, true);

	        // TODO
	        // URL should be transformed data after variable processing
	        // Because function parameters and scripts might transform
	        // the data. Headers already have the final value

	        var transformedData = body.get("transformedData");

	        if (dataMode === "params") {
	            data = body.getDataAsKvPairs(transformedData);
	        }
	        else if (dataMode === "urlencoded") {
	            data = body.getDataAsKvPairs(transformedData);
	        }
	        else if (dataMode === "raw") {
	            data = transformedData;
	        }
	        else if (dataMode === "binary") {
	            data = "";
	        }

	        var request = {
	            url: this.get("transformedUrl"), //transformedURL is blank
	            data: data,
	            headers: this.getHeadersAsKvPairs(),
	            dataMode: body.get("dataMode"),
	            method: this.get("method"),
	            name: this.get("name"),
	            description: this.get("description")
	        };

	        if(this.get("transformedHeaders")) {
	            request.headers = this.getTransformedHeadersAsKvPairs();
	        }

	        return request;
	    },

	    getForPrscript:function () {
	        var body = this.get("body");
	        var data;
	        var dataMode = body.get("dataMode");

	        // TODO
	        // URL should be transformed data after variable processing
	        // Because function parameters and scripts might transform
	        // the data. Headers already have the final value

	        var oldData = body.get("data");

	        if (dataMode === "params") {
	            data = body.getDataAsKvPairs(oldData);
	        }
	        else if (dataMode === "urlencoded") {
	            data = body.getDataAsKvPairs(oldData);
	        }
	        else if (dataMode === "raw") {
	            data = oldData;
	        }
	        else if (dataMode === "binary") {
	            data = "";
	        }

	        var request = {
	            url: this.get("url"),
	            data: data,
	            headers: this.getHeadersAsKvPairs(),
	            dataMode: body.get("dataMode"),
	            method: this.get("method"),
	            name: this.get("name"),
	            description: this.get("description")
	        };

	        return request;
	    },

	    startNew:function () {
	        if(pm.tabManager) {
	            pm.tabManager.disableDirtyCheck();
	        }
	        var body = this.get("body");
	        var response = this.get("response");

	        // TODO RequestEditor should be listening to this
	        // TODO Needs to be made clearer
	        this.set("editorMode", 0);

	        var xhr = this.get("xhr");

	        if (xhr) {
	            xhr.abort();
	            this.unset("xhr");
	        }

	        this.set("url", "");
	        this.set("urlParams", {});
	        this.set("bodyParams", {});
	        this.set("name", "");
	        this.set("description", "");
	        this.set("headers", []);
	        this.set("method", "GET");
	        this.set("dataMode", "");
	        this.set("isFromCollection", false);
	        this.set("collectionRequestId", "");
	        this.set("responses", []);
	        this.set("sandboxFiles","");
	        this.set("sendMethod", "xhr");

	        this.set("tests", "");
	        this.set("preRequestScript", "");

	        body.set("data", "");

	        this.trigger("loadRequest", this);
	        response.trigger("clearResponse");
	    },

	    cancel:function () {

	        var response = this.get("response");
	        var useInterceptor = pm.settings.getSetting("useInterceptor");
	        if(useInterceptor) {
	            if(pm.testRunner) {
	                this.set("waitingForInterceptorResponse", false);
	                this.set("waitingForResponse", false);
	            }
	            var errorUrl = pm.envManager.getCurrentValue(this.get("url"));
	            response.trigger("failedRequest", errorUrl);
	        }
	        else {
	            var xhr = this.get("xhr");
	            if (xhr !== null) {
	                xhr.abort();
	            }
	        }

	        if(!pm.testRunner) {
	            pm.tabManager.cancelRequest(pm.tabManager.currentTabId);
	        }
	        response.clear();
	    },

		deleteSampleResponseByIdWithOptSync: function(responseId, toSync, callback) {
			var collectionRequestId = this.get("collectionRequestId");

			if (collectionRequestId) {
				var responses = this.get("responses");
				var location = arrayObjectIndexOf(responses, responseId, "id");
				responses.splice(location, 1);
				this.trigger("change:responses");
				pm.mediator.trigger("updateResponsesForCollectionRequestWithOptSync", collectionRequestId, responses, false);

				if(toSync) {
	                var owner = pm.collections.getOwnerForCollection(this.get("collectionId"));
					pm.syncManager.addChangeset("response","destroy",{id:responseId, owner: owner}, null, true);
				}
			}

	        //call callback regardless of whether i could delete the response or not
	        //for DELETEs, it doesn't matter if the callback is sent before the actual delete happens
	        if(typeof callback === "function") {
	            callback();
	        }
		},

	    deleteSampleResponseById: function(responseId) {
			this.deleteSampleResponseByIdWithOptSync(responseId, true);
	    },

	    loadSampleResponse: function(response) {
	        var responseRequest = {};
	        var toUseSavedRequest = false;

	        if(response.requestObject) {
	            //this works if requestObject is a stringified object
	            if(typeof response.requestObject === "string") {
	                try {
	                    var parsed = JSON.parse(response.requestObject);
	                    if(parsed.hasOwnProperty("url")) {
	                        responseRequest = JSON.parse(response.requestObject);
	                        toUseSavedRequest = true;
	                    }
	                }
	                catch(e) {
	                }
	            }
	            else if(response.requestObject && response.requestObject.hasOwnProperty("url")) {
	                responseRequest = response.requestObject;
	            }
	        }
	        if(!responseRequest.hasOwnProperty("url")) {
	            if(typeof response.request === "string") {
	                try {
	                    var parsed = JSON.parse(response.request);
	                    if(parsed.hasOwnProperty("url")) {
	                        responseRequest = JSON.parse(response.request);
	                        toUseSavedRequest = true;
	                    }
	                }
	                catch(e) {
	                }
	            }
	            else if(response.request && response.request.hasOwnProperty("url")) {
	                responseRequest = response.request;
	                toUseSavedRequest = true;
	            }
	        }
	        if(!responseRequest) {
	            responseRequest = {}; //to allow the response text to be den
	        }


	        if(toUseSavedRequest) {
	            this.set("url", responseRequest.url);
	            this.set("method", responseRequest.method);

	            this.set("headers", this.unpackHeaders(responseRequest.headers));

	            // This should trigger change events in Backbone
	            this.set("data", responseRequest.data);
	            this.set("dataMode", responseRequest.dataMode);

	            var body = this.get("body");

	            if(this.isMethodWithBody(responseRequest.method)) {
	                body.set("dataMode", responseRequest.dataMode);
	                body.loadData(responseRequest.dataMode, responseRequest.data, true);
	            }
	        }

	        this.trigger("loadRequest", this);

	        var r = this.get("response");
	        r.loadSampleResponse(this, response);
	    },

	    loadRequest: function(request, isFromCollection, isFromSample, isFromTestRunner, isFromTab) {

	        if(pm.tabManager)
	            pm.tabManager.disableDirtyCheck();

	        var body = this.get("body");
	        var response = this.get("response");

	        this.set("id", request.id);

	        this.set("write", request.write);

	        this.set("editorMode", 0);

	        this.set("url", request.url);

	        this.set("uiState", request.uiState || {});
	        this.set("testResults", request.testResults);
	        this.set("testErrors", request.testErrors);

	        if ("pathVariables" in request) {
	            this.set("pathVariables", request.pathVariables);
	        }
	        else {
	            this.set("pathVariables", []);
	        }

	        if ("currentHelper" in request) {
	            this.set("currentHelper", request.currentHelper);
	            this.set("helperAttributes", request.helperAttributes);
	        }
	        else {
	            this.set("currentHelper", "normal");
	            this.set("helperAttributes", []);
	        }

	        this.set("isFromCollection", isFromCollection);
	        this.set("isFromSample", isFromSample);

	        if(!request.method) {
	            request.method = "get";
	        }
	        this.set("method", request.method.toUpperCase());
	        this.set("sandboxFiles", request.sandboxFiles);
	        this.set("sendMethod", request.sendMethod);

	        /*Set defaults for unsaved requests*/
	        this.set("collectionId", null);
	        this.set("collectionRequestId", null);
	        this.set("responses", []);

	        if (isFromCollection) {
	            this.set("collectionId", request.collectionId);
	            this.set("collectionRequestId", request.id);

	            if (typeof request.name !== "undefined") {
	                this.set("name", request.name);
	            }
	            else {
	                this.set("name", "");
	            }

	            if (typeof request.description !== "undefined") {
	                this.set("description", request.description);
	            }
	            else {
	                this.set("description", "");
	            }



	            if ("responses" in request) {
	                this.set("responses", request.responses);
	                if (request.responses) {
	                }
	                else {
	                    this.set("responses", []);
	                }
	            }
	            else {
	                this.set("responses", []);
	            }
	        }
	        else if (isFromSample) {
	        }
	        else {
	            this.set("name", "");
	        }

	        if(!isFromTab || pm.testRunner) {
	            if (request.hasOwnProperty("tests")) {
	                this.set("tests", request.tests);
	                this.set("testResults", null);
	            }
	            else {
	                this.set("tests", null);
	                this.set("testResults", null);
	            }
	        }
	        else {
	            if (request.hasOwnProperty("tests")) {
	                this.set("tests", request.tests);
	            }
	            else {
	                this.set("tests", null);
	            }
	        }


	        if (request.hasOwnProperty("preRequestScript")) {
	            this.set("preRequestScript", request.preRequestScript);
	        }
	        else {
	            this.set("preRequestScript", null);
	        }

	        if (typeof request.headers !== "undefined") {
	            this.set("headers", this.unpackHeaders(request.headers));
	        }
	        else {
	            this.set("headers", []);
	        }

	        response.clear();

	        if (this.isMethodWithBody(this.get("method"))) {
	            body.set("dataMode", request.dataMode);

	            var dataAsArray = true;
	            if(typeof request.data === "string") {
	                dataAsArray = false;
	            }
	            body.loadData(request.dataMode, request.data, dataAsArray);
	            /*if("version" in request) {
	                if(!request.version|| (request.version === 2)) {
	                    body.loadData(request.dataMode, request.data, true);
	                }
	                else {
	                    //body.loadData(request.dataMode, request.data, false);
	                    body.loadData(request.dataMode, request.data, true);
	                    //data is never a string
	                }
	            }
	            else {
	                //data is never a string
	                //body.loadData(request.dataMode, request.data, false);
	                body.loadData(request.dataMode, request.data, true);
	            }*/

	        }
	        else {
	            if("version" in request) {
	                if(request.version === 2) {
	                    body.loadData("raw", "", true);
	                }
	                else {
	                    body.loadData("raw","", false);
	                }
	            }
	            else {
	                body.loadData("raw","", false);
	            }
	            body.set("dataMode", "params");
	        }

	        response.trigger("clearResponse");
	        this.trigger("loadRequest", this);
	    },

	    loadRequestFromLink:function (link, headers) {
	        var request = new Request();
	        request.set("url", link);  //this.decodeLink(link)); This was added for Github#301. But why?
	        request.set("method", "GET");
	        request.set("isFromCollection", false);
	        if (pm.settings.getSetting("retainLinkHeaders") === true) {
	            if (headers) {
	                request.set("headers", headers);
	            }
	        }

	        pm.mediator.trigger("loadRequestInNewTab", request.getAsObjectForTab());
	    },

	    disableHelpers: function() {
	        this.set("areHelpersEnabled", false);
	    },

	    prepareForSending: function() {
	        this.set("startTime", new Date().getTime());
	    },

	    removeHeader: function(key) {
	        var headers = _.clone(this.get("headers"));

	        var contentTypeHeaderKey = key;
	        var pos = findPosition(headers, "key", contentTypeHeaderKey);
	        if (pos >= 0) {
	            headers.splice(pos, 1);
	            this.set("headers", headers);
	        }
	    },

	    setHeaderInArray: function(headers, key, value) {
	        var contentTypeHeaderKey = key;
	        var pos = findPositionCaseInsensitive(headers, "key", contentTypeHeaderKey);

	        if (value === 'text') {
	            if (pos >= 0) {
	                headers.splice(pos, 1);
	            }
	        }
	        else {
	            if (pos >= 0) {
	                headers[pos] = {
	                    key: contentTypeHeaderKey,
	                    type: "text",
	                    name: contentTypeHeaderKey,
	                    value: value
	                };
	            }
	            else {
	                headers.push({key: contentTypeHeaderKey, name: contentTypeHeaderKey, value: value});
	            }
	        }

	        return headers;
	    },

	    setHeader: function(key, value) {
	        var headers = _.clone(this.get("headers"));
	        if(!(headers instanceof Array)) {
	            headers = [];
	        }

	        var contentTypeHeaderKey = key;
	        var pos = findHeaderPosition(headers, "key", contentTypeHeaderKey);

	        if (value === 'text') {
	            if (pos >= 0) {
	                headers.splice(pos, 1);
	            }
	        }
	        else {
	            if (pos >= 0) {
	                headers[pos] = {
	                    key: contentTypeHeaderKey,
	                    type: "text",
	                    name: contentTypeHeaderKey,
	                    value: value
	                };
	            }
	            else {
	                headers.push({key: contentTypeHeaderKey, name: contentTypeHeaderKey, value: value});
	            }
	        }

	        this.set("headers", headers);
	    },

		getXhrHeaders: function() {
			var body = this.get("body");

			var headers = _.clone(this.get("headers"));

			if(pm.settings.getSetting("sendNoCacheHeader") === true) {
				this.setHeaderInArray(headers, "Cache-Control", "no-cache");
			}

			if(pm.settings.getSetting("sendPostmanTokenHeader") === true) {
				this.setHeaderInArray(headers, "Postman-Token", guid());
			}

			if (this.isMethodWithBody(this.get("method"))) {
				if(body.get("dataMode") === "urlencoded") {
	                //only add the content-type header if it doesn't already exist
	                if(_.map(_.pluck(headers,"name"), function(name){if(name) {return name.toLowerCase()}}).indexOf("content-type")===-1) {
					    this.setHeaderInArray(headers, "Content-Type", "application/x-www-form-urlencoded");
	                }
				}
			}

			if (pm.settings.getSetting("usePostmanProxy") === true) {
				headers = this.prepareHeadersForProxy(headers);
			}

			var i;
			var finalHeaders = [];
			for (i = 0; i < headers.length; i++) {
				var header = _.clone(headers[i]);
				if (!_.isEmpty(header.value) && !_.isEmpty(header.key) && header.enabled!==false) {
	                header.key = pm.envManager.getCurrentValue(header.key);
					header.value = pm.envManager.getCurrentValue(header.value);
					finalHeaders.push(header);
				}
			}

	        this.set("transformedHeaders", finalHeaders);
			return finalHeaders;
		},

	    getRequestBodyPreview: function() {
	        var body = this.get("body");
	        return body.get("dataAsPreview");
	    },

	    getRequestBodyForCurl: function() {
	        var body = this.get("body");
	        return body.getBodyForCurl();
	    },

	    getRequestAfterResolution: function() {
	        var ret = {};
	        var oldVal = this.getAsObject();
	        //getFinalRequestUrl replaces URL params
	        ret.url = pm.envManager.getCurrentValue(this.getFinalRequestUrl(oldVal.url));
	        ret.headers = pm.envManager.getCurrentValue(this.packHeaders(this.getXhrHeaders()));
	        ret.data = JSON.parse(pm.envManager.getCurrentValue(JSON.stringify(oldVal.data)));
	        ret.method = oldVal.method;
	        ret.dataMode = oldVal.dataMode;
	        return ret;
	    },

	    getSerializedFormData: function(formData) {
	        // console.log("FormData is", formData);
	    },

	    getHelperProperties: function(helperAttributes) {
	        var ret = {};
	        for (var property in helperAttributes) {
	            if (helperAttributes.hasOwnProperty(property)) {
	                if(property==="request") continue;
	                ret[property]=helperAttributes[property];
	            }
	        }
	        return ret;
	    },

	    send:function (responseRawDataType, action, disableHistory) {
	        this.set("action", action);

	        var model = this;
	        var body = this.get("body");
	        var dataMode = body.get("dataMode");
	        var response = this.get("response");

	        var finalRequest;

	        var xhrTimeout = pm.settings.getSetting("xhrTimeout");

	        var originalUrl = this.get("url"); //Store this for saving the request
	        if(originalUrl.trim()=="") {
	            $("#url").addClass("error-url");
	            setTimeout(function() {
	                $("#url").removeClass("error-url");
	            },2000);
	            return;
	        }
	        var url = this.getFinalRequestUrl(this.get("url"));
	        var parts = this.splitUrlIntoHostAndPath(url);
	        url = parts.prefix+parts.host+parts.path;

	        // Saving for request test scripts
	        this.set("transformedUrl", url);

	        var method = this.get("method");
	        if(!method) {
	            method="get";
	        }
	        method = method.toUpperCase();
	        
	        if(this.get("isFromCollection")) {
	            var crid = this.get("collectionId")+"#"+this.get("collectionRequestId");
	            pm.tracker.trackEvent("request", "collection_send", crid);
	        }

	        if(action==="display") {
	            pm.tracker.trackEvent("request", "send", method);
	        }
	        else if(action==="download") {
	            pm.tracker.trackEvent("request", "download", method);
	        }

	        //Response raw data type is used for fetching binary responses while generating PDFs
	        if (!responseRawDataType) {
	            responseRawDataType = "text";
	        }

	        var headers = this.getXhrHeaders();
	        var numHeaders = headers?headers.length:0;
	        pm.tracker.trackEvent("request", "headers", "execute", numHeaders);

	        var useInterceptor = pm.settings.getSetting("useInterceptor");
	        var isMethodWithBody = this.isMethodWithBody(method);

	        if(postman_electron && this.get("sendMethod")==="node") {
	            var RequestOptions = this.generateRequestObject_webkit();
	            var responseObject = response;
	            var xhrWebkitRequest = requestLib(RequestOptions, function(error, response, body) {
	                console.log("ERROR: "); console.log(error);
	                console.log("response: "); console.log(response);
	                console.log("body: "); console.log(body);
	                var xhrResponse = model.convertNodeResponseToXHRResponse(response);
	                _.bind(responseObject.load, model)(xhrResponse);
	            });
	            this.setFormDataIfParamsInRequet_webkit(xhrWebkitRequest, RequestOptions);
	        }
	        else if (useInterceptor) {
	            if(postman_electron) {
	                console.log("Interceptor cannot be used in webkit apps");
	                return;
	            }

	            var remoteRequest = {
	                "url": url,
	                "xhrTimeout": xhrTimeout,
	                "method": method,
	                "dataMode": this.get("dataMode"),
	                "responseType": responseRawDataType,
	                "headers": headers
	            };

	            if (isMethodWithBody) {
	                var dataToBeSent = body.get("dataToBeSent");
	                remoteRequest.dataMode = dataMode;
	                if (dataMode === "params") {
	                    //this gives the resolved data ONLY in the request builder
	                    // in the runner, use transformed data because file uploads are not supported
	                    if(pm.isTestRunner) {
	                        remoteRequest.body = body.get("transformedData");
	                    }
	                    else {
	                        remoteRequest.body = body.get("serializedData");
	                        //add .type attribute to any file element
	                        if(_.isArray(remoteRequest.body)) {
	                            var numRows = remoteRequest.body.length;
	                            for(var k=0; k<numRows; k++) {
	                                if(remoteRequest.body[k].type==="file") {
	                                    try{
	                                        remoteRequest.body[k].mimeType=body.attributes.transformedData[k].mimeType
	                                    }
	                                    catch(e) {
	                                        console.error("Could not set MIME type for file upload through Interceptor");
	                                    } //ignore if mime setting fails
	                                }
	                            }
	                        }
	                    }
	                }
	                else if (dataMode === "binary") {
	                    remoteRequest.body = ArrayBufferEncoderDecoder.encode(dataToBeSent);
	                }
	                else {
	                    remoteRequest.body = dataToBeSent;
	                }
	            }

	            var msgId = guid();
	            this.set("messageGuid", msgId);
	            var followRedirect = pm.settings.getSetting("interceptorRedirect");

	            var message = {
	                "postmanMessage": {
	                    "guid": msgId,
	                    "type": "xhrRequest",
	                    "request": remoteRequest,
	                    "autoRedirect": followRedirect,
	                    "postmanAppId": getAppId()
	                }
	            };


	            //add the message-tab association to the map
	            if(!pm.testRunner) {
	                var oldITMap = this.get("interceptorTabMap");
	                if(!oldITMap) {
	                    oldITMap = {};
	                }
	                oldITMap[msgId] = pm.tabManager.currentTabId;
	                this.set("interceptorTabMap", oldITMap);
	            }

	            //console.log("Sending request message", message.postmanMessage.guid);
	            this.prepareForSending();
	            if(pm.testRunner) {
	                this.set("waitingForInterceptorResponse", true);
	            }
	            else {
	                pm.tabManager.sentRequest(pm.tabManager.currentTabId, this);
	                pm.mediator.trigger("resetRequest");
	            }

	            //no electron specific code required. Interceptor is only for Chrome
	            chrome.runtime.sendMessage(postman_interceptor_id, message, function(extResponse) {
	            });
	        }
	        else {
	            if(responseRawDataType === "sails") {
	                var urlParts = this.splitUrlIntoHostAndPath(url);
	                //console.log("Sending request thru sails");
	                var tempSocket =  io.connect(urlParts.prefix + urlParts.host, {'force new connection':true });

	                var headersObj = {};
	                _.each(headers,function(header) {headersObj[header.key]=header.value});

	                this.prepareForSending();
	                var oldData = body.get("dataToBeSent");
	                var data;
	                try {
	                    data = JSON.parse(oldData);
	                }
	                catch(e) {
	                   data=oldData;
	                }
	                tempSocket.on('connect', function() {
	                    tempSocket.request(urlParts.path, data, function(data, jwr) {
	                        _.bind(response.socketResponseLoad, model)(jwr);
	                        tempSocket.disconnect();
	                    }, method.toLowerCase());
	                });
	            }
	            //normal xhr
	            else {
	                //Start setting up XHR
	                var xhr = new XMLHttpRequest();
	                try {
	                    xhr.open(method, url, true); //Open the XHR request. Will be sent later

	                    if (xhrTimeout !== 0) {
	                        xhr.timeout = xhrTimeout;
	                    }

	                    if(pm.testRunner) {
	                        xhr.onreadystatechange = function(event) {
	                            _.bind(response.load, model)(event.target);
	                        };
	                    }
	                    else {
	                        xhr.onreadystatechange = function(tabId) {
	                            return function(event) {
	                                 _.bind(response.load, model)(event.target, tabId);
	                            }
	                        }(pm.tabManager.currentTabId);
	                        pm.tabManager.setResponseInTab(pm.tabManager.currentTabId, null);
	                        //console.log("Associating request with " + pm.tabManager.currentTabId);
	                    }

	                    xhr.responseType = responseRawDataType;

	                    for (var i = 0; i < headers.length; i++) {
	                        if(headers[i].key.toLowerCase()==="cookie" && postman_electron) {
	                            //set cookie for domain
	                            pm.cookieManager.addCookies(url, headers[i].value);
	                        }
	                        else {
	                            xhr.setRequestHeader(headers[i].key, headers[i].value);
	                        }
	                    }

	                    // TODO Set getForTester params here

	                    this.prepareForSending();
	                    // Prepare body
	                    if (isMethodWithBody) {
	                        var data = body.get("dataToBeSent");
	                        // console.log("Data to be sent", data);
	                        if (data === false) {
	                            xhr.send();
	                        }
	                        else {
	                            xhr.send(data);
	                        }
	                    } else {
	                        xhr.send();
	                    }
	                    if(!pm.testRunner) {
	                        pm.tabManager.sentRequest(pm.tabManager.currentTabId, this);
	                        pm.mediator.trigger("resetRequest");
	                    }

	                    this.unset("xhr");
	                    this.set("xhr", xhr);
	                }
	                catch (e) {
	                    //console.log("Error while sending request: " + e.message);
	                    pm.alerts.error('Error while sending request: ' + e.message);
	                    return;
	                }
	            }
	        }

		    //set helper data
		    var currentHelper, helperData, helperAttributes;
		    if(pm.helpers) {
			    //this will only be executed in the main window, not in the collection runner
			    currentHelper = pm.helpers.getActiveHelperType();
			    if(currentHelper!=="normal") {
				    helperData = pm.helpers.getHelper(currentHelper).attributes;
				    helperAttributes = this.getHelperProperties(helperData);
			    }
		    }
			else {
				currentHelper = this.get("currentHelper");
			    if(currentHelper!=="normal") {
				    helperAttributes = this.get("helperAttributes");
			    }
		    }

	        //Save the request
	        if (pm.settings.getSetting("autoSaveRequest") && !disableHistory) {
	            pm.history.addRequest(originalUrl,
	                method,
	                this.getPackedHeaders(),
	                body.get("dataAsObjects"),
	                body.get("dataMode"),
	                this.get("tests"),
	                this.get("preRequestScript"),
	                this.get("pathVariables"),
	                currentHelper,
	                helperAttributes,
	                this.get("sandboxFiles"),
	                this.get("sendMethod")
	            );
	        }

	        var response = this.get("response");
	        this.saveCurrentRequestToLocalStorage();
	        response.trigger("sentRequest", this);
	        this.trigger("sentRequest", this);
	    },

	    setFormDataIfParamsInRequet_webkit: function(unireq, RequestOptions) {
	        var data = this.get("body").get("data");
	        if(this.isMethodWithBody(RequestOptions.method) && this.get("body").get("dataMode")==="params" && data.length > 0) {
	            var form = unireq.form();
	            _.each(data, function(dataObj) {
	                if (dataObj.type === 'text') {
	                    form.append(dataObj.key, dataObj.value);
	                } else if (dataObj.type === 'file') {
	                    var loc = node_path.resolve(dataObj.value);
	                    if(!node_fs.existsSync(loc)) {
	                        console.log("FATAL - file not found. Not adding");
	                    }
	                    else {
	                        form.append(dataObj.key, node_fs.createReadStream(loc));
	                    }
	                }
	            });
	        }
	    },

	    generateRequestObject_webkit: function() {
	        var RequestOptions = {
	            url: this.get("transformedUrl"),
	            method: this.get("method").toUpperCase(),
	            headers: this.generateHeaderObj_webkit(this.getXhrHeaders()),
	            followAllRedirecs: true,
	            jar: true,
	            timeout: pm.settings.getSetting("xhrTimeout")
	        };

	        if(this.get("dataMode") === "raw" && this.get("rawModeData")) {
	            if(this.get("rawModeData") !== undefined) {
	                this.set("data", this.get("rawModeData"));
	            }
	        }

	        if(this.isMethodWithBody(RequestOptions.method)) {
	            var dataMode = this.get("body").get("dataMode");
	            var data = this.get("body").get("transformedData");
	            if(dataMode === "raw") {
	                RequestOptions.body = data;
	            }
	            else if(dataMode === "urlencoded") {
	                RequestOptions.form = _.object(_.pluck(data, "key"), _.pluck(data, "value"));
	            }
	        }

	        RequestOptions.rejectUnauthorized=false;
	        RequestOptions.strictSSL = false;

	        return RequestOptions;
	    },

	    generateHeaderObj_webkit: function(headers) {
	        var retVal = {};
	        for (var i = 0; i < headers.length; i++) {
	            retVal[headers[i].key] = headers[i].value;
	        }
	        return retVal;
	    },

	    convertNodeResponseToXHRResponse: function(response, url) {
	        var xhrResponse = {};
	        xhrResponse.wholeResponse = response;
	        xhrResponse.statusText = response.statusMessage;
	        xhrResponse.status = response.statusCode;
	        xhrResponse.readyState = 4; //what do we set here? :S
	        xhrResponse.response = xhrResponse.responseText = response.body;
	        xhrResponse.responseType = "text";
	        xhrResponse.responseURL = pm.request.get("url"); //hope this works
	        xhrResponse.getAllResponseHeaders = function() {
	            var str = "";
	            for(var hKey in this.wholeResponse.headers) {
	                if(this.wholeResponse.headers.hasOwnProperty(hKey)) {
	                    str += hKey+":"+this.wholeResponse.headers[hKey]+"\n";
	                }
	            }
	            return str;
	        };
	        return xhrResponse;
	    },

	    generateCurl: function() {
	        var method = this.get("method");
	        if(!method) {
	            method="get";
	        }
	        method = method.toUpperCase();

	        var url = this.getFinalRequestUrl(this.get("url"));

	        var headers = this.getXhrHeaders();

	        var dataMode = this.get("body").get("dataMode");

	        var hasBody = this.isMethodWithBody(method);
	        var body;

	        if(hasBody) {
	            body = this.getRequestBodyForCurl();
	        }

	        if (this.isMethodWithBody(method)) {
	            if (dataMode === "params" && body && body.length>0) {
	                headers = this.setHeaderInArray(headers, "Content-Type", this.getDummyFormDataHeader());
	            }
	        }

	        var requestPreview;
	        requestPreview = "";
	        requestPreview += "curl -X " + method;
	        var headersCount = headers.length;

	        for(var i = 0; i < headersCount; i++) {
	            requestPreview += " -H \"" + headers[i].key + ": " + headers[i].value + "\"";
	        }

	        if(hasBody && body !== false) {
	            requestPreview += body;
	        }

	        requestPreview += " '" + url + "'";

	        this.set("curlHtml", requestPreview);
	    },

	    getDummyFormDataHeader: function() {
	        var boundary = "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW";
	        return boundary;
	    },

	    generateHTTPRequest:function() {
	        var method = this.get("method");
	        if(!method) {
	            method="get";
	        }
	        method = method.toUpperCase();

	        var httpVersion = "HTTP/1.1";

	        var url = this.getFinalRequestUrl(this.get("url"));

	        var hostAndPath = this.splitUrlIntoHostAndPath(url);

	        var path = hostAndPath.path;
	        var host = hostAndPath.host;

	        //to escape html escape sequences
	        path=path.replace(/&/g, "&amp;");

	        var headers = this.getXhrHeaders();

	        var dataMode = this.get("body").get("dataMode");

	        if (this.isMethodWithBody(method)) {
	            if (dataMode === "params") {
	                headers = this.setHeaderInArray(headers, "Content-Type", this.getDummyFormDataHeader());
	            }
	        }

	        var hasBody = this.isMethodWithBody(method);
	        var body;

	        if(hasBody) {
	            body = this.getRequestBodyPreview();
	        }
	        var requestPreview;

	        requestPreview = "";
	        requestPreview += method + " " + path + " " + httpVersion + "\n";
	        requestPreview += "Host: " + host + "\n";

	        var headersCount = headers.length;
	        for(var i = 0; i < headersCount; i++) {
	            requestPreview += headers[i].name + ": " + headers[i].value + "\n";
	        }

	        if(hasBody && body !== false) {
	            requestPreview += "\n" + body;
	        }

	        this.set("previewHtml", requestPreview);
	    },

	    generatePreview: function() {
	        this.generateCurl();
	        this.generateHTTPRequest();
	    },

	    stripScriptTag:function (text) {
	        if (!text) return text;

	        var re = /<script\b[^>]*>([\s\S]*?)<\/script>/gm;
	        text = text.replace(re, "");
	        return text;
	    },

	    checkIfCurrentRequestIsUpdated: function(request) {
	        var id = this.get("collectionRequestId");
	        if(id === request.id) {
	            this.set("name", request.name);
	            this.set("description", request.description);
	            this.set("tests", request.tests);
	            // TODO Why is this being set?
	            // this.set("testResults", request.testResults);
	        }
	    }
	});

	var Response = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            status:"",
	            responseCode:{},
	            time:0,
	            headers:[],
	            cookies:[],
	            mime:"",
	            text:"",
	            language:"",
	            rawDataType:"",
	            state:{size:"normal"},
	            previewType:"parsed",
	            searchResultScrolledTo:-1,
	            forceNoPretty: false,
	            write: true,
	            empty: false,
	            failed: false
	        };
	    },

	    initialize: function() {
	    },

	    setResponseCode: function(response) {
	        var responseCodeName;
	        var responseCodeDetail;

	        if ("statusText" in response) {
	            responseCodeName = response.statusText;
	            responseCodeDetail = "";

	            if (response.status in httpStatusCodes) {
	                responseCodeDetail = httpStatusCodes[response.status]['detail'];
	            }
	        }
	        else {
	            if (response.status in httpStatusCodes) {
	                responseCodeName = httpStatusCodes[response.status]['name'];
	                responseCodeDetail = httpStatusCodes[response.status]['detail'];
	            }
	            else {
	                responseCodeName = "";
	                responseCodeDetail = "";
	            }
	        }

	        var responseCode = {
	            'code':response.status,
	            'name':responseCodeName,
	            'detail':responseCodeDetail
	        };

	        this.set("responseCode", responseCode);
	    },

	    setResponseTime: function(startTime) {
	        var endTime = Date.now();
	        var diff = endTime - startTime;
	        this.set("time", diff);
	    },

	    setResponseData: function(response) {
	        var responseData;

	        if (response.responseType === "arraybuffer") {
	            this.set("responseData", response.response);
	        }
	        else {
	            this.set("text", response.responseText);
	        }
	    },

	    // getAllResponseHeaders - Headers are separated by \n
	    setHeaders: function(response) {
	        //socket responses have a stringheader
	        var headers = this.unpackResponseHeaders(response.stringHeaders || response.getAllResponseHeaders());

	        if(pm.settings.getSetting("usePostmanProxy") === true) {
	            var count = headers.length;
	            for(var i = 0; i < count; i++) {
	                if(headers[i].key === "Postman-Location") {
	                    headers[i].key = "Location";
	                    headers[i].name = "Location";
	                    break;
	                }
	            }
	        }

	        // TODO Set this in the model
	        headers = _.sortBy(headers, function (header) {
	            return header.name;
	        });

	        this.set("headers", headers);
	    },

	    setCookies: function(url) {
	        var model = this;
	        /* TODO: Not available in Chrome packaged apps
	        chrome.cookies.getAll({url:url}, function (cookies) {
	            var count;
	            model.set("cookies", cookies);
	        });
	        */
	    },

	    getHeadersAsKvPairs: function() {
	        var headers = this.get("headers");
	        var count = headers.length;
	        var kvpairs = {};
	        for(var i = 0; i < count; i++) {
	            kvpairs[headers[i].key] = headers[i].value;
	        }

	        return kvpairs;
	    },

	    doesContentTypeExist: function(contentType) {
	        return (!_.isUndefined(contentType) && !_.isNull(contentType))
	    },

	    isContentTypeJavascript: function(contentType) {
	        return (contentType.search(/json/i) !== -1 || contentType.search(/javascript/i) !== -1 || pm.settings.getSetting("languageDetection") === 'javascript');
	    },

	    isContentTypeXML: function(contentType) {
	        return (contentType.search(/xml/i) !== -1);
	    },

	    isContentTypeImage: function(contentType) {
	        return (contentType.search(/image/i) >= 0);
	    },

	    isContentTypePDF: function(contentType) {
	        return (contentType.search(/pdf/i) >= 0);
	    },

	    saveAsSample: function(name) {
	        var response = this.toJSON();
	        response.state = {size: "normal"};
	        response.id = guid();
	        response.name = name;

	        pm.mediator.trigger("saveSampleResponse", response);
	    },

	    loadSampleResponse: function(requestModel, response, runTests) {
	        if(!response) {
	            return;
	        }
	        if(typeof runTests === "undefined") {
	            runTests = false;
	        }

	        this.set("status", response.status);
	        this.set("responseCode", response.responseCode);
	        this.set("time", response.time);
	        this.set("headers", response.headers);
	        this.set("cookies", response.cookies);
	        this.set("mime", response.mime);
	        this.set("language", response.language);
	        this.set("text", response.text);
	        this.set("rawDataType", response.rawDataType);
	        this.set("state", response.state);
	        this.set("previewType", response.previewType);
	        this.set("empty", response.empty);
	        this.set("failed", response.failed);
	        this.set("uiState", response.uiState);
	        this.set("isSample", true);
	        this.set("scrollToResult", false);

	        //to prevent tests from being run on sample response load
	        if(runTests === false) {
	            this.set("runTests", false);
	        }
	        else {
	            this.set("scrollToResult", true);
	        }

	        this.trigger("loadResponse", requestModel);
	    },

	    //here, request is the MODEL
	    runTestsForRequest: function(request, response) {
	        var tests = request.tests;
	        var requestModel = new Request(request);
	        var bodyModel = new RequestBody(request.body);
	        requestModel.set("body", bodyModel);
	        if (tests !== null) {
	            requestModel.setResponse(response.toJSON());
	            pm.mediator.trigger("runRequestTest", requestModel, {}, 1, function(data, result) {
	                if (result === "result") {
	                    request["testResults"] = data;
	                    request["testErrors"] = null;
	                }
	                else if (result === "error") {
	                    request["testResults"] = null;
	                    request["testErrors"] = data;
	                }

	                //Hack for github https://github.com/a85/POSTMan-Chrome-Extension/issues/889
	                pm.envManager.get("globals").trigger("change");
	                if(!pm.testRunner) {
	                    pm.tabManager.updateRequestTests(request);
	                }
	            });
	        }
	        else {
	            request.set("testResults", null);
	            request.set("testErrors", null);
	        }
	    },


	    socketResponseLoad: function(jwr) {
	        var request = this;
	        var model = request.get("response");
	        model.setResponseTime(request.get("startTime"));

	        var url = request.get("url");
	        var stringHeaders = "";
	        var headerObj = jwr.headers;
	        for(var hk in headerObj) {
	            if(headerObj.hasOwnProperty(hk)) {
	                stringHeaders+=hk+": " +headerObj[hk]+"\n";
	            }
	        }

	        var response = {
	            'status':jwr.statusCode || 400,
	            'responseText': JSON.stringify(jwr.body),
	            'stringHeaders': stringHeaders,
	            'responseType': 'text'
	        };

	        model.setResponseCode(response);
	        //time has been set earlier
	        model.setResponseData(response);
	        model.setHeaders(response);

	        var responseHeaders = getResponseHeadersAsLowercaseArray(stringHeaders);
	        var contentType = getCaseInsensitiveHeader("content-type", responseHeaders);
	        var language = 'html';

	        var responseLength = 0;
	        var contentLength = getCaseInsensitiveHeader("content-length", responseHeaders);
	        if(contentLength !== null) {
	            responseLength = parseInt(contentLength);
	        }

	        var JSON_SIZE_THRESHOLD = 10000000;
	        var XML_SIZE_THRESHOLD = 5000000;

	        var responsePreviewType = 'html';
	        model.set("forceNoPretty",false);
	        language="javascript";

	        model.set("language", language);
	        model.set("previewType", responsePreviewType);
	        model.set("rawDataType", response.responseType);
	        model.set("state", {size: "normal"});

	        if(pm.testRunner || !tabId || pm.tabManager.currentTabId==tabId) {
	            model.trigger("loadResponse", model);
	        }
	        else {
	            pm.tabManager.addReceivedResponseToTab(tabId, response);
	        }

	    },

	    // Renders the response from a request
	    // Called with this = request
	    load:function (response, tabId) {
	        var request = this;
	        var model = request.get("response");
	        var responseHeaders, contentType;

	        if(!response) {
	            var errorUrl = pm.envManager.getCurrentValue(request.get("url"));
	            model.trigger("failedRequest", errorUrl);
	            return;
	        }

	        // TODO These need to be renamed something else
	        var presetPreviewType = pm.settings.getSetting("previewType");
	        var languageDetection = pm.settings.getSetting("languageDetection");

	        if(response.readyState ===2) {
	            //when the headers have come in, check if it's an image
	            //if it is, save as array buffer directly, instead of making another request
	            //https://github.com/a85/POSTMan-Chrome-Extension/issues/615
	            responseHeaders = getResponseHeadersAsLowercaseArray(response.getAllResponseHeaders());
	            contentType = getCaseInsensitiveHeader("content-type", responseHeaders);
	            if (contentType && (typeof contentType === "string") && model.isContentTypeImage(contentType)) {
	                response.responseType = "arraybuffer";
	            }
	        }
	        else if (response.readyState === 4) {
	            var oldTime = model.get("time");
	            var oldFailed = model.get("failed"); //these two properties are set before we get a chance to set oldResponseModel
	            model.setResponseTime(request.get("startTime"));
	            model.set("failed", false);

	            //Something went wrong
	            if (response.status === 0) {
	                var errorUrl = pm.envManager.getCurrentValue(request.get("url"));
	                model.trigger("failedRequest", errorUrl);
	                model.set("failed", true);
	                if(!pm.testRunner) {
	                    pm.tabManager.addReceivedResponseToTab(tabId, model.toJSON());
	                }
	                else {
	                    model.trigger("loadResponse", model);
	                }
	                return;
	            }
	            else {
	                var url = request.get("url");
	                var oldResponseModel = null;
	                if(!pm.testRunner) {
	                    if(tabId != pm.tabManager.currentTabId) {
	                        //response has to be loaded into a different tab
	                        //preserve old response so it can be restored
	                        oldResponseModel = model.clone();
	                        oldResponseModel.set("time", oldTime);
	                        oldResponseModel.set("failed", oldFailed);
	                    }
	                }

	                model.setResponseCode(response);
	                //time has been set earlier
	                model.setResponseData(response);
	                model.setHeaders(response);

	                responseHeaders = getResponseHeadersAsLowercaseArray(response.getAllResponseHeaders());
	                contentType = getCaseInsensitiveHeader("content-type", responseHeaders);
	                var language = 'html';

	                var responseLength = 0;
	                var contentLength = getCaseInsensitiveHeader("content-length", responseHeaders);
	                if(contentLength !== null) {
	                    responseLength = parseInt(contentLength);
	                }

	                var PRETTY_SIZE_THRESHOLD = 5000000;

	                var responsePreviewType = 'html'; //why?
	                model.set("forceNoPretty",false);
	                if (model.doesContentTypeExist(contentType)) {
	                    if (model.isContentTypeJavascript(contentType)) {
	                        language = 'javascript';
	                    }
	                    else if (model.isContentTypeXML(contentType)) {
	                        language = 'xml';
	                    }

	                    if (model.isContentTypeImage(contentType)) {
	                        responsePreviewType = 'image';
	                    }
	                    else if (model.isContentTypePDF(contentType) && response.responseType === "arraybuffer") {
	                        responsePreviewType = 'pdf';
	                    }
	                    else if (model.isContentTypePDF(contentType) && response.responseType === "text") {
	                        responsePreviewType = 'pdf';
	                    }
	                    else if (responseLength>PRETTY_SIZE_THRESHOLD) {
	                       model.set("forceNoPretty",true);
	                    }
	                    else {
	                        responsePreviewType = "html";
	                    }

	                }
	                else {
	                    if (languageDetection === 'javascript') {
	                        language = 'javascript';
	                    }
	                    else {
	                        language = 'html';
	                    }
	                }

	                model.set("language", language);
	                model.set("previewType", responsePreviewType);
	                model.set("rawDataType", response.responseType);
	                model.set("state", {size: "normal"});
	                model.set("empty", false);

	                var responseJson = model.toJSON();

	                /*Slightly different handling for electron and chrome*/
	                /*Need to get domain cookies every time in electron*/
	                if(postman_electron) {
	                  pm.cookieManager.getCookiesForUrl(request.get("url"), function(cookies) {
	                    model.set("cookies", cookies);
	                    responseJson = model.toJSON();
	                    if(!pm.testRunner) {
	                      pm.tabManager.addReceivedResponseToTab(tabId, responseJson);
	                      if(tabId == pm.tabManager.currentTabId) {
	                        //reload response
	                        pm.request.get("response").trigger("finishedLoadCookies");
	                      }
	                    }
	                    else {
	                        model.trigger("loadResponse", model);
	                    }
	                  });
	                }
	                else {
	                    if(pm.testRunner) {
	                        model.trigger("loadResponse", model);
	                    }
	                    else {
	                        pm.tabManager.addReceivedResponseToTab(tabId, responseJson);
	                        //if the response was for a different tab
	                        if(tabId != pm.tabManager.currentTabId) {
	                            model.set(oldResponseModel.toJSON());
	                        }
	                    }
	                }
	            }
	        }
	    },

	    clear: function() {
	        this.set({
	            "status": "",
	            "responseCode": {},
	            "time": 0,
	            "headers": [],
	            "cookies": [],
	            "mime": "",
	            "text": "",
	            "language": "",
	            "rawDataType": "",
	            "state": {
	                "size": "normal"
	            },
	            "previewType": "parsed",
	            "searchResultScrolledTo": -1,
	            "forceNoPretty": false,
	            "write": true,
	            "empty": false
	        });
	        this.trigger("clearResponse");
	    },

	    unpackResponseHeaders: function(data) {
	        if (data === null || data === "") {
	            return [];
	        }
	        else {
	            var vars = [], hash;
	            var hashes = data.split('\n');
	            var header;

	            for (var i = 0; i < hashes.length; i++) {
	                hash = hashes[i];
	                var loc = hash.search(':');

	                if (loc !== -1) {
	                    var name = $.trim(hash.substr(0, loc));
	                    var value = $.trim(hash.substr(loc + 1));
	                    var description = headerDetails[name.toLowerCase()] || "Custom header";
	                    header = {
	                        "name":name,
	                        "key":name,
	                        "value":value,
	                        "description":description
	                    };

	                    if (name.toLowerCase() === "link") {
	                        header.isLink = true;
	                    }

	                    vars.push(header);
	                }
	            }

	            return vars;
	        }
	    }
	});

	module.exports = {
	  Request: Request,
	  Response: Response
	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	var RequestBody = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            data: "",
	            transformedData: "",
	            dataToBeSent: "",
	            dataMode:"params",
	            isEditorInitialized:false,
	            codeMirror:false,
	            rawEditorType:"editor",
	            bodyParams: {},
	            editorMode:"html",
	            language:""
	        };
	    },

	    initialize: function() {

	    },

	    getFormDataForCurl: function() {
	        var dataAsObjects = this.get("dataAsObjects");
	        var kv;
	        var value;

	        var body = "";
	        for(var i = 0; i < dataAsObjects.length; i++) {
	            value = pm.envManager.getCurrentValue(dataAsObjects[i].value);
	            var optionalAtForFile = "";
	            if(dataAsObjects[i].type === "file") {
	                optionalAtForFile = "@";
	            }
	            body += " -F \"" + dataAsObjects[i].key + "=" + optionalAtForFile + value + "\"";
	        }

	        return body;
	    },

	    getBodyForCurl: function() {
	        var dataMode = this.get("dataMode");
	        var preview;

	        if (dataMode !== "params") {
	            preview = pm.envManager.getCurrentValue(this.get("dataAsPreview"));
	            return " -d '" + preview + "'";
	        }
	        else {
	            return this.getFormDataForCurl();
	        }
	    },

	    // Fixed
	    getBodyParamString:function (params) {
	        var paramsLength = params.length;
	        var paramArr = [];
	        for (var i = 0; i < paramsLength; i++) {
	            var p = params[i];
	            if (p.key && p.key !== "") {
	                paramArr.push(p.key + "=" + p.value);
	            }
	        }
	        return paramArr.join('&');
	    },

	    getDataMode:function () {
	        return this.get("dataMode");
	    },

	    loadData:function (mode, data, asObjects) {
	        // console.log("Load body data", mode, data, asObjects);
	        this.set("dataMode", mode);
	        this.set("asObjects", asObjects);

	        if (mode !== "raw") {
	            if (asObjects) {
	                var cData = _.clone(data);

	                if (mode === "params") {
	                    // Change made through an event in RequestBodyFormDataEditor
	                    this.set("data", cData);
	                    this.set("dataAsObjects", cData);
	                    this.set("dataToBeSent", cData);
	                    this.set("serializedData", cData);
	                }
	                else {
	                    this.set("data", cData);
	                    this.set("dataToBeSent", cData);
	                    this.set("dataAsObjects", cData);
	                }
	            }
	            else {
	                var params = getBodyVars(data, false);
	                var cParams = _.clone(params);
	                this.set("data", cParams);
	                this.set("dataToBeSent", cParams);
	                this.set("dataAsObjects", cParams);
	            }
	            this.trigger("change:dataAsObjects");
	        }
	        else {
	            //No need for objects
	            this.set("data", _.clone(data));
	            this.set("dataToBeSent", _.clone(data));
	        }

	        // console.log("loadData: dataToBeSent", this.get("dataToBeSent"));
	        this.trigger("dataLoaded", this);
	        this.trigger("change:data");
	    },

	    // TODO Store transformedData
	    getUrlEncodedBody: function() {
	        var rows, count, j;
	        var row, key, value;
	        var urlEncodedBodyData = "";
	        var transformedData = [];

	        rows = this.get("data");
	        count = rows.length;

	        if (count > 0) {
	            for (j = 0; j < count; j++) {
	                row = rows[j];
	                value = row.value;
	                key = row.key;
	                if(row.enabled===false) {
	                    //row is disabled. not adding
	                }
	                else {
	                    if (pm.settings.getSetting("trimKeysAndValues")) {
	                        value = $.trim(value);
	                    }

	                    value = pm.envManager.getCurrentValue(value);
	                    value = encodeURIComponent(value);
	                    value = value.replace(/%20/g, '+');

	                    key = pm.envManager.getCurrentValue(key);
	                    key = encodeURIComponent(key);
	                    key = key.replace(/%20/g, '+');

	                    if (pm.settings.getSetting("trimKeysAndValues")) {
	                        key = $.trim(key);
	                    }

	                    urlEncodedBodyData += key + "=" + value + "&";

	                    transformedData.push({
	                        "key": key,
	                        "value": value
	                    });
	                }
	            }

	            urlEncodedBodyData = urlEncodedBodyData.substr(0, urlEncodedBodyData.length - 1);

	            this.set("transformedData", transformedData);

	            return urlEncodedBodyData;
	        }
	        else {
	            return false;
	        }
	    },

	    // TODO Store transformedData
	    getFormDataBody: function() {
	        var rows, count, j;
	        var i;
	        var row, key, value;
	        var paramsBodyData = new FormData();
	        var transformedData = [];

	        rows = this.get("data");

	        if (rows) {
	            count = rows.length;
	        }
	        else {
	            count = 0;
	        }


	        if (count > 0) {
	            for (j = 0; j < count; j++) {
	                row = rows[j];
	                key = row.key;
	                if(row.enabled === false) {
	                    //this row is disabled. not adding
	                }
	                else {
	                    if (pm.settings.getSetting("trimKeysAndValues")) {
	                        key = $.trim(key);
	                    }

	                    key = pm.envManager.getCurrentValue(key);

	                    value = row.value;
	                    value = pm.envManager.getCurrentValue(value);

	                    if (pm.settings.getSetting("trimKeysAndValues")) {
	                        value = $.trim(value);
	                    }

	                    paramsBodyData.append(key, value);

	                    transformedData.push({
	                        "key": key,
	                        "value": value
	                    });
	                }
	            }

	            this.set("transformedData", transformedData);

	            return paramsBodyData;
	        }
	        else {
	            return false;
	        }
	    },

	    getDataAsKvPairs: function(dataPairs) {
	        var count = dataPairs.length;
	        var kvpairs = {};
	        for(var i = 0; i < count; i++) {
	            kvpairs[dataPairs[i].key] = dataPairs[i].value;
	        }

	        return kvpairs;
	    },

	    // Note: Used inside collection runner
	    // TODO Clean request body management first
	    // This is horribly wrong. Need to fix this properly
	    setDataForXHR: function() {
	        var mode = this.get("dataMode");
	        if (mode === "params") {
	            this.set("data", this.get("dataAsObjects"));
	            var formdata = this.getFormDataBody();
	            this.set("data", formdata);
	            this.set("dataToBeSent", formdata);
	        }
	        else if (mode === "urlencoded") {
	            var paramdata = this.getUrlEncodedBody();
	            // console.log("param data is", paramdata);
	            this.set("data", paramdata);
	            this.set("dataToBeSent", paramdata);
	        }
	        else if (mode === "raw") {
	            // TODO Store transformedData
	            var data = this.get("data"); //MUST be a string!
	            if(typeof data !== "string") {
	                data = "";
	            }

	            var transformedData = pm.envManager.getCurrentValue(data);
	            this.set("transformedData", transformedData);
	            this.set("dataToBeSent", transformedData);
	        }
	    }
	});

	module.exports = RequestBody;


/***/ },
/* 9 */
/***/ function(module, exports) {

	var PreRequestScripter = Backbone.Model.extend({
		defaults: function() {
			return {
				"sandbox": null
			};
		},

		runPreRequestScript: function(request, data, iteration, callback) {
			$("#prscript-error").hide();

			var prCode = request.get("preRequestScript");

			// Wrapper function
			var baseCode = "(function(){";
			baseCode += prCode;
			baseCode += "\n})()";

			if(prCode && prCode.length>1) {
				pm.tracker.trackEvent("request", "pre_request_script", "execute");
			}

			var selectedEnv = pm.envManager.get("selectedEnv");
			var selectedEnvJson = {};
			var globals = getKeyValPairsAsAssociativeArray(pm.envManager.get("globals").get("globals"));

			if (selectedEnv) {
				selectedEnvJson = getKeyValPairsAsAssociativeArray(selectedEnv.toJSON().values);
			}

			var environment = {
				"request": request.getForPrscript(), // Get separately
				"environment": selectedEnvJson,
				"globals": globals,
	            "data": data,
	            "iteration": iteration
			};

			var fileList = request.get("sandboxFiles");
			if(!postman_webkit && !postman_electron) {
				fileList = null;
			}

			this.postCode(baseCode, environment, fileList);

			this.listenToOnce(pm.mediator, "resultReceivedPrscript", function(data) {
				if (callback) {
					callback(data, "result");
				}
			});

			this.listenToOnce(pm.mediator, "resultErrorPrscript", function(data) {
				this.showPreRequestScriptError(data);
			});
		},

		postCode: function(code, environment, fileList) {
			var sandbox = this.get("sandbox");
			var message = {
				command: "runprscript",
				code: code,
				environment: environment,
				fileList: fileList,
				scriptType: "prscript"
			};

			sandbox.contentWindow.postMessage(message, '*');
		},

		initialize: function() {
			var model = this;
			model.sandboxWorking = false;

			var sandbox = document.getElementById("tester_sandbox");
			this.set("sandbox", sandbox);

			window.addEventListener('message', function(event) {
				var type = event.data.type;

				if (event.data.type === "resultReceivedPrscript") {
					pm.mediator.trigger("resultReceivedPrscript", event.data.result);
				}

				if (event.data.type === "resultErrorPrscript") {
					pm.mediator.trigger("resultErrorPrscript", event.data.errorMessage);
				}

				if (event.data.type === "sandboxEchoResponse") {
					model.sandboxWorking = true;
				}
				//All other events are handled in Tester.js
			});

			pm.mediator.on("runPreRequestScript", this.runPreRequestScript, this);

			pm.mediator.on("resultErrorPrscript", this.showPreRequestScriptError, this);
		},

		showPreRequestScriptError: function(msg) {
			//for collection runner
	        if(pm.isTestRunner) {
				clearTimeout(pm.globalPrScriptNotif);
				pm.globalPrScriptNotif = setTimeout(function() {
					pm.alerts.error("Something is wrong with your Pre-request scripts. Please fix them in the editor first. Message: " + msg, {
	          dedupeId: 'prscript-error'
	        });
					//hit new run directly :S
					$("a#new-test-run").click();
				}, 500);
			}
			else {
				$("#prscript-error").show().text("There was an error evaluating the Pre-request script. " + msg).css('display','inline-block');
			}
		}
	});

	module.exports = PreRequestScripter;


/***/ },
/* 10 */
/***/ function(module, exports) {

	/****

	collectionRequest = {
	    id: guid(),
	    headers: request.getPackedHeaders(),
	    url: url,
	    method: request.get("method"),
	    preRequestScript: request.get("preRequestScript"),
	    data: body.get("dataAsObjects"),
	    dataMode: body.get("dataMode"),
	    name: newRequestName,
	    description: newRequestDescription,
	    descriptionFormat: "html",
	    time: new Date().getTime(),
	    version: 2,
	    responses: []
	};

	*****/
	var PmCollection = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "",
	            "name": "",
	            "description": "",
	            "order": [],
	            "folders": [],
	            "requests": [],
	            "timestamp": 0,
	            "synced": false,
	            "syncedFilename": "",
	            "remote_id": 0,
	            "remoteLink": "",
	            "public": false,
	            "owner": "",
	            "subscribed": false,
	            "createdAt": null,
	            "updatedAt": null,
	            "write": true
	        };
	    },

	    toSyncableJSON: function() {
	        var j = this.getAsJSON();
	        j.synced = true;
	        return j;
	    },

	    setRequests: function(requests) {
	        this.set("requests", requests);
	    },

	    getRequestIndex: function(newRequest) {
	    	var requests = this.get("requests");
	    	var count = requests.length;
	    	var request;
	    	var found;
	    	var location;

	    	for(var i = 0; i < count; i++) {
	    		request = requests[i];
	    		if(request.id === newRequest.id) {
	    			found = true;
	    			location = i;
	    			break;
	    		}
	    	}

	    	if (found) {
	    		return location;
	    	}
	    	else {
	    		return -1;
	    	}
	    },

	    addRequest: function(newRequest) {
	        var location = this.getRequestIndex(newRequest);
	        var requests = this.get("requests");
	        if (location !== -1 && !(_.find(requests,newRequest))) {
	            //console.log("Request being added already exists. Not re-adding");
	            //requests.splice(location, 1, newRequest);
	        }
	        else {
	            requests.push(newRequest);
	        }
	    },

	    deleteRequest: function(requestId) {
	        var requests = _.clone(this.get("requests"));
	    	var location = arrayObjectIndexOf(requests, requestId, "id");
	    	if (location !== -1) {
	            this.removeRequestIdFromOrderOrFolder(requestId);
	    		requests.splice(location, 1);
	            this.set("requests", requests);
	    	}
	    },

	    updateRequest: function(newRequest) {
	    	var location = this.getRequestIndex(newRequest);
	    	var requests = this.get("requests");
	    	if (location !== -1) {
	    		requests.splice(location, 1, newRequest);
	    	}
	    },

	    getFolderById: function(folderId) {
	        var folders = _.clone(this.get("folders"));
	        var location = arrayObjectIndexOf(folders, folderId, "id");
	        return folders[location];
	    },

	    getFolders: function() {
	        var folders = _.clone(this.get("folders"));
	        return folders;
	    },


	    getRequestsInCollection: function() {
	        var requests = _.clone(this.get("requests"));
	        var order = _.clone(this.get("order"));
	        var orderedRequests = [];

	        var folders = this.get("folders");

	        //Always run folders in alphabetical order
	        if(folders) {
	            folders.sort(function(a,b) {
	                var name_a = a.name;
	                var name_b = b.name;
	                return sortAlphabeticalSelf(name_a, name_b);
	            });
	        }

	        var folderCount = folders.length;

	        if (folderCount > 0) {
	            for(var i = 0; i < folderCount; i++) {
	                folder = _.clone(folders[i]);
	                folderOrder = folder.order;
	                folderRequests = [];

	                for(var j = 0; j < folderOrder.length; j++) {
	                    id = folderOrder[j];

	                    var index = arrayObjectIndexOf(requests, id, "id");

	                    if(index >= 0) {
	                        folderRequests.push(requests[index]);
	                        requests.splice(index, 1);
	                    }
	                }

	                folderRequests = this.orderRequests(folderRequests, folderOrder);
	                orderedRequests = _.union(orderedRequests, folderRequests);
	            }

	            orderedRequests = _.union(orderedRequests, this.orderRequests(requests, order));
	        }
	        else {
	            orderedRequests = this.orderRequests(requests, order)
	        }

	        return orderedRequests;
	    },

	    getRequestsInFolder: function(folder) {
	        var folderOrder = folder.order;
	        var requests = _.clone(this.get("requests"));
	        var count = folderOrder.length;
	        var index;
	        var folderRequests = [];

	        for(var i = 0; i < count; i++) {
	            index = arrayObjectIndexOf(requests, folderOrder[i], "id");
	            if (index >= 0) {
	                folderRequests.push(requests[index]);
	            }
	        }

	        var orderedRequests = this.orderRequests(folderRequests, folder.order);

	        return orderedRequests;
	    },

	    addFolder: function(folder) {
	        var folders = _.clone(this.get("folders"));
	        folders.push(folder);
	        this.set("folders", folders);
	    },

	    hasFolderId: function(folderId) {
	        var folders = _.clone(this.get("folders"));
	        var index = arrayObjectIndexOf(folders, folderId, "id");
	        if(index===-1) return false;
	        return true;
	    },

	    editFolder: function(folder) {
	        function existingFolderFinder(f) {
	            return f.id === id;
	        }

	        var id = folder.id;
	        var folders = _.clone(this.get("folders"));
	        var index = arrayObjectIndexOf(folders, id, "id");

	        if (index !== -1) {
	            folders.splice(index, 1, folder);
	            this.set("folders", folders);
	        }
	    },

	    deleteFolder: function(id) {
	        var folders = _.clone(this.get("folders"));
	        var thisFolder = this.getFolderById(id);
	        var oldThis = this;
	        if(thisFolder && thisFolder.order) {
	            _.each(thisFolder.order, function(rid) {
	                oldThis.deleteRequest(rid);
	            });
	        }
	        //get request ids of folder
	        var index = arrayObjectIndexOf(folders, id, "id");
	        folders.splice(index, 1);
	        this.set("folders", folders);
	    },

	    getAsJSON: function() {
	        return {
	            "id": this.get("id"),
	            "name": this.get("name"),
	            "description": this.get("description"),
	            "order": this.get("order"),
	            "folders": this.get("folders"),
	            "timestamp": this.get("timestamp"),
	            "synced": this.get("synced"),
	            "remote_id": this.get("remote_id"),
	            "owner": this.get("owner"),
	            "sharedWithTeam": this.get("sharedWithTeam"),
	            "subscribed": this.get("subscribed"),
	            "remoteLink": this.get("remoteLink"),
	            "public": this.get("public"),
	            "createdAt": this.get("createdAt"),
	            "updatedAt": this.get("updatedAt"),
	            "write": this.get("write")
	        }
	    },

	    addRequestIdToFolder: function(id, requestId) {
	        //this.removeRequestIdFromOrderOrFolder(requestId);

	        var folders = _.clone(this.get("folders"));
	        var index = arrayObjectIndexOf(folders, id, "id");

	        var numFolders = folders.length;
	        for(var i=0;i<numFolders;i++) {
	            var requestIdInOrder = folders[i].order.indexOf(requestId);
	            if(folders[i].id===id) {
	                if(requestIdInOrder===-1) {
	                    folders[i].order.push(requestId);
	                }
	                //else the request already exists in the folder
	            }
	            //for all other folders, remove this request
	            else {
	                //same id exists in another folder
	                if(requestIdInOrder>=0) {
	                    folders[i].order.splice(requestIdInOrder, 1);
	                }
	            }
	        }

	        this.set("folders", folders);
	    },

	    removeRequestIdFromOrder: function(requestId) {
	        var order = this.get("order");
	        var idx = order.indexOf(requestId);
	        if(idx === -1) return -1;

	        order.splice(idx,1);
	        this.set("order", order);
	        return requestId;
	    },

	    requestExistsInCollectionRoot: function(requestId) {
	        var collectionOrder = this.get("order");
	        //only checks for root requests
	        if(collectionOrder.indexOf(requestId)!==-1) {
	            return true;
	        }

	        var collectionRequestIds = _.pluck(this.get("requests"), "id");
	        if(collectionRequestIds.indexOf(requestId)!==-1) {
	            return true;
	        }
	        return false;
	    },

	    requestExistsInCollectionFolders: function(requestId) {
	        var folders= this.get("folders");
	        //only checks for requests in folders
	        var numFolders = folders.length;

	        for(var i = 0; i < numFolders; i++) {
	            var indexInFolder = folders[i].order.indexOf(requestId);
	            if(indexInFolder >= 0) {
	                return folders[i].id;
	            }
	        }
	        return false;
	    },


	    addRequestIdToOrder: function(requestId) {
	        //this.removeRequestIdFromOrderOrFolder(requestId);

	        var order = _.clone(this.get("order"));
	        var requestIdInOrder = order.indexOf(requestId);
	        if(requestIdInOrder!==-1) {
	            return;
	        }
	        order.push(requestId);
	        this.set("order", order);
	    },

	    removeRequestIdFromOrderOrFolder: function(requestId) {
	        var order = _.clone(this.get("order"));
	        var indexInFolder;
	        var folders = _.clone(this.get("folders"));

	        var indexInOrder = order.indexOf(requestId);

	        if (indexInOrder >= 0) {
	            order.splice(indexInOrder, 1);
	            this.set("order", order);
	        }

	        for(var i = 0; i < folders.length; i++) {
	            indexInFolder = folders[i].order.indexOf(requestId);
	            if(indexInFolder >= 0) {
	                break;
	            }
	        }

	        if(indexInFolder >= 0) {
	            folders[i].order.splice(indexInFolder, 1);
	            this.set("folders", folders);
	        }
	    },

	    isUploaded: function() {
	        return this.get("remote_id") !== 0;
	    },

	    // Uses arrays
	    orderRequests: function() {

	        var folders = this.get("folders");
	        var requests = this.get("requests");

	        var folderCount = folders.length;
	        var folder;
	        var folderOrder;
	        var id;
	        var existsInOrder;
	        var folderRequests;

	        var newFolders = [];

	        for(var i = 0; i < folderCount; i++) {
	            folder = _.clone(folders[i]);
	            folderOrder = folder.order;
	            folderRequests = [];

	            for(var j = 0; j < folderOrder.length; j++) {
	                id = folderOrder[j];

	                var index = arrayObjectIndexOf(requests, id, "id");

	                if(index >= 0) {
	                    folderRequests.push(requests[index]);
	                    requests.splice(index, 1);
	                }
	            }

	            folder["requests"] = this.orderRequests(folderRequests, folderOrder);
	            newFolders.push(folder);
	        }

	        this.set("folders", newFolders);
	        this.set("requests", this.orderRequests(requests, this.get("order")));
	        return collection;
	    },

	    orderRequests: function(inRequests, order) {
	        var requests = _.clone(inRequests);

	        function requestFinder(request) {
	            return request.id === order[j];
	        }

	        if (order.length === 0) {
	            requests.sort(sortAlphabetical);
	        }
	        else {
	            var orderedRequests = [];
	            for (var j = 0, len = order.length; j < len; j++) {
	                var element = _.find(requests, requestFinder);
	                if(element) {
	                    orderedRequests.push(element);
	                }
	            }

	            requests = orderedRequests;
	        }

	        return requests;
	    }
	});

	module.exports = PmCollection;


/***/ },
/* 11 */
/***/ function(module, exports) {

	var Environment = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "",
	            "name": "",
	            "values": [],
	            "timestamp": 0,
	            "synced": false,
	            "syncedFilename": ""
	        };
	    },

	    toSyncableJSON: function() {
	        var j = this.toJSON();
	        j.synced = true;
	        return j;
	    },

	    getEnabledValues: function() {
	        var retVal = [];
	        var values = this.get("values");
	        if(values == null) {
	            values = [];
	        }
	        for(i=0;i<values.length;i++) {
	            if(!values[i].hasOwnProperty("enabled") || values[i].enabled==true) {
	                retVal.push(values[i]);
	            }
	        }
	        return retVal;
	    }
	});

	module.exports = Environment;


/***/ },
/* 12 */
/***/ function(module, exports) {

	var TCPReader = Backbone.Model.extend({
		defaults: function() {
			return {
				"socketId": null,
				"socketInfo": null,
				"host": "127.0.0.1",
				"port": "5005",
				"target_type": "history",
				"target_id": "",
				"status": "disconnected",
				"filters": {
					"url": "",
					"url_disabled": "",
					"methods": "",
					"status_codes": "",
					"content_type": ""
				}
			}
		},

		initialize: function() {
			var model = this;
			$("#modal-tcp-manager-electron").remove();
			pm.storage.getValue("readerSettings", function(settings) {
				if (settings) {
					model.set("host", settings.host);
					model.set("port", settings.port);
					model.set("target_type", settings.target_type);
					model.set("target_id", settings.target_id);

					model.set("filters", settings.filters);
				}
			});
		},

		save: function() {
			var readerSettings = {
				"readerSettings": {
					"host": this.get("host"),
					"port": this.get("port"),
					"target_type": this.get("target_type"),
					"target_id": this.get("target_id"),
					"filters": this.get("filters")
				}
			};

			pm.storage.setValue(readerSettings, function() {
			});

		},

		writeResponse: function(socketId, data, keepAlive) {
			if(postman_webkit || postman_macgap || postman_electron) {
				console.log("Cannot write socket response in webkit apps");
				return;
			}

			var model = this;
			var socket = chrome.socket;

			var header = stringToUint8Array(data);
			var outputBuffer = new ArrayBuffer(header.byteLength);
			var view = new Uint8Array(outputBuffer)
			var socketInfo = this.get("socketInfo");

			view.set(header, 0);

			function onAccept(acceptInfo) {
				model.readFromSocket(acceptInfo.socketId);
			}

			socket.write(socketId, outputBuffer, function(writeInfo) {
				socket.destroy(socketId);
				socket.accept(socketInfo.socketId, onAccept);
			});
		},

		isAllowed: function(request) {
			var filters = this.get("filters");
			var methods = filters.methods.split(",");

			function trim(s) {
				return s.trim().toUpperCase();
			}

			var filterMethods = _.each(methods, trim);

			var flagUrlContains = true;
			var flagUrlDisabled = true;
			var flagUrlMethods = true;

			var result;

			// console.log("Filters are", filters);

			if (filters.url === "") {
				flagUrlContains = true;
			}
			else {
				if (request.url.search(filters.url) >= 0) {
					flagUrlContains = true;
				}
				else {
					flagUrlContains = false;
				}
			}

			if (filters.url_disabled === "") {
				flagUrlDisabled = true;
			}
			else {
				if (request.url.search(filters.url_disabled) < 0) {
					flagUrlDisabled = true;
				}
				else {
					flagUrlDisabled = false;
				}
			}

			if (filterMethods.length > 0) {
				flagUrlMethods = _.indexOf(filterMethods, request.method.toUpperCase());
			}
			else {
				flagUrlMethods = true;
			}

			result = flagUrlMethods && flagUrlDisabled && flagUrlContains;
			return result;
		},

		addRequest: function(data) {
			var request = JSON.parse(data);

			var target_type = this.get("target_type");
			var collection;
			var target_id;

			// console.log("Settings are", this.toJSON());

			if (this.isAllowed(request)) {
				if (target_type === "history") {
					pm.history.addRequestFromJSON(data);
				}
				else {
					target_id = this.get("target_id");
					pm.collections.addRequestToCollectionId(request, target_id);
				}
			}
		},

		readFromSocket: function(socketId) {
			var model = this;

			var socket = chrome.socket;
			socket.read(socketId, function(readInfo) {
				try {
				    // console.log("READ", readInfo);
				    // Parse the request.
				    var data = arrayBufferToString(readInfo.data);			    
				    model.addRequest(data);
				    model.writeResponse(socketId, "received-request", false);
				}
				catch(e) {
				    // console.log("Something went wrong while reading a request", e);
				    model.writeResponse(socketId, "received-request", false);
				}
			});
		},

		onAccept: function(acceptInfo) {
			// console.log("ACCEPT", acceptInfo)
			this.readFromSocket(acceptInfo.socketId);
		},

		startListening: function() {
			var model = this;
			var socket = chrome.socket;
			var socketInfo;
			var socketId;

			var host = this.get("host");
			var port = this.get("port");

			function onAccept(acceptInfo) {
				// console.log("ACCEPT", acceptInfo)
				model.readFromSocket(acceptInfo.socketId);
			}

			chrome.socket.create('tcp', {}, function(_socketInfo) {
				model.set("socketInfo", _socketInfo);
				model.set("socketId", _socketInfo.socketId);

				socketInfo = _socketInfo;
				socketId = _socketInfo.socketId;

				model.set("status", "connected");

				socket.listen(socketInfo.socketId, host, port, 50, function(result) {
					socket.accept(socketInfo.socketId, onAccept);
				});
			});
		},

		stopListening: function() {
			if(postman_webkit || postman_electron) {
				console.log("Cannot stop listening to sockets in a webkit app");
				return;
			}
			chrome.socket.destroy(this.get("socketId"));
			this.set("status", "disconnected");
		},

		connect: function() {
			this.startListening();
			this.set("status", "connected");
		},

		disconnect: function() {
			this.stopListening();
			this.set("status", "disconnected");
			if(!pm.settings.getSetting("useInterceptor")) {
				$(".icon-navbar-interceptor").removeClass("active");
			}
		}
	});

	module.exports = TCPReader;


/***/ },
/* 13 */
/***/ function(module, exports) {

	var TCPReaderStatus = Backbone.View.extend({
		initialize: function() {
			var model = this.model;

			model.on("change", this.render, this);
			$('#tcp-reader-settings').on("click", function () {
				pm.tracker.trackEvent('proxy', 'click');
			    pm.mediator.trigger("showTCPManager");
			});
		},

		render: function() {
			var title = "Disconnected";
			var status = this.model.get("status");
			var model = this.model;
			$("#tcp-reader-status img").hide();
			if (status === "connected") {
				title = "Connected to " + model.get("host") + ":" + model.get("port");
				$("#tcp-reader-status img").show().attr("src", "img/v2/proxy_connected.png");
			}
			else if (status === "disconnected") {
				title = "Disconnected";
				$("#tcp-reader-status img").hide().attr("src", "img/v2/proxy.png");
			}

			$("#tcp-reader-status").attr("data-original-title", title);
		}
	});

	module.exports = TCPReaderStatus;


/***/ },
/* 14 */
/***/ function(module, exports) {

	var TCPManager = Backbone.View.extend({
		initialize: function() {
			var model = this.model;
			var view = this;

			this.modalId = "#modal-tcp-manager";
			if(postman_electron) {
				this.modalId += "-electron";
			}

			model.on("change", this.render, this);
			pm.mediator.on("refreshCollections", this.renderTargetMenu, this);
			pm.mediator.on("showTCPManager", this.show, this);

			$(this.modalId + " .nav li").on("click", function() {
				view.updateModel();
			});

			$("#tcp-manager-save-filters").on("click", function() {
				view.updateModel();
				pm.alerts.success("Saved");
			});

			$("#postman-proxy-target").on("change", function() {
				view.updateModel();
			});

			$("#tcp-manager-connect-toggle").on("click", function() {
				var status = model.get("status");

				if (status === "connected") {
					pm.tracker.trackEvent('proxy', 'disconnect');
	                view.disconnect();
				}
				else if (status === "disconnected") {
					pm.tracker.trackEvent('proxy', 'connect');
	                view.connect();
				}
			});

			this.render();
		},

		updateModel: function() {
			var model = this.model;

			var port = parseInt($("#postman-proxy-port").val(), 10);
			model.set("host", $("#postman-proxy-host").val());
			model.set("port", port);

			var target_value = $("#postman-proxy-target").val();
			var target_type;
			var target_id;

			if (target_value === "history" || target_value === "history_history") {
				target_type = "history";
				target_id = "history";
			}
			else if(target_value && target_value.indexOf("_")!==-1) {
				target_type = "collection";
				target_id = target_value.split("_")[1];
			}
			else {
				console.error("Invalid target for Proxy");
				return;
			}

			model.set("target_type", target_type);
			model.set("target_id", target_id);

			var filters = {
				"url": $("#postman-proxy-filter-url").val(),
				"url_disabled": $("#postman-proxy-filter-url-disabled").val(),
				"methods": $("#postman-proxy-filter-methods").val()
			};

			model.set("filters", filters);
			model.save();
		},

		renderTargetMenu: function() {
			var model = this.model;

			clearTimeout(model.tcpManagerMenuRendered);
			model.tcpManagerMenuRendered = setTimeout(function() {
				var collections = pm.collections.getAllCollections();
				var collection;
				$("#postman-proxy-target").empty();

				var history = {
					"proxy_target_value": "history",
					"name": "History",
					"id": "history"
				};

				$('#postman-proxy-target').append(Handlebars.templates.item_tcp_reader_target(history));

				for(var i = 0; i < collections.length; i++) {
					collection = _.clone(collections[i].toJSON());
					collection["proxy_target_value"] = "collection";
					collection["name"] = "Collection: " + collection["name"];
					$('#postman-proxy-target').append(Handlebars.templates.item_tcp_reader_target(collection));
				}

				var target_value = model.get("target_type") + "_" + model.get("target_id");
				$("#postman-proxy-target").val(target_value);
				//console.log("Setting proxy target to " + target_value);
			}, 500);
		},

		connect: function() {
			this.updateModel();
			this.model.connect();
			$(".icon-navbar-interceptor").addClass("active");
			$("#tcp-manager-connect-toggle").text("Disconnect");
		},

		disconnect: function() {
			this.model.disconnect();
			$("#tcp-manager-connect-toggle").text("Connect");
		},

		render: function() {
			var model = this.model;
			var status = model.get("status");

			if (status === "connected") {
				$(this.modalId + " .status").text("Connected");
				$(this.modalId + " .status").addClass("status-connected");
				$(this.modalId + " .status").removeClass("status-disconnected");
				$("#tcp-manager-connect-toggle").text("Disconnect");
			}
			else if (status === "disconnected") {
				$(this.modalId + " .status").text("Disconnected");
				$(this.modalId + " .status").removeClass("status-connected");
				$(this.modalId + " .status").addClass("status-disconnected");
				$("#tcp-manager-connect-toggle").text("Connect");
			}

			$("#postman-proxy-host").val(model.get("host"));
			$("#postman-proxy-port").val(model.get("port"));

			var target_value = model.get("target_type") + "_" + model.get("target_id");
			$("#postman-proxy-target").val(target_value);
			//console.log("Setting proxy target to " + target_value);

			var filters = model.get("filters");
			if(filters) {
				$("#postman-proxy-filter-url").val(filters.url);
				$("#postman-proxy-filter-url-disabled").val(filters.url_disabled);
				$("#postman-proxy-filter-methods").val(filters.methods);
			}
		},

		show: function() {
			$(this.modalId).modal("show");
		}
	});

	module.exports = TCPManager;


/***/ },
/* 15 */
/***/ function(module, exports) {

	var PostmanAPI = Backbone.Model.extend({
		defaults: function() {
			return {
				"api_url": pm.apiUrl
			}
		},

		initialize: function() {
			// console.log("This is going to be the awesome postman API!");
		},

		exchangeRefreshToken: function(successCallback, tryCount) {
			var oldThis = this;
			if(typeof tryCount === "undefined") {
				tryCount = 0;
			}
			console.log("Trying to exchangeRefreshToken");

			if(pm.user.get("id") == "0") {
				//no ID
				//ask them to login
				return;
			}

			var postUrl = pm.apiUrl + "/client-oauth2-refresh";
			postUrl += "?user_id=" + pm.user.get("id");


			var oldRefreshToken = pm.user.get("refresh_token");

			var parameters = {
				"grant_type": "refresh_token",
				"refresh_token": pm.user.get("refresh_token"),
				"access_token": pm.user.get("access_token")
			};

			$.ajax({
				type: 'POST',
				url: postUrl,
				data: parameters,
				success: function(data) {
					// console.log("Received refresh_token", data);
					if(data.hasOwnProperty("access_token")) {
						pm.user.setAccessToken(data);

						if (successCallback) {
							try { 
								oldThis.renewedToken(oldRefreshToken); //make call to remove old token
							}
							catch(e) {
								console.log("renewedToken call failed for rToken: " + oldRefreshToken);
							}
							successCallback();
						}
					}
					else {
						pm.mediator.trigger("invalidRefreshToken");
					}
				},
				error: function(jqXHR, textStatus, errorThrown) {
					if(textStatus === 'timeout') {
						//this will never be hit. jQuery has no timeout
						tryCount++;
						if(tryCount>3) {
							pm.mediator.trigger("invalidRefreshToken");
						} else {
							oldThis.exchangeRefreshToken(successCallback, tryCount);
						}
					} else {
						pm.mediator.trigger("invalidRefreshToken");
					}
				}
			})
		},

		renewedToken: function(oldRefreshToken) {
			var postUrl = pm.apiUrl + '/renewed-token';
			postUrl += "?user_id=" + pm.user.get("id");
			postUrl += "&access_token=" + pm.user.get("access_token");

			var parameters = {
				"old_refresh_token": oldRefreshToken
			};

			$.ajax({
				type: 'POST',
				url: postUrl,
				data: parameters,
				success: function() {
					console.log("Old rToken deleted");
				}
			})
		},

		logoutUser: function(userId, accessToken, successCallback) {
			var postUrl = pm.apiUrl + '/client-logout';
		    postUrl += "?user_id=" + userId;
		    postUrl += "&access_token=" + accessToken;

			$.ajax({
				type: 'POST',
				url: postUrl,
				success: function() {
					if (successCallback) {
						successCallback();
					}
				}
			})
		},

		getUsernameEmailForId: function(userId, successCallback) {
			var postUrl = pm.apiUrl + '/users/' + userId + '/username';
			if(userId == "0" || !userId) {
				//no valid ID to get username with
				return;
			}
			$.ajax({
				type: 'GET',
				url: postUrl,
				success: function(data) {
					if (successCallback) {
						successCallback(data);
					}
				},
				error: function() {
					if (successCallback) {
						successCallback({result: "fail"});
					}
				}
			})
		},

		recreateSyncUser: function(successCallback) {
			var uploadUrl = pm.apiUrl + '/sync-user-create?';
			if(pm.user.get("id") == "0") {
				return;
			}

			this.executeAuthenticatedRequest(function() {
				uploadUrl += "user_id=" + pm.user.get("id");
				uploadUrl += "&access_token=" + pm.user.get("access_token");

				$.ajax({
				    type:'POST',
				    url:uploadUrl,
				    success:function (data) {
				    	if (successCallback) {
				    		successCallback(data);
				    	}
				    },
				    error:function() {
				    	if (successCallback) {
				    		successCallback(null);
				    	}
				    }
				});
			});
		},

		/**
		 * Signs in with (username_email+password OR id+password)
		 * @param  {[type]} username_email  [username or email. Either this or ID is required]
		 * @param  {[type]} password        [required]
		 * @param  {[type]} id              [user id (numeric). Either this or username_password is requried]
		 */
		signInUser: function(username_email, password, id, successCallback) {
			var apiToUse = "/signin";
			if((!username_email || username_email == "") && id!=="") {
				apiToUse = "/signin_id";
			} 
			var postUrl = pm.apiUrl + apiToUse;
			var login_data = {
				"username" : username_email,
				"password" : password,
				"id": id
			}
			$.ajax({
				type: 'POST',
				url: postUrl,
				data: JSON.stringify(login_data),
				success: function(data) {
					if(!data.username_email && username_email) {
						data.username_email = username_email;
					}
					if (successCallback) {
						successCallback(data);
					}
				},
				error: function() {
					if (successCallback) {
						successCallback();
					}
				}
			})
		},

		signUpUser: function(name, email, username, password, syncEnabled, successCallback) {
			var postUrl = pm.apiUrl + '/signup';
			if(syncEnabled) {
				syncEnabled = "1";
			}
			else {
				syncEnabled = "0";
			}

			var signup_data = {
				"realname" : name,
				"email" : email,
				"username" : username,
				"password" : password,
				"sync_enabled": syncEnabled
			}

			$.ajax({
				type: 'POST',
				url: postUrl,
				data: JSON.stringify(signup_data),
				success: function(data) {
					if (successCallback) {
						successCallback(data);
					}
				},
				error: function() {
					if (successCallback) {
						successCallback();
					}
				}
			})
		},

	    isTokenValid: function() {
	    	//need not be coded in 2 places
	    	return pm.user.isTokenValid();
	    },

		executeAuthenticatedRequest: function(func) {
			var isTokenValid = this.isTokenValid();

			if (isTokenValid) {
				func();
			}
			else {
				this.exchangeRefreshToken(function() {
					func();
				});
			}
		},

		uploadCollection: function(collectionData, isPublic, successCallback) {
			var uploadUrl = pm.apiUrl + '/collections?is_public=' + isPublic;

			if (pm.user.isLoggedIn()) {
			    this.executeAuthenticatedRequest(function() {
			    	uploadUrl += "&user_id=" + pm.user.get("id");
			    	uploadUrl += "&access_token=" + pm.user.get("access_token");

			    	$.ajax({
			    	    type:'POST',
			    	    url:uploadUrl,
			    	    data:collectionData,
			    	    success:function (data) {
			    	    	if (successCallback) {
			    	    		successCallback(data);
			    	    	}
			    	    }
			    	});
			    });
			}
			else {
				$.ajax({
				    type:'POST',
				    url:uploadUrl,
				    data:collectionData,
				    success:function (data) {
				    	if (successCallback) {
				    		successCallback(data);
				    	}
				    }
				});
			}
		},

		getDirectoryCollections: function(startId, count, order, successCallback) {
			var getUrl = pm.apiUrl + "/collections";
			getUrl += "?user_id=" + pm.user.get("id");
			getUrl += "&access_token=" + pm.user.get("access_token");
			getUrl += "&start_id=" + startId;
			getUrl += "&count=" + count;
			getUrl += "&order=" + order;

			$.ajax({
			    type:'GET',
			    url:getUrl,
			    success:function (collections) {
			    	if (successCallback) {
			    		successCallback(collections);
			    	}
			    }
			});
		},

		disableSync: function(userId, access_token, successCallback, errorCallback) {
			if(!pm.user.isLoggedIn()) {
				return;
			}
			var uploadUrl = pm.apiUrl + "/disable-sync?";
			uploadUrl += "user_id=" + pm.user.get("id");
			uploadUrl += "&access_token=" + pm.user.get("access_token");
			$.ajax({
				type:'POST',
				url: uploadUrl,
				success:function (data) {
					if (successCallback) {
						successCallback(data);
					}
				},
				error: errorCallback
			});
		},

		sendUnsyncedChanges: function(userId, version, unsyncedChanges, successCallback, errorCallback) {
			if(!pm.user.isLoggedIn()) {
				return;
			}
			var uploadUrl = pm.apiUrl + "/save-unsynced-changes?";
			uploadUrl += "user_id=" + pm.user.get("id");
			uploadUrl += "&access_token=" + pm.user.get("access_token");
			$.ajax({
				type:'POST',
				url: uploadUrl,
				data: {
					version: version,
					unsynced_changes: unsyncedChanges
				},
				success:function (data) {
					if (successCallback) {
						successCallback(data);
					}
				},
				error: errorCallback
			});
		},

		getTeamCollections: function(userId, access_token, orgId, successCallback, failCallback) {
			if(!pm.user.isTeamMember()) return;

			/*var getUrl = pm.apiUrl + "/profile/team/collections";
			getUrl += "?user_id=" + pm.user.get("id");*/
			var newGetUrl = postman_syncserver_url + "/api/team/"+orgId;
			newGetUrl += "?user_id=" + pm.user.get("id") + "&access_token=" + access_token;

			$.ajax({
				url: newGetUrl,
				type: "GET",
				//headers: {"X-Access-Token": access_token},
				success: successCallback,
				error: failCallback
			});
		},

		getTeamUsers: function(userId, access_token, organization_id, successCallback) {
			if(!pm.user.isTeamMember()) return;

			var getUrl = pm.apiUrl + "/organizations/" + organization_id+" /users";
			getUrl += "?user_id=" + pm.user.get("id")+"&access_token=" + access_token;

			$.ajax({
				url: getUrl,
				type: "GET",
				success: successCallback
			});
		},

		subscribeToCollection: function(collectionId, userId, ownerId, successCallback) {
			if(!pm.user.isTeamMember()) return;

			var getUrl = postman_syncserver_url + "/api/collection/" + collectionId + "/subscribe";

			$.ajax({
				url: getUrl,
				type: "PUT",
				data: {"user_id": userId, "owner": ownerId},
				success: successCallback
			});
		},

		addCollectionToTeam: function(userId, access_token, collection_id, collection_name, collection_description, collection_owner_name, collection_owner_id, successCallback) {
			//this is not needed. using sync server to handle team dir
			return;
			if(!pm.user.isTeamMember()) return;

			var getUrl = pm.apiUrl + "/profile/team/collection";

			$.ajax({
				url: getUrl,
				type: "POST",
				data: {
					user_id: userId,
					collection_id: collection_id,
					collection_name: collection_name,
					collection_description: collection_description,
					collection_owner_name: collection_owner_name,
					collection_owner_id: collection_owner_id,
				},
				headers: {"X-Access-Token": access_token},
				success: successCallback
			});
		},

		updateCollectionToTeam: function(userId, access_token, collection_id, collection_name, collection_description, collection_owner_id, successCallback) {
			//this is not needed. using sync server to handle team dir
			return;
			if(!pm.user.isTeamMember()) return;

			var getUrl = pm.apiUrl + "/profile/team/collection-update/" + collection_id;

			$.ajax({
				url: getUrl,
				type: "POST",
				data: {
					user_id: userId,
					collection_id: collection_id,
					collection_name: collection_name,
					collection_description: collection_description,
					collection_owner_id: collection_owner_id
				},
				headers: {"X-Access-Token": access_token},
				success: successCallback
			});
		},

		deleteCollectionFromTeam: function(userId, access_token, collection_id, cb, cbf) {
			//this is not needed. using sync server to handle team dir
			return;
			if(!pm.user.isTeamMember()) return;

			var getUrl = pm.apiUrl + "/profile/team/collection/"+collection_id+"/"+userId;
			$.ajax({
				url: getUrl,
				type: "DELETE",
				headers: {"X-Access-Token": access_token},
				success: cb,
				failure: cbf
			});
		},

		downloadDirectoryCollection: function(link_id, successCallback) {
		    var getUrl = pm.apiUrl + "/collections/" + link_id;
		    getUrl += "?user_id=" + pm.user.get("id");
		    getUrl += "&access_token=" + pm.user.get("access_token");

		    $.get(getUrl, function (data) {
		    	if (successCallback) {
		    		successCallback(data);
		    	}
		    });
		},

		getUserPurchases: function(successCallback) {
			this.executeAuthenticatedRequest(function() {
				var user = pm.user;

				var getUrl = pm.apiUrl + "/users/" + user.get("id") + "/purchases";
				getUrl += "?user_id=" + user.get("id");
				getUrl += "&access_token=" + user.get("access_token");

				$.ajax({
				    type:'GET',
				    url:getUrl,
				    success:function (data) {
				    	if (successCallback) {
				    		successCallback(data);
				    	}
				    }
				});
			});
		},

		getUserCollections: function(successCallback, errorCb) {
			this.executeAuthenticatedRequest(function() {
				var user = pm.user;

				var getUrl = pm.apiUrl + "/users/" + user.get("id") + "/collections";
				getUrl += "?user_id=" + user.get("id");
				getUrl += "&access_token=" + user.get("access_token");

				$.ajax({
				    type:'GET',
				    url:getUrl,
				    success:function (data) {
				    	if (successCallback) {
				    		successCallback(data);
				    	}
				    },
				    error: function() {
				    	if(typeof errorCb === "function") {
				    		errorCb();
				    	}
				    }
				});
			});
		},

		getUserData: function(successCallback) {
			this.executeAuthenticatedRequest(function() {
				var user = pm.user;

				var getUrl = pm.apiUrl + "/users/" + user.get("id");
				getUrl += "?user_id=" + user.get("id");
				getUrl += "&access_token=" + user.get("access_token")
				try {
					getUrl += "&app_version=" + pm.app.getVersion();
				}
				catch(e) {
					//if manifest isnt loaded properly
					getUrl += "&app_version=unknown";
				}

				if(postman_electron) {
					getUrl += "&app_target=electron";
				}
				else {
					getUrl += "&app_target=chrome";
				}


				$.ajax({
				    type:'GET',
				    url:getUrl,
				    success:function (data) {
				    	if (successCallback) {
				    		successCallback(data);
				    	}
				    },
				    error: successCallback
				});
			});
		},

		getUserOrganizations: function(successCallback) {

			this.executeAuthenticatedRequest(function() {
				var user = pm.user;

				var getUrl = pm.apiUrl + "/users/" + user.get("id") + "/organizations";
				getUrl += "?user_id=" + user.get("id");
				getUrl += "&access_token=" + user.get("access_token");

				$.ajax({
					type:'GET',
					url:getUrl,
					success:function (data) {
						if (successCallback) {
							successCallback(data);
						}
					}
				});
			});
		},

		deleteSharedCollection: function(id, successCallback) {
			this.executeAuthenticatedRequest(function() {
				var user = pm.user;

				var deleteUrl = pm.apiUrl + "/users/" + user.get("id") + "/collections/" + id;
				deleteUrl += "?user_id=" + user.get("id");
				deleteUrl += "&access_token=" + user.get("access_token");

				$.ajax({
				    type:'DELETE',
				    url:deleteUrl,
				    success:function (data) {
				    	if (successCallback) {
				    		successCallback(data);
				    	}
				    }
				});
			});
		},

		getCollectionFromRemoteId: function(id, successCallback) {
			var getUrl = pm.apiUrl + "/collections/" + id;
			getUrl += "?id_type=remote&user_id=" + pm.user.get("id");
			getUrl += "&access_token=" + pm.user.get("access_token");

			$.get(getUrl, function (data) {
				if (successCallback) {
					successCallback(data);
				}
			});
		},

		postErrorToServer: function(msg, url, lineNumber, colNumber, stack, installationId, userId, currTime, version, accessToken) {
			var errorUrl = pm.apiUrl + "/app_error";
			if(userId=="0" || !userId) {
				return;
			}
			$.ajax({
				url: errorUrl,
				type: "POST",
				data: {
					msg: msg,
					url: url || "Custom message",
					line_number: lineNumber,
					col_number: colNumber,
					stack_trace: stack,
					installation_id: installationId,
					user_id: userId,
					timestamp: currTime + "",
					version: version
				},
				headers: {"X-Access-Token": accessToken},
				success: function() {
					console.log("Error message sent to server");
				}
			});
		},

		acceptSyncEula: function(userId, token, successCallback) {
			var getUrl = pm.apiUrl + "/sync-eula-accept";
			getUrl += "?user_id=" + userId;
			getUrl += "&access_token=" + token;

			$.post(getUrl, function (data) {
				if (successCallback) {
					successCallback(data);
				}
			});
		},

		//To be used when the base eula is shown
		//acceptBaseEula: function(userId, token, successCallback) {
		//	var getUrl = pm.apiUrl + "/base-eula-accept";
		//	getUrl += "?user_id=" + userId;
		//	getUrl += "&access_token=" + token;
		//
		//	$.post(getUrl, function (data) {
		//		if (successCallback) {
		//			successCallback(data);
		//		}
		//	});
		//},

		notifyServerOfVersionChange: function(newVersion) {
			var vUrl = pm.apiUrl + "/user_app_version";
			var user = pm.user;
			var id = user.get("id");
			if(id==0) return;
			var token = user.get("access_token");
			$.ajax({
				url: vUrl,
				type: "PUT",
				data: {
					version: newVersion,
					user_id: id
				},
				headers: {"X-Access-Token": token},
				success: function() {
				}
			});
		},

		getCollectionRevisions: function(collectionId, count, since_id, max_id, cb, cbf) {
	    var userId = pm.user.get("id");
	    var accessToken = pm.user.get("access_token");

	    if(!userId || !accessToken || !collectionId) {
	      cbf();
	    }

	    var getUrl = postman_syncserver_url +
	                '/api/collection/revisions/' + collectionId +
	                '?user_id=' + userId +
	                '&access_token=' + accessToken;

	    if(max_id) { getUrl += '&max_id=' + max_id; }
	    if(since_id) { getUrl += '&since_id=' + since_id; }
	    if(count) { getUrl += '&count=' + count; }

	    $.ajax({
	      url: getUrl,
	      type: 'GET',
	      success: cb,
	      error: cbf
	    });
	  },

	  getCollectionPermissions: function(collectionId, cb, cbf) {
	    var userId = pm.user.get("id");
	    var accessToken = pm.user.get("access_token");

	    if(!userId || !accessToken || !collectionId) {
	      cbf();
	    }

	    var getUrl = postman_syncserver_url +
	                '/api/collection/share/' + collectionId +
	                '?user_id=' + userId +
	                '&access_token=' + accessToken;

	    $.ajax({
	      url: getUrl,
	      type: 'GET',
	      success: cb,
	      error: cbf
	    });
	  }

	});

	module.exports = PostmanAPI;


/***/ },
/* 16 */
/***/ function(module, exports) {

	var InterceptorIntro = Backbone.View.extend({
		initialize: function() {
			var model = this.model;
			var view = this;

			$("#modal-interceptor-intro").on("shown", function () {
	            $("#interceptor-intro-name").focus();
	            pm.app.trigger("modalOpen", "#modal-interceptor-intro");
	        });

	        $("#modal-interceptor-intro").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-interceptor-install").on("click", function() {
	        	view.triggerInstall();
	        });

	        if(postman_electron) {
	        	$(".interceptor-opener").remove();
	        }
		},

		triggerInstall: function() {
			console.log("Trigger install");
			var url = "https://chrome.google.com/webstore/detail/" + postman_interceptor_id;
			window.open(url);
		}
	});

	module.exports = InterceptorIntro;


/***/ },
/* 17 */
/***/ function(module, exports) {

	var InterceptorCapture = Backbone.Model.extend({
		defaults: function() {
			return {
			}
		},

		initialize: function() {
			pm.mediator.on("onMessageExternal", this.onMessageExternal, this);
		},

		onMessageExternal: function(request, sender, sendResponse) {
			if(request.postmanMessage) {
				var useInterceptor = pm.settings.getSetting("useInterceptor");
				if (request.postmanMessage.type === "capturedRequest" && useInterceptor===true) {
					var requestObject = this.getRequestJSON(request.postmanMessage.request);


					var historyId = pm.history.addRequestFromRemote(requestObject);
					if(typeof sendResponse === "function") {
						sendResponse({"success": true});
					}

					pm.mediator.trigger('notification:add', this._prepareNotificationPayload(historyId));

				}
			}
		},

		_prepareNotificationPayload: function(historyId) {
			return {
				type: 'INTERCEPTOR_CAPTURE_HISTORY',
				id: historyId,
				timestamp: new Date().getTime()
			}
		},

		isUrlEncodedHeaderPresent: function(headers) {
			for(var i = 0; i < headers.length; i++) {
				if (headers[i].name.toLowerCase() === "content-type") {
					if (headers[i].value.search("urlencoded") >= 0) {
						return true;
					}
				}
			}

			return false;
		},

		getFormData: function(data) {
			var formData = [];
			for(var key in data) {
				if (data.hasOwnProperty(key)) {
					formData.push({
						"key": key,
						"value": data[key][0]
					})
				}
			}

			return formData;
		},

		getUrlEncodedData: function(data) {
			var urlencodedData = [];
			var i;
			for(var key in data) {
				if (data.hasOwnProperty(key)) {
					var itemLength = data[key].length;
					for(i=0;i<itemLength;i++) {
						urlencodedData.push({
							"key": key,
							"value": data[key][i]
						});
					}
				}
			}

			return urlencodedData;
		},

		getRawData: function(data) {
			return arrayBufferToString(ArrayBufferEncoderDecoder.decode(data));
		},

		getRequestJSON: function(request) {
			var requestObject = {
				"url": request.url,
				"method": request.method,
				"headers": packHeaders(request.requestHeaders),
				"data": null,
				"dataMode": "params",
	            "preRequestScript": request.preRequestScript
			};

			if (isMethodWithBody(request.method)) {
				if (request.requestBodyType === "formData") {
					if (this.isUrlEncodedHeaderPresent(request.requestHeaders)) {
						requestObject.dataMode = "urlencoded";
						requestObject.data = this.getUrlEncodedData(request.requestBody.formData);
					}
					else {
						requestObject.dataMode = "params";
						requestObject.data = this.getFormData(request.requestBody.formData);
					}

				}
				else {
					requestObject.dataMode = "raw";
					requestObject.data = this.getRawData(
						(request.requestBody)?
							((request.requestBody.rawData)?request.requestBody.rawData:""):
							""
					);
				}
			}

			return requestObject;
		}
	});

	module.exports = InterceptorCapture;


/***/ },
/* 18 */
/***/ function(module, exports) {

	var CurlCapture = Backbone.Model.extend({
		defaults: function() {
			return {
			}
		},

		initialize: function() {
			pm.mediator.on("onMessageExternal", this.onMessageExternal, this);
		},

		onMessageExternal: function(request, sender, sendResponse) {
			if(request.curlImportMessage) {
				var curlCommandToImport = request.curlImportMessage.curlText;
				this.importCurl(curlCommandToImport);
			}
		},

		importCurl: function(rawText) {
			var fileFormat = pm.collections.guessFileFormat(rawText);
			if(fileFormat===0) {
				pm.mediator.trigger("failedCollectionImport", "format not recognized");
				return;
			}
			pm.collections.importData(rawText, fileFormat);
		}
	});

	module.exports = CurlCapture;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var PmCollection = __webpack_require__(10);

	var PmCollections = Backbone.Collection.extend({
	    model: PmCollection,

	    isLoaded: false,
	    initializedSyncing: false,
	    syncFileTypeCollection: "collection",
	    syncFileTypeCollectionRequest: "collection_request",

	    overwriteCollectionQueue: [],

	    sorters: {
	        lastModifiedAsc: function(a, b){
	            return (
	                new Date(a.get("updatedAt")).getTime() > (new Date(b.get("updatedAt"))).getTime()
	            )
	        },
	        lastModifiedDesc: function(a, b){return (new Date(b.get("updatedAt"))).getTime() > (new Date(a.get("updatedAt"))).getTime()},
	        nameAsc: function(a, b){return a.get("name").toLowerCase() > b.get("name").toLowerCase()},
	        nameDesc: function(a, b){return b.get("name").toLowerCase() > a.get("name").toLowerCase()}
	    },

	    comparator: function(a, b) {
	        var counter;

	        var aName = a.get("name");
	        var bName = b.get("name");

	        if(aName==null) return -1;
	        if(bName==null) return 1;

	        if (aName.length > bName.length)
	            counter = bName.length;
	        else
	            counter = aName.length;

	        for (var i = 0; i < counter; i++) {
	            if (aName[i] == bName[i]) {
	                continue;
	            } else if (aName[i] > bName[i]) {
	                return 1;
	            } else {
	                return -1;
	            }
	        }
	        return 1;
	    },

	    initialize: function() {
	        this.loadAllCollections();
	        this.collectionIdUserMap = {};
	        // TODO Add events for in-memory updates
	        pm.appWindow.trigger("registerInternalEvent", "addedCollection", this.onAddedCollection, this);
	        pm.appWindow.trigger("registerInternalEvent", "updatedCollection", this.onUpdatedCollection, this);
	        pm.appWindow.trigger("registerInternalEvent", "deletedCollection", this.onDeletedCollection, this);

	        pm.appWindow.trigger("registerInternalEvent", "addedCollectionRequest", this.onAddedCollectionRequest, this);
	        pm.appWindow.trigger("registerInternalEvent", "updatedCollectionRequest", this.onUpdatedCollectionRequest, this);
	        pm.appWindow.trigger("registerInternalEvent", "deletedCollectionRequest", this.onDeletedCollectionRequest, this);
	        pm.appWindow.trigger("registerInternalEvent", "moveRequestToCollection", this.onMoveRequestToCollectionFromWindow, this);
	        pm.appWindow.trigger("registerInternalEvent", "moveRequestToFolder", this.onMoveRequestToFolderFromWindow, this);

	        pm.appWindow.trigger("registerInternalEvent", "addedFolder", this.onAddedFolder, this);
	        pm.appWindow.trigger("registerInternalEvent", "updatedFolder", this.onUpdatedFolder, this);
	        pm.appWindow.trigger("registerInternalEvent", "deletedFolder", this.onDeletedFolder, this);

	        pm.mediator.on("addDirectoryCollection", this.onAddDirectoryCollection, this);
	        pm.mediator.on("addResponseToCollectionRequest", this.addResponseToCollectionRequest, this);
	        pm.mediator.on("updateResponsesForCollectionRequest", this.updateResponsesForCollectionRequest, this);
	        pm.mediator.on("updateResponsesForCollectionRequestWithOptSync", this.updateResponsesForCollectionRequestWithOptSync, this);
	        pm.mediator.on("deletedSharedCollection", this.onDeletedSharedCollection, this);
	        pm.mediator.on("overwriteCollection", this.onOverwriteCollection, this);
	        pm.mediator.on("uploadAllLocalCollections", this.onUploadAllLocalCollections, this);

	        pm.mediator.on("shareError", this.onShareError, this);



	        //--Sync listeners---
	        pm.mediator.on("syncChangeReceived", this.onSyncChangeReceived, this);
	        pm.mediator.on("syncErrorReceived", this.onSyncErrorReceived, this);

	        this.on("unsubscribeFromCollection", this.unsubscribeFromCollection, this);

	        this.missingCollectionTimeouts = {};
	    },

	    unsubscribeFromCollection: function(collectionMeta) {
	        console.error("Wrong event triggered");
	    },

	    onShareError: function(verb, collectionId) {
	        if(verb==="share") {
	            //error while sharing
	            var collection = this.get("collectionId");
	            if(collection) {
	                collection.set("sharedWithTeam", false);
	            }
	        }
	        else if(verb==="unshare"){
	            var collection = this.get("collectionId");
	            if(collection) {
	                collection.set("sharedWithTeam", false);
	            }
	        }
	    },

	    getOwnerForCollection: function(collectionId) {
	        var owner = this.collectionIdUserMap[collectionId];
	        return (!!owner)?owner:0;
	    },

	    onAddedCollection: function(collection) {
	        this.add(collection, { merge: true });
	    },

	    onUpdatedCollection: function(collection) {
	        this.add(collection, { merge: true });
	        this.trigger("updateCollection");
	        pm.mediator.trigger("refreshCollections");
	        //pm.syncManager.addChangeset("collection","update",collection, null, true);

	        var collectionModel = this.get(collection.id);
	        pm.collections.trigger('updateCollectionMeta',collectionModel);
	    },

	    onDeletedCollection: function(id) {
	        this.remove(id);
	        //pm.syncManager.addChangeset("collection","destroy",{id:'id'}, null, true);
	    },

	    onAddedCollectionRequest: function(request) {
	        var collection = this.get(request.collectionId);

	        if (collection) {
	            collection.addRequest(request);
	            if(request.folder) {
	                this.moveRequestToFolderWithOptSync(request.id, request.folder, false, function(){});
	            }
	            else {
	                collection.addRequestIdToOrder(request.id);
	            }
	        }

	        this.trigger("addCollectionRequest", request, false, false);
	    },

	    onUpdatedCollectionRequest: function(request) {
	        var collection = this.get(request.collectionId);

	        if (collection) {
	            collection.updateRequest(request);
	            this.trigger("updateCollectionRequest", request, true);
	            pm.mediator.trigger("updateCollectionRequest", request);
	            //pm.syncManager.addChangeset("request","update",request, null, true);
	        }
	    },

	    onDeletedCollectionRequest: function(id) {
	        var request = this.getRequestById(id);
	        var collection = this.get(request.collectionId);

	        if (collection) {
	            collection.deleteRequest(id);
	            this.trigger("removeCollectionRequest", id);
	            //pm.syncManager.addChangeset("request","destroy",id, null, true);
	        }
	    },

	    onMoveRequestToCollectionFromWindow: function(rid, cid) {
	        this.moveRequestToCollectionWithOptSync(rid, cid, false);
	    },

	    onMoveRequestToFolderFromWindow: function(rid, fid) {
	        this.moveRequestToFolderWithOptSync(rid, fid, false);
	    },

	    onAddedFolder: function(collectionSent, folder) {
	        var collection = this.get(collectionSent.id);
	        if(collection) {
	            collection.addFolder(folder);
	            this.trigger("addFolder", collection, folder);
	            //pm.syncManager.addChangeset("folder","create",folder, null, true);
	        }
	    },

	    onUpdatedFolder: function(collectionSent, folder) {
	        var collection = this.get(collectionSent.id);
	        if(collection) {
	            collection.editFolder(folder);
	            this.trigger("updateFolder", collection, folder);

	            if(folder.hasOwnProperty("order")) {
	                this.trigger("sortRequestContainer", "folder", folder.id, folder.order);
	            }
	            //pm.syncManager.addChangeset("folder","update",folder, null, true);
	        }
	    },

	    onDeletedFolder: function(collectionSent, folderId) {
	        var collection = this.get(collectionSent.id);
	        if(collection) {
	            collection.deleteFolder(folderId);
	            this.trigger("deleteFolder", collection, folderId);
	            //pm.syncManager.addChangeset("folder","destroy",folderId, null, true);
	        }
	    },

	    onUploadAllLocalCollections: function() {

	        var uploaded = 0;
	        var count = this.models.length;

	        pm.tracker.trackEvent("collection", "share", "upload_all", count);

	        function callback() {
	            uploaded++;

	            if (uploaded === count) {
	                pm.mediator.trigger("refreshSharedCollections");
	            }
	        }

	        for(var i = 0; i < this.models.length; i++) {
	            this.uploadCollection(this.models[i].get("id"), false, false, callback);
	        }
	    },

	    getCollectionById: function(id) {
	        for(var i = 0; i < this.models.length; i++) {
	            if(id===this.models[i].get("id")) {
	                return this.models[i];
	            }
	        }
	        return null;
	    },

	    getCollectionByName: function (name) {
	        for(var i = 0; i < this.models.length; i++) {
	            if(name===this.models[i].get("name")) {
	                return this.models[i];
	            }
	        }
	        return null;
	    },

	    getAllCollections: function() {
	        return this.models;
	    },

	    getAllOwnCollections: function() {
	        return _.filter(this.models, function(c) {
	            var owner = c.get("owner");
	            if(!owner || (owner+""=="0") || owner==pm.user.id) return true;
	        });
	    },

	    // TODO
	    // This needs to be refactored to allow
	    // smoother collection loading
	    // Load all collections
	    loadAllCollections:function () {
	        var pmCollection = this;

	        this.startListeningForFileSystemSyncEvents();

	        pm.indexedDB.getCollections(function (items) {
	            var itemsLength = items.length;
	            var loaded = 0;

	            function onGetAllRequestsInCollection(collection, requests) {
	                //remove nonsense fields from each request
	                _.each(requests, function(request) {
	                    delete request.folderId; //this is not supported at all!
	                    delete request.collectionRequestId; //this is not supported at all!
	                    delete request.collection; //this is not supported at all!

	                    //remove duplicate responses
	                    if(request.responses instanceof Array) {
	                        request.responses = _.uniq(request.responses, function(item) {
	                            return item.id;
	                        });
	                    }
	                });

	                var c = new PmCollection(collection);
	                c.setRequests(requests);
	                pmCollection.add(c, {merge: true});

	                pmCollection.collectionIdUserMap[collection.id] = collection.owner;

	                loaded++;

	                for(var i = 0; i < requests.length; i++) {
	                    pm.mediator.trigger("addToURLCache", requests[i].url);
	                }

	                if (loaded === itemsLength) {
	                    pmCollection.isLoaded = true;
	                    pmCollection.trigger("startSync");
	                    if(pm.syncManager) pm.syncManager.trigger("itemLoaded","collections");
	                    pm.mediator.trigger("refreshCollections");
	                    pm.mediator.trigger("loadedCollections");
	                    pm.mediator.trigger("loadedCollectionsFromDB");
	                }
	            }

	            if (itemsLength === 0) {
	                pmCollection.isLoaded = true;
	                pmCollection.trigger("startSync");
	                pm.mediator.trigger("loadedCollectionsFromDB");
	                if(pm.syncManager) pm.syncManager.trigger("itemLoaded","collections");
	            }
	            else {
	                for (var i = 0; i < itemsLength; i++) {
	                    var collection = items[i];
	                    pm.indexedDB.getAllRequestsInCollection(collection, onGetAllRequestsInCollection);
	                }
	            }

	        });
	    },


	    startListeningForFileSystemSyncEvents: function() {
	        var pmCollection = this;
	        var isLoaded = pmCollection.isLoaded;
	        var initializedSyncing = pmCollection.initializedSyncing;

	        pm.mediator.on("initializedSyncableFileSystem", function() {
	            pmCollection.initializedSyncing = true;
	            pmCollection.trigger("startSync");
	        });

	        this.on("startSync", this.startSyncing, this);
	    },

	    startSyncing: function() {
	        var i;
	        var j;
	        var pmCollection = this;
	        var collection;
	        var requests;
	        var request;
	        var synced;
	        var syncableFile;

	        if (this.isLoaded && this.initializedSyncing) {

	            pm.mediator.on("addSyncableFileFromRemote", function(type, data) {
	                if (type === "collection") {
	                    pmCollection.onReceivingSyncableFileData(data);
	                }
	                else if (type === "collection_request") {
	                    pmCollection.onReceivingSyncableFileDataForRequests(data);
	                }
	            });

	            pm.mediator.on("updateSyncableFileFromRemote", function(type, data) {
	                if (type === "collection") {
	                    pmCollection.onReceivingSyncableFileData(data);
	                }
	                else if (type === "collection_request") {
	                    pmCollection.onReceivingSyncableFileDataForRequests(data);
	                }
	            });

	            pm.mediator.on("deleteSyncableFileFromRemote", function(type, id) {
	                if (type === "collection") {
	                    pmCollection.onRemoveSyncableFile(id);
	                }
	                else if (type === "collection_request") {
	                    pmCollection.onRemoveSyncableFileForRequests(id);
	                }
	            });

	            // And this
	            for(i = 0; i < this.models.length; i++) {
	                collection = this.models[i];
	                synced = collection.get("synced");

	                if (!synced) {
	                    this.addToSyncableFilesystem(collection.get("id"));
	                }

	                requests = collection.get("requests");

	                for(j = 0; j < requests.length; j++) {
	                    request = requests[j];

	                    if (request.hasOwnProperty("synced")) {
	                        if (!request.synced) {
	                            this.addRequestToSyncableFilesystem(request.id);
	                        }
	                    }
	                    else {
	                        this.addRequestToSyncableFilesystem(request.id);
	                    }
	                }
	            }
	        }
	        else {
	        }
	    },

	    onReceivingSyncableFileData: function(data) {
	        var collection = JSON.parse(data);
	        this.addCollectionFromSyncableFileSystem(collection);
	    },

	    onRemoveSyncableFile: function(id) {
	        this.deleteCollectionFromDataStore(id, false, function() {
	        });
	    },

	    onReceivingSyncableFileDataForRequests: function(data) {
	        var request = JSON.parse(data);
	        this.addRequestFromSyncableFileSystem(request);
	    },

	    onRemoveSyncableFileForRequests: function(id) {
	        this.deleteRequestFromDataStore(id, false, false, function() {
	        });
	    },

	    onOverwriteCollection: function(collection) {
	        this.overwriteCollection(collection);
	    },

	    onDeletedSharedCollection: function(collection) {
	        var c;
	        var pmCollection = this;

	        for(var i = 0; i < this.models.length; i++) {
	            var c = this.models[i];
	            if (c && (c.get("remote_id") === collection.remote_id)) {
	                var oldC = pmCollection.getJSONFromCollection(c);
	                c.set("remote_id", 0);
	                pmCollection.updateCollectionInDataStore(c.getAsJSON(), oldC, true, function (c) {
	                });
	                break;
	            }
	        }
	    },

	    sanitizeCollection: function(collectionJson) {
	        //make sure helper attributes is a string
	        if(collectionJson.requests) {
	            var numReq = collectionJson.requests.length;
	            for(i=0;i<numReq;i++) {
	                if(typeof collectionJson.requests[i].helperAttributes === "object") {
	                    collectionJson.requests[i].helperAttributes = JSON.stringify(collectionJson.requests[i].helperAttributes);
	                }

	                if(collectionJson.requests[i].responses && (collectionJson.requests[i].responses instanceof Array)) {
	                    var numResponse = collectionJson.requests[i].responses.length;
	                    for(j=0;j<numResponse;j++) {
	                        if(typeof collectionJson.requests[i].responses[j].request === "object") {
	                            collectionJson.requests[i].responses[j].requestObject = JSON.stringify(collectionJson.requests[i].responses[j].request);
	                            collectionJson.requests[i].responses[j].request = collectionJson.requests[i].id;
	                        }
	                    }
	                }
	            }
	        }

	        return collectionJson;
	    },

	    getAsSyncableFile: function(id) {
	        var collection = this.get(id);
	        var name = id + ".collection";
	        var type = "collection";

	        var data = JSON.stringify(collection.toSyncableJSON());

	        return {
	            "name": name,
	            "type": type,
	            "data": data
	        };
	    },

	    getRequestAsSyncableFile: function(id) {
	        var request = this.getRequestById(id);
	        var name = id + ".collection_request";
	        var type = "collection_request";

	        if(request!=null) {
	            request.synced = true;
	        }

	        var data = JSON.stringify(request);

	        return {
	            "name": name,
	            "type": type,
	            "data": data
	        };
	    },

	    addToSyncableFilesystem: function(id) {
	        var pmCollection = this;

	        var syncableFile = this.getAsSyncableFile(id);
	        pm.mediator.trigger("addSyncableFile", syncableFile, function(result) {
	            if(result === "success") {
	                pmCollection.updateCollectionSyncStatus(id, true);
	            }
	        });
	    },

	    removeFromSyncableFilesystem: function(id) {
	        var name = id + ".collection";
	        pm.mediator.trigger("removeSyncableFile", name, function(result) {
	        });
	    },

	    addRequestToSyncableFilesystem: function(id) {
	        var pmCollection = this;

	        var syncableFile = this.getRequestAsSyncableFile(id);
	        pm.mediator.trigger("addSyncableFile", syncableFile, function(result) {
	            if(result === "success") {
	                pmCollection.updateCollectionRequestSyncStatus(id, true);
	            }
	        });
	    },

	    removeRequestFromSyncableFilesystem: function(id) {
	        var name = id + ".collection_request";
	        pm.mediator.trigger("removeSyncableFile", name, function(resfult) {
	        });
	    },

	    getMissingServerRequest: function(requestId, owner) {
	        pm.syncManager.getEntityFromId("request",requestId, owner, null, function(res,owo) {
	            if(!res.data) {
	                pm.syncLogger.error("No requestData received for requestId: " + requestId+", owner=" + ownerId);
	                return;
	            }
	            res["collectionId"]=res.data.collection;
	            if(res.data.dataMode==="raw" && res.data.rawModeData) {
	                res.data.data = res.rawModeData;
	                delete res.data.rawModeData;
	            }
	            pm.collections.addFullCollectionRequest(res.data, null);
	        });
	    },

	    getMissingServerCollection: function(collectionId, owner) {
	        pm.syncManager.getEntityFromId("collection",collectionId, owner, null, function(res,owo) {
	            if(!res.data) {
	                pm.syncLogger.error("No collectionData received for collectionId: " + collectionId+", owner=" + owner);
	                return;
	            }
	            pm.collections.addFullCollection(res.data, true, null);
	            pm.syncManager.getFoldersForObject(res.data, res.data.owner, false);
	            pm.syncManager.getRequestsForObject(res.data, res.data.owner, res.data.id, "collection");

	        });
	    },


	    correctFolderOrder: function(id, serverOrder, localOrder, owner) {
	        var localFolder = pm.collections.getFolderById(id);
	        if(!localFolder) {
	            console.log("Fatal - tried to update folder order but can't find the folder locally");
	            return true; //clearChange should be true - this cannot be updated
	        }

	        //iterate through server order
	        var serverLength = serverOrder.length;
	        for(var i=0;i<serverLength;i++) {
	            if(localOrder.indexOf(serverOrder[i])==-1) {
	                //this request doesnt exist locally - get it
	                this.getMissingServerRequest(serverOrder[i], owner);
	            }
	        }

	        for(var i=0;i<localOrder.length; i++) {
	            if(serverOrder.indexOf(localOrder[i])==-1) {
	                //this request doesn't exist on the server - send it
	                pm.collections.resyncRequestId(localOrder[i]);
	            }
	        }

	        return false; //can resync the original order update
	    },

	    correctCollectionOrder: function(id, serverOrder, localOrder, owner) {
	        var localCollection = pm.collections.getCollectionById(id);
	        if(!localCollection) {
	            console.log("Fatal - tried to update folder order but can't find the folder locally");
	            return true; //clearChange should be true - this cannot be updated
	        }

	        var serverLength = serverOrder.length;
	        for(var i=0;i<serverLength;i++) {
	            if(localOrder.indexOf(serverOrder[i])==-1) {
	                //this request doesnt exist locally - get it
	                this.getMissingServerRequest(serverOrder[i], owner);
	            }
	        }

	        for(var i=0;i<localOrder.length; i++) {
	            if(serverOrder.indexOf(localOrder[i])==-1) {
	                //this request doesn't exist on the server - send it
	                pm.collections.resyncRequestId(localOrder[i]);
	            }
	        }

	        return false; //can resync the original order update
	    },

	    /* Base data store functions*/
	    addCollectionToDataStore: function(collectionJSON, sync, terminateTransaction, callback) {
	        var pmCollection = this
	        var justSubscribed = collectionJSON.justSubscribed;
	        delete collectionJSON.justSubscribed;
	        if(this.get(collectionJSON.id)) {
	            //pm.syncLogger.error("Fatal - readding same collection. How is this happening?");
	        }
	        pm.indexedDB.addCollection(collectionJSON, function (c) {
	            var collection = new PmCollection(c);
	            collection.justSubscribed = justSubscribed;
	            pmCollection.add(collection);//, {merge: true}); //Why??
	            pm.appWindow.trigger("sendMessageObject", "addedCollection", collection);

	            if(!collection.attributes.synced) {
	                pm.syncManager.addChangeset("collection","create",c, null, terminateTransaction);
	                if(terminateTransaction==false && c.hasOwnProperty("folders") && c.folders instanceof Array) {
	                    var numFolders = c.folders.length;
	                    var i;
	                    for(i=0;i<numFolders;i++) {
	                        pm.syncManager.addChangeset("folder","create", c.folders[i], null, false);

	                        //if there are requests, the commit will be sent after the requests have been added
	                        //if not we'll send it now
	                        if(i === numFolders-1 && c.hasRequests!==true) {
	                            pm.mediator.trigger("commitTransaction", c.id);
	                        }
	                    }
	                }
	            }

	            if (sync) {
	                pmCollection.addToSyncableFilesystem(collection.get("id"));
	            }

	            if (callback) {
	                callback(c);
	            }

	            pm.mediator.trigger("databaseOperationComplete");

	            pm.mediator.trigger("refreshCollections");
	            pm.mediator.trigger('syncOperationDone');
	        });
	    },

	    updateCollectionInDataStoreWithOptSync: function(collectionJSON, oldCollection, sync, toSync, callback) {
	        var pmCollection = this;

	        if(toSync) {
	            collectionJSON.updatedAt = Date.now();
	        }
	        pm.indexedDB.updateCollection(collectionJSON, oldCollection, toSync, function (c) {
	            var collection = pmCollection.get(c.id);
	            pmCollection.add(collection, {merge: true});
	            if(toSync) {
	                pm.appWindow.trigger("sendMessageObject", "updatedCollection", collection);
	            }
	            pm.mediator.trigger("databaseOperationComplete");
	            pm.mediator.trigger("refreshCollections");

	            if(toSync) {
	                var objectToUpdate = pm.syncManager.mergeEntitiesForUpdate(c, oldCollection);
	                pm.syncManager.addChangeset("collection","update",objectToUpdate, null, true);
	            }

	            if (sync && collection!=null) {
	                pmCollection.addToSyncableFilesystem(collection.get("id"));
	            }

	            if (callback) {
	                callback(c);
	            }
	        });
	    },

	    updateCollectionInDataStore: function(collectionJSON, oldCollection, sync, callback) {
	        this.updateCollectionInDataStoreWithOptSync(collectionJSON, oldCollection, sync, true, callback);
	    },

	    updateCollectionInDataStoreWithoutSync: function(collectionJSON, oldCollection, sync, callback) {
	        this.updateCollectionInDataStoreWithOptSync(collectionJSON, oldCollection, sync, false, callback);
	    },

	    mergeEntitiesForUpdate: function (newO, oldO) {
	        var ret = {};
	        ret["id"] = newO.id;
	        ret["owner"] = newO.owner;
	        for (key in oldO) {
	            ret[key] = oldO[key];
	        }
	        for (key in newO) {
	            ret[key] = newO[key];
	        }
	        return ret;
	    },

	    /**
	     * This is called when the sync server sends an update collection event
	     * @param collectionJSON
	     * @param oldCollection
	     * @param sync
	     * @param callback
	     * @returns {number}
	     */
	    updateRemoteCollectionInDataStore: function(collectionJSON, oldCollection, sync, callback) {
	        var pmCollection = this;
	        try {
	            oldCollection = pm.collections.getCollectionById(collectionJSON.id);
	            if(!oldCollection) {
	                pm.syncLogger.error("Updating remote collection failed. Collection id " + collectionJSON.id + " doesn't exist on this machine");
	                throw "Local collection not found";
	            }
	            oldCollection = oldCollection.getAsJSON();
	            collectionJSON = this.mergeEntitiesForUpdate(collectionJSON, oldCollection);
	            if(collectionJSON.hasOwnProperty("shared")) {
	                collectionJSON.sharedWithTeam = collectionJSON.shared;
	            }

	            pm.indexedDB.updateCollection(collectionJSON, oldCollection, false, function (c) {
	                var collection = new PmCollection(collectionJSON);//pmCollection.get(c.id);
	                var oldRequests = pm.collections.getCollectionById(c.id).get("requests");
	                collection.setRequests(oldRequests);

	                pmCollection.add(collection, {merge: true});

	                pm.appWindow.trigger("sendMessageObject", "updatedCollection", collection);
	                pm.mediator.trigger("databaseOperationComplete");
	                pm.mediator.trigger("refreshCollections");
	                pm.collections.trigger('updateCollectionMeta',collection)
	                pm.mediator.trigger('syncOperationDone');

	                if (sync) {
	                    pmCollection.addToSyncableFilesystem(collection.get("id"));
	                }

	                if (typeof callback === "function") {
	                    callback(c);
	                }
	            });
	        }
	        catch(e) {
	            pm.syncLogger.error("Update collection failed: "+e);
	            if(typeof callback === "function") {
	                callback();
	            }
	            return -1;
	        }
	        return 0;
	    },

	    deleteCollectionFromDataStoreWithOptSync: function(id, sync, toSync, callback) {
	        var pmCollection = this;

	        pm.indexedDB.deleteCollectionWithOptSync(id, toSync, function () {
	            pmCollection.remove(id);
	            if(toSync) {
	                pm.appWindow.trigger("sendMessageObject", "deletedCollection", id);
	            }
	            pm.mediator.trigger("databaseOperationComplete");
	            pm.mediator.trigger('syncOperationDone');
	            if (sync) {
	                pmCollection.removeFromSyncableFilesystem(id);
	            }

	            if(toSync) {
	                pm.syncManager.addChangeset("collection","destroy",{id:id}, null, true);
	            }

	            pm.api.deleteCollectionFromTeam(pm.user.id,  pm.user.get("access_token"), id, function() {
	                //console.log("Deleted from team");
	            }, function() {
	                //console.log("Could not delete collection from team");
	            });

	            pm.indexedDB.getAllRequestsForCollectionId(id, function(requests) {
	                var deleted = 0;
	                var requestCount = requests.length;
	                var request;
	                var i;

	                if (requestCount > 0) {
	                    for(i = 0; i < requestCount; i++) {
	                        request = requests[i];

	                        pm.indexedDB.deleteCollectionRequestWithOptSync(request.id, false, function (requestId) {
	                            deleted++;

	                            pm.mediator.trigger("databaseOperationComplete");

	                            if (sync) {
	                                pmCollection.removeRequestFromSyncableFilesystem(requestId);
	                            }


	                            if (deleted === requestCount) {
	                                pm.mediator.trigger("refreshCollections");
	                                if (callback) {
	                                    callback();
	                                }
	                            }
	                        });
	                    }
	                }
	                else {
	                    if (callback) {
	                        callback();
	                    }
	                }
	            });
	        });
	    },

	    deleteCollectionFromDataStore: function(id, sync, callback) {
	        //Children shouldn't be deleted
	        this.deleteCollectionFromDataStoreWithOptSync(id, sync, false, callback);
	    },

	    getJSONFromCollection: function(collection) {
	        return {
	            "id": collection.attributes.id,
	            "name": collection.attributes.name,
	            "description": collection.attributes.description,
	            "order": collection.attributes.order,
	            "folders": collection.attributes.folders,
	            "timestamp": collection.attributes.timestamp,
	            "synced": collection.attributes.synced,
	            "owner": collection.attributes.owner,
	            "remote_id": collection.attributes.remote_id,
	            "remoteLink": collection.attributes.remoteLink,
	            "write": collection.attributes.write
	        }
	    },

	    getJSONFromRequest: function(collectionRequest) {
	        if(!collectionRequest) return null;

	        return {
	            "collectionId": collectionRequest["collectionId"],
	            "data": _.clone(collectionRequest["data"]),
	            "dataMode": collectionRequest["dataMode"],
	            "description": collectionRequest["description"],
	            "headers": collectionRequest["headers"],
	            "id": collectionRequest["id"],
	            "method": collectionRequest["method"],
	            "name": collectionRequest["name"],
	            "pathVariables": _.clone(collectionRequest["pathVariables"]),
	            "preRequestScript": collectionRequest["preRequestScript"],
	            "responses": _.clone(collectionRequest["responses"]),
	            "tests": collectionRequest["tests"],
	            "time": collectionRequest["time"],
	            "url": collectionRequest["url"],
	            "version": collectionRequest["version"]
	        }
	    },

	    addRequestToDataStoreWithOptSync: function(request, sync, toSync, syncImmediately, callback) {
	        var pmCollection = this;

	        //this property is only used for callback. to trigger CommitTransaction after the last request has been sent
	        var requestToSave = _.clone(request);
	        delete request.isLastRequest;

	        if(!request.collectionId) {
	            request.collectionId = request.collection;
	        }

	        pm.indexedDB.addCollectionRequest(request, toSync, function (req) {
	            pm.mediator.trigger("addToURLCache", request.url);

	            var collection = pmCollection.get(request.collectionId);

	            pm.mediator.trigger("databaseOperationComplete");

	            if (collection) {
	                var cRequestIds = _.pluck(collection.get("requests"),"id");
	                if(cRequestIds.indexOf(request.id)==-1) {
	                    collection.addRequest(request);
	                    if(toSync) {
	                        pm.appWindow.trigger("sendMessageObject", "addedCollectionRequest", request);
	                        collection.set("updatedAt", Date.now());
	                    }
	                }
	            }

	            if(toSync) {
	                pm.syncManager.addChangeset("request","create",req, null, syncImmediately);


	                //sync responses as well
	                var responses = req.responses || [];
	                for(var i=0;i<responses.length;i++) {
	                    var responseToSync = _.cloneDeep(responses[i]); //cloneDeep so that the .request object's headers and data props are also cloned

	                    responseToSync.owner = req.owner;
	                    if(typeof responseToSync.request === "object" && !responseToSync.requestObject) {
	                        responseToSync.requestObject = JSON.stringify(responseToSync.request);
	                    }
	                    responseToSync.request = req.id;
	                    responseToSync.collectionId = req.collectionId;
	                    responseToSync.folder = req.folder;
	                    if(syncImmediately == false) {
	                        pm.syncManager.addChangeset("response", "create", responseToSync, null, false);
	                    }
	                    else {
	                        setTimeout(function (response) {
	                            return function () {
	                                pm.syncManager.addChangeset("response", "create", response, null, true);
	                            }
	                        }(responseToSync), 500);
	                    }

	                }
	            }

	            if (sync) {
	                pmCollection.addRequestToSyncableFilesystem(request.id);
	            }

	            if (callback) {
	                callback(requestToSave);
	            }
	        });
	    },

	    /**
	     *
	     * @param request: the request JSON
	     * @param sync: sync param for google drive
	     * @param syncImmediately whether the request change is sent to the anakin server immediately, or added to a batch
	     * @param callback
	     */
	    addRequestToDataStore: function(request, sync, syncImmediately, callback) {
	        this.addRequestToDataStoreWithOptSync(request,sync,true, syncImmediately, callback);
	    },

	    addRemoteRequestToDataStore: function(request, sync, callback) {
	        this.addRequestToDataStoreWithOptSync(request, sync, false, true, callback);
	    },

	    updateRequestInDataStore: function(request, oldRequest, sync, callback, toSync) {
	        var pmCollection = this;

	        if (!request.name) {
	            request.name = request.url;
	        }

	        //save request in tab
	        if(!pm.testRunner && pm.tabManager.requestTabMap[request.id]) {
	            //the request is already open in a tab
	            var tabId = pm.tabManager.requestTabMap[request.id];
	            pm.tabManager.updateRequestForTab(request, tabId);
	        }

	        if(!request.collectionId && request.collection) {
	            request.collectionId = request.collection;
	        }


	        pm.indexedDB.updateCollectionRequest(request, oldRequest, toSync, function (req) {
	            var collection = pmCollection.get(request.collectionId);


	            if (collection) {
	                collection.updateRequest(request);
	                pm.appWindow.trigger("sendMessageObject", "updatedCollectionRequest", request);
	                if(toSync) {
	                    collection.set("updatedAt", Date.now());
	                }
	            }

	            pm.mediator.trigger("databaseOperationComplete");

	            if(toSync) {
	                var objectToUpdate = pm.syncManager.mergeEntitiesForUpdate(req, oldRequest);
	                //ensure dataMode is present
	                if(req.dataMode) objectToUpdate.dataMode = req.dataMode;
	                if(collection) {
	                    objectToUpdate.owner = collection.get("owner");
	                    objectToUpdate.collectionId = collection.id;
	                }
	                pm.syncManager.addChangeset("request","update",objectToUpdate, null, true);
	            }


	            if (sync) {
	                pmCollection.addRequestToSyncableFilesystem(request.id);
	            }

	            if (callback) {
	                callback(request);
	            }
	        });
	    },

	    deleteRequestFromDataStoreWithOptSync: function(id, sync, syncCollection, toSync, callback) {
	        var pmCollection = this;

	        var request = this.getRequestById(id);

	        var targetCollection;

	        if (request) {
	            targetCollection = this.get(request.collectionId);
	        }

	        pm.indexedDB.deleteCollectionRequestWithOptSync(id, toSync, function () {
	            if (targetCollection) {
	                if(toSync) {
	                    targetCollection.set("updatedAt", Date.now());
	                }
	                var oldCollection = targetCollection.getAsJSON();
	                targetCollection.deleteRequest(id);
	                collection = targetCollection.getAsJSON();
	                pm.mediator.trigger("databaseOperationComplete");
	                if (sync) {
	                    pmCollection.removeRequestFromSyncableFilesystem(id);
	                    if(toSync) {
	                        pm.appWindow.trigger("sendMessageObject", "deletedCollectionRequest", id);
	                    }
	                }

	                if(toSync) {
	                    pm.syncManager.addChangeset("request","destroy",{id:id, owner: collection.owner}, null, true);
	                }

	                if(callback) {
	                    callback();
	                }

	                // A request deletion should never cause a collection update in sync
	                pmCollection.updateCollectionInDataStoreWithoutSync(collection, oldCollection, syncCollection, function(c) {
	                });

	            }
	            else {
	                if (sync) {
	                    pmCollection.removeRequestFromSyncableFilesystem(id);
	                }

	                if(callback) {
	                    callback();
	                }
	            }
	        });
	    },

	    deleteRequestFromDataStore: function(id, sync, syncCollection, callback) {
	        this.deleteRequestFromDataStoreWithOptSync(id,sync,syncCollection, true, callback);
	    },

	    /* Finish base data store functions*/

	    // Get collection by folder ID
	    getCollectionForFolderId: function(id) {
	        function existingFolderFinder(r) {
	            return r.id === id;
	        }

	        for(var i = 0; i < this.length; i++) {
	            var collection = this.models[i];
	            var folders = collection.get("folders");
	            var folder = _.find(folders, existingFolderFinder);
	            if (folder) {
	                return collection;
	            }
	        }

	        return null;
	    },

	    // Add collection from modal
	    addCollection:function (name, description) {
	        var pmCollection = this;

	        var collection = {};

	        if (name) {
	            collection.id = guid();
	            collection.name = name;
	            collection.description = description;
	            collection.order = [];
	            collection.createdAt = collection.updatedAt = collection.timestamp = Date.now();
	            collection.owner = pm.user.id;
	            collection.sharedWithTeam = false;
	            pmCollection.collectionIdUserMap[collection.id] = pm.user.id;
	            pmCollection.addCollectionToDataStore(collection, true, true);
	        }
	    },

	    resyncCollectionId: function(collectionId, syncImmediately) {
	        var collectionModel = pm.collections.getCollectionById(collectionId);
	        if(!collectionModel) {
	            console.log("Could not find collection. Have to delete change :(");
	            return true;
	        }

	        var collection = collectionModel.getAsJSON();
	        if(collection.owner == 0 || collection.owner=="0") {
	            collection.owner = pm.user.id;
	        }
	        //Why? If the collection was not found, it's always this user's
	        /*if(collection.owner !== pm.user.id) {
	            console.log("Only the owner can recreate the lost objects. Updating collection..");
	            return this.updateCollectionToRemote(collectionId, syncImmediately);
	        }*/

	        pm.syncManager.addChangeset("collection","create",collection, null, syncImmediately, false);

	        //send all folders
	        var numFolders = collection.folders?collection.folders.length:0;
	        for(var i=0;i<numFolders;i++) {
	            var folder = collection.folders[i];
	            this.resyncWholeFolder(folder, false);
	        }

	        //send all requests
	        var order = collection.order || [];
	        for(var i=0;i<order.length;i++) {
	            this.resyncRequestId(collection.order[i], false);
	        }

	        //trigger the stream
	        //console.log("Manually begin stream: " + collectionId);
	        return true;
	        //no need for all these stupid hacks
	        pm.mediator.trigger("beginUnsyncedStream", false, collectionId, false);


	        //delete the importChange
	        var oldChanges = pm.localChanges.get("unsyncedChanges");
	        var newChanges = [];
	        var numChanges = oldChanges.length;
	        for(i=0;i<numChanges;i++) {
	            if(oldChanges[i].verb==="importCollection" && oldChanges[i].stream===collectionId) {

	            }
	            else {
	                newChanges.push(oldChanges[i]);
	            }
	        }
	        pm.localChanges.set("unsyncedChanges", newChanges);
	        return true;
	    },

	    resyncCollectionByUser: function(id) {
	        var collection = this.getCollectionById(id);
	        if(!collection) {
	            return;
	        }
	        else {
	            if (collection.get("subscribed") === true && collection.get("write")==false) {
	                //resync folders and requests ONLY
	                collection = collection.toJSON();
	                pm.syncManager.addChangeset("collection","update",collection, null, false, true);

	                var numFolders = collection.folders?collection.folders.length:0;
	                for(var i=0;i<numFolders;i++) {
	                    var folder = collection.folders[i];
	                    this.updateFolderToRemote(folder, false, false);
	                }

	                var order = collection.order || [];
	                for(var i=0;i<order.length;i++) {
	                    this.resyncRequestId(collection.order[i], false, true);
	                }

	                //pm.mediator.trigger("beginUnsyncedStream", false, id, false);
	            }
	            else {
	                //resync whole collection
	                this.updateCollectionToRemote(id, false);
	            }
	        }
	    },

	    /**
	     * This takes a local collection, and calls PUT /collection on the remote server to update the order
	     */
	    updateCollectionToRemote: function(collectionId, syncImmediately) {
	        var collectionModel = pm.collections.getCollectionById(collectionId);
	        if(!collectionModel) {
	            console.log("Could not find collection");
	            return true;
	        }

	        var collection = collectionModel.getAsJSON();

	        pm.syncManager.addChangeset("collection","update",collection, null, syncImmediately, false);

	        var numFolders = collection.folders?collection.folders.length:0;
	        for(var i=0;i<numFolders;i++) {
	            var folder = collection.folders[i];
	            this.updateFolderToRemote(folder, false, false);
	        }

	        var order = collection.order || [];
	        for(var i=0;i<order.length;i++) {
	            this.resyncRequestId(collection.order[i], syncImmediately, true);
	        }

	        //return true
	        //trigger the stream
	        pm.mediator.trigger("beginUnsyncedStream", false, collectionId, false);
	        return true;
	    },

	    resyncFolderId: function(fid, syncImmediately) {
	        var folder = pm.collections.getFolderById(fid);
	        if(!folder) {
	            return true;
	        }
	        if(folder.owner === "0" || folder.owner === 0) {
	             folder.owner = pm.user.id;
	        }
	        //never sync immediately if the queue 
	        this.resyncWholeFolder(folder, syncImmediately, false);
	    },

	    resyncWholeFolder: function(folder, syncImmediately) {
	        if(typeof syncImmediately === "undefined") {
	            syncImmediately = true;
	        }
	        if(!folder) {
	            //no folder id passed
	            return true;
	        }

	        if(folder.owner == 0 || folder.owner=="0" || !folder.owner) {
	            folder.owner = pm.user.id;
	        }

	        /*if(folder.owner !== pm.user.id) {
	            console.log("Only the owner can recreate the lost objects");
	            return this.updateFolderToRemote(folder.id, syncImmediately, true);
	        }*/

	        pm.syncManager.addChangeset("folder","create",folder, null, syncImmediately, false);
	        var order = folder.order || [];
	        for(var i=0;i<order.length;i++) {
	            //even if the folder is synced immediately, the request has to wait for the folder
	            this.resyncRequestId(folder.order[i], false, false); //why does this need to be true?
	        }

	        return true;
	    },

	    /**
	     * This takes a local collection, and calls PUT /collection on the remote server to update the order
	     */
	    updateFolderToRemote: function(fid, syncImmediately, startStream) {
	        if(typeof syncImmediately === "undefined") {
	            syncImmediately = true;
	        }
	        if(typeof startStream === "undefined") {
	            startStream = true;
	        }
	        var folder = fid;
	        if(typeof fid === "string") {
	            folder = pm.collections.getFolderById(fid);
	        }
	        if(!folder) {
	            return;
	        }
	        if(folder.owner === "0" || folder.owner === 0) {
	            folder.owner = pm.user.id;
	        }

	        /*if(folder.owner !== pm.user.id) {
	            console.log("Only the owner can recreate the lost objects");
	            return false;
	        }*/

	        pm.syncManager.addChangeset("folder","update",folder, null, syncImmediately, false);

	        var order = folder.order || [];
	        for(var i=0;i<order.length;i++) {
	            this.resyncRequestId(folder.order[i], syncImmediately, true);
	        }

	        /*if(startStream) {
	            pm.mediator.trigger("beginUnsyncedStream", false, folder.collectionId, false);
	        }*/
	        return true;
	    },

	    /**
	     *
	     * @param rid
	     * @param syncImmediately
	     * @param update - if true, the client sends update instead of create
	     * @returns {boolean}
	     */
	    resyncRequestId: function(rid, syncImmediately, update) {
	        if(typeof syncImmediately === "undefined") {
	            syncImmediately = true;
	        }
	        if(typeof update === "undefined") {
	            update = false;
	        }
	        var request = pm.collections.getRequestById(rid);
	        if(!request) {
	            //cannot find request. have to clear the change
	            //pm.syncLogger.error("Could not find request for rid = " + rid + ". Clearing change..");
	            return true;
	        }
	        if(!request.owner || request.owner === "0" || request.owner === 0) {
	            request.owner = pm.collections.getOwnerForCollection(request.collectionId);
	        }
	        if(request.owner == 0 || request.owner=="0") {
	            request.owner = pm.user.id;
	        }
	        /*if((request.owner !== pm.user.id) &&
	            !(pm.collections.getOwnerForCollection(request.collectionId) == pm.user.id)) {
	            console.log("Only the owner can recreate the lost objects. Updating instead..");
	            update = true;
	        }*/

	        //explicitly set folder to null to make sure the request moves to the collection
	        //WHY is this needed??
	        if(!request.hasOwnProperty("folder")) {
	            request["folder"] = null;
	            request["folderId"] = null;
	        }

	        var method = (update?"update":"create");
	        var numResponses = request.responses?request.responses.length:0;

	        pm.syncManager.addChangeset("request", method, request, null, syncImmediately, false);
	        for(var i=0;i<numResponses;i++) {
	            var responseToAdd = request.responses[i];
	            responseToAdd.requestObject = JSON.stringify(responseToAdd.request);
	            responseToAdd.request = request.id;
	            responseToAdd.collection = request.collection;
	            responseToAdd.collectionId = request.collectionId;
	            responseToAdd.owner = request.owner;
	            if(request.folder) {
	                responseToAdd.folder = request.folder;
	            }
	            pm.syncManager.addChangeset("response","create",request.responses[i], null, false, false);
	        }

	        return true;
	    },

	    addFullCollection: function (collection,sync, callback) {
	        var pmCollection = this;
	        pmCollection.collectionIdUserMap[collection.id] = collection.owner;
	        collection.synced=sync;
	        collection.sharedWithTeam = collection.shared;
	        if(collection.owner && collection.owner!==pm.user.id) {
	            collection.subscribed = true;
	        }

	        //Cascade the editable property in all requests and responses
	        //if(!collection.hasOwnProperty("editable") || (typeof collection.editable==="undefined")) {
	        //collection.write = (collection.write==true || pm.user.id==collection.owner);
	        //}

	        try {
	            pmCollection.addCollectionToDataStore(collection, true, true, callback);
	        }
	        catch(e) {
	            console.log("Adding collection failed: "+e);
	            return -1;
	        }
	        return 0;
	    },

	    addCollectionFromSyncableFileSystem:function (collection) {
	        var pmCollection = this;

	        pmCollection.addCollectionToDataStore(collection, false, false, function(c) {
	            pm.indexedDB.getAllRequestsInCollection(c, function(c, requests) {
	                var collectionModel = pmCollection.get(c.id);
	                collectionModel.set("synced", true);
	                collectionModel.setRequests(requests);
	                pmCollection.trigger("updateCollection", collectionModel);
	            });
	        });
	    },

	    addRequestFromSyncableFileSystem: function(request) {
	        var pmCollection = this;

	        pmCollection.addRequestToDataStore(request, false, true, function(r) {
	            var collectionModel = pmCollection.get(request.collectionId);
	            var folderId;
	            var folder;
	            var requestLocation;

	            if (collectionModel) {
	                requestLocation = pmCollection.getRequestLocation(request.id);

	                if (requestLocation.type === "collection") {
	                    pmCollection.trigger("moveRequestToCollection", null, collectionModel, request);
	                }
	                else if (requestLocation.type === "folder") {
	                    folder = pmCollection.getFolderById(requestLocation.folderId);
	                    pmCollection.trigger("moveRequestToFolder", null, collectionModel, folder, request);
	                }
	            }

	        });
	    },

	    // Deprecated
	    // Rename this
	    // Add collection data to the database with new IDs
	    addAsNewCollection:function(collection) {
	        var pmCollection = this;
	        var folders = [];
	        var folder;
	        var order;
	        var j, count;
	        var idHashTable = {};

	        var dbCollection = _.clone(collection);
	        dbCollection["requests"] = [];
	        dbCollection["sharedWithTeam"] = false;
	        dbCollection["subscribed"] = false;
	        dbCollection["remoteLink"] = "";
	        dbCollection["remote_id"] = 0;
	        dbCollection["public"] = false;
	        dbCollection["write"] = true;

	        pmCollection.addCollectionToDataStore(dbCollection, true, false, function(c) {
	            var collectionModel;
	            var requests;
	            var ordered;
	            var i;
	            var request;
	            var newId;
	            var currentId;
	            var loc;

	            collectionModel = pmCollection.get(c.id);
	            var oldCollection = _.clone(collectionModel);

	            // Shows successs message
	            pmCollection.trigger("importCollection", {
	                type: "collection",
	                name:collection.name,
	                action:"added"
	            });

	            requests = [];

	            ordered = false;

	            // Check against legacy collections which do not have an order
	            if ("order" in collection) {
	                ordered = true;
	            }
	            else {
	                ordered = false;
	                collection["order"] = [];
	                collection.requests.sort(sortAlphabetical);
	            }

	            // Change ID of request - Also need to change collection order
	            // and add request to indexedDB
	            for (i = 0; i < collection.requests.length; i++) {
	                request = collection.requests[i];
	                request.collectionId = collection.id;

	                if(request.hasOwnProperty("rawModeData")) {
	                    request.data = request.rawModeData;
	                    delete request.rawModeData;
	                }

	                var newId = guid();
	                idHashTable[request.id] = newId;

	                if (ordered) {
	                    currentId = request.id;
	                    loc = _.indexOf(collection["order"], currentId);
	                    collection["order"][loc] = newId;
	                }
	                else {
	                    collection["order"].push(newId);
	                }

	                request.id = newId;

	                if ("responses" in request) {
	                    for (j = 0, count = request["responses"].length; j < count; j++) {
	                        request["responses"][j].id = guid();
	                        request["responses"][j].collectionRequestId = newId;
	                    }
	                }

	                requests.push(request);
	            }

	            // Change order inside folders with new IDs
	            if ("folders" in collection) {
	                folders = collection["folders"];

	                for(i = 0; i < folders.length; i++) {
	                    folders[i].id = guid();
	                    order = folders[i].order;
	                    for(j = 0; j < order.length; j++) {
	                        order[j] = idHashTable[order[j]];
	                    }

	                }
	            }

	            collectionModel.setRequests(requests);
	            collectionModel.set("folders", folders);
	            collectionModel.set("order", collection["order"]);


	            // Check for remote_id

	            if (pm.user.isLoggedIn()) {
	                var remoteId = pm.user.getRemoteIdForCollection(c.id);
	                collectionModel.set("remote_id", remoteId);
	            }

	            // Add new collection to the database
	            pmCollection.updateCollectionInDataStoreWithOptSync(collectionModel.getAsJSON(), oldCollection, true, true, function() {
	                var i;
	                var request;

	                for (i = 0; i < requests.length; i++) {
	                    request = requests[i];
	                    var callback=function(r) {
	                        if(r.isLastRequest) {
	                            pm.mediator.trigger("commitTransaction", collectionModel.id);
	                        }
	                    }
	                    if(i==requests.length-1) {
	                        request.isLastRequest = true;
	                    }
	                    pmCollection.addRequestToDataStore(request, true, false, callback);
	                }

	                pmCollection.trigger("updateCollection", collectionModel);
	            });
	        });

	    },

	    updateCollectionOwnerWithoutSync: function(id, owner) {
	        var pmCollection = this;

	        var targetCollection = pmCollection.get(id);
	        if(!targetCollection) {
	            console.log("Could not find collection to update");
	            return;
	        }

	        var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	        targetCollection.set("owner", owner);

	        pmCollection.updateCollectionInDataStoreWithoutSync(targetCollection.getAsJSON(), oldCollection, true, function (collection) {
	        });
	    },

	    updateCollectionOrder: function(id, order) {
	        var pmCollection = this;

	        var targetCollection = pmCollection.get(id);
	        var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	        targetCollection.set("order", order);

	        pmCollection.updateCollectionInDataStore(targetCollection.getAsJSON(), oldCollection, true, function (collection) {
	        });
	    },

	    updateCollectionSyncStatus: function(id, status) {
	        var pmCollection = this;

	        var targetCollection = pmCollection.get(id);
	        var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	        targetCollection.set("synced", status);

	        pmCollection.updateCollectionInDataStore(targetCollection.getAsJSON(), oldCollection, false, function (collection) {
	        });
	    },

	    updateCollectionWrite: function(id, write, toSync) {
	        if(typeof toSync === "undefined") {
	            toSync = false;
	        }
	        var pmCollection = this;

	        var targetCollection = pmCollection.get(id);
	        var oldCollection = pmCollection.getJSONFromCollection(targetCollection);

	        targetCollection.set("write", write);
	        targetCollection.set("updatedAt", Date.now());

	        pmCollection.updateCollectionInDataStoreWithOptSync(targetCollection.getAsJSON(), oldCollection,true, toSync, function (collection) {
	            pmCollection.trigger("updateCollectionMeta", targetCollection);
	        });
	    },

	    updateCollectionShared: function(id, isSharedWithTeam, write) {
	      var pmCollection = this;

	      var targetCollection = pmCollection.get(id);
	      var oldCollection = pmCollection.getJSONFromCollection(targetCollection);

	      targetCollection.set("write", write);
	      targetCollection.set("updatedAt", Date.now());
	      targetCollection.set("sharedWithTeam", isSharedWithTeam);

	      pmCollection.updateCollectionInDataStoreWithOptSync(targetCollection.getAsJSON(), oldCollection, true, false, function (collection) {
	          pmCollection.trigger("updateCollection", targetCollection);
	          pm.appWindow.trigger("sendMessageObject", "updatedCollection", targetCollection);
	      });
	    },

	    updateCollectionMeta: function(id, name, description) {
	        var pmCollection = this;

	        var targetCollection = pmCollection.get(id);
	        var oldCollection = pmCollection.getJSONFromCollection(targetCollection);

	        if(name) targetCollection.set("name", name);
	        if(description!==null) targetCollection.set("description", description);

	        targetCollection.set("updatedAt", Date.now());

	        pmCollection.updateCollectionInDataStore(targetCollection.getAsJSON(), oldCollection,true, function (collection) {
	            pmCollection.trigger("updateCollectionMeta", targetCollection);
	            if(collection.sharedWithTeam === true) {
	                pm.api.updateCollectionToTeam(pm.user.id, pm.user.get("access_token"), id, targetCollection.get("name"), targetCollection.get("description"), targetCollection.get("owner"), function (result) {
	                    //try to update collection in team dir
	                });
	            }
	        });
	    },

	    deleteCollection:function (id, sync, callback) {
	        //called when the user pressed "yes" in the delete modal
	        this.deleteCollectionFromDataStoreWithOptSync(id, sync, true, callback);
	    },

	    // Get collection data for file
	    getCollectionDataForFile:function (id, callback) {
	        pm.indexedDB.getCollection(id, function (data) {
	            var c = data;
	            var i;
	            var name;
	            var type;
	            var filedata;

	            pm.indexedDB.getAllRequestsInCollection(c, function (collection, requests) {
	                var requestIdsAdded = [];
	                for (i = 0, count = requests.length; i < count; i++) {
	                    if(requestIdsAdded.indexOf(requests[i].id)!==-1) {
	                        //this request is already there
	                        continue;
	                    }

	                    requestIdsAdded.push(requests[i].id);
	                    requests[i]["synced"] = false;

	                    if(requests[i]["dataMode"]==="raw") {
	                        requests[i]["rawModeData"]=requests[i]["data"];
	                        requests[i]["data"]=[];
	                    }

	                    if(requests[i]["rawModeData"]) {
	                        //to prevent rawModeData being sent as ["text"] instead of "text"
	                        if((requests[i]["rawModeData"] instanceof Array) &&
	                            requests[i]["rawModeData"].length==1) {
	                            requests[i]["rawModeData"] = requests[i]["rawModeData"][0];
	                        }
	                        if(typeof requests[i]["rawModeData"] !== "string") {
	                            requests[i]["rawModeData"] = "";
	                        }
	                    }

	                    //delete duplicate responses while exporting
	                    if(requests[i].responses instanceof Array) {
	                        requests[i].responses = _.uniq(requests[i].responses, function(item) {
	                            return item.id;
	                        });
	                    }

	                    var propsToRemove = ['write','synced','collectionOwner','createdAt', 'updatedAt', 'owner', 'lastUpdatedBy', 'lastRevision', 'history', 'collection'];
	                    _.each(propsToRemove, function(prop) {
	                        delete requests[i][prop];
	                    });
	                }

	                var numFolders = (collection.folders && (collection.folders instanceof Array))?collection.folders.length:0;
	                for(i=0; i<numFolders;i++) {
	                    var propsToRemove = ['write','collection_owner','collection_name','collection', 'collection_id', 'createdAt', 'updatedAt'];
	                    _.each(propsToRemove, function(prop) {
	                        delete collection.folders[i][prop];
	                    });
	                }

	                var propsToRemove = ['remote_id','synced','createdAt','updatedAt', 'shared', 'sharedWithTeam', 'subscribed', 'justSubscribed', 'write'];
	                _.each(propsToRemove, function(prop) {
	                    delete collection[prop];
	                });

	                //Get all collection requests with one call
	                collection['requests'] = requests;

	                name = collection['name'] + ".json";
	                type = "application/json";

	                filedata = JSON.stringify(collection, null, '\t');
	                callback(name, type, filedata);
	            });
	        });
	    },

	    getCollectionDataForFileJson:function (id, callback) {
	        pm.indexedDB.getCollection(id, function (data) {
	            var c = data;
	            var i;
	            var name;
	            var type;
	            var filedata;

	            pm.indexedDB.getAllRequestsInCollection(c, function (collection, requests) {
	                for (i = 0, count = requests.length; i < count; i++) {
	                    requests[i]["synced"] = false;

	                    if(requests[i]["dataMode"]==="raw") {
	                        requests[i]["rawModeData"]=requests[i]["data"];
	                        requests[i]["data"]=[];
	                    }

	                    delete requests[i].write;
	                }

	                delete collection['remote_id'];
	                delete collection.synced;
	                delete collection.shared;
	                delete collection.sharedWithTeam;
	                delete collection.subscribed;
	                delete collection.justSubscribed;
	                delete collection.write;

	                //Get all collection requests with one call
	                collection['synced'] = false;
	                collection['requests'] = requests;

	                name = collection['name'] + ".json";
	                type = "application/json";

	                callback(name, type, collection);
	            });
	        });
	    },

	    // Save collection as a file
	    saveCollection:function (id) {
	        this.getCollectionDataForFile(id, function (name, type, filedata) {
	            var filename = name + ".postman_collection";
	            pm.filesystem.saveAndOpenFile(filename, filedata, type, function () {
	              pm.alerts.success('Saved');
	            });
	            pm.tracker.trackEvent("collection", "share", "json");

	        });
	    },

	    uploadCollectionForLink: function(id, isPublic, refreshSharedCollections, callback) {
	        var pmCollection = this;

	        this.getCollectionDataForFile(id, function (name, type, filedata) {
	            pm.api.uploadCollection(filedata, isPublic, function (data) {
	                var link = data.link;

	                if (callback) {
	                    callback(link);
	                }

	                //to show the collection in the MyCollections modal
	                pm.mediator.trigger("refreshSharedCollections");

	                var collection = pmCollection.get(id);
	                var remote_id = parseInt(data.id, 10);
	                var oldCollection = pmCollection.getJSONFromCollection(collection)
	                collection.set("remote_id", remote_id);
	                collection.set("remoteLink", link);
	                collection.set("public", isPublic);

	                //the new remote_id and remoteLink fields also have to be sent!
	                pmCollection.updateCollectionInDataStoreWithOptSync(collection.getAsJSON(), oldCollection, true, true, function (c) {

	                });
	            });
	            if(isPublic) {
	                pm.tracker.trackEvent("collection", "share", "api_directory");
	            }
	            else {
	                pm.tracker.trackEvent("collection", "share", "upload");
	            }
	        });
	    },

	    shareUnshareCollection: function (id, isPublic, isTeam, refreshSharedCollections, isWritable, callback) {
	        var pmCollection = this;

	        var thisCollection = pmCollection.get(id);

	        if(isTeam === true && thisCollection.get("sharedWithTeam")!==true) {
	            //share with team

	            var oldCollection = pmCollection.getJSONFromCollection(thisCollection);
	            thisCollection.set("sharedWithTeam", true);

	            //writeable is set on checkbox change
	            //thisCollection.set("write", isWriteable);

	            var orgs = pm.user.get("organizations");
	            if(orgs.length > 0) {
	                var orgId = orgs[0].id;
	                pm.syncManager.addChangeset("collection", "share", {"team": orgId, "write": isWritable}, id, true);
	                pmCollection.updateCollectionInDataStoreWithOptSync(thisCollection.getAsJSON(), oldCollection, true, false, function (c) {
	                    pmCollection.trigger("updateCollection", thisCollection);
	                    pm.appWindow.trigger("sendMessageObject", "updatedCollection", thisCollection); //needed because the share update event has tosync=false
	                });
	            }
	            else {
	                console.log("Cannot share. You are not a member of a team.");
	            }
	        }
	        else if(isTeam === false && thisCollection.get("sharedWithTeam")===true) {
	            //unshare with team
	            var thisCollection = pmCollection.get(id);
	            var oldCollection = pmCollection.getJSONFromCollection(thisCollection);
	            thisCollection.set("sharedWithTeam", false);
	            pm.syncManager.addChangeset("collection", "unshare", null, id, true);
	            pmCollection.updateCollectionInDataStoreWithOptSync(thisCollection.getAsJSON(), oldCollection, true, false, function (c) {
	                pmCollection.trigger("updateCollection", thisCollection);
	                pm.api.deleteCollectionFromTeam(pm.user.id, pm.user.get("access_token"), id, function (result) {
	                    //console.log("Deleted collection from team: " + result);
	                }, function() {
	                    console.log("Could not unshare collection from team");
	                });
	            });
	        }
	    },

	    // Upload collection
	    uploadCollection:function (id, isPublic, isTeam, refreshSharedCollections, callback) {
	        var pmCollection = this;

	        //upload and get link
	        this.uploadCollectionForLink(id, isPublic, refreshSharedCollections, callback);

	        var thisCollection = pmCollection.get(id);

	        if(isTeam === true && thisCollection.get("sharedWithTeam")!==true) {
	            //share with team

	            var oldCollection = pmCollection.getJSONFromCollection(thisCollection);
	            thisCollection.set("sharedWithTeam", true);

	            //writeable is set on checkbox change
	            //thisCollection.set("write", isWriteable);

	            var orgs = pm.user.get("organizations");
	            if(orgs.length > 0) {
	                var orgId = orgs[0].id;
	                pm.syncManager.addChangeset("collection", "share", {"team": orgId}, id, true);
	                pmCollection.updateCollectionInDataStoreWithOptSync(thisCollection.getAsJSON(), oldCollection, true, false, function (c) {
	                    pmCollection.trigger("updateCollection", thisCollection);
	                });
	            }
	            else {
	                console.log("Cannot share. You are not a member of a team.");
	            }
	        }
	        else if(isTeam === false && thisCollection.get("sharedWithTeam")===true) {
	            //unshare with team
	            var thisCollection = pmCollection.get(id);
	            var oldCollection = pmCollection.getJSONFromCollection(thisCollection);
	            thisCollection.set("sharedWithTeam", false);
	            pm.syncManager.addChangeset("collection", "unshare", null, id, true);
	            pmCollection.updateCollectionInDataStoreWithOptSync(thisCollection.getAsJSON(), oldCollection, true, false, function (c) {
	                pmCollection.trigger("updateCollection", thisCollection);
	                pm.api.deleteCollectionFromTeam(pm.user.id, pm.user.get("access_token"), id, function (result) {
	                    //console.log("Deleted collection from team: " + result);
	                }, function() {
	                    console.log("Could not unshare collection from team");
	                });
	            });
	        }
	    },

	    unshareCollection: function(collectionId) {
	        pm.api.deleteCollectionFromTeam(pm.user.id,  pm.user.get("access_token"), collectionId, function() {
	            //console.log("Deleted from team");
	        }, function() {
	            console.log("Could not delete collection from team");
	        });
	    },

	    importWholeCollectionWithOptSync: function(collection, toSync, syncLater, newId, callback) {
	        if(typeof newId === "undefined") {
	            newId = true;
	        }
	        if(typeof toSync === "undefined") {
	            toSync = true;
	        }
	        if(typeof syncLater === "undefined") {
	            syncLater = false;
	        }
	        if(typeof callback === "undefined") {
	            callback = null;
	        }

	        var pmCollection = this;

	        //force change all IDs
	        if(newId) {
	            this.setNewCollectionId(collection);
	            this.changeFolderAndRequestIds(collection);
	        }

	        delete collection.remoteLink;

	        if (collection.hasOwnProperty("order")) {
	            ordered = true;
	        }
	        else {
	            //forcibly adding a requests array to the collection
	            if(!collection.hasOwnProperty("requests") || !(collection.requests instanceof Array)) {
	                collection.requests = [];
	            }

	            ordered = false;
	            collection["order"] = [];
	            for (var i = 0; i < collection["requests"].length; i++) {
	                collection["order"].push(collection.requests[i].id);
	            }
	        }

	        collection.subscribed = false;

	        var dbCollection = _.clone(collection);

	        // Do not save requests in the same IndexedDB table
	        if ("requests" in collection) {
	            delete dbCollection['requests'];
	            dbCollection.hasRequests = true;
	        }

	        var terminateTransaction = false;
	        //if there are no requests AND no folders
	        if((!dbCollection.order || dbCollection.order.length==0) && (!dbCollection.folders || dbCollection.folders.length===0)) {
	            terminateTransaction = true;
	        }

	        //to prevent immediate syncing
	        dbCollection.synced = true;

	        pmCollection.addCollectionToDataStore(dbCollection, true, terminateTransaction, function(c) {
	            var collectionModel;
	            var requests = collection.requests;
	            var i;
	            var request;

	            collectionModel = pmCollection.get(collection.id);

	            if (collection.hasOwnProperty("requests")) {
	                for (i = 0; i < requests.length; i++) {
	                    if(collection.requests[i].dataMode==="raw") {
	                        if(collection.requests[i].hasOwnProperty("rawModeData")) {
	                            collection.requests[i].data=collection.requests[i].rawModeData;
	                        }
	                    }
	                    if(!collection.requests[i].hasOwnProperty("preRequestScript")) {
	                        collection.requests[i]["preRequestScript"] = "";
	                    }
	                    if(!collection.requests[i].hasOwnProperty("tests")) {
	                        collection.requests[i]["tests"] = "";
	                    }
	                }

	                collectionModel.set("requests", collection.requests);

	                for (i = 0; i < requests.length; i++) {
	                    request = requests[i];

	                    if(i==requests.length-1) {
	                        request.isLastRequest = true;
	                    }

	                    pmCollection.setFolderIdForRequest(request, collection);
	                    pmCollection.addRequestToDataStoreWithOptSync(request, true, false, false, null);
	                    pm.appWindow.trigger("sendMessageObject", "addedCollectionRequest", request);

	                }
	            }
	            else {
	                collectionModel.set("requests", []);
	            }

	            pmCollection.trigger("updateCollection", collectionModel);

	            // Shows successs message
	            // NOT for demo collections
	            if(postman_predef_collections.indexOf(collection.id) === -1) {
	                pmCollection.trigger("importCollection", { type: "collection", name:collection.name, action:"added" });
	            }

	            if(typeof callback === "function") {
	                callback();
	            }

	            var cJson = pmCollection.sanitizeCollection(collection);
	            if(toSync) {
	                if(!syncLater) {
	                    pm.syncManager.addChangeset("collection", "importCollection", cJson, null, true);
	                }
	                else {
	                    setTimeout(function(cJson){
	                        return function() {
	                            pm.syncManager.addChangeset("collection", "importCollection", cJson, null, true);
	                        }
	                    }(cJson), 2000);
	                }
	            }
	            //pm.mediator.trigger("beginUnsyncedStream", false, cJson.id, false);
	        });
	    },

	    // New version of overwrite collection
	    // called when importing a collection
	    overwriteCollection:function(collection, syncLater) {
	        if(typeof syncLater === "undefined") {
	            syncLater = false;
	        }
	        this.importWholeCollectionWithOptSync(collection, true, syncLater, true, null);
	    },

	    setFolderIdForRequest: function(r, c) {
	        if(c.order.indexOf(r.id) !== -1) {
	            //all is well, the request is in the collection
	            return;
	        }
	        else {
	            var folders = c.folders;
	            if(!folders || (!_.isArray(folders))) {
	                return; //collection has no folders. cannot add
	            }
	            var numFolders = folders.length;
	            var i;
	            for(i=0;i<numFolders;i++) {
	                if(folders[i].order.indexOf(r.id)!=-1) {
	                    r.folder = folders[i].id;
	                    return;
	                }
	            }
	        }

	        //console.log("Warning - This request ID is not present in the collection or any folder");
	    },

	    // Duplicate collection
	    duplicateCollection:function(collection) {
	        this.addAsNewCollection(collection);
	    },

	    // Merge collection
	    // Being used in IndexedDB bulk import
	    mergeCollection: function(collection) {
	        var validationResult = pm.collectionValidator.validateJSON('c', collection, {correctDuplicates: true, validateSchema: false});
	        if(validationResult.status == false) {
	          pm.alerts.warning('Invalid collection file: '+validationResult.message, {
	            timeout: 5000
	          });
	            return;
	        }
	        var pmCollection = this;

	        //Update local collection
	        var newCollection = {
	            id: collection.id,
	            name: collection.name,
	            timestamp: collection.timestamp
	        };

	        var targetCollection;
	        targetCollection = new PmCollection(newCollection);
	        var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	        targetCollection.set("name", collection.name);

	        targetCollection.set("requests", collection.requests);

	        if ("order" in collection) {
	            targetCollection.set("order", collection.order);
	        }
	        else {
	            var order = [];
	            var requests = targetCollection.get("requests");
	            for(var j = 0; j < requests.length; j++) {
	                order.push(requests[j].id);
	            }

	            targetCollection.set("order", order);
	        }

	        if ("folders" in collection) {
	            targetCollection.set("folders", collection.folders);
	        }

	        pmCollection.add(targetCollection, {merge: true});
	        pm.appWindow.trigger("sendMessageObject", "updatedCollection", targetCollection);

	        pmCollection.updateCollectionInDataStore(targetCollection.getAsJSON(), oldCollection, true, function (c) {
	            var driveCollectionRequests = collection.requests;

	            pm.indexedDB.getAllRequestsInCollection(collection, function(collection, oldCollectionRequests) {
	                var updatedRequests = [];
	                var deletedRequests = [];
	                var newRequests = [];
	                var finalRequests = [];
	                var i = 0;
	                var driveRequest;
	                var existingRequest;
	                var sizeOldRequests;
	                var loc;
	                var j;
	                var sizeUpdatedRequests;
	                var sizeNewRequests;
	                var sizeDeletedRequests;
	                var size = driveCollectionRequests.length;

	                function existingRequestFinder(r) {
	                    return driveRequest.id === r.id;
	                }

	                for (i = 0; i < size; i++) {
	                    driveRequest = driveCollectionRequests[i];

	                    existingRequest = _.find(oldCollectionRequests, existingRequestFinder);

	                    if (existingRequest) {
	                        updatedRequests.push(driveRequest);

	                        sizeOldRequests = oldCollectionRequests.length;
	                        loc = -1;
	                        for (j = 0; j < sizeOldRequests; j++) {
	                            if (oldCollectionRequests[j].id === existingRequest.id) {
	                                loc = j;
	                                break;
	                            }
	                        }

	                        if (loc >= 0) {
	                            oldCollectionRequests.splice(loc, 1);
	                        }
	                    }
	                    else {
	                        newRequests.push(driveRequest);
	                    }
	                }

	                deletedRequests = oldCollectionRequests;

	                sizeUpdatedRequests = updatedRequests.length;
	                for(i = 0; i < sizeUpdatedRequests; i++) {
	                    pmCollection.updateRequestInDataStore(updatedRequests[i], true);
	                }

	                sizeNewRequests = newRequests.length;
	                for(i = 0; i < sizeNewRequests; i++) {
	                    pmCollection.addRequestToDataStore(newRequests[i], true, true, function(){});
	                }

	                sizeDeletedRequests = deletedRequests.length;
	                for(i = 0; i < sizeDeletedRequests; i++) {
	                    pmCollection.deleteRequestFromDataStore(deletedRequests[i], true);
	                }

	                pmCollection.trigger("updateCollection", targetCollection);
	            });
	        });
	    },

	    // Merge multiple collections. Used in bulk data import
	    mergeCollections: function (collections) {
	        var pmCollection = this;

	        var size = collections.length;
	        for(var i = 0; i < size; i++) {
	            var collection = collections[i];
	            pmCollection.importCollectionData(collection, true);

	            //this method causes update of the new collections :S
	            //pmCollection.mergeCollection(collection, true);
	        }
	    },



	    setSelfOwnerForCollection: function(collection) {
	        try {
	            var newOwner = pm.user.id;
	            collection.owner = newOwner;
	            if (collection.folders) {
	                var numFolders = collection.folders.length;
	                for (var i = 0; i < numFolders; i++) {
	                    collection.folders[i].owner = newOwner;
	                }
	            }
	            if (collection.requests) {
	                var numRequests = collection.requests.length;
	                for (var i = 0; i < numRequests; i++) {
	                    collection.requests[i].owner = newOwner;
	                }
	            }
	        }
	        catch(e) {
	            console.log("Error setting collection owner to self");
	            return;
	        }
	    },

	    importCollectionData:function (collection, syncLater) {
	        if(typeof syncImmediately === "undefined") {
	            syncLater = false;
	        }
	        //Fix for legacy collections
	        if (!collection.hasOwnProperty("order") && collection.hasOwnProperty("requests")) {
	            collection.order = collection.requests.map(function (req) {
	                return req.id
	            });
	        }

	        if(!collection.name || collection.name.trim()=="") {
	            collection.name = "New Collection";
	        }

	        this.setSelfOwnerForCollection(collection);
	        
	        //this will be your new collection
	        collection.sharedWithTeam = false;
	        collection.synced = false;
	        collection.subscribed = false;


	        var validationResult = pm.collectionValidator.validateJSON('c', collection, {correctDuplicates: true, validateSchema: false});
	        if(validationResult.status == false) {
	          pm.alerts.warning('Invalid collection file: '+validationResult.message, {
	            timeout: 5000
	          });
	            return;
	        }
	        if((this.getCollectionById(collection.id)!==null) || (this.getCollectionByName(collection.name) !== null)) {
	            var cWithName = this.getCollectionByName(collection.name);
	            var newCollectionId = collection.id;
	            if(cWithName) {
	                newCollectionId = cWithName.get("id");
	            }
	            this.trigger("overwriteCollectionChoice", newCollectionId, collection);
	        }
	        else {
	            this.overwriteCollection(collection, syncLater);
	        }
	    },

	    setNewCollectionId: function(collection) {
	        var newId = guid();
	        var numFolders = (collection.folders)?collection.folders.length:0;
	        for(var i=0;i<numFolders;i++) {
	            collection.folders[i].collection_id = newId;

	        }

	        var numRequests = (collection.requests)?collection.requests.length:0;
	        for(var i=0;i<numRequests;i++) {
	            collection.requests[i].collectionId = newId;
	        }

	        collection.id = newId;
	    },

	    changeFolderAndRequestIds: function(collection) {
	        var numFolders = (collection.folders)?collection.folders.length:0;
	        var folderIdMap = {};
	        var requestIdMap = {};

	        //update request IDs
	        var numRequests = (collection.requests)?collection.requests.length:0;
	        for(var i=0;i<numRequests;i++) {
	            var newId = guid();
	            requestIdMap[collection.requests[i].id] = newId;

	            if(collection.requests[i].responses  && (collection.requests[i].responses instanceof Array)) {
	                var numResponses = collection.requests[i].responses.length;
	                for(var j=0;j<numResponses;j++) {
	                    collection.requests[i].responses[j].id = guid();
	                }
	            }
	            collection.requests[i].id = newId;
	        }

	        //update folder IDs and folder orders
	        for(var i=0;i<numFolders;i++) {
	            var newId = guid();
	            folderIdMap[collection.folders[i].id]=newId;
	            collection.folders[i].id = newId;

	            var oldOrder = collection.folders[i].order;
	            var newOrder = _.map(oldOrder, function(oldRequestId) {
	                return requestIdMap[oldRequestId];
	            });
	            collection.folders[i].order = newOrder;
	        }

	        //update root order
	        var oldOrder = collection.order;
	        var newOrder = _.map(oldOrder, function(oldRequestId) {
	            return requestIdMap[oldRequestId];
	        });
	        collection.order = newOrder;

	    },

	    onAddDirectoryCollection: function(collection) {
	        this.setNewCollectionId(collection);
	        this.changeFolderAndRequestIds(collection);
	        this.addAsNewCollection(collection);
	    },

	    guessFileFormat: function(data, alreadyJson) {
	        //check if it is JSON:
	        var jsonObj;
	        try {
	            if(alreadyJson===true) {
	                jsonObj = data;
	            }
	            else {
	                jsonObj = JSON.parse(data);
	            }
	            if(jsonObj.hasOwnProperty("swagger") && jsonObj["swagger"]==="2.0") return "SWAGGER2.0";
	            if(jsonObj.hasOwnProperty("swaggerVersion")) return "SWAGGER1.2";
	            if(jsonObj.hasOwnProperty("folders") || jsonObj.hasOwnProperty("requests") || jsonObj.hasOwnProperty("order")) return "COLLECTION";
	            if(jsonObj.hasOwnProperty("version") && jsonObj.hasOwnProperty("collections") && jsonObj.hasOwnProperty("environments")) return "DUMP";
	            if(jsonObj.hasOwnProperty("values") && jsonObj.hasOwnProperty("name")) return "ENVIRONMENT";

	            //Is JSON, but not collection or swagger
	            return 0;
	        }
	        catch(e) { // Not JSON
	            try {
	                data = data.trim();
	                var parsedYAMLData;
	                var firstLine = data.split("\n")[0];

	                // All YAML files are processed in this try block
	                try {
	                    parsedYAMLData = YAML.parse(data);
	                } catch(e) {
	                    //try
	                    if(firstLine.indexOf("#%RAML")===0) {
	                        return "RAML";  //check raml = first line is #%RAML
	                    }
	                    else {
	                        throw "Not parseable YAML";
	                    }
	                }
	                if(parsedYAMLData.hasOwnProperty("swagger") && parsedYAMLData["swagger"]==="2.0") return "SWAGGER2.0";
	                else if(parsedYAMLData.hasOwnProperty("swaggerVersion")) return "SWAGGER1.2";
	                // Still could be RAML :/
	                else if(firstLine.indexOf("#%RAML")===0) {
	                    return "RAML";  //check raml = first line is #%RAML
	                }
	                else {
	                    //cannot parse this yaml
	                    throw "Not parseable YAML";
	                }
	            }
	            catch (e) { // Not JSON, Not YAML
	                console.log(e);
	                if(data instanceof Node) {
	                    var xs = new XMLSerializer();
	                    data = xs.serializeToString(data);
	                }
	                data = data.trim();
	                var firstLine = data.split("\n")[0];
	                if(firstLine.toLowerCase().indexOf("curl")===0) return "CURL";
	                if(data.substring(0,5).indexOf("<")!==-1 && data.substring(0,400).indexOf("<application")!==-1) return "WADL";
	                //CANNOT support application:wadl right now because the converter wont work

	                //Not JSON, and not raml, curl, wadl
	                return 0;
	            }
	        }
	    },

	    showImportError: function(type, message) {
	      pm.alerts.error('Error while importing '+type+': '+message);
	    },

	    importData: function(data, format, alreadyJson) {
	        var pmCollection = this;
	        if(format==="SWAGGER1.2") {

	            // If the file is YAML, convert it to JSON
	            try {
	                data = YAML.parse(data);
	                alreadyJson = true;
	            }
	            catch (e) {
	                console.log('Data is not YAML.')
	            }

	            var swaggerJson = alreadyJson?data:JSON.parse(data);
	            postmanConverters.swagger1_2Converter.convertJSON(
	                swaggerJson,
	                {
	                    group: true,
	                    test: false
	                },
	                function(collection, env) {
	                    pm.tracker.trackEvent("collection", "convert", "swagger1");
	                    pm.collections.importCollectionData(collection);
	                }, function(errorMessage) {
	                    pm.collections.showImportError("Swagger", errorMessage);
	                }
	            );
	        }
	        else if(format === "SWAGGER2.0") {

	            // If the file is YAML, convert it to JSON
	            try {
	                data = YAML.parse(data);
	                alreadyJson = true;
	            }
	            catch (e) {
	                console.log('Data is not YAML.')
	            }

	            var swaggerJson = alreadyJson?data:JSON.parse(data);
	            var converter = new postmanConverters.swagger2_0Converter();
	            var result = converter.convert(swaggerJson);
	            if(!result || result["status"]==="failed") {
	                var msg = "Unknown error";
	                if(result["message"]) {
	                    msg = result["message"];
	                }
	                pm.collections.showImportError("Swagger 2.0", msg);
	                return;
	            }
	            else {
	                pm.tracker.trackEvent("collection", "convert", "swagger2");
	                pm.collections.importCollectionData(result.collection);
	            }
	        }
	        else if(format === "COLLECTION") {
	            var collection = alreadyJson?data:JSON.parse(data);
	            // collection.id = guid();
	            pmCollection.importCollectionData(collection);
	        }
	        else if(format === "DUMP") {
	            var dumpJson = (typeof data==="object")?data:JSON.parse(data);
	            pm.indexedDB.importDataForVersion(1, dumpJson, function(){});
	        }
	        else if(format === "ENVIRONMENT") {
	            var dumpJson = (typeof data==="object")?data:JSON.parse(data);
	            pm.indexedDB.importDataForVersion(1, dumpJson, function(){});
	            pm.environments.importEnvironment(dumpJson, false);
	        }
	        else if(format==="RAML") {
	            postmanConverters.ramlConverter.parseString(data, function(op, env) {
	                pm.tracker.trackEvent("collection", "convert", "raml");
	                pm.collections.importCollectionData(op);
	            }, function(errorMessage) {
	                if(errorMessage.indexOf("cannot fetch")!==-1) {
	                    errorMessage = "External references are not supported yet. " + errorMessage;
	                }
	                pm.collections.showImportError("RAML", errorMessage);
	            });
	        }
	        else if(format==="CURL") {
	            try {
	                var requestJSON = postmanConverters.curlConverter.convertCurlToRequest(data);
	                if (requestJSON.error) {
	                    pm.collections.showImportError("Curl", requestJSON.error);
	                }
	                else {
	                    pm.tracker.trackEvent("collection", "convert", "curl");
	                    var re = /\\n/gi
	                    requestJSON.headers = requestJSON.headers.replace(re, "\n");
	                    pm.mediator.trigger("loadRequest", requestJSON, true);
	                    pmCollection.trigger("importCollection", {
	                        type: "request",
	                        name: (requestJSON.name != "" && requestJSON.name != null) ? requestJSON.name : requestJSON.url,
	                        action: "added"
	                    });
	                }
	            }
	            catch(e) {
	                pm.collections.showImportError("Curl", e.message);
	            }
	        }
	        else if(format==="WADL") {
	            postmanConverters.wadlConverter.convertXMLString(data,{},function(collection) {
	                pm.tracker.trackEvent("collection", "convert", "wadl");
	                pm.collections.importCollectionData(collection);
	            }, function(error) {
	                pm.collections.showImportError("WADL", error);
	            });
	        }
	    },

	    /**
	     * This function handles the importing of folders. Allfiles is an Array of objects, where each element is of the
	     * form:
	     * {
	     *     content: "file contents...",
	     *     fileName: "something.raml",
	     *     isRoot: true // Set to true if this is a root RAML File.
	     * }
	     *
	     * @param allFiles {Object}
	     * @param rootPath {String} The root path of uploaded data, e.g: /Uber or /my-folder. The slash at the beginning is
	     *                          important
	     */
	    importFolder: function (allFiles, rootPath) {
	        var uploadedData = _.object(_.pluck(allFiles, 'fileName'), _.pluck(allFiles, 'content')),
	            rootFiles = _.filter(allFiles, { isRoot: true }),
	            reader,
	            pmCollection = this;
	        reader = new RAML.Parser.FileReader(function (path) {
	            return new Promise(function (resolve, reject) {
	                var decodedFullPath = decodeURIComponent(path);
	                if (uploadedData.hasOwnProperty(decodedFullPath)) {
	                    resolve(uploadedData[decodedFullPath]);
	                }
	                else if (uploadedData.hasOwnProperty(rootPath + path)) {
	                    resolve(uploadedData[rootPath + path]);
	                }
	                else {
	                    reject(new Error('Unable to find file ' + path + ' in uploaded data'));
	                }
	            });
	        });

	        // Import RAML files, if any
	        _.forEach(rootFiles, function (rootFile) {
	            RAML.Parser.loadFile(rootFile.fileName, { reader: reader })
	                .then(function (result) {
	                    postmanConverters.ramlConverter.parseRaw(result, function (op, env) {
	                        pm.tracker.trackEvent("collection", "convert", "raml");
	                        pm.collections.importCollectionData(op);
	                    }, function (errorMessage) {
	                        pm.collections.showImportError("RAML", errorMessage);
	                    });
	                })
	                .catch(function (e) {
	                    console.error(e);
	                    pm.mediator.trigger("failedCollectionImport", "Error importing RAML API: " + e);
	                });
	        });

	        if (rootFiles.length === 0) {
	            // No RAML files were there, so import Postman collections, if any
	            _.forOwn(uploadedData, function (content, fileName) {
	                if (/^.*\.postman_collection$|^.*\.postman_environment$|^.*\.json$/ig.test(fileName)) {
	                    // May be worth importing
	                    content = content.trim();
	                    var fileFormat = pmCollection.guessFileFormat(content);
	                    if(fileFormat===0) {
	                        pm.mediator.trigger("failedCollectionImport", fileName + ": format not recognized");
	                        return;
	                    }
	                    pmCollection.importData(content, fileFormat);
	                }
	            });
	        }
	    },

	    importFiles: function(files) {
	        var pmCollection = this;
	        for (var i = 0, f; f = files[i]; i++) {
	            var reader = new FileReader();

	            // Closure to capture the file information.
	            reader.onload = (function (theFile) {
	                return function (e) {
	                    // Render thumbnail.
	                    var data = e.currentTarget.result;
	                    try {
	                        data = data.trim();
	                        var fileFormat = pmCollection.guessFileFormat(data);
	                        if(fileFormat===0) {
	                            throw "Could not parse";
	                        }
	                        pmCollection.importData(data, fileFormat);
	                    }
	                    catch(e) {
	                        pm.mediator.trigger("failedCollectionImport","format not recognized");
	                    }
	                };
	            })(f);

	            // Read in the image file as a data URL.
	            reader.readAsText(f);
	        }
	    },

	    // Import multiple collections
	    importCollections:function (files) {
	        var pmCollection = this;

	        // Loop through the FileList
	        for (var i = 0, f; f = files[i]; i++) {
	            var reader = new FileReader();

	            // Closure to capture the file information.
	            reader.onload = (function (theFile) {
	                return function (e) {
	                    // Render thumbnail.
	                    var data = e.currentTarget.result;
	                    try {
	                        data = data.trim();
	                        var collection = jsonlint.parse(data);
	                        // collection.id = guid();
	                        pmCollection.importCollectionData(collection);
	                    }
	                    catch(e) {
	                        pm.mediator.trigger("failedCollectionImport", "could not import collection - " + e.message);
	                    }
	                };
	            })(f);

	            // Read in the image file as a data URL.
	            reader.readAsText(f);
	        }
	    },

	    importFileFromUrl:function (url) {
	        var pmCollection = this;

	        $.ajax({
	            type: 'GET',
	            url: url,
	            success: function(data) {
	                try {
	                    if(typeof data === "object" && !(data instanceof Node)) {
	                        //already Json
	                        var fileFormat = pmCollection.guessFileFormat(data, true);
	                        if(fileFormat===0) {
	                            throw "Could not parse";
	                        }
	                        pmCollection.importData(data, fileFormat, true);
	                    }
	                    else if(data instanceof Node) {
	                        //it's an xml element. don't trim
	                        var fileFormat = pmCollection.guessFileFormat(data, false);
	                        if(fileFormat===0) {
	                            throw "Could not parse";
	                        }

	                        var xs = new XMLSerializer();
	                        data = xs.serializeToString(data);

	                        pmCollection.importData(data, fileFormat, false);
	                    }
	                    else {
	                        data = data.trim();
	                        var fileFormat = pmCollection.guessFileFormat(data, false);
	                        if(fileFormat===0) {
	                            throw "Could not parse";
	                        }
	                        pmCollection.importData(data, fileFormat, false);
	                    }
	                }
	                catch(e) {
	                    pm.mediator.trigger("failedCollectionImport", "format not recognized");
	                }
	            },
	            error: function(e) {
	                console.log("Error response while importing: ", e);
	                pm.mediator.trigger("failedCollectionImport", "Error response received from URL. Check the console for more.");
	            }
	        });
	    },

	    // Get request by ID
	    getRequestById: function(id) {
	        function existingRequestFinder(r) {
	            return r.id === id;
	        }

	        for(var i = 0; i < this.models.length; i++) {
	            var collection = this.models[i];

	            var requests = collection.get("requests");

	            var request = _.find(requests, existingRequestFinder);
	            if (request) {
	                return request;
	            }
	        }

	        return null;
	    },

	    getAllRequests: function() {
	        var retVal = [];
	        for(var i = 0; i < this.models.length; i++) {
	            var collection = this.models[i];

	            var requests = collection.get("requests");
	            retVal = retVal.concat(requests);
	        }
	        return retVal;
	    },

	    getRequestLocation: function(id) {
	        var i;
	        var collection;
	        var indexCollection;
	        var folders;
	        var indexFolder;

	        for(var i = 0; i < this.models.length; i++) {
	            collection = this.models[i];

	            indexCollection = _.indexOf(collection.get("order"), id);

	            if (indexCollection >= 0) {
	                return {
	                    "type": "collection",
	                    "collectionId": collection.get("id")
	                };
	            }
	            else {
	                folders = collection.get("folders");
	                for(j = 0; j < folders.length; j++) {
	                    indexFolder = _.indexOf(folders[j].order, id);

	                    if (indexFolder >= 0) {
	                        return {
	                            "type": "folder",
	                            "folderId": folders[j].id,
	                            "collectionId": collection.get("id")
	                        };
	                    }
	                }
	            }
	        }

	        return {
	            "type": "not_found"
	        };
	    },

	    // Load collection request in the editor
	    loadCollectionRequest:function (id) {
	        var pmCollection = this;

	        pm.indexedDB.getCollectionRequest(id, function (request) {
	            if(!request) {
	                //pm.syncLogger.error("Could not find request to load. Id: " + id);
	                return;
	            }
	            request.isFromCollection = true;
	            request.collectionRequestId = id;
	            if((pm.settings.getSetting("requestNewTab") ||
	                (pm.settings.getSetting("trackUnsavedRequests") && pm.tabManager.getCurrentTab().get("isTabDirty"))) && !pm.testRunner) {
	                pm.mediator.trigger("loadRequestInNewTab", request);
	            }
	            else {
	                pm.mediator.trigger("loadRequest", request, true);
	            }
	            pmCollection.trigger("selectedCollectionRequest", request);
	        });
	    },

	    // For the TCPReader. Not for the current request
	    addRequestToCollectionId: function(collectionRequest, collectionId) {
	        var pmCollection = this;

	        collectionRequest.collectionId = collectionId;

	        if(!collectionRequest.hasOwnProperty("id")) {
	            collectionRequest.id = guid();
	        }

	        var targetCollection = pmCollection.get(collectionId);
	        var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	        targetCollection.addRequestIdToOrder(collectionRequest.id);

	        pmCollection.addRequestToDataStore(collectionRequest, true, true, function(req) {
	            pmCollection.updateCollectionInDataStoreWithoutSync(targetCollection.getAsJSON(), oldCollection, true, function() {
	                pmCollection.trigger("addCollectionRequest", req, true, false);
	            });
	        });

	//        pmCollection.updateCollectionInDataStore(targetCollection.getAsJSON(), oldCollection, true, function() {
	//            pmCollection.addRequestToDataStore(collectionRequest, true, function(req) {
	//                pmCollection.trigger("addCollectionRequest", req);
	//            });
	//        });
	    },

	    addFullCollectionRequest: function(request, callback) {
	        var pmCollection = this;
	        var targetCollection;
	        try {
	            targetCollection = this.getCollectionById(request.collection);
	            if(!targetCollection) {
	                //add a timeout to get the request later
	                clearTimeout(pmCollection.missingCollectionTimeouts[request.collection]);
	                pmCollection.missingCollectionTimeouts[request.collection] = setTimeout(function() {
	                    pmCollection.getMissingServerCollection(request.collection, request.owner);
	                },2000);
	                if (typeof callback === "function") {
	                    callback();
	                }
	                return;
	            }
	            var alreadyInCollection = targetCollection.requestExistsInCollectionRoot(request.id);
	            var alreadyInFolderWithId = targetCollection.requestExistsInCollectionFolders(request.id);

	            if(!alreadyInCollection && !alreadyInFolderWithId) {
	                targetCollection.addRequestIdToOrder(request.id);
	            }

	            if(request.helperAttributes && request.helperAttributes=="null") {
	                request.helperAttributes = null;
	            }
	            if(typeof request.helperAttributes === "string") {
	                try {
	                    request.helperAttributes = JSON.parse(request.helperAttributes);
	                }catch(e) {

	                }
	            }
	            request.write = (targetCollection.get("write")==true || pm.user.id==targetCollection.get("owner"));

	            this.addRemoteRequestToDataStore(request, true, function(req) {
	                if(req.folder!=null && req.folder.length>0) {
	                    var status = pmCollection.moveRequestToFolderWithOptSync(req.id, req.folder, false, callback);
	                    if(status === -1) {
	                        //could not add to folder
	                        pmCollection.trigger("addCollectionRequest", req, false, false);
	                        pmCollection.trigger("updateCollectionMeta", targetCollection);
	                        if (typeof callback === "function") {
	                            callback();
	                        }
	                    }
	                }
	                else {
	                    pmCollection.trigger("addCollectionRequest", req, false, false);
	                    pmCollection.trigger("updateCollectionMeta", targetCollection);
	                    if (typeof callback === "function") {
	                        callback();
	                    }
	                }
	                pm.mediator.trigger('syncOperationDone');
	            });
	        }
	        catch(e) {
	            pm.syncLogger.error("Error while adding request: " + (e.stack || e));
	            //console.log("Adding remote request failed: "+e);
	            if(typeof callback === "function") callback();
	            return -1;
	        }
	        return 0;
	    },

	    //Add multiple requests to collection. Used when saving from history
	    addRequestsToCollection: function(requestsArray, collection, noNotif, syncImmediately) {
	        if(typeof(noNotif)==='undefined') noNotif = false;

	        var pmCollection = this;

	        var orderArray = [];
	        _.each(requestsArray, function(request) {
	            orderArray.push(request.id);
	        });

	        if (collection.name) {
	            collection.order = orderArray;
	            collection.timestamp = new Date().getTime();

	            var finalOrder = orderArray;
	            //create collection with no order
	            //create request
	            //update creation with order
	            pmCollection.addCollectionToDataStore(collection, true, false, function (requestsArray, syncImmediately, collection) {
	                return function (newCollection) {
	                    for (var i = 0; i < requestsArray.length; i++) {
	                        requestsArray[i].collectionId = collection.id;
	                        pmCollection.addRequestToDataStore(requestsArray[i], true, false, function (req) {
	                            pmCollection.trigger("addCollectionRequest", req, true, false);
	                            if (syncImmediately) {
	                                pm.syncManager.trigger("singleSyncDone");
	                                pm.mediator.trigger("commitTransaction", collection.id);
	                            }
	                        });
	                    }
	                }
	            }(requestsArray, syncImmediately, collection));
	        }
	        else {
	            //collection already exists
	            _.each(requestsArray, function(request) {
	                request.collectionId = collection.id;
	            });

	            var targetCollection = pmCollection.get(collection.id);
	            var oldCollection = pmCollection.getJSONFromCollection(targetCollection);

	            for (var i = 0; i < requestsArray.length; i++) {
	                var collectionRequest = requestsArray[i];
	                targetCollection.addRequestIdToOrder(collectionRequest.id);
	                pmCollection.addRequestToDataStore(collectionRequest, true, true, function(targetCollection, oldCollection) {
	                    return function(req) {
	                        pmCollection.updateCollectionInDataStoreWithoutSync(targetCollection.getAsJSON(), oldCollection, true, function() {
	                            pmCollection.trigger("addCollectionRequest", req, true);
	                        });
	                    }
	                } (targetCollection, oldCollection));
	            }
	        }
	    },

	    // Add request to collection. For the current request
	    addRequestToCollectionWithOptSync: function (collectionRequest, collection, noNotif, syncImmediately, openRequest, toSync) {
	        if(typeof(noNotif)==='undefined') noNotif = false;
	        if(typeof(openRequest)==='undefined') openRequest = true;

	        var pmCollection = this;

	        if (collection.name) {
	            collection.requests = [];
	            collection.order = [collectionRequest.id];
	            collection.timestamp = new Date().getTime();

	            var finalOrder = [collectionRequest.id];
	            //create collection with no order
	            //create request
	            //update creation with order
	            pmCollection.addCollectionToDataStore(collection, true, false, function(newCollection) {
	                pmCollection.addRequestToDataStoreWithOptSync(collectionRequest, true, toSync, false, function(req) {
	                    pmCollection.trigger("addCollectionRequest", req, true, openRequest);
	                    pmCollection.loadCollectionRequest(req.id);
	                    if(syncImmediately) {
	                        pm.syncManager.trigger("singleSyncDone");
	                        pm.mediator.trigger("commitTransaction", collection.id);
	                    }
	                });
	            });

	        }
	        else {
	            collectionRequest.collectionId = collection.id;

	            var targetCollection = pmCollection.get(collection.id);
	            var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	            targetCollection.addRequestIdToOrder(collectionRequest.id);


	            pmCollection.addRequestToDataStoreWithOptSync(collectionRequest, true, toSync, syncImmediately, function(req) {
	                pmCollection.updateCollectionInDataStoreWithoutSync(targetCollection.getAsJSON(), oldCollection, true, function() {
	                    pmCollection.trigger("addCollectionRequest", req, true, openRequest);
	                    if(openRequest) {
	                       pmCollection.loadCollectionRequest(req.id); //WHY?
	                    }
	                });
	            });
	        }

	        this.trigger("updateCollectionRequest", collectionRequest, noNotif);

	        pm.mediator.trigger("updateCollectionRequest", collectionRequest);
	    },


	    addRequestToCollection:function (collectionRequest, collection, noNotif, syncImmediately, openRequest) {
	        this.addRequestToCollectionWithOptSync(collectionRequest, collection, noNotif, syncImmediately, openRequest, true);
	    },

	    // Add multiple requests to folders (from history
	    addRequestsToFolder: function(requestArray, collectionId, folderId, noNotif, syncImmediately) {
	        if(typeof(noNotif)==='undefined') noNotif = false;

	        var pmCollection = this;

	        var collection = this.get(collectionId);
	        _.each(requestArray, function(collectionRequest) {
	            collectionRequest.collectionId = collectionId;
	            collectionRequest.folder = folderId;
	            collection.addRequestIdToOrder(collectionRequest.id);
	        });

	        var targetFolder = this.getFolderById(folderId);

	        for(var i=0;i<requestArray.length;i++) {
	            var collectionRequest = requestArray[i];
	            pmCollection.addRequestToDataStore(collectionRequest, true, syncImmediately, function(folderId) {
	                return function(req) {
	                    pmCollection.moveRequestToFolderWithOptSync(req.id, folderId, false);
	                };
	            } (folderId));
	        }

	        if(!noNotif) {
	            /*  noty(
	                {
	                    type:'success',
	                    text:'Saved request',
	                    layout:'topCenter',
	                    timeout:750
	                });*/
	            this.loadCollectionRequest(collectionRequest.id);
	        }
	    },

	    addRequestToFolderWithOptSync: function(collectionRequest, collectionId, folderId, noNotif, sync, syncImmediately) {
	        if(typeof(noNotif)==='undefined') noNotif = false;

	        var pmCollection = this;

	        var collection = this.get(collectionId);
	        collectionRequest.collectionId = collectionId;
	        collectionRequest.folder = folderId;
	        collection.addRequestIdToOrder(collectionRequest.id);
	        var targetFolder = this.getFolderById(folderId);
	        pmCollection.addRequestToDataStoreWithOptSync(collectionRequest, sync, sync, syncImmediately, function(folderId) {
	            return function(req) {
	                pmCollection.moveRequestToFolderWithOptSync(req.id, folderId, false);
	                //Why is this needed? //pmCollection.loadCollectionRequest(req.id);
	            };
	        } (folderId));


	        if(!noNotif) {
	           /* noty(
	                {
	                    type:'success',
	                    text:'Saved request',
	                    layout:'topCenter',
	                    timeout:750
	                });*/
	        }
	    },


	    // Add single request to folder
	    addRequestToFolder: function(collectionRequest, collectionId, folderId, noNotif, syncImmediately) {
	        this.addRequestToFolderWithOptSync(collectionRequest, collectionId, folderId, noNotif, true, syncImmediately);
	    },

	    //when the user is adding a response
	    addResponseToCollectionRequestWithOptSync: function(collectionRequestId, response, toSync, callback) {
	        var pmCollection = this;

	        pm.indexedDB.getCollectionRequest(collectionRequestId, function(callback, response, toSync) {
	            return function(collectionRequest) {
	                if(!collectionRequest) {
	                    //console.log("No such request found. Cannot add response to request.");
	                    if(typeof callback==="function") {
	                        callback();
	                    }
	                    return;
	                }
	                var oldRequest = pmCollection.getJSONFromRequest(collectionRequest);
	                var responses;

	                var collectionModel = pm.collections.getCollectionById(collectionRequest.collectionId);
	                response.write = collectionModel.get("write")==true || pm.user.id==collectionModel.get("owner");

	                if (collectionRequest.responses instanceof Array) {
	                    collectionRequest["responses"].push(response);
	                }
	                else {
	                    collectionRequest["responses"] = [response];
	                }


	                var responseToAdd = _.clone(response);

	                pmCollection.updateRequestInDataStore(collectionRequest, oldRequest, true, function(request) {
	                    pmCollection.trigger("updateCollectionRequest", request, true);
	                    pm.mediator.trigger("updateCollectionRequest", request);

	                    //sync the response
	                    if (toSync) {
	                        responseToAdd.requestObject = JSON.stringify(responseToAdd.request);
	                        responseToAdd.request = request.id;
	                        responseToAdd.collection = request.collection;
	                        responseToAdd.collectionId = request.collectionId;
	                        responseToAdd.owner = request.owner;
	                        if(request.folder) {
	                            responseToAdd.folder = request.folder;
	                        }
	                        pm.syncManager.addChangeset("response", "create", responseToAdd, null, true);
	                    }

	                    if(typeof callback==="function") {
	                        callback();
	                    }

	                }, false);
	            }
	        } (callback, response, toSync));
	        return 0;
	    },

	    //accepts an array of responses
	    //called when remote responses are added to a request
	    addResponsesToCollectionRequestWithoutSync: function(collectionRequestId, responses, callback) {
	        var pmCollection = this;
	        var allResponses = _.cloneDeep(responses);

	        pm.indexedDB.getCollectionRequest(collectionRequestId, function (collectionRequest) {
	            if(!collectionRequest) {
	                if(typeof callback === "function") callback();
	                return;
	            }

	            var oldRequest = pmCollection.getJSONFromRequest(collectionRequest);
	            var responses;
	            var collectionModel = pm.collections.getCollectionById(collectionRequest.collection);

	            var numResponses = allResponses.length;
	            for(i=0;i<numResponses;i++) {
	                if(allResponses[i].meta && allResponses[i].data) {//newAPI
	                    allResponses[i] = allResponses[i].data;
	                }
	                allResponses[i].write = collectionModel.get("write") || pm.user.id==collectionModel.get("owner");
	            }

	            if (collectionRequest.responses instanceof Array) {
	                collectionRequest["responses"] = collectionRequest["responses"].concat(allResponses);
	            }
	            else {
	                collectionRequest["responses"] = allResponses;
	            }

	            pmCollection.updateRequestInDataStore(collectionRequest, oldRequest, true, function(request) {
	                pmCollection.trigger("updateCollectionRequest", request, true);
	                pm.mediator.trigger("updateCollectionRequest", request);

	                if(callback) callback();

	            }, false);
	        });
	        return 0;
	    },


	    addResponseToCollectionRequest: function(collectionRequestId, response) {
	        this.addResponseToCollectionRequestWithOptSync(collectionRequestId, response, true);
	    },

	    updateResponsesForCollectionRequestWithOptSync: function(collectionRequestId, responses, toSync) {
	        var pmCollection = this;

	        pm.indexedDB.getCollectionRequest(collectionRequestId, function (collectionRequest) {
	            var oldRequest = pmCollection.getJSONFromRequest(collectionRequest);
	            collectionRequest.responses = responses;
	            pmCollection.updateRequestInDataStore(collectionRequest, oldRequest, true, function(request) {
	                pmCollection.trigger("updateCollectionRequest", request, true);
	                pm.mediator.trigger("updateCollectionRequest", request);
	            }, toSync);
	        });
	    },

	    updateResponsesForCollectionRequest: function(collectionRequestId, responses) {
	        this.updateResponsesForCollectionRequestWithOptSync(collectionRequestId, responses, true);
	    },

	    // Update collection request
	    updateCollectionRequest:function (collectionRequest) {
	        var pmCollection = this;

	        pm.indexedDB.getCollectionRequest(collectionRequest.id, function (req) {
	            var oldRequest = pmCollection.getJSONFromRequest(req);
	            if(!oldRequest) {
	                console.log("Request could not be found locally. Cannot update");
	                return;
	            }
	            collectionRequest.name = req.name;
	            collectionRequest.description = req.description;
	            collectionRequest.collectionId = req.collectionId;
	            collectionRequest.responses = req.responses;

	            pmCollection.updateRequestInDataStore(collectionRequest, oldRequest, true, function (request) {
	                pmCollection.trigger("updateCollectionRequest", request);
	                pm.mediator.trigger("updateCollectionRequest", request);
	            }, true);
	        });
	    },


	    updateRemoteCollectionRequest: function(request, callback) {
	        try  {
	            var pmCollection = this;
	            var oldRequest = pm.collections.getRequestById(request.id);
	            var newRequest = this.mergeEntitiesForUpdate(request, oldRequest);
	            pmCollection.updateRequestInDataStore(newRequest, oldRequest, true, function(request1) {
	                pmCollection.trigger("updateCollectionRequest", request1, true);
	                pm.mediator.trigger("updateCollectionRequest", request1);
	                pm.mediator.trigger('syncOperationDone');
	                if(callback) callback();
	            }, false);
	        }
	        catch(e) {
	            console.log("Updating collection request failed: "+e);
	            callback();
	            return -1;
	        }
	        return 0;
	    },

	    updateCollectionRequestMeta: function(id, name, description) {
	        var pmCollection = this;

	        pm.indexedDB.getCollectionRequest(id, function (req) {
	            var oldRequest = pmCollection.getJSONFromRequest(req);
	            if(name) req.name = name;
	            if(description!==null) req.description = description;

	            pmCollection.updateRequestInDataStore(req, oldRequest, true, function(request) {
	                pmCollection.trigger("updateCollectionRequest", request, true);
	                pm.mediator.trigger("updateCollectionRequest", request);
	            }, true);
	        });
	    },

	    updateCollectionRequestSyncStatus: function(id, status) {
	        var pmCollection = this;

	        pm.indexedDB.getCollectionRequest(id, function (req) {
	            var oldRequest = pmCollection.getJSONFromRequest(req);
	            req.synced = status;

	            pmCollection.updateRequestInDataStore(req, oldRequest, false, function(request) {
	            });
	        });
	    },

	    updateCollectionRequestTests: function(id, tests) {
	        var pmCollection = this;

	        pm.indexedDB.getCollectionRequest(id, function (req) {
	            var oldRequest = pmCollection.getJSONFromRequest(req);
	            req.tests = tests;

	            pmCollection.updateRequestInDataStore(req, oldRequest, true, function(request) {
	                pmCollection.trigger("updateCollectionRequest", request);
	                pm.mediator.trigger("updateCollectionRequest", request);
	            }, true);
	        });
	    },

	    deleteCollectionRequestWithOptSync: function(id, toSync, callback) {
	        var pmCollection = this;

	        pmCollection.deleteRequestFromDataStoreWithOptSync(id, true, true, toSync, function() {
	            pmCollection.trigger("removeCollectionRequest", id);
	            pm.mediator.trigger('syncOperationDone');
	            if (callback) {
	                callback();
	            }
	        });

	        return 0;
	    },

	    // Delete collection request
	    deleteCollectionRequest:function (id, callback) {
	        this.deleteCollectionRequestWithOptSync(id, true, callback);
	    },

	    //used when request is added to folder
	    addRequestToFolder_old: function(requestId, targetFolder, toSync) {
	        //Just update the folder
	        targetFolder.order.push(requestId);
	        if(toSync) {
	            pm.syncManager.addChangeset('folder','update',targetFolder, null, true);
	        }
	    },

	    getRemoteRequestIntoCollectionOrFolder: function(requestId, targetFolderId, targetCollectionId, ownerId, callback) {
	        var oldThis = this;
	        pm.syncManager.getEntityFromId("request", requestId, ownerId, null, function(request) {
	            if(request.hasOwnProperty("err")) {
	                pm.mediator.trigger('syncOperationFailed', request.err);
	                return;
	            }

	            request["collectionId"] = targetCollectionId;
	            if(targetFolderId) {
	                request.folder = targetFolderId;
	            }
	            ////pm.syncStatusManager.addNotification("request",request, "create");
	            //hack for rawModeData
	            if(request.dataMode==="raw" && request.rawModeData) {
	                request.data = request.rawModeData;
	                delete request.rawModeData;
	            }
	            oldThis.addFullCollectionRequest(request, callback);
	        });
	    },


	    moveRequestToFolderWithOptSync: function(requestId, targetFolderId, toSync, callback) {
	        //console.log("Request moved to folder");
	        pm.requestTransferInProgress = true;
	        setTimeout(function() {
	            pm.requestTransferInProgress = false;
	        },200);

	        var pmCollection = this;
	        var request = this.getRequestById(requestId); //will return a backbone object
	        if(!request) {
	            //request not found
	            if(typeof callback === "function") {
	                callback();
	            }
	            return;
	        }

	        targetFolderId = targetFolderId.substring(targetFolderId.indexOf("#")+1);

	        var folder = this.getFolderById(targetFolderId);

	        var targetCollection = this.getCollectionForFolderId(targetFolderId);

	        if(request == null && targetCollection!=null) {
	            //if request doesn't exist
	            var ownerOfCollection = targetCollection.get("owner");
	            this.getRemoteRequestIntoCollectionOrFolder(requestId, targetFolderId, targetCollection.get("id"), ownerOfCollection, callback);
	        }
	        else if(folder==null || targetCollection == null) {
	            //destination doesn't exist - delete request
	            targetCollection = this.getCollectionById(request.collection);
	            if(!targetCollection) {
	                this.deleteCollectionRequestWithOptSync(requestId, false, callback);
	                return;
	            }

	            return -1;
	        }
	        else {
	            //actual transfer action
	            var oldLocation = {};
	            if(request.folder!=null) {
	                oldLocation = {
	                    "model": "folder",
	                    "model_id": request.folder,
	                    "collection_id": request.collectionId,
	                    "owner": pm.collections.getOwnerForCollection(request.collectionId)
	                };
	            }
	            else {
	                oldLocation = {
	                    "model": "collection",
	                    "model_id": request.collectionId,
	                    "collection_id": request.collectionId,
	                    "owner": pm.collections.getOwnerForCollection(request.collectionId)
	                };
	            }


	            var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	            if(targetCollection.id === request.collectionId) {
	                //same collection - retain ID
	                if(toSync) {
	                    pm.tracker.trackEvent("request", "transfer", "same_collection");
	                    pm.appWindow.trigger("sendMessageObject", "moveRequestToFolder", request.id, folder.id);
	                }

	                targetCollection.addRequestIdToFolder(folder.id, request.id);

	                var oldRequest = _.clone(request);

	                request.folder = folder.id;
	                targetCollection.removeRequestIdFromOrder(request.id);

	                pmCollection.updateRequestInDataStore(request, oldRequest, true, function() {
	                    pmCollection.updateCollectionInDataStoreWithoutSync(targetCollection.getAsJSON(), oldCollection, true, function() {
	                        pmCollection.trigger("moveRequestToFolder", oldLocation, targetCollection, folder, request, toSync);
	                        pm.mediator.trigger('syncOperationDone');
	                        if(typeof callback === "function") {
	                            callback();
	                        }
	                    });
	                }, false);
	            }
	            else {
	                // Different collection - new request ID
	                if(toSync) {
	                    pm.tracker.trackEvent("request", "transfer", "different_collection");
	                }

	                var newRequestId = guid();
	                pmCollection.deleteCollectionRequestWithOptSync(requestId, true, function(request, newRequestId, targetCollection, folder, oldCollection, oldLocation, callback) {
	                    return function() {
	                        var oldRequestId = request.id;
	                        request.id = newRequestId;
	                        request.collection = request.collectionId = targetCollection.get("id");
	                        request.folder = folder.id;
	                        request.owner = targetCollection.get("owner");

	                        //targetCollection.addRequestIdToOrder(request.id); - WHY ARE WE DOING THIS?
	                        //pmCollection.trigger("removeCollectionRequest", requestId);

	                        //to avoid sending PUT /request
	                        pmCollection.addRequestToDataStoreWithOptSync(request, true, true, true, function(targetCollection, folder, oldCollection, callback) {
	                            return function(req) {
	                                targetCollection.addRequestIdToFolder(folder.id, req.id);
	                                var collection = targetCollection.getAsJSON();
	                                pmCollection.updateCollectionInDataStoreWithoutSync(collection, oldCollection, true, function(oldLocation, targetCollection, folder, request, callback, oldRequestId) {
	                                    return function(c) {
	                                        //don't sync the transfer request if the request is moved to a different collection - a delete and a create event will be sent
	                                        pmCollection.trigger("moveRequestToFolder", oldLocation, targetCollection, folder, request, false, oldRequestId);
	                                        //pmCollection.trigger("addCollectionRequest", request, false, false);

	                                        pm.mediator.trigger('syncOperationDone');
	                                        if(typeof callback === "function") callback();
	                                    }
	                                } (oldLocation, targetCollection, folder, request, callback, oldRequestId));
	                            }
	                        } (targetCollection, folder, oldCollection, callback));
	                    }
	                } (request, newRequestId, targetCollection, folder, oldCollection, oldLocation, callback));

	            }
	        }
	    },

	    moveRequestToFolder: function(requestId, targetFolderId) {
	        this.moveRequestToFolderWithOptSync(requestId, targetFolderId, true);
	    },

	    moveRequestToCollection: function(requestId, targetCollectionId) {
	        this.moveRequestToCollectionWithOptSync(requestId, targetCollectionId, true);
	    },

	    moveRequestToCollectionWithOptSync: function(requestId, targetCollectionId, toSync, callback) {
	        pm.requestTransferInProgress = true;
	        setTimeout(function() {
	            pm.requestTransferInProgress = false;
	        },200);
	        var pmCollection = this;
	        var targetCollection = this.get(targetCollectionId);
	        var request = _.clone(this.getRequestById(requestId));

	        if(request == null && targetCollection!=null) {
	            //if request doesn't exist
	            var ownerOfCollection = targetCollection.get("owner");
	            this.getRemoteRequestIntoCollectionOrFolder(requestId, null, targetCollection.get("id"), ownerOfCollection, callback);
	        }
	        else if(targetCollection == null) {
	            //destination doesn't exist - delete request
	            this.deleteCollectionRequestWithOptSync(requestId, false, callback);
	        }
	        else {
	            request.owner = pm.collections.getOwnerForCollection(request.collectionId);

	            var oldLocation = {};
	            if(request.folder!=null) {
	                oldLocation = {
	                    "model": "folder",
	                    "model_id": request.folder,
	                    "collection_id": request.collectionId,
	                    "owner": request.owner
	                };


	                //delete from folder order
	                pmCollection.deleteRequestFromFolderOrder(request.collectionId, request.folder, requestId);
	            }
	            else {
	                oldLocation = {
	                    "model": "collection",
	                    "model_id": request.collectionId,
	                    "collection_id": request.collectionId,
	                    "owner": request.owner
	                };
	            }

	            var oldCollection = pmCollection.getJSONFromCollection(targetCollection);
	            if (targetCollectionId === request.collectionId) {
	                //same collection - retain requestId
	                if(toSync) {
	                    pm.tracker.trackEvent("request", "transfer", "same_collection");
	                    pm.appWindow.trigger("sendMessageObject", "moveRequestToCollection", request.id, request.collectionId);
	                }
	                targetCollection.addRequestIdToOrder(request.id);

	                var oldRequest = _.clone(request);
	                delete request.folder;
	                pmCollection.updateRequestInDataStore(request, oldRequest, true, function(request){ //delete folder.request
	                    pmCollection.updateCollectionInDataStoreWithoutSync(targetCollection.getAsJSON(), oldCollection, true, function (c) { //add request to collection order
	                        pmCollection.trigger("moveRequestToCollection", oldLocation, targetCollection, request, toSync);
	                        pm.mediator.trigger('syncOperationDone');
	                        if (callback) callback();
	                    });
	                });
	            }
	            else {
	                //var oldCollection = pmCollection.get(request.collectionId); - don't know what this is for
	                var newRequestId = guid();
	                pmCollection.deleteCollectionRequestWithOptSync(requestId, true, function () {
	                    request.id = newRequestId;
	                    request.collectionId = targetCollectionId;
	                    request.collection = targetCollectionId;

	                    request.owner = targetCollection.get("owner");
	                    delete request.folder;
	                    if(toSync) {
	                        pm.tracker.trackEvent("request", "transfer", "different_collection");
	                    }

	                    pmCollection.trigger("removeCollectionRequest", requestId);

	                    targetCollection.addRequestIdToOrder(request.id);

	                    pmCollection.addRequestToDataStoreWithOptSync(request, true, true, true, function (req) {
	                        pmCollection.updateCollectionInDataStoreWithoutSync(targetCollection.getAsJSON(), oldCollection, true, function (c) {
	                            //don't sync the transfer request if the request is moved to a different collection - a delete and a create event will be sent
	                            pmCollection.trigger("addCollectionRequest", request, false, false);
	                            //pmCollection.trigger("moveRequestToCollection", oldLocation, targetCollection, request, false);
	                            pm.mediator.trigger('syncOperationDone');
	                            if (callback) callback();
	                        });
	                    });
	                });
	            }
	        }
	    },

	    deleteRequestFromFolderOrder: function(collectionId, folderId, requestId) {
	        var collection = this.get(collectionId);
	        if(collection) {
	            var folders = collection.get("folders");
	            if(folders) {
	                 for(var i = 0; i < folders.length; i++) {
	                    indexInFolder = folders[i].order.indexOf(requestId);
	                    if(indexInFolder >= 0) {
	                         folders[i].order.splice(indexInFolder, 1);
	                         collection.set("folders", folders);
	                         return;
	                    }
	                }
	            }
	        }
	    },

	    // Get folder by ID
	    getFolderById: function(id) {
	        function existingFolderFinder(r) {
	            return r.id === id;
	        }

	        for(var i = 0; i < this.length; i++) {
	            var collection = this.models[i];
	            var folders = collection.get("folders");
	            var folder = _.find(folders, existingFolderFinder);
	            if (folder) {
	                return folder;
	            }
	        }

	        return null;
	    },

	    getAllFolders: function() {
	        var retVal = [];
	        for(var i = 0; i < this.length; i++) {
	            var collection = this.models[i];
	            retVal = retVal.concat(collection.get("folders"));
	        }
	        return retVal;
	    },

	    addFolder: function(parentId, folderName, description) {
	        var collection = this.get(parentId);
	        var oldCollection = this.getJSONFromCollection(collection);

	        var newFolder = {
	            "id": guid(),
	            "name": folderName,
	            "description": description,
	            "write": (collection.get("write") || pm.user.id == collection.get("owner")),
	            "order": []
	        };

	        collection.addFolder(newFolder);
	        this.trigger("addFolder", collection, newFolder);
	        this.updateCollectionInDataStoreWithoutSync(collection.getAsJSON(), oldCollection, true);
	        newFolder["collection"] = parentId;
	        newFolder["owner"] = collection.get("owner");
	        this.trigger("folderAdded", collection);
	        pm.appWindow.trigger("sendMessageObject", "addedFolder", collection, newFolder);
	        pm.syncManager.addChangeset("folder","create",newFolder, null, true);
	    },

	    addExistingFolder: function(parentId, folder, syncImmediately, toSync) {
	        if(typeof toSync === "undefined") {
	            toSync = true;
	        }
	        var collection = this.get(parentId);
	        var oldCollection = this.getJSONFromCollection(collection);
	        if(collection.hasFolderId(folder.id)) {
	            //console.log("Error - The folderID already exists in the collection. Not re-adding.");
	            return;
	        }
	        collection.addFolder(folder);
	        this.trigger("addFolder", collection, folder);
	        this.updateCollectionInDataStoreWithoutSync(collection.getAsJSON(), oldCollection,true);
	        folder["collection"] = parentId;
	        pm.appWindow.trigger("sendMessageObject", "addedFolder", collection, folder);
	        if(toSync) {
	            pm.syncManager.addChangeset("folder","create",folder, null, syncImmediately);
	        }
	    },

	    addFolderFromRemote: function(folder, callback) {
	        var collection, oldCollection;
	        try {
	            collection = this.get(folder.collection);
	            if(!collection) {
	                throw "The parent collection no longer exists";
	            }
	            oldCollection = this.getJSONFromCollection(collection);
	            folder.write = collection.get("write") || pm.user.id==collection.get("owner");

	            if(collection.hasFolderId(folder.id)) {
	                throw "The folderID already exists in the collection. Not re-adding.";
	            }

	            collection.addFolder(folder);
	            this.trigger("addFolder", collection, folder);
	            pm.collections.trigger("updateCollectionMeta", collection);
	            pm.appWindow.trigger("sendMessageObject", "addedFolder", collection, folder);
	            this.updateCollectionInDataStoreWithoutSync(collection.getAsJSON(), oldCollection,true, callback);
	            pm.mediator.trigger('syncOperationDone');
	        }
	        catch(e) {
	            //console.log("Did not add remote folder: "+e);
	            if(typeof callback === "function") {
	                callback();
	            }
	        }
	        return 0;
	    },

	    updateFolderFromRemote: function(folder, callback) {
	        var collection, oldCollection;
	        try {
	            collection = this.get(folder.collection);
	            oldCollection = this.getJSONFromCollection(collection);
	            collection.editFolder(folder);
	            this.trigger("updateFolder", collection, folder);
	            var collectionJson = collection.toJSON();
	            pm.appWindow.trigger("sendMessageObject", "updatedFolder", collectionJson, folder);
	            this.updateCollectionInDataStoreWithoutSync(collection.getAsJSON(), oldCollection,true, callback);
	            pm.mediator.trigger('syncOperationDone');
	        }
	        catch(e) {
	            //console.log("Faced error while adding remote folder");
	            callback();
	            return -1;
	        }
	        return 0;
	    },

	    updateFolderOrder: function(collectionId, folderId, order, sync) {
	        var folder = this.getFolderById(folderId);
	        folder.order = order;
	        var collection = this.get(collectionId);
	        var oldCollection = this.getJSONFromCollection(collection);
	        collection.editFolder(folder);
	        var collectionJson = collection.getAsJSON();
	        this.updateCollectionInDataStoreWithoutSync(collection.getAsJSON(), oldCollection,true);
	        folder["collectionId"] = collectionId;
	        pm.appWindow.trigger("sendMessageObject", "updatedFolder", collectionJson, folder);
	        pm.syncManager.addChangeset("folder","update",folder, null, true);
	    },

	    updateFolderMeta: function(id, name, description) {
	        var folder = this.getFolderById(id);
	        if(name) folder.name = name;
	        if(description) folder.description = description;
	        var collection = this.getCollectionForFolderId(id);
	        var oldCollection = this.getJSONFromCollection(collection);
	        collection.editFolder(folder);
	        this.trigger("updateFolder", collection, folder);
	        var collectionJson = collection.getAsJSON();
	        this.updateCollectionInDataStoreWithoutSync(collectionJson, oldCollection, true);
	        folder["collectionId"] = collection.getAsJSON().id;
	        var folderToSend = _.clone(folder);
	        delete folderToSend.order;
	        pm.appWindow.trigger("sendMessageObject", "updatedFolder", collectionJson, folderToSend);
	        pm.syncManager.addChangeset("folder","update",folderToSend, null, true);
	    },

	    deleteFolderWithOptSync: function(id, toSync, callback) {
	        var folder = this.getFolderById(id);
	        if(!folder) {
	            pm.mediator.trigger('syncOperationDone');
	            if(callback) callback();
	            return;
	        }
	        var folderRequestsIds = _.clone(folder.order);
	        var i;
	        var collection;

	        for(i = 0; i < folderRequestsIds.length; i++) {
	            //only one delete folder request is sent to the sync server, individual request deletes aren't sent
	            this.deleteRequestFromDataStoreWithOptSync(folderRequestsIds[i], true, false, false, null);
	        }

	        collection = this.getCollectionForFolderId(id);
	        var oldCollection = this.getJSONFromCollection(collection);
	        collection.deleteFolder(id);
	        var collectionJson = collection.getAsJSON();

	        this.trigger("deleteFolder", collection, id);
	        if(toSync) {
	            pm.appWindow.trigger("sendMessageObject", "deletedFolder", collectionJson, id);
	        }
	        this.updateCollectionInDataStoreWithoutSync(collectionJson, oldCollection,true, function() {
	            if(toSync) {
	                pm.syncManager.addChangeset("folder","destroy",{"id":id, owner: collection.get("owner")}, null, true);
	            }
	            pm.mediator.trigger('syncOperationDone');
	            if(callback) callback();
	        });
	    },

	    deleteFolder: function(id) {
	        this.deleteFolderWithOptSync(id, true);
	    },

	    filter: function(term) {
	        term = term.toLowerCase();
	        var collections = this.toJSON();
	        var collectionCount = collections.length;
	        var filteredCollections = [];
	        var name;
	        var requests;
	        var requestsCount;
	        var i, j, k, c, r, f;
	        var folders;
	        var folderOrder;
	        var visibleRequestHash = {};

	        for(i = 0; i < collectionCount; i++) {
	            c = {
	                id: collections[i].id,
	                name: collections[i].name,
	                requests: [],
	                folders: [],
	                toShow: false,
	                toShowForCollection: false
	            };

	            if(collections[i].name) {
	                name = collections[i].name.toLowerCase();
	            }
	            else {
	                name = "";
	            }

	            if (name.search(term) >= 0) {
	                c.toShow = true;
	                c.toShowForCollection = true;
	            }

	            requests = collections[i].requests;

	            if (requests) {
	                requestsCount = requests.length;

	                for(j = 0; j < requestsCount; j++) {
	                    r = {
	                        id: requests[j].id,
	                        name: requests[j].name,
	                        toShow: false
	                    };

	                    if(requests[j].name) {
	                        name = requests[j].name.toLowerCase();
	                    }
	                    else {
	                        name = "";
	                    }

	                    if (c.toShowForCollection || name.search(term) >= 0) {
	                        r.toShow = true;
	                        c.toShow = true;
	                        visibleRequestHash[r.id] = true;
	                    }
	                    else {
	                        r.toShow = false;
	                        visibleRequestHash[r.id] = false;
	                    }

	                    c.requests.push(r);
	                }
	            }

	            if("folders" in collections[i]) {
	                folders = collections[i].folders;
	                for (j = 0; j < folders.length; j++) {
	                    f = {
	                        id: folders[j].id,
	                        name: folders[j].name,
	                        toShow: false
	                    };

	                    if(folders[j].name) {
	                        name = folders[j].name.toLowerCase();
	                    }
	                    else {
	                        name = "";
	                    }

	                    folderOrder = folders[j].order;

	                    if (c.toShowForCollection || name.search(term) >= 0) {
	                        f.toShow = true;
	                        c.toShow = true;

	                        //show all requests in this folder
	                        for(k = 0; k < folderOrder.length; k++) {
	                            var thisRequestId = folderOrder[k];
	                            _.map(c.requests, function(req) {
	                                if(req.id === thisRequestId) {
	                                    req.toShow = true;
	                                }
	                            });
	                        }
	                    }



	                    // Check if any requests are to be shown
	                    for(k = 0; k < folderOrder.length; k++) {
	                        if (visibleRequestHash[folderOrder[k]] === true) {
	                            f.toShow = true;
	                            c.toShow = true;
	                            break;
	                        }
	                    }

	                    c.folders.push(f);
	                }
	            }

	            filteredCollections.push(c);
	        }

	        this.trigger("filter", filteredCollections);
	        return filteredCollections;
	    },

	    revert: function() {
	        this.trigger("revertFilter");
	    },


	    //Sync handlers
	    onSyncChangeReceived: function(verb, message, callback) {
	        if(!message.model) message.model = message.type;

	        var allowedTypes = ["collection", "request", "response", "folder"];
	        if(allowedTypes.indexOf(message.model) === -1) {
	            return;
	        }

	        try {
	            if (verb === "create") {
	                this.createRemoteEntity(message, callback);
	            }
	            else if (verb === "update") {
	                this.updateRemoteEntity(message, callback);
	            }
	            else if (verb === "destroy" || verb === "delete") {
	                this.deleteRemoteEntity(message, callback);
	            }
	            else if (verb === "transfer") {
	                this.transferRemoteEntity(message, callback);
	            }
	            else if (verb === "import") {
	                //whole collection
	                this.importRemoteCollection(message.data, callback);
	            }
	            else if(verb === "history" || verb === "subscribe" || verb === "unsubscribe") {
	                //dont fret.
	                //history/subscription model will take care of it
	                return;
	            }
	            else if (verb === "share") {
	                this.updateRemoteEntityPermission(message, true, callback);
	            }
	            else if (verb === "unshare") {
	                this.updateRemoteEntityPermission(message, false, callback);
	            }
	            else {
	                pm.syncLogger.error("Unknown action for collection/request/response/folder: " + verb);
	                if(typeof callback === "function") callback();
	            }
	        }
	        catch(e) {
	            pm.syncLogger.error("Problem saving change pmcollections: " + e.message +
	                " - verb:"+verb+",msg=  "+
	                JSON.stringify(message));
	            if(typeof callback === "function") callback();
	        }
	    },

	    createRemoteEntity: function(message, callback) {
	        if(message.model === "collection") {
	            message.data["requests"]=[];

	            if(message.hasOwnProperty('meta') && message.meta.hasOwnProperty('access') && message.meta.access === 'write') {
	              message.data.write = true;
	            }

	            var status = this.addFullCollection(message.data, true, callback);
	            pm.appWindow.trigger("sendMessageObject", "addedCollection", message.data);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Adding full collection failed");
	            }
	            else {
	                //TODO: Where do we put this? :S
	                pm.syncManager.updateSinceFromMessage(message);
	                if(message.data.order) {
	                    this.trigger("sortRequestContainer", "collection", message.data.id, message.data.order);
	                }
	            }
	            pm.syncLogger.log(new Error(),["Collection created: ",message.data]);
	        }
	        else if (message.model === "request") {
	            message.data["collectionId"]=message.data.collection;
	            //pm.syncStatusManager.addNotification("request",message.data, "create");
	            //hack for rawModeData
	            //hack for rawModeData
	            if(message.data.dataMode==="raw" && message.data.rawModeData) {
	                message.data.data = message.data.rawModeData;
	                delete message.data.rawModeData;
	            }
	            pm.appWindow.trigger("sendMessageObject", "addedCollectionRequest", message.data);
	            var status = this.addFullCollectionRequest(message.data, callback);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Adding full collection request failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	            pm.syncLogger.log(new Error(),["Request created: ",message.data]);
	        }
	        else if (message.model === "response") {
	            //pm.syncStatusManager.addNotification("response",message.data, "create");
	            var requestId = message.data.request;
	            //here, requestId must be a uuid, not an object

	            var newline = new RegExp("\n",'g');
	            if(message.data.requestObject) {
	                message.data.requestObject = message.data.requestObject.replace(newline, "");
	            }

	            try {
	                message.data.request = JSON.parse(message.data.requestObject);
	            }
	            catch(e) {
	                //console.log("Could not parse response's request");
	                message.data.request = {};
	            }

	            var status = this.addResponseToCollectionRequestWithOptSync(requestId, message.data, false, callback);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Adding response to request failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	            pm.syncLogger.log(new Error(),["Response added: ",message.data]);
	        }
	        else if (message.model === "folder") {
	            //pm.syncStatusManager.addNotification("folder",message.data, "create");
	            var status = pm.collections.addFolderFromRemote(message.data, callback);
	            //triggered in addFolderFromRemote
	            //pm.appWindow.trigger("sendMessageObject", "addedFolder", {id:message.data.collection}, message.data);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Add folder from remote failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	                if(message.data.order) {
	                    this.trigger("sortRequestContainer", "folder", message.data.id, message.data.order);
	                }
	            }
	            pm.syncLogger.log(new Error(),["Folder added: ",message.data]);
	        }
	    },

	    getActiveUserPermission: function(permissions) {
	      var userId = pm.user.get('id');
	      if(!userId) {
	        return null;
	      }

	      var userPermission = _.find(permissions.users, function(userPermission) {
	        return userPermission.id === userId;
	      });

	      if(userPermission) {
	        return userPermission.access;
	      }

	      var teamPermission = permissions.team;

	      if(teamPermission) {
	        return teamPermission.access;
	      }

	      return null;
	    },

	    updateRemoteEntityPermission: function(message, share, callback) {
	      if(message.model === "collection") {
	        var collectionId;
	          if(message.meta && message.meta.instance && message.meta.instance.id) {
	            collectionId = message.meta.instance.id;
	          } else if(message.model_id) {
	            collectionId = message.model_id;
	          }
	          if(!collectionId) {
	            pm.syncLogger.log(new Error(), ["Permission update failed: ", message]);
	            return;
	          }
	          var collection = this.get(collectionId);
	          var userAccess = this.getActiveUserPermission(message.data); //always assume this to be true.
	          userAccess = true; //force set to true. not getting message.data.users anymore
	          if(collection && userAccess) {
	            var oldWrite = collection.get("write");
	            this.updateCollectionShared(collection.get('id'), share, oldWrite);
	            pm.syncLogger.log(new Error(), ["Permission updated: ", message]);
	          }
	      }
	    },

	    updateRemoteEntity: function(message, callback) {
	        if(message.model === "collection") {
	            //pm.syncStatusManager.addNotification("collection",message.data, "update");
	            //check for order update
	            var relParent = this.get(message.data.id);
	            if(relParent && message.data.order) {
	                if(message.resolved===true || (message.meta && message.meta.resolved==true)) {
	                    //dont force sync if this change is a resolved change
	                }
	                else {
	                    var currentOrder = relParent.get("order");
	                    var serverOrder = message.data.order;

	                    //do not remove elements from the currentOrder
	                    var clientOnly = _.difference(currentOrder, serverOrder); //send these
	                    var serverOnly = _.difference(serverOrder, currentOrder); //get these
	                    if(clientOnly.length>0 || serverOnly.length>0) {
	                        //force sync
	                        pm.syncManager.startForceSync(message.data.id);
	                        if(typeof callback === "function") {
	                            callback();
	                        }
	                        return;//??
	                    }
	                    //message.data.order = message.data.order.concat(clientOnly);
	                }
	            }

	            var status = pm.collections.updateRemoteCollectionInDataStore(message.data,null,true, callback);
	            pm.appWindow.trigger("sendMessageObject", "updatedCollection", message.data);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Updating collection failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	                if(message.data.order) {
	                    this.trigger("sortRequestContainer", "collection", message.data.id, message.data.order);
	                }
	            }
	            pm.syncLogger.log(new Error(),["Collection updated: ",message.data]);
	        }
	        else if(message.model === "request") {
	            message.data["collectionId"]=message.data.collection;

	            //hack for rawModeData
	            if(message.data.dataMode==="raw" && message.data.rawModeData) {
	                message.data.data = message.data.rawModeData;
	                delete message.data.rawModeData;
	            }

	            //pm.syncStatusManager.addNotification("request",message.data, "update");
	            var status = pm.collections.updateRemoteCollectionRequest(message.data, callback);
	            pm.appWindow.trigger("sendMessageObject", "updatedCollectionRequest", message.data);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Updating collection request failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	            pm.syncLogger.log(new Error(),["Request updated: ",message.data]);
	        }
	        else if(message.model === "folder") {
	            //pm.syncStatusManager.addNotification("folder",message.data, "update");

	            var relParent = this.getFolderById(message.data.id);
	            if(relParent && message.data.order) {
	                if(message.resolved===true || (message.meta && message.meta.resolved==true)) {
	                    //dont force sync if this change is a resolved change
	                }
	                else {
	                    var currentOrder = relParent.order;
	                    var serverOrder = message.data.order;

	                    var clientOnly = _.difference(currentOrder, serverOrder);
	                    var serverOnly = _.difference(serverOrder, currentOrder);
	                    if(clientOnly.length>0 || serverOnly.length>0) {
	                        //force sync
	                        pm.syncManager.startForceSync(message.data.collection);
	                        if(typeof callback === "function") {
	                            callback();
	                        }
	                        return;//??
	                    }
	                    //message.data.order = message.data.order.concat(clientOnly);
	                }
	            }

	            var status = pm.collections.updateFolderFromRemote(message.data, callback);
	            pm.appWindow.trigger("sendMessageObject", "updatedFolder", message.data);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Updating folder failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	                if(message.data.order) {
	                    this.trigger("sortRequestContainer", "folder", message.data.id, message.data.order);
	                }
	            }
	            pm.syncLogger.log(new Error(),["Folder updated: ", message.data]);
	        }
	        else if(message.model==="response") {
	            //update response - no handler
	            if(typeof callback === "function") {
	                callback();
	            }
	        }
	    },

	    importRemoteCollection: function(message, callback) {
	        this.importWholeCollectionWithOptSync(message, false, false, false, callback);
	    },

	    deleteRemoteEntity: function(message, callback) {
	        if(message.model === "collection") {
	            pm.syncLogger.log(new Error(),["Collection destroyed: ",message.data]);
	            //pm.syncStatusManager.addNotification("collection",message.data, "destroy");

	            //unsubscribe if subscribed
	            if(pm.subscriptionManger.isSubscribedTo(message.data.id)) {
	                message.data.model_id = message.data.id;
	                pm.mediator.trigger("unsubscribeFromCollection", message, false, function() {
	                    //console.log("Unsubscribed");
	                });
	            }
	            var status = pm.collections.deleteCollectionFromDataStoreWithOptSync(message.data.id, true, false, callback);

	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Deleting collection failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	        }
	        else if(message.model === "request") {
	            pm.syncLogger.log(new Error(),["Request destroyed: ",message.data]);
	            //pm.syncStatusManager.addNotification("request",message.data, "destroy");
	            var status = pm.collections.deleteCollectionRequestWithOptSync(message.data.id, false, callback);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Deleting collection request failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	        }
	        else if(message.model === "folder") {
	            //pm.syncStatusManager.addNotification("folder",message.data, "destroy");
	            pm.syncLogger.log(new Error(),["Folder destroyed: ",message.data]);
	            var status = pm.collections.deleteFolderWithOptSync(message.data.id, false, callback);
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Deleting folder failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	        }
	        else if(message.model === "response") {
	            pm.syncLogger.log(new Error(),["Response destroyed: ",message.data]);
	            //pm.syncStatusManager.addNotification("response",message.data, "destroy");
	            pm.request.deleteSampleResponseByIdWithOptSync(message.data.id, false, callback);
	            //call callback regardless
	            pm.syncManager.updateSinceFromMessage(message);
	        }
	    },

	    transferRemoteEntity: function(message, callback) {
	        var destType = message.data.to.model;
	        //pm.syncStatusManager.addNotification("request",message.data, "transfer");
	        if(destType === "folder") {
	            this.moveRequestToFolderWithOptSync(message.data.id, message.data.to.model_id, false, callback);
	        }
	        else if(destType === "collection") {
	            this.moveRequestToCollectionWithOptSync(message.data.id, message.data.to.model_id, false, callback);
	        }
	    },

	    onSyncErrorReceived: function(verb, message) {
	        var pmCollection = this;
	        //collection ID already shared in team
	        if(message.error.name === "collectionIdSharedError") {
	          pm.alerts.warning('This collection has already been shared in the team. You can share it if you duplicate it', {
	            timeout: 5000
	          });
	            //unshare it
	            var collection = pm.collections.getCollectionById(message.error.details.model_id);
	            collection.set("sharedWithTeam",false);

	            pmCollection.updateCollectionInDataStoreWithOptSync(collection.getAsJSON(), collection, true, false, function (c) {
	                pmCollection.trigger("updateCollection", collection);
	            });
	            //this.trigger("updateCollectionMeta", targetCollection);
	        }
	    },
	});
	module.exports = PmCollections;


/***/ },
/* 20 */
/***/ function(module, exports) {

	var AddCollectionModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        pm.appWindow.trigger("registerInternalEvent", "newCollection", function() {
	            $('#modal-new-collection').modal('show');
	        }, this);

	        $('#form-new-collection').submit(function () {
	            var name = $('#new-collection-blank').val();
	            var description = view.editor.getValue();
	            model.addCollection(name, description);
	            $('#new-collection-blank').val("");
	            $('#modal-new-collection').modal('hide');
	            pm.tracker.trackEvent("collection", "add", "empty");
	            return false;
	        });

	        $('#modal-new-collection-submit').click(function () {
	            var name = $('#new-collection-blank').val();
	            var description = view.editor.getValue();
	            model.addCollection(name, description);
	            $('#new-collection-blank').val("");
	            $('#modal-new-collection').modal('hide');
	            pm.tracker.trackEvent("collection", "add", "empty");
	            return false;
	        });

	        $("#modal-new-collection").on("shown", function () {
	            $("#new-collection-blank").focus();
	            pm.app.trigger("modalOpen", "#modal-new-collection");

	            if (!view.editor) {
	                view.initializeEditor();
	            }
	            setTimeout(function() {
	                view.editor.setValue("", -1);
	                //view.editor.refresh();
	                view.editor.gotoLine(0,0,false);
	            }, 150);
	        });

	        $("#modal-new-collection").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-new-collection").on('keydown', 'div.input', function (event) {
	            if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "create_collection");
	                $('#form-new-collection').submit();
	                event.preventDefault();
	                return false;
	            }

	            return true;
	        });
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = pm.addCollectionEditor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    initializeEditor: function() {
	        if (this.editor) {
	            return;
	        }
	        this.editor = ace.edit(document.getElementById("new-collection-description"));

	        pm.addCollectionEditor = this.editor;
	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);
	    }
	});

	module.exports = AddCollectionModal;


/***/ },
/* 21 */
/***/ function(module, exports) {

	var AddFolderModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        model.on("showAddFolderModal", this.render, this);
	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        $('#form-add-folder').submit(function () {
	            var parentId = $('#add-folder-parent-id').val();
	            var name = $('#add-folder-name').val();
	            var description = view.editor.getValue();
	            model.addFolder(parentId, name, description);
	            $('#add-folder-name').val("");
	            $('#modal-add-folder').modal('hide');
	            pm.tracker.trackEvent("folder", "add");
	            return false;
	        });

	        $('#modal-add-folder-submit').click(function () {
	            if (!view.editor) {
	                view.initializeEditor();
	            }

	            var parentId = $('#add-folder-parent-id').val();
	            var name = $('#add-folder-name').val();
	            var description = view.editor.getValue();
	            model.addFolder(parentId, name, description);
	            $('#add-folder-name').val("");
	            $('#modal-add-folder').modal('hide');
	            pm.tracker.trackEvent("folder", "add");
	            return false;
	        });

	        $("#modal-add-folder").on("shown", function () {
	            $("#add-folder-name").focus();
	            pm.app.trigger("modalOpen", "#modal-add-folder");
	            if (!view.editor) {
	                view.initializeEditor();
	            }
	            setTimeout(function() {
	                view.editor.setValue("", -1);
	                //view.editor.refresh();
	                view.editor.gotoLine(0,0,false);
	            }, 150);
	        });

	        $("#modal-add-folder").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-add-folder").on('keydown', 'div.input', function (event) {
	            if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                $('#form-add-folder').submit();
	                event.preventDefault();
	                return false;
	            }
	            return true;
	        });
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = this.editor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    render: function(c) {
	        $("#add-folder-header").text("Add folder inside " + c.get("name"));
	        $("#add-folder-parent-id").val(c.get("id"));

	        $("#add-folder-parent-owner").val(c.get("owner"));
	        $('#modal-add-folder').modal('show');
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = pm.addFolderEditor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    initializeEditor: function() {
	        if (this.editor) {
	            return;
	        }

	        this.editor = ace.edit(document.getElementById("add-folder-description"));

	        pm.addFolderEditor = this.editor;
	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);
	        this.editor.getSession().setMode('ace/mode/markdown');
	    }
	});

	module.exports = AddFolderModal;


/***/ },
/* 22 */
/***/ function(module, exports) {

	var EditFolderModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        model.on("showEditFolderModal", this.render, this);

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        $('#form-edit-folder').submit(function() {
	            var id = $('#form-edit-folder .folder-id').val();
	            var name = $('#form-edit-folder .folder-name').val();
	            var description = view.editor.getValue();
	            model.updateFolderMeta(id, name, description);
	            $('#modal-edit-folder').modal('hide');
	            pm.tracker.trackEvent("folder", "edit");
	            return false;
	        });

	        $('#modal-edit-folder .submit-button').click(function () {
	            var id = $('#form-edit-folder .folder-id').val();
	            var name = $('#form-edit-folder .folder-name').val();
	            var description = view.editor.getValue();
	            model.updateFolderMeta(id, name, description);
	            $('#modal-edit-folder').modal('hide');
	            pm.tracker.trackEvent("folder", "edit");
	        });

	        $("#modal-edit-folder").on("shown", function () {
	            $("#modal-edit-folder .folder-name").focus();
	            pm.app.trigger("modalOpen", "#modal-edit-folder");
	        });

	        $("#modal-edit-folder").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-edit-folder").on('keydown', 'div.input', function (event) {
	            if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "edit_folder");
	                $('#form-edit-folder').submit();
	                event.preventDefault();
	                return false;
	            }

	            return true;
	        });
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = pm.editFolderEditor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    initializeEditor: function() {
	        if (this.editor) {
	            return;
	        }

	        this.editor = ace.edit(document.getElementById("edit-folder-description"));

	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);
	        this.editor.getSession().setMode('ace/mode/markdown');
	        pm.editFolderEditor = this.editor;
	    },

	    render: function(folder) {
	        // console.log("Render edit folder");

	        $('#form-edit-folder .folder-id').val(folder.id);
	        $('#form-edit-folder .folder-name').val(folder.name);

	        $('#modal-edit-folder').modal('show');

	        if (!this.editor) {
	            this.initializeEditor();
	        }

	        var view = this;

	        setTimeout(function() {
	            view.editor.setValue(folder.description, -1);
	            view.editor.gotoLine(0,0,false);
	        }, 100);
	    }
	});

	module.exports = EditFolderModal;


/***/ },
/* 23 */
/***/ function(module, exports) {

	var DeleteFolderModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;

	        $('#modal-delete-folder-yes').on("click", function () {
	            var id = $(this).attr('data-id');
	            model.deleteFolder(id, true);
	            pm.tracker.trackEvent("folder", "delete");
	        });

	        $("#modal-delete-folder").on("shown", function () {
	            pm.app.trigger("modalOpen", "#modal-delete-folder");
	        });

	        $("#modal-delete-folder").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-delete-folder").on('keydown', function (event) {
	            if (event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "delete_folder");
	                var id=$("#modal-delete-folder-yes").attr('data-id');
	                model.deleteFolder(id, true);
	                $("#modal-delete-folder").modal('hide');
	                event.preventDefault();
	                pm.tracker.trackEvent("folder", "delete");
	                return false;
	            }
	        });
	    },

	    render: function() {

	    }
	});

	module.exports = DeleteFolderModal;


/***/ },
/* 24 */
/***/ function(module, exports) {

	var EditCollectionModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        model.on("showEditModal", this.render, this);

	        $('#form-edit-collection').submit(function() {
	            var id = $('#form-edit-collection .collection-id').val();
	            var name = $('#form-edit-collection .collection-name').val();
	            var description = view.editor.getValue();
	            model.updateCollectionMeta(id, name, description);
	            $('#modal-edit-collection').modal('hide');
	            pm.tracker.trackEvent("collection", "edit");
	            return false;
	        });

	        $('#modal-edit-collection-submit').click(function () {
	            var id = $('#form-edit-collection .collection-id').val();
	            var name = $('#form-edit-collection .collection-name').val();
	            var description = view.editor.getValue();
	            model.updateCollectionMeta(id, name, description);
	            $('#modal-edit-collection').modal('hide');
	            pm.tracker.trackEvent("collection", "edit");
	        });

	        $("#modal-edit-collection").on("shown", function () {
	            $("#modal-edit-collection .collection-name").focus();
	            pm.app.trigger("modalOpen", "#modal-edit-collection");
	        });

	        $("#modal-edit-collection").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-edit-collection").on('keydown', 'div.input', function (event) {
	            if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "edit_collection");
	                $('#form-edit-collection').submit();
	                event.preventDefault();
	                return false;
	            }

	            return true;
	        });
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = pm.editCollectionEditor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },


	    initializeEditor: function() {
	        if (this.editor) {
	            return;
	        }

	        this.editor = ace.edit(document.getElementById("edit-collection-description"));

	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);
	        this.editor.getSession().setMode('ace/mode/markdown');
	        pm.editCollectionEditor = this.editor;
	    },

	    render: function(c) {
	        var collection = c.toJSON();

	        $('#form-edit-collection .collection-id').val(collection.id);
	        $('#form-edit-collection .collection-name').val(collection.name);

	        $('#modal-edit-collection').modal('show');

	        if (!this.editor) {
	            this.initializeEditor();
	        }

	        var view = this;

	        setTimeout(function() {
	            view.editor.setValue(collection.description, -1);
	            view.editor.gotoLine(0,0,false);
	        }, 100);
	    }
	});

	module.exports = EditCollectionModal;


/***/ },
/* 25 */
/***/ function(module, exports) {

	var DeleteCollectionModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;

	        $('#modal-delete-collection-yes').on("click", function () {
	            var id = $(this).attr('data-id');
	            var shared = $(this).attr('data-shared');
	            if(shared==="true" && pm.user.id!=="0") {
	                model.unshareCollection(id);
	            }
	            model.deleteCollection(id);

	            $("#modal-delete-collection").modal('hide');
	            if(pm.currentOverlayCollection === id) {
	                pm.mediator.trigger("collectionMainViewClose");
	            }
	            pm.tracker.trackEvent("collection", "delete");
	        });

	        $("#modal-delete-collection").on("shown", function () {
	            pm.app.trigger("modalOpen", "#modal-delete-collection");
	        });

	        $("#modal-delete-collection").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-delete-collection").on('keydown', function (event) {
	            if (event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "delete_collection");
	                var id=$("#modal-delete-collection-yes").attr('data-id');
	                var shared = $(this).attr('data-shared');
	                if(shared===true) {
	                    model.unshareCollection(id);
	                }
	                model.deleteCollection(id);
	                $("#modal-delete-collection").modal('hide');
	                pm.tracker.trackEvent("collection", "delete");
	                if(pm.currentOverlayCollection === id) {
	                    pm.mediator.trigger("collectionMainViewClose");
	                }

	                event.preventDefault();
	                return false;
	            }
	        });
	    },

	    render: function() {

	    }
	});

	module.exports = DeleteCollectionModal;


/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';

	var ImportModal = Backbone.View.extend({
	    initialize: function initialize() {
	        var model = this.model,

	        /**
	         * This function reads file content with the older HTML5 API. It returns a Promise, that
	         * resolves to an object like this:
	         *
	         * {
	         *     content: "file contents...",
	         *     fileName: "something.raml",
	         *     isRoot: true // Set to true if this is a root RAML File.
	         * }
	         */
	        simpleFileProcessor = function simpleFileProcessor(file) {
	            var fullPath = file.webkitRelativePath;
	            if (!fullPath.startsWith('/')) {
	                fullPath = '/' + file.webkitRelativePath; // So the RAML converter can resolve paths properly.
	            }
	            return new Promise(function (resolve, reject) {
	                var reader = new FileReader();
	                reader.readAsText(file);
	                reader.onload = function () {
	                    var isRoot,
	                        result,
	                        firstLine = reader.result.split('\n')[0];
	                    isRoot = firstLine.startsWith('#%RAML ');
	                    result = {
	                        content: reader.result,
	                        fileName: fullPath,
	                        isRoot: isRoot
	                    };
	                    resolve(result);
	                };
	                reader.onerror = function (err) {
	                    reject(err);
	                };
	            });
	        },

	        /**
	         * Processes a file with the newer "Entry" API. It returns a Promise, that
	         * resolves to an object like this:
	         *
	         * {
	         *     content: "file contents...",
	         *     fileName: "something.raml",
	         *     isRoot: true // Set to true if this is a root RAML File.
	         * }
	         */
	        fileEntryProcessor = function fileEntryProcessor(fileEntry) {
	            return new Promise(function (resolve, reject) {
	                fileEntry.file(function (file) {
	                    if (file.size > 5242880) {
	                        reject(new Error('File ' + fileEntry.fullPath + 'is bigger than 5MB'));
	                        return;
	                    }
	                    var reader = new FileReader();
	                    reader.readAsText(file);
	                    reader.onload = function () {
	                        var isRoot,
	                            result,
	                            firstLine = reader.result.split('\n')[0];
	                        isRoot = firstLine.startsWith('#%RAML ');
	                        result = {
	                            content: reader.result,
	                            fileName: fileEntry.fullPath,
	                            isRoot: isRoot
	                        };
	                        resolve(result);
	                    };
	                    reader.onerror = function (err) {
	                        reject(err);
	                    };
	                });
	            });
	        },

	        /**
	         * Returns a Promise that resolves to a flattened Array of elements, where each element is an object that
	         * looks like this:
	         * {
	         *     content: "file contents...",
	         *     fileName: "something.raml",
	         *     isRoot: true // Set to true if this is a root RAML File.
	         * }
	         */
	        dirEntryProcessor = function dirEntryProcessor(dirEntry) {
	            var dirExclusions = /^\.[\s\S]+$/ig,
	                // Anything that starts with a "."
	            dirReader = dirEntry.createReader(),
	                toExclude = dirExclusions.test(dirEntry.name);
	            return toExclude ? undefined : getAllEntries(dirReader).then(function (allEntries) {
	                return Promise.all(_.map(allEntries, readEntry));
	            }).then(function (readingResults) {
	                return _.flatten(readingResults);
	            });
	        },

	        /**
	         * The sad HTML5 Entry API does not return all files on calling it, so this returns a Promise
	         * that resolves to *all* the Entries inside a DirectoryEntry. Meh :-/
	         */
	        getAllEntries = function getAllEntries(reader) {
	            return new Promise(function (resolve, reject) {
	                var entries = [],
	                    getMoreEntries = function getMoreEntries() {
	                    reader.readEntries(function (results) {
	                        if (!results.length) {
	                            entries.sort();
	                            resolve(entries);
	                        } else {
	                            entries = entries.concat(Array.prototype.slice.call(results || [], 0));
	                            getMoreEntries();
	                        }
	                    }, function (err) {
	                        reject(err);
	                    });
	                };
	                getMoreEntries();
	            });
	        },

	        /**
	         * Reads a single Entry and calls the proper file/folder processor.
	         */
	        readEntry = function readEntry(entry) {
	            return entry.isFile ? fileEntryProcessor(entry) : dirEntryProcessor(entry);
	        };

	        model.on("importCollection", this.addAlert, this);
	        pm.mediator.on("failedCollectionImport", this.onFailedImport, this);

	        $('#import-submit-link').on("click", function () {
	            var url = $('#importLink').val();
	            model.importFileFromUrl(url);
	            $('#import-submit-link').text("Importing...").attr('disabled', 'disabled');
	        });

	        pm.appWindow.trigger("registerInternalEvent", "openImport", function () {
	            $("#modal-importer").modal('show');
	        }, this);

	        pm.appWindow.trigger("registerInternalEvent", "importCollectionFromURL", function (data) {
	            if (pm.appWindow.isPrimaryWindow()) {
	                model.importFileFromUrl(data.url);
	            }
	        }, this);

	        // These functions handle Folder uploads
	        var dropZoneFolder = document.getElementById('import-collection-dropzone-folder');
	        dropZoneFolder.addEventListener('dragover', function (evt) {
	            evt.stopPropagation();
	            evt.preventDefault();
	            evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
	        }, false);

	        dropZoneFolder.addEventListener("drop", function (event) {
	            event.stopPropagation();
	            event.preventDefault();
	            var dataTransfer = event.dataTransfer;
	            if (dataTransfer && dataTransfer.items) {
	                var items = dataTransfer.items,
	                    len = items.length,
	                    firstEntry = items[0];

	                if (len > 1) {
	                    pm.mediator.trigger('warnAboutImportedData', 'Detected multiple folders, only one is supported.' + 'Using the first.');
	                }

	                if (firstEntry.getAsEntry) {
	                    //Standard HTML5 API
	                    firstEntry = firstEntry.getAsEntry();
	                } else if (firstEntry.webkitGetAsEntry) {
	                    //WebKit implementation of HTML5 API.
	                    firstEntry = firstEntry.webkitGetAsEntry();
	                }

	                if (firstEntry.isDirectory) {
	                    readEntry(firstEntry).then(function (res) {
	                        return Promise.all(res);
	                    }).then(function (allFiles) {
	                        model.importFolder(allFiles, firstEntry.fullPath);
	                    });
	                } else {
	                    pm.mediator.trigger("failedCollectionImport", "Please upload a single folder.");
	                }
	            }
	        }, false);

	        $('#collection-folders-input').on('change', function (event) {
	            var files = event.target.files,
	                isHidden = function isHidden(file) {
	                var filterRegex = /^\..*|^\/\.|.*\/\..*/g;
	                return filterRegex.test(file.webkitRelativePath);
	            },
	                allFileContent = [],
	                rootPath;

	            rootPath = files[0].webkitRelativePath.split('/')[0];
	            if (!rootPath.startsWith('/')) {
	                rootPath = '/' + rootPath;
	            }

	            for (var i = 0, currentFile; currentFile = files[i]; i++) {
	                if (!isHidden(currentFile)) {
	                    allFileContent.push(simpleFileProcessor(currentFile));
	                }
	            }
	            Promise.all(allFileContent).then(function (results) {
	                model.importFolder(results, rootPath);
	            });
	            $('#collection-folders-input').val("");
	        });
	        // End of Folder uploads

	        // These functions handle File uploads
	        var dropZone = document.getElementById('import-collection-dropzone');
	        dropZone.addEventListener('dragover', function (evt) {
	            evt.stopPropagation();
	            evt.preventDefault();
	            evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
	        }, false);

	        dropZone.addEventListener('drop', function (evt) {
	            evt.stopPropagation();
	            evt.preventDefault();
	            var files = evt.dataTransfer.files; // FileList object.
	            model.importFiles(files);
	        }, false);

	        $('#collection-files-input').on('change', function (event) {
	            var files = event.target.files;
	            model.importFiles(files);
	            $('#collection-files-input').val("");
	        });
	        // End of File uploads

	        $("#modal-importer").on("shown", (function () {
	            pm.app.trigger("modalOpen", "#modal-importer");
	        }).bind(this));

	        $("#modal-importer").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $('#import-submit-rawtext').on("click", function () {
	            var rawText = $('#importRawText').val();
	            var fileFormat = pm.collections.guessFileFormat(rawText);
	            if (fileFormat === 0) {
	                pm.mediator.trigger("failedCollectionImport", "format not recognized");
	                return;
	            }
	            pm.collections.importData(rawText, fileFormat);
	        });

	        pm.mediator.on("failedCollectionImport", function (reason) {
	            pm.alerts.error('Failed to import data: ' + reason, { timeout: 10000 });
	        });

	        pm.mediator.on("warnAboutImportedData", function (reason) {
	            pm.alerts.warning('While importing: ' + reason);
	        });
	    },

	    onFailedImport: function onFailedImport() {
	        $('#import-submit-link').text("Import!").removeAttr('disabled');
	    },

	    addAlert: function addAlert(message) {
	        $('#import-submit-link').text("Import!").removeAttr('disabled');
	        if (message.type === "collection") {
	            pm.alerts.success('Collection ' + message.name + ' imported');
	        } else if (message.type === "request") {
	            pm.alerts.success('Request ' + message.name + ' imported');
	        }
	    }
	});

	module.exports = ImportModal;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var FEATURES = __webpack_require__(1).FEATURES;

	var ShareCollectionModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;

	        $("#share-collection-readonly").on("change", function() {
	            var isWriteable = !($("#share-collection-readonly").is(":checked"));
	            var id = $(this).attr('data-collection-id');
	            model.updateCollectionWrite(id,isWriteable, true);
	        });

	        $('.team-share-unshare').on("click", function () {
	            var id = $(this).attr('data-collection-id');
	            var isChecked = $("#share-collection-is-public").is(":checked");
	            $("#share-unshare-error").hide().text("");

	            var collection = model.get(id);

	            var isTeamShareChecked = true;
	            var thisButton = $(this).attr("data-action");
	            if(thisButton === "share") {
	                isTeamShareChecked = true;
	            }
	            else {
	                isTeamShareChecked = false;
	            }

	            var isWriteable = !($("#share-collection-readonly").is(":checked"));
	            model.shareUnshareCollection(id, isChecked, isTeamShareChecked, true, isWriteable, function () {});

	            if(isTeamShareChecked) {
	                //show the Unshare button
	                $("#share-collection-with-team").hide();
	                $("#unshare-collection-with-team").show();
	                $("#current-share-status").text("shared");
	            }
	            else {
	                //show the share button
	                $("#share-collection-with-team").show();
	                $("#unshare-collection-with-team").hide();
	                $("#current-share-status").text("unshared");
	            }


	            model.updateCollectionWrite(id,isWriteable);
	        });

	        $('#upload-collection-get-link').on("click", function () {
	            var id = $(this).attr('data-collection-id');

	            model.uploadCollectionForLink(id, false, false, function (link) {
	                $('#upload-collection-link').css("display", "block");
	                $('#upload-collection-link').text(link);
	                $('#copy-collection-url').show();
	            });
	        });

	        $('#share-collection-download').on("click", function () {
	            var id = $(this).attr('data-collection-id');
	            model.saveCollection(id);
	        });

	        $("#modal-share-collection").on("shown", function () {
	            pm.app.trigger("modalOpen", "#modal-share-collection");
	            $("#share-unshare-error").hide().text("");
	        });

	        $("#modal-share-collection").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#copy-collection-url").click(function() {
	            copyToClipboard($('#upload-collection-link').text());
	        });

	        $("#share-collection-unsubscribe").click(function() {
	            var id = $(this).attr('data-collection-id');
	            var owner = $(this).attr('data-owner-id');

	            var collectionMeta = {
	                owner: owner,
	                model_id: id
	            };

	            pm.syncManager.addChangeset("collection", "unsubscribe", {owner: collectionMeta.owner}, collectionMeta.model_id, true);
	            var status = pm.collections.deleteCollectionFromDataStoreWithOptSync(collectionMeta.model_id, true, false, function() {});
	        });

	        $("#resync-collection-by-user").click(function() {
	            var id = $(this).attr('data-collection-id');
	            if(pm.syncManager.addCollectionsToForceSync(id)) {
	                //needs to be manually triggered
	                pm.syncManager.startCollectionForceSyncs();
	            }
	        });


	        model.on("shareCollectionModal", this.show, this);

	        pm.mediator.on("shareError", this.onShareError, this);
	    },

	    onShareError: function(verb, collectionId) {
	        var model = this.model;
	        var thisCollectionId = $("#share-collection-with-team").attr('data-collection-id');
	        if(thisCollectionId === collectionId) {
	            if(verb==="unshare") {
	                $("#share-collection-with-team").hide();
	                $("#unshare-collection-with-team").show();
	                $("#share-unshare-error").show().text("There was an error while unsharing");

	                var thisCollection = model.get(thisCollectionId);
	                var oldCollection = model.getJSONFromCollection(thisCollection);
	                thisCollection.set("sharedWithTeam", true);
	                model.updateCollectionInDataStoreWithOptSync(thisCollection.getAsJSON(), oldCollection, true, false, function (c) {
	                    model.trigger("updateCollection", thisCollection);
	                });
	            }
	            else {
	                //show the share button
	                $("#share-collection-with-team").show();
	                $("#unshare-collection-with-team").hide();
	                $("#share-unshare-error").show().text("There was an error while sharing. Please try after some time or try duplicating the collection and sharing it.");

	                var thisCollection = model.get(thisCollectionId);
	                var oldCollection = model.getJSONFromCollection(thisCollection);
	                thisCollection.set("sharedWithTeam", false);
	                model.updateCollectionInDataStoreWithOptSync(thisCollection.getAsJSON(), oldCollection, true, false, function (c) {
	                    model.trigger("updateCollection", thisCollection);
	                });
	            }
	        }
	    },

	    show: function(id) {
	        //three paths:
	        //not logged in
	        //logged in, no team
	        //logged in, team > per collection - share/unshare/unsubscribe
	        if(pm.features.isEnabled(FEATURES.ACCESS_CONTROL)) {
	          return;
	        }

	        var collection = this.model.get(id);

	        var orgs = pm.user.get("organizations");
	        var hasOrg = orgs && (orgs.length>0) && (pm.user.isTeamMember());

	        //team share - unshare
	        $('#share-collection-with-team').attr("data-collection-id", id);
	        $('#unshare-collection-with-team').attr("data-collection-id", id);

	        //team unsubscribe
	        $("#share-collection-unsubscribe").attr("data-collection-id", id);

	        //download json
	        $('#share-collection-download').attr("data-collection-id", id);

	        //upload for link
	        $('#upload-collection-get-link').attr("data-collection-id", id);

	        //resync
	        $("#resync-collection-by-user").attr('data-collection-id', id);


	        $(".share-section").hide();
	        $(".team-share-unshare").hide();
	        $("#share-resync-collection").show();

	        if(pm.user.isLoggedIn()) {
	            $("#upload-own-collection").show();
	            var remoteLink = collection.get("remoteLink");
	            if(remoteLink) {
	                $('#upload-collection-link').text(remoteLink).show();
	                $('#upload-collection-get-link').text("Update");
	                $('#copy-collection-url').show();
	            }
	            else {
	                $('#upload-collection-link').hide();
	                $('#upload-collection-get-link').text("Upload and get link");
	                $('#copy-collection-url').hide();
	            }

	            //if in a team
	            if(hasOrg) {
	                if (collection.get("subscribed") === true) {
	                    //This is someone else's collection
	                    $("#share-collection-unsubscribe").attr("data-owner-id", collection.get("owner"));
	                    $("#share-subscribed-collection").show();

	                    if(collection.get("write") == false) {
	                        $("#share-resync-collection").hide();
	                    }
	                }
	                else {
	                    //it's your own collection
	                    if (collection.get("sharedWithTeam") === true) {
	                        $("#unshare-collection-with-team").show();
	                        $("#current-share-status").text("shared");
	                    }
	                    else {
	                        $("#share-collection-with-team").show();
	                        $("#current-share-status").text("unshared");
	                    }

	                    $("#share-collection-readonly").prop('checked', collection.get("write") != true).attr("data-collection-id", id); //set readonly checkbox
	                    $("#share-own-collection").show();
	                }
	            }
	        }
	        else {
	            $("#guest-warning-collection").show();
	        }

	        $("#modal-share-collection").modal("show");
	    },

	    render: function() {

	    }
	});

	module.exports = ShareCollectionModal;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(29);
	var ShareCollection = __webpack_require__(181);
	var FEATURES = __webpack_require__(1).FEATURES;

	var ShareCollectionAccessControlModal = Backbone.View.extend({
	  initialize: function initialize() {
	    this.$mountNode = $('#modal-share-collection-react .modal-body')[0];
	    this.$modal = $('#modal-share-collection-react');
	    this.model.on("shareCollectionModal", this.showModal, this);

	    this.$modal.on('hidden', (function () {
	      this.unmountComponent();
	    }).bind(this));
	  },

	  mountComponent: function mountComponent(collectionId) {
	    React.render(React.createElement(ShareCollection, {
	      collectionId: collectionId,
	      model: this.model,
	      hideModal: this.hideModal.bind(this)
	    }), this.$mountNode);
	  },

	  unmountComponent: function unmountComponent() {
	    React.unmountComponentAtNode(this.$mountNode);
	  },

	  showModal: function showModal(collectionId) {
	    if (!pm.features.isEnabled(FEATURES.ACCESS_CONTROL)) {
	      return;
	    }
	    this.mountComponent(collectionId);
	    this.$modal.modal({
	      backdrop: 'static',
	      keyboard: false,
	      show: true
	    });
	    pm.app.trigger("modalOpen", "#modal-share-collection");
	  },

	  hideModal: function hideModal() {
	    this.unmountComponent();
	    this.$modal.modal("hide");
	    pm.app.trigger("modalClose");
	  }
	});

	module.exports = ShareCollectionAccessControlModal;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(30);


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(31);
	var ReactDOMServer = __webpack_require__(171);
	var ReactIsomorphic = __webpack_require__(175);

	var assign = __webpack_require__(66);
	var deprecated = __webpack_require__(180);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactDOMTextComponent = __webpack_require__(33);
	var ReactDefaultInjection = __webpack_require__(98);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMount = __webpack_require__(55);
	var ReactPerf = __webpack_require__(45);
	var ReactReconciler = __webpack_require__(77);
	var ReactUpdates = __webpack_require__(81);
	var ReactVersion = __webpack_require__(169);

	var findDOMNode = __webpack_require__(118);
	var renderSubtreeIntoContainer = __webpack_require__(170);
	var warning = __webpack_require__(52);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (false) {
	  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;

/***/ },
/* 32 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(34);
	var DOMPropertyOperations = __webpack_require__(49);
	var ReactComponentBrowserEnvironment = __webpack_require__(53);
	var ReactMount = __webpack_require__(55);

	var assign = __webpack_require__(66);
	var escapeTextContentForBrowser = __webpack_require__(48);
	var setTextContent = __webpack_require__(47);
	var validateDOMNesting = __webpack_require__(97);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (false) {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(35);
	var ReactMultiChildUpdateTypes = __webpack_require__(43);
	var ReactPerf = __webpack_require__(45);

	var setInnerHTML = __webpack_require__(46);
	var setTextContent = __webpack_require__(47);
	var invariant = __webpack_require__(40);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ?  false ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	var createNodesFromMarkup = __webpack_require__(37);
	var emptyFunction = __webpack_require__(42);
	var getMarkupWrap = __webpack_require__(41);
	var invariant = __webpack_require__(40);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ?  false ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ?  false ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ?  false ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (false) {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ?  false ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ?  false ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	var createArrayFromMixed = __webpack_require__(38);
	var getMarkupWrap = __webpack_require__(41);
	var invariant = __webpack_require__(40);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ?  false ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ?  false ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(39);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  false ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ?  false ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ?  false ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function (condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	var invariant = __webpack_require__(40);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ?  false ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;

/***/ },
/* 42 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(44);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ?  false ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (false) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (false) {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);
	var escapeTextContentForBrowser = __webpack_require__(48);
	var setInnerHTML = __webpack_require__(46);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(50);
	var ReactPerf = __webpack_require__(45);

	var quoteAttributeValueForBrowser = __webpack_require__(51);
	var warning = __webpack_require__(52);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	   false ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (false) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (false) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (false) {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (false) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ?  false ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ?  false ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ?  false ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  false ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (false) {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (false) {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName:  false ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(48);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(42);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (false) {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(54);
	var ReactMount = __webpack_require__(55);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(34);
	var DOMPropertyOperations = __webpack_require__(49);
	var ReactMount = __webpack_require__(55);
	var ReactPerf = __webpack_require__(45);

	var invariant = __webpack_require__(40);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ?  false ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactCurrentOwner = __webpack_require__(32);
	var ReactDOMFeatureFlags = __webpack_require__(68);
	var ReactElement = __webpack_require__(69);
	var ReactEmptyComponentRegistry = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactInstanceMap = __webpack_require__(74);
	var ReactMarkupChecksum = __webpack_require__(75);
	var ReactPerf = __webpack_require__(45);
	var ReactReconciler = __webpack_require__(77);
	var ReactUpdateQueue = __webpack_require__(80);
	var ReactUpdates = __webpack_require__(81);

	var assign = __webpack_require__(66);
	var emptyObject = __webpack_require__(85);
	var containsNode = __webpack_require__(86);
	var instantiateReactComponent = __webpack_require__(89);
	var invariant = __webpack_require__(40);
	var setInnerHTML = __webpack_require__(46);
	var shouldUpdateReactComponent = __webpack_require__(94);
	var validateDOMNesting = __webpack_require__(97);
	var warning = __webpack_require__(52);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (false) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ?  false ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ?  false ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (false) {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (false) {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (false) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ?  false ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	     false ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (false) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ?  false ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ?  false ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	     false ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	     false ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ?  false ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (false) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (false) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (false) {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ?  false ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ?  false ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (false) {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var EventPluginHub = __webpack_require__(58);
	var EventPluginRegistry = __webpack_require__(59);
	var ReactEventEmitterMixin = __webpack_require__(64);
	var ReactPerf = __webpack_require__(45);
	var ViewportMetrics = __webpack_require__(65);

	var assign = __webpack_require__(66);
	var isEventSupported = __webpack_require__(67);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(44);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(59);
	var EventPluginUtils = __webpack_require__(60);
	var ReactErrorUtils = __webpack_require__(61);

	var accumulateInto = __webpack_require__(62);
	var forEachAccumulated = __webpack_require__(63);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	   false ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (false) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (false) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ?  false ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ?  false ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ?  false ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ?  false ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var ReactErrorUtils = __webpack_require__(61);

	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (false) {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (false) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ?  false ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (false) {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ?  false ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

/***/ },
/* 63 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(58);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 66 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 68 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(32);

	var assign = __webpack_require__(66);
	var canDefineProperty = __webpack_require__(70);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (false) {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (false) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (false) {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(73);

	var invariant = __webpack_require__(40);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ?  false ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ?  false ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ?  false ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ?  false ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ?  false ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ?  false ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 74 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(76);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(78);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(79);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ?  false ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ?  false ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactElement = __webpack_require__(69);
	var ReactInstanceMap = __webpack_require__(74);
	var ReactUpdates = __webpack_require__(81);

	var assign = __webpack_require__(66);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (false) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (false) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ?  false ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ?  false ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ?  false ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ?  false ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(82);
	var PooledClass = __webpack_require__(83);
	var ReactPerf = __webpack_require__(45);
	var ReactReconciler = __webpack_require__(77);
	var Transaction = __webpack_require__(84);

	var assign = __webpack_require__(66);
	var invariant = __webpack_require__(40);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  false ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ?  false ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ?  false ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ?  false ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ?  false ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  false ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  false ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(83);

	var assign = __webpack_require__(66);
	var invariant = __webpack_require__(40);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ?  false ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  false ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ?  false ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ?  false ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (false) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(87);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(88);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(90);
	var ReactEmptyComponent = __webpack_require__(95);
	var ReactNativeComponent = __webpack_require__(96);

	var assign = __webpack_require__(66);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ?  false ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ?  false ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (false) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (false) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(91);
	var ReactCurrentOwner = __webpack_require__(32);
	var ReactElement = __webpack_require__(69);
	var ReactInstanceMap = __webpack_require__(74);
	var ReactPerf = __webpack_require__(45);
	var ReactPropTypeLocations = __webpack_require__(92);
	var ReactPropTypeLocationNames = __webpack_require__(93);
	var ReactReconciler = __webpack_require__(77);
	var ReactUpdateQueue = __webpack_require__(80);

	var assign = __webpack_require__(66);
	var emptyObject = __webpack_require__(85);
	var invariant = __webpack_require__(40);
	var shouldUpdateReactComponent = __webpack_require__(94);
	var warning = __webpack_require__(52);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (false) {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (false) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (false) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  false ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (false) {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ?  false ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (false) {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ?  false ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (false) {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ?  false ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	             false ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	             false ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (false) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ?  false ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ?  false ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (false) {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ?  false ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(44);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (false) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(69);
	var ReactEmptyComponentRegistry = __webpack_require__(71);
	var ReactReconciler = __webpack_require__(77);

	var assign = __webpack_require__(66);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(66);
	var invariant = __webpack_require__(40);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ?  false ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(66);
	var emptyFunction = __webpack_require__(42);
	var warning = __webpack_require__(52);

	var validateDOMNesting = emptyFunction;

	if (false) {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(99);
	var ChangeEventPlugin = __webpack_require__(107);
	var ClientReactRootIndex = __webpack_require__(110);
	var DefaultEventPluginOrder = __webpack_require__(111);
	var EnterLeaveEventPlugin = __webpack_require__(112);
	var ExecutionEnvironment = __webpack_require__(36);
	var HTMLDOMPropertyConfig = __webpack_require__(116);
	var ReactBrowserComponentMixin = __webpack_require__(117);
	var ReactComponentBrowserEnvironment = __webpack_require__(53);
	var ReactDefaultBatchingStrategy = __webpack_require__(119);
	var ReactDOMComponent = __webpack_require__(120);
	var ReactDOMTextComponent = __webpack_require__(33);
	var ReactEventListener = __webpack_require__(145);
	var ReactInjection = __webpack_require__(148);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMount = __webpack_require__(55);
	var ReactReconcileTransaction = __webpack_require__(152);
	var SelectEventPlugin = __webpack_require__(157);
	var ServerReactRootIndex = __webpack_require__(158);
	var SimpleEventPlugin = __webpack_require__(159);
	var SVGDOMPropertyConfig = __webpack_require__(168);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (false) {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = require('./ReactDefaultPerf');
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var EventPropagators = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(36);
	var FallbackCompositionState = __webpack_require__(101);
	var SyntheticCompositionEvent = __webpack_require__(103);
	var SyntheticInputEvent = __webpack_require__(105);

	var keyOf = __webpack_require__(106);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var EventPluginHub = __webpack_require__(58);

	var warning = __webpack_require__(52);

	var accumulateInto = __webpack_require__(62);
	var forEachAccumulated = __webpack_require__(63);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(83);

	var assign = __webpack_require__(66);
	var getTextContentAccessor = __webpack_require__(102);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(104);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(83);

	var assign = __webpack_require__(66);
	var emptyFunction = __webpack_require__(42);
	var warning = __webpack_require__(52);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	  this.target = nativeEventTarget;
	  this.currentTarget = nativeEventTarget;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(104);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 106 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var EventPluginHub = __webpack_require__(58);
	var EventPropagators = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(36);
	var ReactUpdates = __webpack_require__(81);
	var SyntheticEvent = __webpack_require__(104);

	var getEventTarget = __webpack_require__(108);
	var isEventSupported = __webpack_require__(67);
	var isTextInputElement = __webpack_require__(109);
	var keyOf = __webpack_require__(106);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 109 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(106);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var EventPropagators = __webpack_require__(100);
	var SyntheticMouseEvent = __webpack_require__(113);

	var ReactMount = __webpack_require__(55);
	var keyOf = __webpack_require__(106);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(114);
	var ViewportMetrics = __webpack_require__(65);

	var getEventModifierState = __webpack_require__(115);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(104);

	var getEventTarget = __webpack_require__(108);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(36);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(74);

	var findDOMNode = __webpack_require__(118);
	var warning = __webpack_require__(52);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	     false ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactInstanceMap = __webpack_require__(74);
	var ReactMount = __webpack_require__(55);

	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (false) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ?  false ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ?  false ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(81);
	var Transaction = __webpack_require__(84);

	var assign = __webpack_require__(66);
	var emptyFunction = __webpack_require__(42);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(121);
	var CSSPropertyOperations = __webpack_require__(123);
	var DOMProperty = __webpack_require__(50);
	var DOMPropertyOperations = __webpack_require__(49);
	var EventConstants = __webpack_require__(57);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactComponentBrowserEnvironment = __webpack_require__(53);
	var ReactDOMButton = __webpack_require__(131);
	var ReactDOMInput = __webpack_require__(132);
	var ReactDOMOption = __webpack_require__(136);
	var ReactDOMSelect = __webpack_require__(139);
	var ReactDOMTextarea = __webpack_require__(140);
	var ReactMount = __webpack_require__(55);
	var ReactMultiChild = __webpack_require__(141);
	var ReactPerf = __webpack_require__(45);
	var ReactUpdateQueue = __webpack_require__(80);

	var assign = __webpack_require__(66);
	var canDefineProperty = __webpack_require__(70);
	var escapeTextContentForBrowser = __webpack_require__(48);
	var invariant = __webpack_require__(40);
	var isEventSupported = __webpack_require__(67);
	var keyOf = __webpack_require__(106);
	var setInnerHTML = __webpack_require__(46);
	var setTextContent = __webpack_require__(47);
	var shallowEqual = __webpack_require__(144);
	var validateDOMNesting = __webpack_require__(97);
	var warning = __webpack_require__(52);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (false) {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (false) {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (false) {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	   false ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (false) {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ?  false ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  false ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ?  false ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (false) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ?  false ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ?  false ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ?  false ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (false) {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (false) {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (false) {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (false) {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (false) {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (false) {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ?  false ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (false) {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(55);

	var findDOMNode = __webpack_require__(118);
	var focusNode = __webpack_require__(122);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 122 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(124);
	var ExecutionEnvironment = __webpack_require__(36);
	var ReactPerf = __webpack_require__(45);

	var camelizeStyleName = __webpack_require__(125);
	var dangerousStyleValue = __webpack_require__(127);
	var hyphenateStyleName = __webpack_require__(128);
	var memoizeStringOnly = __webpack_require__(130);
	var warning = __webpack_require__(52);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (false) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (false) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (false) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;

/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(126);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 126 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(124);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(129);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(54);
	var LinkedValueUtils = __webpack_require__(133);
	var ReactMount = __webpack_require__(55);
	var ReactUpdates = __webpack_require__(81);

	var assign = __webpack_require__(66);
	var invariant = __webpack_require__(40);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ?  false ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ?  false ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(134);
	var ReactPropTypeLocations = __webpack_require__(92);

	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	         false ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(69);
	var ReactPropTypeLocationNames = __webpack_require__(93);

	var emptyFunction = __webpack_require__(42);
	var getIteratorFn = __webpack_require__(135);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 135 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(137);
	var ReactDOMSelect = __webpack_require__(139);

	var assign = __webpack_require__(66);
	var warning = __webpack_require__(52);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	         false ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    nativeProps.children = content;
	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(83);
	var ReactElement = __webpack_require__(69);

	var emptyFunction = __webpack_require__(42);
	var traverseAllChildren = __webpack_require__(138);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactElement = __webpack_require__(69);
	var ReactInstanceHandles = __webpack_require__(72);

	var getIteratorFn = __webpack_require__(135);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (false) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(133);
	var ReactMount = __webpack_require__(55);
	var ReactUpdates = __webpack_require__(81);

	var assign = __webpack_require__(66);
	var warning = __webpack_require__(52);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, props, value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	       false ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	       false ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(133);
	var ReactDOMIDOperations = __webpack_require__(54);
	var ReactUpdates = __webpack_require__(81);

	var assign = __webpack_require__(66);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ?  false ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ?  false ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ?  false ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(91);
	var ReactMultiChildUpdateTypes = __webpack_require__(43);

	var ReactCurrentOwner = __webpack_require__(32);
	var ReactReconciler = __webpack_require__(77);
	var ReactChildReconciler = __webpack_require__(142);

	var flattenChildren = __webpack_require__(143);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (false) {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (false) {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(77);

	var instantiateReactComponent = __webpack_require__(89);
	var shouldUpdateReactComponent = __webpack_require__(94);
	var traverseAllChildren = __webpack_require__(138);
	var warning = __webpack_require__(52);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(138);
	var warning = __webpack_require__(52);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

/***/ },
/* 144 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(146);
	var ExecutionEnvironment = __webpack_require__(36);
	var PooledClass = __webpack_require__(83);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMount = __webpack_require__(55);
	var ReactUpdates = __webpack_require__(81);

	var assign = __webpack_require__(66);
	var getEventTarget = __webpack_require__(108);
	var getUnboundedScrollPosition = __webpack_require__(147);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(42);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (false) {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;

/***/ },
/* 147 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(50);
	var EventPluginHub = __webpack_require__(58);
	var ReactComponentEnvironment = __webpack_require__(91);
	var ReactClass = __webpack_require__(149);
	var ReactEmptyComponent = __webpack_require__(95);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactNativeComponent = __webpack_require__(96);
	var ReactPerf = __webpack_require__(45);
	var ReactRootIndex = __webpack_require__(73);
	var ReactUpdates = __webpack_require__(81);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(150);
	var ReactElement = __webpack_require__(69);
	var ReactPropTypeLocations = __webpack_require__(92);
	var ReactPropTypeLocationNames = __webpack_require__(93);
	var ReactNoopUpdateQueue = __webpack_require__(151);

	var assign = __webpack_require__(66);
	var emptyObject = __webpack_require__(85);
	var invariant = __webpack_require__(40);
	var keyMirror = __webpack_require__(44);
	var keyOf = __webpack_require__(106);
	var warning = __webpack_require__(52);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	     false ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (false) {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (false) {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (false) {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	       false ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ?  false ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ?  false ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ?  false ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ?  false ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ?  false ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (false) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ?  false ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ?  false ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ?  false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ?  false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (false) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (false) {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (false) {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (false) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  false ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (false) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ?  false ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(151);

	var canDefineProperty = __webpack_require__(70);
	var emptyObject = __webpack_require__(85);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  false ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (false) {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(52);

	function warnTDZ(publicInstance, callerName) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(82);
	var PooledClass = __webpack_require__(83);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactDOMFeatureFlags = __webpack_require__(68);
	var ReactInputSelection = __webpack_require__(153);
	var Transaction = __webpack_require__(84);

	var assign = __webpack_require__(66);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(154);

	var containsNode = __webpack_require__(86);
	var focusNode = __webpack_require__(122);
	var getActiveElement = __webpack_require__(156);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	var getNodeForCharacterOffset = __webpack_require__(155);
	var getTextContentAccessor = __webpack_require__(102);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 156 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }

	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var EventPropagators = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(36);
	var ReactInputSelection = __webpack_require__(153);
	var SyntheticEvent = __webpack_require__(104);

	var getActiveElement = __webpack_require__(156);
	var isTextInputElement = __webpack_require__(109);
	var keyOf = __webpack_require__(106);
	var shallowEqual = __webpack_require__(144);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(57);
	var EventListener = __webpack_require__(146);
	var EventPropagators = __webpack_require__(100);
	var ReactMount = __webpack_require__(55);
	var SyntheticClipboardEvent = __webpack_require__(160);
	var SyntheticEvent = __webpack_require__(104);
	var SyntheticFocusEvent = __webpack_require__(161);
	var SyntheticKeyboardEvent = __webpack_require__(162);
	var SyntheticMouseEvent = __webpack_require__(113);
	var SyntheticDragEvent = __webpack_require__(165);
	var SyntheticTouchEvent = __webpack_require__(166);
	var SyntheticUIEvent = __webpack_require__(114);
	var SyntheticWheelEvent = __webpack_require__(167);

	var emptyFunction = __webpack_require__(42);
	var getEventCharCode = __webpack_require__(163);
	var invariant = __webpack_require__(40);
	var keyOf = __webpack_require__(106);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ?  false ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(104);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(114);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(114);

	var getEventCharCode = __webpack_require__(163);
	var getEventKey = __webpack_require__(164);
	var getEventModifierState = __webpack_require__(115);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 163 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(163);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(113);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(114);

	var getEventModifierState = __webpack_require__(115);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(113);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(50);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 169 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.3';

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(55);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(98);
	var ReactServerRendering = __webpack_require__(172);
	var ReactVersion = __webpack_require__(169);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(119);
	var ReactElement = __webpack_require__(69);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMarkupChecksum = __webpack_require__(75);
	var ReactServerBatchingStrategy = __webpack_require__(173);
	var ReactServerRenderingTransaction = __webpack_require__(174);
	var ReactUpdates = __webpack_require__(81);

	var emptyObject = __webpack_require__(85);
	var instantiateReactComponent = __webpack_require__(89);
	var invariant = __webpack_require__(40);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ?  false ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ?  false ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

/***/ },
/* 173 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(83);
	var CallbackQueue = __webpack_require__(82);
	var Transaction = __webpack_require__(84);

	var assign = __webpack_require__(66);
	var emptyFunction = __webpack_require__(42);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(137);
	var ReactComponent = __webpack_require__(150);
	var ReactClass = __webpack_require__(149);
	var ReactDOMFactories = __webpack_require__(176);
	var ReactElement = __webpack_require__(69);
	var ReactElementValidator = __webpack_require__(177);
	var ReactPropTypes = __webpack_require__(134);
	var ReactVersion = __webpack_require__(169);

	var assign = __webpack_require__(66);
	var onlyChild = __webpack_require__(179);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (false) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(69);
	var ReactElementValidator = __webpack_require__(177);

	var mapObject = __webpack_require__(178);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (false) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(69);
	var ReactPropTypeLocations = __webpack_require__(92);
	var ReactPropTypeLocationNames = __webpack_require__(93);
	var ReactCurrentOwner = __webpack_require__(32);

	var canDefineProperty = __webpack_require__(70);
	var getIteratorFn = __webpack_require__(135);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	   false ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ?  false ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	       false ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	         false ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	     false ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	     false ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (false) {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

/***/ },
/* 178 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(69);

	var invariant = __webpack_require__(40);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ?  false ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(66);
	var warning = __webpack_require__(52);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (false) {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _DownloadCollection = __webpack_require__(182);

	var _DownloadCollection2 = _interopRequireDefault(_DownloadCollection);

	var _ShareCollection = __webpack_require__(184);

	var _ShareCollection2 = _interopRequireDefault(_ShareCollection);

	var _BuyPostmanSync = __webpack_require__(201);

	var _BuyPostmanSync2 = _interopRequireDefault(_BuyPostmanSync);

	var ShareCollectionModal = (function (_React$Component) {
	  _inherits(ShareCollectionModal, _React$Component);

	  function ShareCollectionModal(props) {
	    _classCallCheck(this, ShareCollectionModal);

	    _get(Object.getPrototypeOf(ShareCollectionModal.prototype), 'constructor', this).call(this, props);
	    this.state = {
	      showShareComponent: false
	    };
	  }

	  _createClass(ShareCollectionModal, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.checkUserTeam();
	    }
	  }, {
	    key: 'checkUserTeam',
	    value: function checkUserTeam() {
	      pm.user.isLoggedIn() && pm.user.isTeamMember() && this.setState({
	        showShareComponent: true
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-modal-component' },
	        _react2['default'].createElement(_DownloadCollection2['default'], this.props),
	        _react2['default'].createElement(
	          'div',
	          { className: 'share-collection-buy-postman-container' },
	          this.state.showShareComponent ? _react2['default'].createElement(_ShareCollection2['default'], this.props) : _react2['default'].createElement(_BuyPostmanSync2['default'], this.props)
	        )
	      );
	    }
	  }]);

	  return ShareCollectionModal;
	})(_react2['default'].Component);

	exports['default'] = ShareCollectionModal;
	module.exports = exports['default'];

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(183);

	var _classnames2 = _interopRequireDefault(_classnames);

	var DownloadCollection = (function (_React$Component) {
	  _inherits(DownloadCollection, _React$Component);

	  function DownloadCollection(props) {
	    _classCallCheck(this, DownloadCollection);

	    _get(Object.getPrototypeOf(DownloadCollection.prototype), 'constructor', this).call(this, props);
	    this.state = {
	      fetchingLink: false,
	      link: null,
	      linkCopied: false
	    };
	  }

	  _createClass(DownloadCollection, [{
	    key: 'fetchLink',
	    value: function fetchLink() {
	      this.setState({
	        fetchingLink: true,
	        link: null
	      });

	      if (!pm.user.isLoggedIn()) {
	        return;
	      }

	      this.props.model.uploadCollectionForLink(this.props.collectionId, false, false, (function (link) {
	        this.setState({
	          fetchingLink: false,
	          link: link
	        });
	      }).bind(this));
	    }
	  }, {
	    key: 'copyLink',
	    value: function copyLink() {
	      var _this = this;

	      copyToClipboard(this.state.link);
	      this.setState({
	        linkCopied: true
	      });
	      setTimeout(function () {
	        _this.setState({
	          linkCopied: false
	        });
	      }, 5000);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'download-collection-container' },
	        this.state.link ? _react2['default'].createElement(
	          'div',
	          { className: 'download-collection-link-wrapper' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'download-collection-link-container' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'download-collection-link' },
	              this.state.link
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'download-collection-link-copy-button', onClick: this.copyLink.bind(this) },
	              this.state.linkCopied ? 'Copied' : 'Copy Link'
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'download-collection-msg' },
	            '(Anyone with this link can view only)'
	          )
	        ) : _react2['default'].createElement(
	          'div',
	          { className: 'download-collection-button-wrapper' },
	          this.state.fetchingLink ? _react2['default'].createElement(
	            'span',
	            { className: 'getting-link' },
	            'Getting link'
	          ) : _react2['default'].createElement(
	            'span',
	            { className: 'get-link', onClick: this.fetchLink.bind(this) },
	            'Get download link'
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'download-collection-msg' },
	            '(Anyone with this link can download this collection)'
	          )
	        )
	      );
	    }
	  }]);

	  return DownloadCollection;
	})(_react2['default'].Component);

	exports['default'] = DownloadCollection;
	module.exports = exports['default'];

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = '';

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes += ' ' + arg;
				} else if (Array.isArray(arg)) {
					classes += ' ' + classNames.apply(null, arg);
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes += ' ' + key;
						}
					}
				}
			}

			return classes.substr(1);
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(183);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _PermissionSelect = __webpack_require__(185);

	var _PermissionSelect2 = _interopRequireDefault(_PermissionSelect);

	var _Permissions = __webpack_require__(191);

	var _Permissions2 = _interopRequireDefault(_Permissions);

	var _TeamMemberSelect = __webpack_require__(198);

	var _TeamMemberSelect2 = _interopRequireDefault(_TeamMemberSelect);

	var _ToggleSwitch = __webpack_require__(199);

	var _ToggleSwitch2 = _interopRequireDefault(_ToggleSwitch);

	var _modelsShareCollectionModel = __webpack_require__(200);

	var _modelsShareCollectionModel2 = _interopRequireDefault(_modelsShareCollectionModel);

	var ShareCollection = (function (_React$Component) {
	  _inherits(ShareCollection, _React$Component);

	  function ShareCollection(props) {
	    _classCallCheck(this, ShareCollection);

	    _get(Object.getPrototypeOf(ShareCollection.prototype), 'constructor', this).call(this, props);
	    this.state = {
	      teamMembers: [],
	      teamSharingEnabled: false,
	      teamPermission: 'read',
	      memberPermissions: [],
	      addMemberPermission: 'read',
	      teamMeta: null,
	      permissionLoading: true,
	      permissionSaving: false
	    };
	  }

	  _createClass(ShareCollection, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.model = new _modelsShareCollectionModel2['default']({
	        collectionId: this.props.collectionId
	      });
	      this.attachModelListeners();
	      this.fetchData();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.detachModelListeners();
	      delete this.model;
	    }
	  }, {
	    key: 'attachModelListeners',
	    value: function attachModelListeners() {
	      this.model.on('change', this.handleModelChange, this);
	      this.model.on('error', this.handleModelError, this);
	    }
	  }, {
	    key: 'detachModelListeners',
	    value: function detachModelListeners() {
	      this.model.off('change', this.handleModelChange, this);
	      this.model.off('error', this.handleModelError, this);
	    }
	  }, {
	    key: 'handleModelChange',
	    value: function handleModelChange() {
	      this.setState({
	        teamSharingEnabled: _.cloneDeep(this.model.get('teamSharingEnabled')),
	        teamPermission: _.cloneDeep(this.model.get('teamPermission')),
	        memberPermissions: _.cloneDeep(this.model.get('memberPermissions')),
	        permissionLoading: false,
	        permissionSaving: false
	      });
	    }
	  }, {
	    key: 'handleModelError',
	    value: function handleModelError() {}
	  }, {
	    key: 'fetchData',
	    value: function fetchData() {
	      this.fetchTeam();
	      this.model.fetchPermissions();
	    }
	  }, {
	    key: 'fetchTeam',
	    value: function fetchTeam() {
	      var team = pm.team_directory.getTeam();
	      if (team) {
	        this.setState({
	          teamMembers: team.members,
	          teamMeta: _.omit(team, 'members')
	        });
	      }
	    }
	  }, {
	    key: 'getPermissionModelPayload',
	    value: function getPermissionModelPayload() {
	      return {
	        teamSharingEnabled: this.state.teamSharingEnabled,
	        teamPermission: this.state.teamPermission,
	        memberPermissions: this.state.memberPermissions,
	        teamId: this.state.teamMeta.id
	      };
	    }
	  }, {
	    key: 'updatePermissions',
	    value: function updatePermissions() {
	      this.setState({
	        permissionSaving: true
	      });
	      this.model.savePermissions(this.getPermissionModelPayload());
	    }
	  }, {
	    key: '_getMemberPermission',
	    value: function _getMemberPermission(id) {
	      return _.find(this.state.memberPermissions, function (memberPermission) {
	        return memberPermission.id === id;
	      });
	    }
	  }, {
	    key: '_addOrUpdateMemberPermission',
	    value: function _addOrUpdateMemberPermission(id, permission) {
	      var memberPermission = this._getMemberPermission(id);

	      if (memberPermission) {
	        memberPermission.access = permission;
	        this.setState({
	          memberPermissions: this.state.memberPermissions
	        });
	      } else {
	        this.setState(function (state) {
	          memberPermissions: state.memberPermissions.push({
	            id: id,
	            access: permission
	          });
	        });
	      }
	    }
	  }, {
	    key: 'handleAddMemberPermissionChange',
	    value: function handleAddMemberPermissionChange(permission) {
	      this.setState({
	        addMemberPermission: permission
	      });
	    }
	  }, {
	    key: 'handleAddMemberChange',
	    value: function handleAddMemberChange(id) {
	      this._addOrUpdateMemberPermission(id, this.state.addMemberPermission);
	    }
	  }, {
	    key: 'handleTeamPermissionChange',
	    value: function handleTeamPermissionChange(permission) {
	      this.setState({
	        teamPermission: permission
	      });
	    }
	  }, {
	    key: 'handleMemberPermissionChange',
	    value: function handleMemberPermissionChange(id, permission) {
	      this._addOrUpdateMemberPermission(id, permission);
	    }
	  }, {
	    key: 'handleMemberPermissionRemove',
	    value: function handleMemberPermissionRemove(id) {
	      var newMemberPermissions = _.reject(this.state.memberPermissions, function (memberPermission) {
	        return memberPermission.id === id;
	      });

	      this.setState({
	        memberPermissions: newMemberPermissions
	      });
	    }
	  }, {
	    key: 'toggleTeamSharing',
	    value: function toggleTeamSharing() {
	      this.setState({
	        teamSharingEnabled: !this.state.teamSharingEnabled
	      });
	    }
	  }, {
	    key: 'handleCancelClick',
	    value: function handleCancelClick() {
	      this.props.hideModal && this.props.hideModal();
	    }
	  }, {
	    key: 'handleDoneClick',
	    value: function handleDoneClick() {
	      this.updatePermissions();
	      this.props.hideModal && this.props.hideModal();
	    }
	  }, {
	    key: '_getAvailableTeamMembers',
	    value: function _getAvailableTeamMembers() {
	      var _this = this;

	      return _.reject(this.state.teamMembers, function (member) {
	        return !!_this._getMemberPermission(member.id) || member.id === pm.user.get('id');
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-container' },
	        _react2['default'].createElement(
	          'div',
	          { className: 'share-collection-header' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'share-collection-title' },
	            'Team Sharing'
	          ),
	          !this.state.permissionLoading ? _react2['default'].createElement(
	            'div',
	            { className: 'share-collection-team-button' },
	            _react2['default'].createElement(_ToggleSwitch2['default'], {
	              on: this.state.teamSharingEnabled,
	              onClick: this.toggleTeamSharing.bind(this)
	            })
	          ) : _react2['default'].createElement(
	            'span',
	            null,
	            '  - loading'
	          )
	        ),
	        !this.state.permissionLoading && this.state.teamSharingEnabled ? _react2['default'].createElement(
	          'div',
	          { className: 'share-collection-content' },
	          _react2['default'].createElement(_Permissions2['default'], _extends({}, this.state, {
	            onTeamPermissionChange: this.handleTeamPermissionChange.bind(this),
	            onMemberPermissionChange: this.handleMemberPermissionChange.bind(this),
	            onMemberPermissionRemove: this.handleMemberPermissionRemove.bind(this)
	          })),
	          _react2['default'].createElement(
	            'div',
	            { className: 'share-collection-team-member-select-row' },
	            _react2['default'].createElement(_TeamMemberSelect2['default'], {
	              options: this._getAvailableTeamMembers.apply(this),
	              onChange: this.handleAddMemberChange.bind(this)
	            }),
	            _react2['default'].createElement(_PermissionSelect2['default'], {
	              value: this.state.addMemberPermission,
	              onChange: this.handleAddMemberPermissionChange.bind(this)
	            }),
	            _react2['default'].createElement('div', { className: 'share-collection-permission-remove-container' })
	          )
	        ) : _react2['default'].createElement(
	          'div',
	          { className: 'share-collection-team-off-msg' },
	          '(Turn on to set access for people in your team)'
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'share-collection-footer' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'share-collection-done', onClick: this.handleDoneClick.bind(this) },
	            'Done'
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'share-collection-cancel', onClick: this.handleCancelClick.bind(this) },
	            'Cancel'
	          )
	        )
	      );
	    }
	  }]);

	  return ShareCollection;
	})(_react2['default'].Component);

	exports['default'] = ShareCollection;
	module.exports = exports['default'];

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _reactSelect = __webpack_require__(186);

	var _reactSelect2 = _interopRequireDefault(_reactSelect);

	var _classnames = __webpack_require__(183);

	var _classnames2 = _interopRequireDefault(_classnames);

	var PermissionSelect = (function (_React$Component) {
	  _inherits(PermissionSelect, _React$Component);

	  function PermissionSelect(props) {
	    _classCallCheck(this, PermissionSelect);

	    _get(Object.getPrototypeOf(PermissionSelect.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(PermissionSelect, [{
	    key: 'handleChange',
	    value: function handleChange(val) {
	      this.props.onChange && this.props.onChange(val);
	    }
	  }, {
	    key: 'renderOption',
	    value: function renderOption(option) {
	      return _react2['default'].createElement(
	        'strong',
	        null,
	        option.label
	      );
	    }
	  }, {
	    key: 'renderValue',
	    value: function renderValue(option) {
	      var classes = (0, _classnames2['default'])('permission-select-value', {
	        'permission-select-read': option.value === 'read',
	        'permission-select-write': option.value === 'write'
	      });
	      return _react2['default'].createElement(
	        'span',
	        { className: classes },
	        option.label
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var options = [{ value: 'read', label: 'can view' }, { value: 'write', label: 'can edit' }];
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-permission-select-container' },
	        _react2['default'].createElement(_reactSelect2['default'], {
	          searchable: false,
	          value: this.props.value,
	          options: options,
	          onChange: this.handleChange.bind(this),
	          optionRenderer: this.renderOption.bind(this),
	          valueRenderer: this.renderValue.bind(this)
	        })
	      );
	    }
	  }]);

	  return PermissionSelect;
	})(_react2['default'].Component);

	exports['default'] = PermissionSelect;
	module.exports = exports['default'];

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/* disable some rules until we refactor more completely; fixing them now would
	   cause conflicts with some open PRs unnecessarily. */
	/* eslint react/jsx-sort-prop-types: 0, react/sort-comp: 0, react/prop-types: 0 */

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(29);
	var Input = __webpack_require__(187);
	var classes = __webpack_require__(183);
	var Value = __webpack_require__(188);
	var SingleValue = __webpack_require__(189);
	var Option = __webpack_require__(190);

	var requestId = 0;

	var Select = React.createClass({

		displayName: 'Select',

		propTypes: {
			addLabelText: React.PropTypes.string, // placeholder displayed when you want to add a label on a multi-value input
			allowCreate: React.PropTypes.bool, // whether to allow creation of new entries
			asyncOptions: React.PropTypes.func, // function to call to get options
			autoload: React.PropTypes.bool, // whether to auto-load the default async options set
			backspaceRemoves: React.PropTypes.bool, // whether backspace removes an item if there is no text input
			cacheAsyncResults: React.PropTypes.bool, // whether to allow cache
			className: React.PropTypes.string, // className for the outer element
			clearAllText: React.PropTypes.string, // title for the "clear" control when multi: true
			clearValueText: React.PropTypes.string, // title for the "clear" control
			clearable: React.PropTypes.bool, // should it be possible to reset value
			delimiter: React.PropTypes.string, // delimiter to use to join multiple values
			disabled: React.PropTypes.bool, // whether the Select is disabled or not
			filterOption: React.PropTypes.func, // method to filter a single option  (option, filterString)
			filterOptions: React.PropTypes.func, // method to filter the options array: function ([options], filterString, [values])
			ignoreCase: React.PropTypes.bool, // whether to perform case-insensitive filtering
			inputProps: React.PropTypes.object, // custom attributes for the Input (in the Select-control) e.g: {'data-foo': 'bar'}
			isLoading: React.PropTypes.bool, // whether the Select is loading externally or not (such as options being loaded)
			labelKey: React.PropTypes.string, // path of the label value in option objects
			matchPos: React.PropTypes.string, // (any|start) match the start or entire string when filtering
			matchProp: React.PropTypes.string, // (any|label|value) which option property to filter on
			multi: React.PropTypes.bool, // multi-value input
			name: React.PropTypes.string, // field name, for hidden <input /> tag
			newOptionCreator: React.PropTypes.func, // factory to create new options when allowCreate set
			noResultsText: React.PropTypes.string, // placeholder displayed when there are no matching search results
			onBlur: React.PropTypes.func, // onBlur handler: function (event) {}
			onChange: React.PropTypes.func, // onChange handler: function (newValue) {}
			onFocus: React.PropTypes.func, // onFocus handler: function (event) {}
			onInputChange: React.PropTypes.func, // onInputChange handler: function (inputValue) {}
			onOptionLabelClick: React.PropTypes.func, // onCLick handler for value labels: function (value, event) {}
			optionComponent: React.PropTypes.func, // option component to render in dropdown
			optionRenderer: React.PropTypes.func, // optionRenderer: function (option) {}
			options: React.PropTypes.array, // array of options
			placeholder: React.PropTypes.string, // field placeholder, displayed when there's no value
			searchable: React.PropTypes.bool, // whether to enable searching feature or not
			searchingText: React.PropTypes.string, // message to display whilst options are loading via asyncOptions
			searchPromptText: React.PropTypes.string, // label to prompt for search input
			singleValueComponent: React.PropTypes.func, // single value component when multiple is set to false
			value: React.PropTypes.any, // initial field value
			valueComponent: React.PropTypes.func, // value component to render in multiple mode
			valueKey: React.PropTypes.string, // path of the label value in option objects
			valueRenderer: React.PropTypes.func // valueRenderer: function (option) {}
		},

		getDefaultProps: function getDefaultProps() {
			return {
				addLabelText: 'Add "{label}"?',
				allowCreate: false,
				asyncOptions: undefined,
				autoload: true,
				backspaceRemoves: true,
				cacheAsyncResults: true,
				className: undefined,
				clearAllText: 'Clear all',
				clearValueText: 'Clear value',
				clearable: true,
				delimiter: ',',
				disabled: false,
				ignoreCase: true,
				inputProps: {},
				isLoading: false,
				labelKey: 'label',
				matchPos: 'any',
				matchProp: 'any',
				name: undefined,
				newOptionCreator: undefined,
				noResultsText: 'No results found',
				onChange: undefined,
				onInputChange: undefined,
				onOptionLabelClick: undefined,
				optionComponent: Option,
				options: undefined,
				placeholder: 'Select...',
				searchable: true,
				searchingText: 'Searching...',
				searchPromptText: 'Type to search',
				singleValueComponent: SingleValue,
				value: undefined,
				valueComponent: Value,
				valueKey: 'value'
			};
		},

		getInitialState: function getInitialState() {
			return {
				/*
	    * set by getStateFromValue on componentWillMount:
	    * - value
	    * - values
	    * - filteredOptions
	    * - inputValue
	    * - placeholder
	    * - focusedOption
	   */
				isFocused: false,
				isLoading: false,
				isOpen: false,
				options: this.props.options
			};
		},

		componentWillMount: function componentWillMount() {
			var _this = this;

			this._optionsCache = {};
			this._optionsFilterString = '';
			this._closeMenuIfClickedOutside = function (event) {
				if (!_this.state.isOpen) {
					return;
				}
				var menuElem = React.findDOMNode(_this.refs.selectMenuContainer);
				var controlElem = React.findDOMNode(_this.refs.control);

				var eventOccuredOutsideMenu = _this.clickedOutsideElement(menuElem, event);
				var eventOccuredOutsideControl = _this.clickedOutsideElement(controlElem, event);

				// Hide dropdown menu if click occurred outside of menu
				if (eventOccuredOutsideMenu && eventOccuredOutsideControl) {
					_this.setState({
						isOpen: false
					}, _this._unbindCloseMenuIfClickedOutside);
				}
			};
			this._bindCloseMenuIfClickedOutside = function () {
				if (!document.addEventListener && document.attachEvent) {
					document.attachEvent('onclick', _this._closeMenuIfClickedOutside);
				} else {
					document.addEventListener('click', _this._closeMenuIfClickedOutside);
				}
			};
			this._unbindCloseMenuIfClickedOutside = function () {
				if (!document.removeEventListener && document.detachEvent) {
					document.detachEvent('onclick', _this._closeMenuIfClickedOutside);
				} else {
					document.removeEventListener('click', _this._closeMenuIfClickedOutside);
				}
			};
			this.setState(this.getStateFromValue(this.props.value));
		},

		componentDidMount: function componentDidMount() {
			if (this.props.asyncOptions && this.props.autoload) {
				this.autoloadAsyncOptions();
			}
		},

		componentWillUnmount: function componentWillUnmount() {
			clearTimeout(this._blurTimeout);
			clearTimeout(this._focusTimeout);
			if (this.state.isOpen) {
				this._unbindCloseMenuIfClickedOutside();
			}
		},

		componentWillReceiveProps: function componentWillReceiveProps(newProps) {
			var _this2 = this;

			var optionsChanged = false;
			if (JSON.stringify(newProps.options) !== JSON.stringify(this.props.options)) {
				optionsChanged = true;
				this.setState({
					options: newProps.options,
					filteredOptions: this.filterOptions(newProps.options)
				});
			}
			if (newProps.value !== this.state.value || newProps.placeholder !== this.props.placeholder || optionsChanged) {
				var setState = function setState(newState) {
					_this2.setState(_this2.getStateFromValue(newProps.value, newState && newState.options || newProps.options, newProps.placeholder));
				};
				if (this.props.asyncOptions) {
					this.loadAsyncOptions(newProps.value, {}, setState);
				} else {
					setState();
				}
			}
		},

		componentDidUpdate: function componentDidUpdate() {
			var _this3 = this;

			if (!this.props.disabled && this._focusAfterUpdate) {
				clearTimeout(this._blurTimeout);
				clearTimeout(this._focusTimeout);
				this._focusTimeout = setTimeout(function () {
					if (!_this3.isMounted()) return;
					_this3.getInputNode().focus();
					_this3._focusAfterUpdate = false;
				}, 50);
			}
			if (this._focusedOptionReveal) {
				if (this.refs.focused && this.refs.menu) {
					var focusedDOM = React.findDOMNode(this.refs.focused);
					var menuDOM = React.findDOMNode(this.refs.menu);
					var focusedRect = focusedDOM.getBoundingClientRect();
					var menuRect = menuDOM.getBoundingClientRect();

					if (focusedRect.bottom > menuRect.bottom || focusedRect.top < menuRect.top) {
						menuDOM.scrollTop = focusedDOM.offsetTop + focusedDOM.clientHeight - menuDOM.offsetHeight;
					}
				}
				this._focusedOptionReveal = false;
			}
		},

		focus: function focus() {
			this.getInputNode().focus();
		},

		clickedOutsideElement: function clickedOutsideElement(element, event) {
			var eventTarget = event.target ? event.target : event.srcElement;
			while (eventTarget != null) {
				if (eventTarget === element) return false;
				eventTarget = eventTarget.offsetParent;
			}
			return true;
		},

		getStateFromValue: function getStateFromValue(value, options, placeholder) {
			var _this4 = this;

			if (!options) {
				options = this.state.options;
			}
			if (!placeholder) {
				placeholder = this.props.placeholder;
			}

			// reset internal filter string
			this._optionsFilterString = '';

			var values = this.initValuesArray(value, options);
			var filteredOptions = this.filterOptions(options, values);

			var focusedOption;
			var valueForState = null;
			if (!this.props.multi && values.length) {
				focusedOption = values[0];
				valueForState = values[0][this.props.valueKey];
			} else {
				focusedOption = this.getFirstFocusableOption(filteredOptions);
				valueForState = values.map(function (v) {
					return v[_this4.props.valueKey];
				}).join(this.props.delimiter);
			}

			return {
				value: valueForState,
				values: values,
				inputValue: '',
				filteredOptions: filteredOptions,
				placeholder: !this.props.multi && values.length ? values[0][this.props.labelKey] : placeholder,
				focusedOption: focusedOption
			};
		},

		getFirstFocusableOption: function getFirstFocusableOption(options) {

			for (var optionIndex = 0; optionIndex < options.length; ++optionIndex) {
				if (!options[optionIndex].disabled) {
					return options[optionIndex];
				}
			}
		},

		initValuesArray: function initValuesArray(values, options) {
			var _this5 = this;

			if (!Array.isArray(values)) {
				if (typeof values === 'string') {
					values = values === '' ? [] : this.props.multi ? values.split(this.props.delimiter) : [values];
				} else {
					values = values !== undefined && values !== null ? [values] : [];
				}
			}
			return values.map(function (val) {
				if (typeof val === 'string' || typeof val === 'number') {
					for (var key in options) {
						if (options.hasOwnProperty(key) && options[key] && (options[key][_this5.props.valueKey] === val || typeof options[key][_this5.props.valueKey] === 'number' && options[key][_this5.props.valueKey].toString() === val)) {
							return options[key];
						}
					}
					return { value: val, label: val };
				} else {
					return val;
				}
			});
		},

		setValue: function setValue(value, focusAfterUpdate) {
			if (focusAfterUpdate || focusAfterUpdate === undefined) {
				this._focusAfterUpdate = true;
			}
			var newState = this.getStateFromValue(value);
			newState.isOpen = false;
			this.fireChangeEvent(newState);
			this.setState(newState);
		},

		selectValue: function selectValue(value) {
			if (!this.props.multi) {
				this.setValue(value);
			} else if (value) {
				this.addValue(value);
			}
			this._unbindCloseMenuIfClickedOutside();
		},

		addValue: function addValue(value) {
			this.setValue(this.state.values.concat(value));
		},

		popValue: function popValue() {
			this.setValue(this.state.values.slice(0, this.state.values.length - 1));
		},

		removeValue: function removeValue(valueToRemove) {
			this.setValue(this.state.values.filter(function (value) {
				return value !== valueToRemove;
			}));
		},

		clearValue: function clearValue(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, ignore it.
			if (event && event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();
			this.setValue(null);
		},

		resetValue: function resetValue() {
			this.setValue(this.state.value === '' ? null : this.state.value);
		},

		getInputNode: function getInputNode() {
			var input = this.refs.input;
			return this.props.searchable ? input : React.findDOMNode(input);
		},

		fireChangeEvent: function fireChangeEvent(newState) {
			if (newState.value !== this.state.value && this.props.onChange) {
				this.props.onChange(newState.value, newState.values);
			}
		},

		handleMouseDown: function handleMouseDown(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();

			// for the non-searchable select, close the dropdown when button is clicked
			if (this.state.isOpen && !this.props.searchable) {
				this.setState({
					isOpen: false
				}, this._unbindCloseMenuIfClickedOutside);
				return;
			}

			if (this.state.isFocused) {
				this.setState({
					isOpen: true
				}, this._bindCloseMenuIfClickedOutside);
			} else {
				this._openAfterFocus = true;
				this.getInputNode().focus();
			}
		},

		handleMouseDownOnMenu: function handleMouseDownOnMenu(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();
		},

		handleMouseDownOnArrow: function handleMouseDownOnArrow(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			// If not focused, handleMouseDown will handle it
			if (!this.state.isOpen) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();
			this.setState({
				isOpen: false
			}, this._unbindCloseMenuIfClickedOutside);
		},

		handleInputFocus: function handleInputFocus(event) {
			var _this6 = this;

			var newIsOpen = this.state.isOpen || this._openAfterFocus;
			this.setState({
				isFocused: true,
				isOpen: newIsOpen
			}, function () {
				if (newIsOpen) {
					_this6._bindCloseMenuIfClickedOutside();
				} else {
					_this6._unbindCloseMenuIfClickedOutside();
				}
			});
			this._openAfterFocus = false;
			if (this.props.onFocus) {
				this.props.onFocus(event);
			}
		},

		handleInputBlur: function handleInputBlur(event) {
			var _this7 = this;

			this._blurTimeout = setTimeout(function () {
				if (_this7._focusAfterUpdate || !_this7.isMounted()) return;
				_this7.setState({
					isFocused: false,
					isOpen: false
				});
			}, 50);
			if (this.props.onBlur) {
				this.props.onBlur(event);
			}
		},

		handleKeyDown: function handleKeyDown(event) {
			if (this.props.disabled) return;
			switch (event.keyCode) {
				case 8:
					// backspace
					if (!this.state.inputValue && this.props.backspaceRemoves) {
						event.preventDefault();
						this.popValue();
					}
					return;
				case 9:
					// tab
					if (event.shiftKey || !this.state.isOpen || !this.state.focusedOption) {
						return;
					}
					this.selectFocusedOption();
					break;
				case 13:
					// enter
					if (!this.state.isOpen) return;
					this.selectFocusedOption();
					break;
				case 27:
					// escape
					if (this.state.isOpen) {
						this.resetValue();
					} else if (this.props.clearable) {
						this.clearValue(event);
					}
					break;
				case 38:
					// up
					this.focusPreviousOption();
					break;
				case 40:
					// down
					this.focusNextOption();
					break;
				case 188:
					// ,
					if (this.props.allowCreate && this.props.multi) {
						event.preventDefault();
						event.stopPropagation();
						this.selectFocusedOption();
					} else {
						return;
					}
					break;
				default:
					return;
			}
			event.preventDefault();
		},

		// Ensures that the currently focused option is available in filteredOptions.
		// If not, returns the first available option.
		_getNewFocusedOption: function _getNewFocusedOption(filteredOptions) {
			for (var key in filteredOptions) {
				if (filteredOptions.hasOwnProperty(key) && filteredOptions[key] === this.state.focusedOption) {
					return filteredOptions[key];
				}
			}
			return this.getFirstFocusableOption(filteredOptions);
		},

		handleInputChange: function handleInputChange(event) {
			// assign an internal variable because we need to use
			// the latest value before setState() has completed.
			this._optionsFilterString = event.target.value;

			if (this.props.onInputChange) {
				this.props.onInputChange(event.target.value);
			}

			if (this.props.asyncOptions) {
				this.setState({
					isLoading: true,
					inputValue: event.target.value
				});
				this.loadAsyncOptions(event.target.value, {
					isLoading: false,
					isOpen: true
				}, this._bindCloseMenuIfClickedOutside);
			} else {
				var filteredOptions = this.filterOptions(this.state.options);
				this.setState({
					isOpen: true,
					inputValue: event.target.value,
					filteredOptions: filteredOptions,
					focusedOption: this._getNewFocusedOption(filteredOptions)
				}, this._bindCloseMenuIfClickedOutside);
			}
		},

		autoloadAsyncOptions: function autoloadAsyncOptions() {
			var _this8 = this;

			this.setState({
				isLoading: true
			});
			this.loadAsyncOptions(this.props.value || '', { isLoading: false }, function () {
				// update with new options but don't focus
				_this8.setValue(_this8.props.value, false);
			});
		},

		loadAsyncOptions: function loadAsyncOptions(input, state, callback) {
			var _this9 = this;

			var thisRequestId = this._currentRequestId = requestId++;
			if (this.props.cacheAsyncResults) {
				for (var i = 0; i <= input.length; i++) {
					var cacheKey = input.slice(0, i);
					if (this._optionsCache[cacheKey] && (input === cacheKey || this._optionsCache[cacheKey].complete)) {
						var options = this._optionsCache[cacheKey].options;
						var filteredOptions = this.filterOptions(options);
						var newState = {
							options: options,
							filteredOptions: filteredOptions,
							focusedOption: this._getNewFocusedOption(filteredOptions)
						};
						for (var key in state) {
							if (state.hasOwnProperty(key)) {
								newState[key] = state[key];
							}
						}
						this.setState(newState);
						if (callback) callback.call(this, newState);
						return;
					}
				}
			}

			this.props.asyncOptions(input, function (err, data) {
				if (err) throw err;
				if (_this9.props.cacheAsyncResults) {
					_this9._optionsCache[input] = data;
				}
				if (thisRequestId !== _this9._currentRequestId) {
					return;
				}
				var filteredOptions = _this9.filterOptions(data.options);
				var newState = {
					options: data.options,
					filteredOptions: filteredOptions,
					focusedOption: _this9._getNewFocusedOption(filteredOptions)
				};
				for (var key in state) {
					if (state.hasOwnProperty(key)) {
						newState[key] = state[key];
					}
				}
				_this9.setState(newState);
				if (callback) {
					callback.call(_this9, newState);
				}
			});
		},

		filterOptions: function filterOptions(options, values) {
			var filterValue = this._optionsFilterString;
			var exclude = (values || this.state.values).map(function (i) {
				return i.value;
			});
			if (this.props.filterOptions) {
				return this.props.filterOptions.call(this, options, filterValue, exclude);
			} else {
				var filterOption = function filterOption(op) {
					if (this.props.multi && exclude.indexOf(op[this.props.valueKey]) > -1) return false;
					if (this.props.filterOption) return this.props.filterOption.call(this, op, filterValue);
					var valueTest = String(op[this.props.valueKey]);
					var labelTest = String(op[this.props.labelKey]);
					if (this.props.ignoreCase) {
						valueTest = valueTest.toLowerCase();
						labelTest = labelTest.toLowerCase();
						filterValue = filterValue.toLowerCase();
					}
					return !filterValue || this.props.matchPos === 'start' ? this.props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || this.props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : this.props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || this.props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
				};
				return (options || []).filter(filterOption, this);
			}
		},

		selectFocusedOption: function selectFocusedOption() {
			if (this.props.allowCreate && !this.state.focusedOption) {
				return this.selectValue(this.state.inputValue);
			}

			if (this.state.focusedOption) {
				return this.selectValue(this.state.focusedOption);
			}
		},

		focusOption: function focusOption(op) {
			this.setState({
				focusedOption: op
			});
		},

		focusNextOption: function focusNextOption() {
			this.focusAdjacentOption('next');
		},

		focusPreviousOption: function focusPreviousOption() {
			this.focusAdjacentOption('previous');
		},

		focusAdjacentOption: function focusAdjacentOption(dir) {
			this._focusedOptionReveal = true;
			var ops = this.state.filteredOptions.filter(function (op) {
				return !op.disabled;
			});
			if (!this.state.isOpen) {
				this.setState({
					isOpen: true,
					inputValue: '',
					focusedOption: this.state.focusedOption || ops[dir === 'next' ? 0 : ops.length - 1]
				}, this._bindCloseMenuIfClickedOutside);
				return;
			}
			if (!ops.length) {
				return;
			}
			var focusedIndex = -1;
			for (var i = 0; i < ops.length; i++) {
				if (this.state.focusedOption === ops[i]) {
					focusedIndex = i;
					break;
				}
			}
			var focusedOption = ops[0];
			if (dir === 'next' && focusedIndex > -1 && focusedIndex < ops.length - 1) {
				focusedOption = ops[focusedIndex + 1];
			} else if (dir === 'previous') {
				if (focusedIndex > 0) {
					focusedOption = ops[focusedIndex - 1];
				} else {
					focusedOption = ops[ops.length - 1];
				}
			}
			this.setState({
				focusedOption: focusedOption
			});
		},

		unfocusOption: function unfocusOption(op) {
			if (this.state.focusedOption === op) {
				this.setState({
					focusedOption: null
				});
			}
		},

		buildMenu: function buildMenu() {
			var _this10 = this;

			var focusedValue = this.state.focusedOption ? this.state.focusedOption[this.props.valueKey] : null;
			var renderLabel = this.props.optionRenderer;
			if (!renderLabel) renderLabel = function (op) {
				return op[_this10.props.labelKey];
			};
			if (this.state.filteredOptions.length > 0) {
				focusedValue = focusedValue == null ? this.state.filteredOptions[0] : focusedValue;
			}
			// Add the current value to the filtered options in last resort
			var options = this.state.filteredOptions;
			if (this.props.allowCreate && this.state.inputValue.trim()) {
				var inputValue = this.state.inputValue;
				options = options.slice();
				var newOption = this.props.newOptionCreator ? this.props.newOptionCreator(inputValue) : {
					value: inputValue,
					label: inputValue,
					create: true
				};
				options.unshift(newOption);
			}
			var ops = Object.keys(options).map(function (key) {
				var op = options[key];
				var isSelected = this.state.value === op[this.props.valueKey];
				var isFocused = focusedValue === op[this.props.valueKey];
				var optionClass = classes({
					'Select-option': true,
					'is-selected': isSelected,
					'is-focused': isFocused,
					'is-disabled': op.disabled
				});
				var ref = isFocused ? 'focused' : null;
				var mouseEnter = this.focusOption.bind(this, op);
				var mouseLeave = this.unfocusOption.bind(this, op);
				var mouseDown = this.selectValue.bind(this, op);
				var optionResult = React.createElement(this.props.optionComponent, {
					key: 'option-' + op[this.props.valueKey],
					className: optionClass,
					renderFunc: renderLabel,
					mouseEnter: mouseEnter,
					mouseLeave: mouseLeave,
					mouseDown: mouseDown,
					click: mouseDown,
					addLabelText: this.props.addLabelText,
					option: op,
					ref: ref
				});
				return optionResult;
			}, this);

			if (ops.length) {
				return ops;
			} else {
				var noResultsText, promptClass;
				if (this.isLoading()) {
					promptClass = 'Select-searching';
					noResultsText = this.props.searchingText;
				} else if (this.state.inputValue || !this.props.asyncOptions) {
					promptClass = 'Select-noresults';
					noResultsText = this.props.noResultsText;
				} else {
					promptClass = 'Select-search-prompt';
					noResultsText = this.props.searchPromptText;
				}

				return React.createElement(
					'div',
					{ className: promptClass },
					noResultsText
				);
			}
		},

		handleOptionLabelClick: function handleOptionLabelClick(value, event) {
			if (this.props.onOptionLabelClick) {
				this.props.onOptionLabelClick(value, event);
			}
		},

		isLoading: function isLoading() {
			return this.props.isLoading || this.state.isLoading;
		},

		render: function render() {
			var selectClass = classes('Select', this.props.className, {
				'is-multi': this.props.multi,
				'is-searchable': this.props.searchable,
				'is-open': this.state.isOpen,
				'is-focused': this.state.isFocused,
				'is-loading': this.isLoading(),
				'is-disabled': this.props.disabled,
				'has-value': this.state.value
			});
			var value = [];
			if (this.props.multi) {
				this.state.values.forEach(function (val) {
					var onOptionLabelClick = this.handleOptionLabelClick.bind(this, val);
					var onRemove = this.removeValue.bind(this, val);
					var valueComponent = React.createElement(this.props.valueComponent, {
						key: val.value,
						option: val,
						renderer: this.props.valueRenderer,
						optionLabelClick: !!this.props.onOptionLabelClick,
						onOptionLabelClick: onOptionLabelClick,
						onRemove: onRemove,
						disabled: this.props.disabled
					});
					value.push(valueComponent);
				}, this);
			}

			if (!this.state.inputValue && (!this.props.multi || !value.length)) {
				var val = this.state.values[0] || null;
				if (this.props.valueRenderer && !!this.state.values.length) {
					value.push(React.createElement(Value, {
						key: 0,
						option: val,
						renderer: this.props.valueRenderer,
						disabled: this.props.disabled }));
				} else {
					var singleValueComponent = React.createElement(this.props.singleValueComponent, {
						key: 'placeholder',
						value: val,
						placeholder: this.state.placeholder
					});
					value.push(singleValueComponent);
				}
			}

			var loading = this.isLoading() ? React.createElement('span', { className: 'Select-loading', 'aria-hidden': 'true' }) : null;
			var clear = this.props.clearable && this.state.value && !this.props.disabled ? React.createElement('span', { className: 'Select-clear', title: this.props.multi ? this.props.clearAllText : this.props.clearValueText, 'aria-label': this.props.multi ? this.props.clearAllText : this.props.clearValueText, onMouseDown: this.clearValue, onTouchEnd: this.clearValue, onClick: this.clearValue, dangerouslySetInnerHTML: { __html: '&times;' } }) : null;

			var menu;
			var menuProps;
			if (this.state.isOpen) {
				menuProps = {
					ref: 'menu',
					className: 'Select-menu',
					onMouseDown: this.handleMouseDownOnMenu
				};
				menu = React.createElement(
					'div',
					{ ref: 'selectMenuContainer', className: 'Select-menu-outer' },
					React.createElement(
						'div',
						menuProps,
						this.buildMenu()
					)
				);
			}

			var input;
			var inputProps = {
				ref: 'input',
				className: 'Select-input ' + (this.props.inputProps.className || ''),
				tabIndex: this.props.tabIndex || 0,
				onFocus: this.handleInputFocus,
				onBlur: this.handleInputBlur
			};
			for (var key in this.props.inputProps) {
				if (this.props.inputProps.hasOwnProperty(key) && key !== 'className') {
					inputProps[key] = this.props.inputProps[key];
				}
			}

			if (!this.props.disabled) {
				if (this.props.searchable) {
					input = React.createElement(Input, _extends({ value: this.state.inputValue, onChange: this.handleInputChange, minWidth: '5' }, inputProps));
				} else {
					input = React.createElement(
						'div',
						inputProps,
						' '
					);
				}
			} else if (!this.props.multi || !this.state.values.length) {
				input = React.createElement(
					'div',
					{ className: 'Select-input' },
					' '
				);
			}

			return React.createElement(
				'div',
				{ ref: 'wrapper', className: selectClass },
				React.createElement('input', { type: 'hidden', ref: 'value', name: this.props.name, value: this.state.value, disabled: this.props.disabled }),
				React.createElement(
					'div',
					{ className: 'Select-control', ref: 'control', onKeyDown: this.handleKeyDown, onMouseDown: this.handleMouseDown, onTouchEnd: this.handleMouseDown },
					value,
					input,
					React.createElement('span', { className: 'Select-arrow-zone', onMouseDown: this.handleMouseDownOnArrow }),
					React.createElement('span', { className: 'Select-arrow', onMouseDown: this.handleMouseDownOnArrow }),
					loading,
					clear
				),
				menu
			);
		}

	});

	module.exports = Select;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(29);

	var sizerStyle = { position: 'absolute', visibility: 'hidden', height: 0, width: 0, overflow: 'scroll', whiteSpace: 'nowrap' };

	var AutosizeInput = React.createClass({
		displayName: 'AutosizeInput',

		propTypes: {
			value: React.PropTypes.any, // field value
			defaultValue: React.PropTypes.any, // default field value
			onChange: React.PropTypes.func, // onChange handler: function(newValue) {}
			style: React.PropTypes.object, // css styles for the outer element
			className: React.PropTypes.string, // className for the outer element
			minWidth: React.PropTypes.oneOfType([// minimum width for input element
			React.PropTypes.number, React.PropTypes.string]),
			inputStyle: React.PropTypes.object, // css styles for the input element
			inputClassName: React.PropTypes.string // className for the input element
		},
		getDefaultProps: function getDefaultProps() {
			return {
				minWidth: 1
			};
		},
		getInitialState: function getInitialState() {
			return {
				inputWidth: this.props.minWidth
			};
		},
		componentDidMount: function componentDidMount() {
			this.copyInputStyles();
			this.updateInputWidth();
		},
		componentDidUpdate: function componentDidUpdate() {
			this.updateInputWidth();
		},
		copyInputStyles: function copyInputStyles() {
			if (!this.isMounted() || !window.getComputedStyle) {
				return;
			}
			var inputStyle = window.getComputedStyle(React.findDOMNode(this.refs.input));
			var widthNode = React.findDOMNode(this.refs.sizer);
			widthNode.style.fontSize = inputStyle.fontSize;
			widthNode.style.fontFamily = inputStyle.fontFamily;
			widthNode.style.letterSpacing = inputStyle.letterSpacing;
			if (this.props.placeholder) {
				var placeholderNode = React.findDOMNode(this.refs.placeholderSizer);
				placeholderNode.style.fontSize = inputStyle.fontSize;
				placeholderNode.style.fontFamily = inputStyle.fontFamily;
				placeholderNode.style.letterSpacing = inputStyle.letterSpacing;
			}
		},
		updateInputWidth: function updateInputWidth() {
			if (!this.isMounted() || typeof React.findDOMNode(this.refs.sizer).scrollWidth === 'undefined') {
				return;
			}
			var newInputWidth;
			if (this.props.placeholder) {
				newInputWidth = Math.max(React.findDOMNode(this.refs.sizer).scrollWidth, React.findDOMNode(this.refs.placeholderSizer).scrollWidth) + 2;
			} else {
				newInputWidth = React.findDOMNode(this.refs.sizer).scrollWidth + 2;
			}
			if (newInputWidth < this.props.minWidth) {
				newInputWidth = this.props.minWidth;
			}
			if (newInputWidth !== this.state.inputWidth) {
				this.setState({
					inputWidth: newInputWidth
				});
			}
		},
		getInput: function getInput() {
			return this.refs.input;
		},
		focus: function focus() {
			React.findDOMNode(this.refs.input).focus();
		},
		select: function select() {
			React.findDOMNode(this.refs.input).select();
		},
		render: function render() {
			var escapedValue = (this.props.value || '').replace(/\&/g, '&amp;').replace(/ /g, '&nbsp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
			var wrapperStyle = this.props.style || {};
			wrapperStyle.display = 'inline-block';
			var inputStyle = _extends({}, this.props.inputStyle);
			inputStyle.width = this.state.inputWidth;
			inputStyle.boxSizing = 'content-box';
			var placeholder = this.props.placeholder ? React.createElement(
				'div',
				{ ref: 'placeholderSizer', style: sizerStyle },
				this.props.placeholder
			) : null;
			return React.createElement(
				'div',
				{ className: this.props.className, style: wrapperStyle },
				React.createElement('input', _extends({}, this.props, { ref: 'input', className: this.props.inputClassName, style: inputStyle })),
				React.createElement('div', { ref: 'sizer', style: sizerStyle, dangerouslySetInnerHTML: { __html: escapedValue } }),
				placeholder
			);
		}
	});

	module.exports = AutosizeInput;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(29);
	var classes = __webpack_require__(183);

	var Value = React.createClass({

		displayName: 'Value',

		propTypes: {
			disabled: React.PropTypes.bool, // disabled prop passed to ReactSelect
			onOptionLabelClick: React.PropTypes.func, // method to handle click on value label
			onRemove: React.PropTypes.func, // method to handle remove of that value
			option: React.PropTypes.object.isRequired, // option passed to component
			optionLabelClick: React.PropTypes.bool, // indicates if onOptionLabelClick should be handled
			renderer: React.PropTypes.func // method to render option label passed to ReactSelect
		},

		blockEvent: function blockEvent(event) {
			event.stopPropagation();
		},

		handleOnRemove: function handleOnRemove(event) {
			if (!this.props.disabled) {
				this.props.onRemove(event);
			}
		},

		render: function render() {
			var label = this.props.option.label;
			if (this.props.renderer) {
				label = this.props.renderer(this.props.option);
			}

			if (!this.props.onRemove && !this.props.optionLabelClick) {
				return React.createElement(
					'div',
					{
						className: classes('Select-value', this.props.option.className),
						style: this.props.option.style,
						title: this.props.option.title
					},
					label
				);
			}

			if (this.props.optionLabelClick) {
				label = React.createElement(
					'a',
					{ className: classes('Select-item-label__a', this.props.option.className),
						onMouseDown: this.blockEvent,
						onTouchEnd: this.props.onOptionLabelClick,
						onClick: this.props.onOptionLabelClick,
						style: this.props.option.style,
						title: this.props.option.title },
					label
				);
			}

			return React.createElement(
				'div',
				{ className: classes('Select-item', this.props.option.className),
					style: this.props.option.style,
					title: this.props.option.title },
				React.createElement(
					'span',
					{ className: 'Select-item-icon',
						onMouseDown: this.blockEvent,
						onClick: this.handleOnRemove,
						onTouchEnd: this.handleOnRemove },
					'×'
				),
				React.createElement(
					'span',
					{ className: 'Select-item-label' },
					label
				)
			);
		}

	});

	module.exports = Value;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(29);
	var classes = __webpack_require__(183);

	var SingleValue = React.createClass({
		displayName: 'SingleValue',

		propTypes: {
			placeholder: React.PropTypes.string, // this is default value provided by React-Select based component
			value: React.PropTypes.object // selected option
		},
		render: function render() {
			var classNames = classes('Select-placeholder', this.props.value && this.props.value.className);
			return React.createElement(
				'div',
				{
					className: classNames,
					style: this.props.value && this.props.value.style,
					title: this.props.value && this.props.value.title
				},
				this.props.placeholder
			);
		}
	});

	module.exports = SingleValue;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(29);
	var classes = __webpack_require__(183);

	var Option = React.createClass({
		displayName: 'Option',

		propTypes: {
			addLabelText: React.PropTypes.string, // string rendered in case of allowCreate option passed to ReactSelect
			className: React.PropTypes.string, // className (based on mouse position)
			mouseDown: React.PropTypes.func, // method to handle click on option element
			mouseEnter: React.PropTypes.func, // method to handle mouseEnter on option element
			mouseLeave: React.PropTypes.func, // method to handle mouseLeave on option element
			option: React.PropTypes.object.isRequired, // object that is base for that option
			renderFunc: React.PropTypes.func // method passed to ReactSelect component to render label text
		},

		blockEvent: function blockEvent(event) {
			event.preventDefault();
			if (event.target.tagName !== 'A' || !('href' in event.target)) {
				return;
			}

			if (event.target.target) {
				window.open(event.target.href);
			} else {
				window.location.href = event.target.href;
			}
		},

		render: function render() {
			var obj = this.props.option;
			var renderedLabel = this.props.renderFunc(obj);
			var optionClasses = classes(this.props.className, obj.className);

			return obj.disabled ? React.createElement(
				'div',
				{ className: optionClasses,
					onMouseDown: this.blockEvent,
					onClick: this.blockEvent },
				renderedLabel
			) : React.createElement(
				'div',
				{ className: optionClasses,
					style: obj.style,
					onMouseEnter: this.props.mouseEnter,
					onMouseLeave: this.props.mouseLeave,
					onMouseDown: this.props.mouseDown,
					onClick: this.props.mouseDown,
					title: obj.title },
				obj.create ? this.props.addLabelText.replace('{label}', obj.label) : renderedLabel
			);
		}
	});

	module.exports = Option;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _reactSelect = __webpack_require__(186);

	var _reactSelect2 = _interopRequireDefault(_reactSelect);

	var _TeamMemberPermission = __webpack_require__(192);

	var _TeamMemberPermission2 = _interopRequireDefault(_TeamMemberPermission);

	var _OwnerPermission = __webpack_require__(195);

	var _OwnerPermission2 = _interopRequireDefault(_OwnerPermission);

	var _TeamPermission = __webpack_require__(196);

	var _TeamPermission2 = _interopRequireDefault(_TeamPermission);

	var Permissions = (function (_React$Component) {
	  _inherits(Permissions, _React$Component);

	  function Permissions(props) {
	    _classCallCheck(this, Permissions);

	    _get(Object.getPrototypeOf(Permissions.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Permissions, [{
	    key: 'handleMemberPermissionRemove',
	    value: function handleMemberPermissionRemove(id) {
	      this.props.onMemberPermissionRemove && this.props.onMemberPermissionRemove(id);
	    }
	  }, {
	    key: 'handleMemberPermissionChange',
	    value: function handleMemberPermissionChange(id, permission) {
	      this.props.onMemberPermissionChange && this.props.onMemberPermissionChange(id, permission);
	    }
	  }, {
	    key: 'handleTeamPermissionChange',
	    value: function handleTeamPermissionChange(permission) {
	      this.props.onTeamPermissionChange && this.props.onTeamPermissionChange(permission);
	    }
	  }, {
	    key: '_getTeamMember',
	    value: function _getTeamMember(id) {
	      return _.find(this.props.teamMembers, function (member) {
	        return member.id === id;
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-permissions-container' },
	        _react2['default'].createElement(_TeamPermission2['default'], _extends({
	          key: 'team'
	        }, this.props.teamMeta, {
	          access: this.props.teamPermission,
	          onChange: this.handleTeamPermissionChange.bind(this)
	        })),
	        _react2['default'].createElement(_OwnerPermission2['default'], null),
	        this.props.memberPermissions.map(function (memberPermission) {
	          return _react2['default'].createElement(_TeamMemberPermission2['default'], _extends({
	            key: memberPermission.id
	          }, memberPermission, {
	            user: _this._getTeamMember.call(_this, memberPermission.id),
	            onChange: _this.handleMemberPermissionChange.bind(_this),
	            onRemove: _this.handleMemberPermissionRemove.bind(_this)
	          }));
	        })
	      );
	    }
	  }]);

	  return Permissions;
	})(_react2['default'].Component);

	exports['default'] = Permissions;
	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _reactSelect = __webpack_require__(186);

	var _reactSelect2 = _interopRequireDefault(_reactSelect);

	var _PermissionSelect = __webpack_require__(185);

	var _PermissionSelect2 = _interopRequireDefault(_PermissionSelect);

	var _PermissionUser = __webpack_require__(193);

	var _PermissionUser2 = _interopRequireDefault(_PermissionUser);

	var _PermissionRemoveButton = __webpack_require__(194);

	var _PermissionRemoveButton2 = _interopRequireDefault(_PermissionRemoveButton);

	var TeamMemberPermission = (function (_React$Component) {
	  _inherits(TeamMemberPermission, _React$Component);

	  function TeamMemberPermission(props) {
	    _classCallCheck(this, TeamMemberPermission);

	    _get(Object.getPrototypeOf(TeamMemberPermission.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(TeamMemberPermission, [{
	    key: 'handlePermissionRemove',
	    value: function handlePermissionRemove() {
	      this.props.onRemove && this.props.onRemove(this.props.id);
	    }
	  }, {
	    key: 'handlePermissionChange',
	    value: function handlePermissionChange(permission) {
	      this.props.onChange && this.props.onChange(this.props.id, permission);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-team-member-permission-container' },
	        _react2['default'].createElement(_PermissionUser2['default'], this.props.user),
	        _react2['default'].createElement(_PermissionSelect2['default'], {
	          value: this.props.access,
	          onChange: this.handlePermissionChange.bind(this)
	        }),
	        _react2['default'].createElement(_PermissionRemoveButton2['default'], {
	          onClick: this.handlePermissionRemove.bind(this, this.props.access.id)
	        })
	      );
	    }
	  }]);

	  return TeamMemberPermission;
	})(_react2['default'].Component);

	exports['default'] = TeamMemberPermission;
	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var PermissionUser = (function (_React$Component) {
	  _inherits(PermissionUser, _React$Component);

	  function PermissionUser(props) {
	    _classCallCheck(this, PermissionUser);

	    _get(Object.getPrototypeOf(PermissionUser.prototype), "constructor", this).call(this, props);
	  }

	  _createClass(PermissionUser, [{
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { className: "share-collection-permission-user-container" },
	        _react2["default"].createElement(
	          "span",
	          null,
	          this.props.username || this.props.name
	        )
	      );
	    }
	  }]);

	  return PermissionUser;
	})(_react2["default"].Component);

	exports["default"] = PermissionUser;
	module.exports = exports["default"];

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var PermissionRemoveButton = (function (_React$Component) {
	  _inherits(PermissionRemoveButton, _React$Component);

	  function PermissionRemoveButton(props) {
	    _classCallCheck(this, PermissionRemoveButton);

	    _get(Object.getPrototypeOf(PermissionRemoveButton.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(PermissionRemoveButton, [{
	    key: 'handleClick',
	    value: function handleClick() {
	      this.props.onClick && this.props.onClick();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-permission-remove-container' },
	        _react2['default'].createElement('span', { className: 'icon-delete', onClick: this.handleClick.bind(this) })
	      );
	    }
	  }]);

	  return PermissionRemoveButton;
	})(_react2['default'].Component);

	exports['default'] = PermissionRemoveButton;
	module.exports = exports['default'];

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _reactSelect = __webpack_require__(186);

	var _reactSelect2 = _interopRequireDefault(_reactSelect);

	var _PermissionUser = __webpack_require__(193);

	var _PermissionUser2 = _interopRequireDefault(_PermissionUser);

	var OwnerPermission = (function (_React$Component) {
	  _inherits(OwnerPermission, _React$Component);

	  function OwnerPermission(props) {
	    _classCallCheck(this, OwnerPermission);

	    _get(Object.getPrototypeOf(OwnerPermission.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(OwnerPermission, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-team-member-permission-container' },
	        _react2['default'].createElement(_PermissionUser2['default'], {
	          name: pm.user.get('name')
	        }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'share-collection-permission-select-container' },
	          _react2['default'].createElement(
	            'span',
	            { className: 'share-collection-owner' },
	            'owner'
	          )
	        ),
	        _react2['default'].createElement('div', { className: 'share-collection-permission-remove-container' })
	      );
	    }
	  }]);

	  return OwnerPermission;
	})(_react2['default'].Component);

	exports['default'] = OwnerPermission;
	module.exports = exports['default'];

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _reactSelect = __webpack_require__(186);

	var _reactSelect2 = _interopRequireDefault(_reactSelect);

	var _PermissionSelect = __webpack_require__(185);

	var _PermissionSelect2 = _interopRequireDefault(_PermissionSelect);

	var _PermissionTeam = __webpack_require__(197);

	var _PermissionTeam2 = _interopRequireDefault(_PermissionTeam);

	var TeamPermission = (function (_React$Component) {
	  _inherits(TeamPermission, _React$Component);

	  function TeamPermission(props) {
	    _classCallCheck(this, TeamPermission);

	    _get(Object.getPrototypeOf(TeamPermission.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(TeamPermission, [{
	    key: 'handlePermissionChange',
	    value: function handlePermissionChange(permission) {
	      this.props.onChange && this.props.onChange(permission);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-team-permission-container' },
	        _react2['default'].createElement(_PermissionTeam2['default'], this.props),
	        _react2['default'].createElement(_PermissionSelect2['default'], {
	          value: this.props.access,
	          onChange: this.handlePermissionChange.bind(this)
	        }),
	        _react2['default'].createElement('div', { className: 'share-collection-permission-remove-container' })
	      );
	    }
	  }]);

	  return TeamPermission;
	})(_react2['default'].Component);

	exports['default'] = TeamPermission;
	module.exports = exports['default'];

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var PermissionTeam = (function (_React$Component) {
	  _inherits(PermissionTeam, _React$Component);

	  function PermissionTeam(props) {
	    _classCallCheck(this, PermissionTeam);

	    _get(Object.getPrototypeOf(PermissionTeam.prototype), "constructor", this).call(this, props);
	  }

	  _createClass(PermissionTeam, [{
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { className: "share-collection-permission-team-container" },
	        _react2["default"].createElement(
	          "span",
	          { className: "share-collection-permission-team-name" },
	          this.props.name
	        )
	      );
	    }
	  }]);

	  return PermissionTeam;
	})(_react2["default"].Component);

	exports["default"] = PermissionTeam;
	module.exports = exports["default"];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _reactSelect = __webpack_require__(186);

	var _reactSelect2 = _interopRequireDefault(_reactSelect);

	var TeamMemberSelect = (function (_React$Component) {
	  _inherits(TeamMemberSelect, _React$Component);

	  function TeamMemberSelect(props) {
	    _classCallCheck(this, TeamMemberSelect);

	    _get(Object.getPrototypeOf(TeamMemberSelect.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(TeamMemberSelect, [{
	    key: 'handleChange',
	    value: function handleChange(val) {
	      this.props.onChange && this.props.onChange(val);
	    }
	  }, {
	    key: 'renderOption',
	    value: function renderOption(option) {
	      return _react2['default'].createElement(
	        'span',
	        { key: option.value },
	        option.label
	      );
	    }
	  }, {
	    key: 'renderValue',
	    value: function renderValue(option) {
	      return _react2['default'].createElement(
	        'span',
	        { key: option.value },
	        option.label
	      );
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return _.map(this.props.options, function (option) {
	        return _extends({}, option, {
	          value: option.id,
	          label: option.username || option.name
	        });
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'share-collection-team-member-select-container' },
	        _react2['default'].createElement(_reactSelect2['default'], {
	          placeholder: 'Set access for specific people',
	          options: this.getOptions.apply(this),
	          onChange: this.handleChange.bind(this),
	          optionRenderer: this.renderOption.bind(this),
	          valueRenderer: this.renderValue.bind(this)
	        })
	      );
	    }
	  }]);

	  return TeamMemberSelect;
	})(_react2['default'].Component);

	exports['default'] = TeamMemberSelect;
	module.exports = exports['default'];

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(183);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ToggleSwitch = (function (_React$Component) {
	  _inherits(ToggleSwitch, _React$Component);

	  function ToggleSwitch(props) {
	    _classCallCheck(this, ToggleSwitch);

	    _get(Object.getPrototypeOf(ToggleSwitch.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(ToggleSwitch, [{
	    key: 'handleClick',
	    value: function handleClick() {
	      this.props.onClick && this.props.onClick();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var classes = (0, _classnames2['default'])('toggle-switch-react', {
	        'is-on': this.props.on
	      });
	      return _react2['default'].createElement(
	        'div',
	        { className: 'toggle-switch-container', onClick: this.handleClick.bind(this) },
	        _react2['default'].createElement('div', { className: classes }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'toggle-switch-text' },
	          this.props.on ? _react2['default'].createElement(
	            'span',
	            { className: 'toggle-switch-text-on' },
	            'ON'
	          ) : _react2['default'].createElement(
	            'span',
	            { className: 'toggle-switch-text-off' },
	            'OFF'
	          )
	        )
	      );
	    }
	  }]);

	  return ToggleSwitch;
	})(_react2['default'].Component);

	exports['default'] = ToggleSwitch;
	module.exports = exports['default'];

/***/ },
/* 200 */
/***/ function(module, exports) {

	var ShareCollectionModel = Backbone.Model.extend({
	  initialize: function(options) {
	    this.collectionId = options.collectionId;
	  },

	  fetchPermissions: function() {
	    pm.api.getCollectionPermissions(this.collectionId,
	      function(res) {
	        var teamSharingEnabled = false
	          , teamPermission = 'read'
	          , memberPermissions = []

	        if(res.data.team) {
	          teamSharingEnabled = true
	          teamPermission = res.data.team.access
	        } else {
	          teamSharingEnabled = false
	        }

	        if(!_.isEmpty(res.data.users)) {
	          memberPermissions = _.map(res.data.users,
	            function(user) {
	              return {
	                id: user.id,
	                access: user.access
	              }
	            }
	          )
	        }

	        this.set({
	          teamSharingEnabled: teamSharingEnabled,
	          teamPermission: teamPermission,
	          memberPermissions: memberPermissions
	        }, {
	          silent: true
	        });

	        this.trigger('change');
	      }.bind(this),
	      function(error) {
	        console.error('Couldnt get permissions for collection', this.collectionId)
	        this.trigger('error');
	      }.bind(this))
	  },

	  isPermissionsChanged: function(permissions) {
	    var teamSharingEnabled = permissions.teamSharingEnabled;

	    if(this.get('teamSharingEnabled') && !teamSharingEnabled) {
	      return true;
	    }

	    var payload = this.preparePayload(permissions);

	    if(payload.team || !_.isEmpty(payload.users)) {
	      return true;
	    }

	    return false;
	  },

	  preparePayload: function(permissions) {
	    var teamSharingEnabled = permissions.teamSharingEnabled
	      , teamPermission = permissions.teamPermission
	      , memberPermissions = permissions.memberPermissions
	      , teamId = permissions.teamId;

	    var payload = {};

	    var newTeamPermission = teamPermission;
	    var existingTeamPermission = this.get('teamPermission');
	    var newTeamSharingEnabled = teamSharingEnabled;
	    var existingTeamSharingEnabled = this.get('teamSharingEnabled');

	    if ((newTeamSharingEnabled !== existingTeamSharingEnabled) ||
	        (newTeamPermission !== existingTeamPermission)) {
	      payload.team = {
	        id: teamId,
	        access: newTeamPermission
	      }
	    }

	    var newUserPermissions = memberPermissions;
	    var existingUserPermissions = this.get('memberPermissions');
	    var updatedUserPermissions = [];

	    _.forEach(newUserPermissions, function(newUserPermission) {
	      var existingPermission = _.find(existingUserPermissions, function(existingUserPermission) {
	        return newUserPermission.id === existingUserPermission.id;
	      })

	      if(existingPermission) {
	        if(existingPermission.access !== newUserPermission.access) {
	          updatedUserPermissions.push(newUserPermission)
	        }
	      } else {
	        updatedUserPermissions.push(newUserPermission)
	      }
	    });

	    _.forEach(existingUserPermissions, function(existingUserPermission) {
	      var newPermission = _.find(newUserPermissions, function(newUserPermission) {
	        return existingUserPermission.id === newUserPermission.id;
	      })

	      if(!newPermission) {
	        updatedUserPermissions.push({
	          id: existingUserPermission.id,
	          access: null
	        })
	      }
	    })

	    if(updatedUserPermissions) {
	      payload.users = updatedUserPermissions;
	    }

	    return payload;
	  },

	  savePermissions: function(permissions) {
	    var teamSharingEnabled = permissions.teamSharingEnabled;

	    if(this.get('teamSharingEnabled') && !teamSharingEnabled) {
	      pm.syncManager.addChangeset(
	        "collection",
	        "unshare",
	        null,
	        this.collectionId,
	        true
	      );
	      pm.collections.updateCollectionShared(
	        this.collectionId,
	        permissions.teamSharingEnabled,
	        permissions.teamPermission === 'write'
	      );
	      return;
	    }

	    console.log('permission payload', this.preparePayload(permissions));

	    pm.syncManager.addChangeset(
	      "collection",
	      "share",
	      this.preparePayload(permissions),
	      this.collectionId,
	      true
	    );
	    pm.collections.updateCollectionShared(
	      this.collectionId,
	      permissions.teamSharingEnabled,
	      permissions.teamPermission === 'write'
	    );
	  }
	});

	module.exports = ShareCollectionModel;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var BuyPostmanSync = (function (_React$Component) {
	  _inherits(BuyPostmanSync, _React$Component);

	  function BuyPostmanSync(props) {
	    _classCallCheck(this, BuyPostmanSync);

	    _get(Object.getPrototypeOf(BuyPostmanSync.prototype), "constructor", this).call(this, props);
	  }

	  _createClass(BuyPostmanSync, [{
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { className: "share-collection-buy-postman" },
	        "Buy Postman Sync"
	      );
	    }
	  }]);

	  return BuyPostmanSync;
	})(_react2["default"].Component);

	exports["default"] = BuyPostmanSync;
	module.exports = exports["default"];

/***/ },
/* 202 */
/***/ function(module, exports) {

	var OverwriteCollectionModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var oldThis = this;

	        model.on("overwriteCollectionChoice", this.acceptCollection, this);

	        $("#modal-overwrite-collection-duplicate").on("click", function() {
	            var toBeImportedCollection = oldThis.model.overwriteCollectionQueue[0].toBeImportedCollection;
	            toBeImportedCollection.name = toBeImportedCollection.name + " copy";
	            model.overwriteCollection(toBeImportedCollection);
	        });

	        $("#modal-overwrite-collection-overwrite").on("click", function() {
	            var toBeImportedCollection = oldThis.model.overwriteCollectionQueue[0].toBeImportedCollection;
	            model.overwriteCollection(toBeImportedCollection);
	        });

	        $("#modal-overwrite-collection").on("hidden", function () {
	            oldThis.model.overwriteCollectionQueue.shift();
	            if(oldThis.model.overwriteCollectionQueue.length>0) {
	                setTimeout(function() {
	                    //for the modal to dismiss
	                    oldThis.render(oldThis.model.overwriteCollectionQueue[0].originalCollectionId);
	                }, 500);
	            }
	        });

	    },

	    acceptCollection: function(originalCollectionId, toBeImportedCollection) {
	        this.model.overwriteCollectionQueue.push({originalCollectionId: originalCollectionId, toBeImportedCollection: toBeImportedCollection});
	        if(this.model.overwriteCollectionQueue.length>1 || $("#modal-overwrite-collection").css('display')=="block") {
	            return;
	        }
	        else {
	            this.render(originalCollectionId);
	        }
	    },

	    render: function(originalCollectionId) {
	        var originalCollectionId = this.model.overwriteCollectionQueue[0].originalCollectionId;
	        $("#existingCollectionName").text(this.model.getCollectionById(originalCollectionId).get("name"));
	        $("#modal-overwrite-collection").modal("show");    
	    }
	});

	module.exports = OverwriteCollectionModal;


/***/ },
/* 203 */
/***/ function(module, exports) {

	var AddCollectionRequestModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        view.pendingDescription = null;

	        model.on("add", this.onChanged, this);
	        model.on("remove", this.onChanged, this);
	        model.on("change", this.onChanged, this);

	        model.on("updateCollection", this.onChanged, this);
	        model.on("updateCollectionMeta", this.onChanged, this);

	        model.on("addFolder", this.onChanged, this);
	        model.on("updateFolder", this.onChanged, this);
	        model.on("deleteFolder", this.onChanged, this);

	        var view = this;

	        _.bindAll(this, "addRequestToCollection");

	        $('#form-add-to-collection').submit(function () {
	            if (view.addRequestToCollection()) {
	                $('#modal-add-to-collection').modal('hide');
	                $('#new-collection').val("");
	            };
	            return false;
	        });

	        $('#modal-add-to-collection-submit').click(function () {
	            if (view.addRequestToCollection()) {
	                $('#modal-add-to-collection').modal('hide');
	                $('#new-collection').val("");
	            };
	        });

	        $("#modal-add-to-collection").on("shown", function () {            
	            $("#select-collection").focus();
	            pm.app.trigger("modalOpen", "#modal-add-to-collection");
	            $("#blank-collection-error").hide();
	            if (!view.editor) {
	                view.initializeEditor();
	            }
	        });

	        $("#modal-add-to-collection").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

		    $("#modal-add-to-collection").on('keydown', 'div.input', function (event) {
			    if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "add_req_to_collection");
				    $('#form-add-to-collection').submit();
				    event.preventDefault();
				    return false;
			    }

			    return true;
		    });
	/*
		    $("#modal-add-to-collection").keydown(function (event) {
			    if (event.keyCode === 13) {
				    $('#form-add-to-collection').submit();
				    event.preventDefault();
				    return false;
			    }

			    return true;
		    });
	*/
	        //Initialize select-collection options

	        $(document).bind('keydown', 'a', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "show_new_collection_modal");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            $('#modal-add-to-collection').modal({
	                keyboard:true
	            });

	            $('#modal-add-to-collection').modal('show');
	            return false;
	        });

	        pm.mediator.on("showAddCollectionModal", this.onShowAddCollectionModal, this);
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = pm.addRequestToCollectionEditor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    onShowAddCollectionModal: function(name, description) {
	        var view = this;

	        $("#new-request-name").val(name);

	        if (this.editor) {
	            if (description) {
	                this.editor.setValue(description, -1);
	            }
	            else {
	                this.editor.setValue("", -1);
	            }

	            this.pendingDescription = null;
	            
	        }
	        else {
	            this.pendingDescription = description;
	        }

	        //set select size
	        var numEntries = $('#select-collection option').length;
	        $('#select-collection').attr('size',Math.min(numEntries,10));

	        $("#modal-add-to-collection").modal("show");
	    },


	    initializeEditor: function() {
	        if (this.editor) {
	            return;
	        }

	        this.editor = ace.edit(document.getElementById("new-request-description"));

	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);
	        this.editor.getSession().setMode('ace/mode/markdown');
	        pm.addRequestToCollectionEditor = this.editor;

	        if (this.pendingDescription) {
	            this.editor.setValue(this.pendingDescription, -1);
	            this.pendingDescription = null;
	        }
	        else {
	            this.editor.setValue("", -1);
	            this.pendingDescription = null;
	        }

	        $("#blank-collection-error").hide();
	    },

	    add: function(model, pmCollection) {
	        $('#select-collection').append(Handlebars.templates.item_collection_selector_list(model.toJSON()));
	    },

	    remove: function(model, pmCollection) {
	        var collection = model.toJSON();
	        $('#select-collection option[value="' + collection.id + '"]').remove();
	    },

	    onChanged: function() {        
	        clearTimeout(this.model.populateRequestTargetList);
	        var oldThis = this;
	        this.model.populateRequestTargetList = setTimeout(function() {
	            var items = _.clone(oldThis.model.toJSON());
	            var folders;

	            for(var i = 0; i < items.length; i++) {
	                if("folders" in items[i]) {
	                    folders = items[i].folders;

	                    folders.sort(sortAlphabetical);

	                    for(var j = 0; j < folders.length; j++) {
	                        folders[j].collection_name = items[i].name;
	                        folders[j].collection_owner = items[i].owner;
	                        folders[j].collection_id = items[i].id;
	                    }
	                }
	            }

	            $('#select-collection').html("<option>Select</option>");
	            $('#select-collection').append(Handlebars.templates.collection_selector_list({items: oldThis.model.toJSON()}));

	            $('#select-collection').val(oldThis.lastSelectValue);
	        }, 500);
	    },

	    addRequestToCollection: function() {
	        var view = this;

	        $("#blank-collection-error").hide();
	        var selectValue = $("#select-collection").val();
	        this.lastSelectValue = selectValue;

	        if (!view.editor) {
	            view.initializeEditor();
	        }

	        var $option = $("#select-collection option[value='" + selectValue + "']");
	        var targetType = $option.attr("data-type");

	        var collectionId;
	        var folderId;

	        if (targetType === "collection") {
	            collectionId = $option.attr("data-collection-id");
	        }
	        else if (targetType === "folder") {
	            collectionId = $option.attr("data-collection-id");
	            folderId = $option.attr("data-folder-id");
	        }

	        var newCollection = $("#new-collection").val();

	        var collection = {};

	        if (newCollection) {
	            pm.tracker.trackEvent("request", "add", "new_collection");
	            pm.tracker.trackEvent("collection", "add", "request");
	            targetType = "collection";
	            collection.id = guid();
	            collection.name = newCollection;
	        }
	        else if(collectionId) {
	            collection.id = collectionId;
	            pm.tracker.trackEvent("request", "add", "existing_collection");
	        }
	        else {
	            $("#blank-collection-error").show();
	            return false;
	        }

	        var newRequestName = $('#new-request-name').val();
	        var newRequestDescription = this.editor.getValue();

	        var model = this.model;
	        var request = pm.request;
	        
	        //eliminating callback
	        setTimeout(function() {
	            var body = request.get("body");

	            var url = request.get("url");
	            if (newRequestName === "") {
	                newRequestName = url;
	            }

	            var currentHelper = pm.helpers.getActiveHelperType();
		        var helperData, helperAttributes, saveHelperToRequest;
		        if(currentHelper!=="normal") {
	                helperData = pm.helpers.getHelper(currentHelper).attributes;
	                helperAttributes = request.getHelperProperties(helperData);
			        saveHelperToRequest = $("#request-helper-"+currentHelper+"-saveHelper").is(":checked");
		        }
		        else {
			        saveHelperToRequest = false;
		        }

	            if(saveHelperToRequest===false) {
	                currentHelper = "normal";
	                helperAttributes = {};
	            }

	            // TODO Get some of this from getAsJson
	            var collectionRequest = {
	                id: guid(),
	                headers: request.getPackedHeaders(),
	                url: url,
	                pathVariables: request.get("pathVariables"),
	                preRequestScript: request.get("preRequestScript"),
	                method: request.get("method"),
	                collectionId: collection.id,
	                data: body.get("dataAsObjects"),
	                dataMode: body.get("dataMode"),
	                name: newRequestName,
	                description: newRequestDescription,
	                descriptionFormat: "html",
	                time: new Date().getTime(),
	                version: 2,
	                responses: [],
	                tests: request.get("tests"),
	                currentHelper: currentHelper,
	                helperAttributes: helperAttributes
	            };

	            if (targetType === "folder") {
					collectionRequest.folder=folderId;
	                model.addRequestToFolder(collectionRequest, collectionId, folderId, false, true);
	            }
	            else {
	                model.addRequestToCollection(collectionRequest, collection, false, true);
	            }

	            //if the request was previously unsaved, make the tab reflect the saved state (with name and desc)
	            if(!pm.tabManager.getCurrentTab().get("request")) {
	                pm.mediator.trigger("loadNewlySavedRequest", collectionRequest, !!collectionRequest.isFromCollection);
	            }

	            pm.mediator.trigger("saveRequest");
	            setTimeout(function(){
	                pm.collections.trigger("selectedCollectionRequest", collectionRequest);
	            }, 300);
	        }, 1);

	        return true;
	    }
	});

	module.exports = AddCollectionRequestModal;


/***/ },
/* 204 */
/***/ function(module, exports) {

	var AddMultipleCollectionRequestsModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        pm.mediator.on("addRequestsToCollection", this.showMultipleRequestsToCollectionModal, this);


	        model.on("add", this.onChanged, this);
	        model.on("remove", this.onChanged, this);
	        model.on("change", this.onChanged, this);

	        model.on("updateCollection", this.onChanged, this);
	        model.on("updateCollectionMeta", this.onChanged, this);

	        model.on("addFolder", this.onChanged, this);
	        model.on("updateFolder", this.onChanged, this);
	        model.on("deleteFolder", this.onChanged, this);

	        var view = this;

	        $('#multiple-form-add-to-collection').submit(function () {
	            _.bind(view.addRequestsToCollection, view)();
	            $('#modal-add-multiple-to-collection').modal('hide');
	            $('#multiple-new-collection').val("");
	            return false;
	        });

	        $('#modal-add-multiple-to-collection-submit').click(function () {
	            _.bind(view.addRequestsToCollection, view)();
	            $('#modal-add-multiple-to-collection').modal('hide');
	            $('#multiple-new-collection').val("");
	        });

	        $("#modal-add-multiple-to-collection").on("shown", function () {
	            $("#multiple-select-collection").focus();
	            pm.app.trigger("modalOpen", "#modal-add-multiple-to-collection");
	            $("#multiple-blank-collection-error").hide();
	        });

	        $("#modal-add-multiple-to-collection").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

		    $("#modal-add-multiple-to-collection").on('keydown', 'div.input', function (event) {
			    if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "add_req_to_collection");
				    $('#multiple-form-add-to-collection').submit();
				    event.preventDefault();
				    return false;
			    }

			    return true;
		    });

		    $("#modal-add-multiple-to-collection").keydown(function (event) {
			    if (event.keyCode === 13) {
				    $('#multiple-form-add-to-collection').submit();
				    event.preventDefault();
				    return false;
			    }

			    return true;
		    });

	        //Initialize select-collection options

	        $(document).bind('keydown', 'a', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "show_new_collection_modal");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            $('#modal-add-multiple-to-collection').modal({
	                keyboard:true
	            });

	            $('#modal-add-multiple-to-collection').modal('show');
	            return false;
	        });

	        //pm.mediator.on("showAddCollectionModal", this.onShowAddCollectionModal, this);
	    },


	    add: function(model, pmCollection) {
	        $('#multiple-select-collection').append(Handlebars.templates.item_collection_selector_list(model.toJSON()));
	    },

	    remove: function(model, pmCollection) {
	        var collection = model.toJSON();
	        $('#multiple-select-collection option[value="' + collection.id + '"]').remove();
	    },

	    onChanged: function() {        
	        var oldThis = this;
	        clearTimeout(this.model.populateAddMultiRequests);
	        this.model.populateAddMultiRequests = setTimeout(function() {
	            var items = _.clone(oldThis.model.toJSON());
	            var folders;

	            for(var i = 0; i < items.length; i++) {
	                if("folders" in items[i]) {
	                    folders = items[i].folders;

	                    folders.sort(sortAlphabetical);

	                    for(var j = 0; j < folders.length; j++) {
	                        folders[j].collection_name = items[i].name;
	                        folders[j].collection_owner = items[i].owner;
	                        folders[j].collection_id = items[i].id;
	                    }
	                }
	            }

	            $('#multiple-select-collection').html("<option>Select</option>");
	            $('#multiple-select-collection').append(Handlebars.templates.collection_selector_list({items: oldThis.model.toJSON()}));

	            $('#multiple-select-collection').val(oldThis.lastSelectValue);
	        }, 500);
	    },

	    showMultipleRequestsToCollectionModal: function(requestArray) {
	        this.requestArray = requestArray;

	        //set select size
	        var numEntries = $('#multiple-select-collection option').length;
	        $('#multiple-select-collection').attr('size',Math.min(numEntries,10));

	        $("#modal-add-multiple-to-collection").modal("show");
	    },

	    addRequestsToCollection: function() {
	        $("#multiple-blank-collection-error").hide();
	        var selectValue = $("#multiple-select-collection").val();
	        this.lastSelectValue = selectValue;

	        var $option = $("#multiple-select-collection option[value='" + selectValue + "']");
	        var targetType = $option.attr("data-type");

	        var collectionId;
	        var folderId;

	        if (targetType === "collection") {
	            collectionId = $option.attr("data-collection-id");
	        }
	        else if (targetType === "folder") {
	            collectionId = $option.attr("data-collection-id");
	            folderId = $option.attr("data-folder-id");
	        }

	        var newCollection = $("#multiple-new-collection").val();

	        var collection = {};

	        if (newCollection) {
	            pm.tracker.trackEvent("request", "add", "new_collection");
	            pm.tracker.trackEvent("collection", "add", "request");
	            targetType = "collection";
	            collection.id = guid();
	            collection.name = newCollection;
	        }
	        else if(collectionId) {
	            collection.id = collectionId;
	            pm.tracker.trackEvent("request", "add", "existing_collection");
	        }
	        else {
	            $("#multiple-blank-collection-error").show();
	            return;
	        }


	        var model = this.model;

	        if (targetType === "folder") {
	            model.addRequestsToFolder(this.requestArray, collectionId, folderId, false, true);
	        }
	        else {
	            model.addRequestsToCollection(this.requestArray, _.clone(collection), false, true);
	        }
	    }
	});

	module.exports = AddMultipleCollectionRequestsModal;


/***/ },
/* 205 */
/***/ function(module, exports) {

	var EditCollectionRequestModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;

	        model.on("editCollectionRequest", this.render, this);

	        var view = this;

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        $('#form-edit-collection-request').submit(function() {
	            var id = $('#form-edit-collection-request .collection-request-id').val();
	            var name = $('#form-edit-collection-request .collection-request-name').val();
	            var description = view.editor.getValue();
	            model.updateCollectionRequestMeta(id, name, description);
	            $('#modal-edit-collection-request').modal('hide');
	            pm.tracker.trackEvent("request", "edit");
	            return false;
	        });

	        $('#modal-edit-collection-request-submit').click(function () {
	            var id = $('#form-edit-collection-request .collection-request-id').val();
	            var name = $('#form-edit-collection-request .collection-request-name').val();
	            var description = view.editor.getValue();
	            model.updateCollectionRequestMeta(id, name, description);
	            $('#modal-edit-collection-request').modal('hide');
	            pm.tracker.trackEvent("request", "edit");
	        });

	        $("#modal-edit-collection-request").on('keydown', 'div.input', function (event) {
	            if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "edit_collection_request");
	                $('#form-edit-collection-request').submit();
	                event.preventDefault();
	                return false;
	            }
	            return true;
	        });

	        $("#modal-edit-collection-request").on("shown", function () {
	            $("#modal-edit-collection-request .collection-request-name").focus();
	            pm.app.trigger("modalOpen", "#modal-edit-collection-request");
	        });

	        $("#modal-edit-collection-request").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = pm.editCollectionRequestEditor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    initializeEditor: function() {
	        if (this.editor) {
	            return;
	        }

	        this.editor = ace.edit(document.getElementById("collection-request-description"));

	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);
	        this.editor.getSession().setMode('ace/mode/markdown');
	        pm.editCollectionRequestEditor = this.editor;
	    },

	    render: function(request) {
	        if(!request) {
	            //nothing we can do :s
	            console.log("Request not found");
	            return;
	        }

	        $('#form-edit-collection-request .collection-request-id').val(request.id);
	        $('#form-edit-collection-request .collection-request-name').val(request.name);
	        $('#modal-edit-collection-request').modal('show');

	        if (!this.editor) {
	            this.initializeEditor();
	        }

	        var view = this;

	        setTimeout(function() {
	            view.editor.setValue(request.description, -1);

	            view.editor.gotoLine(0,0,false);
	        }, 150);

	    }
	});

	module.exports = EditCollectionRequestModal;


/***/ },
/* 206 */
/***/ function(module, exports) {

	var DeleteCollectionRequestModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;

	        model.on("deleteCollectionRequest", this.render, this);

	        $('#modal-delete-collection-request-yes').on("click", function () {
	            var id = $(this).attr('data-id');
	            model.deleteCollectionRequest(id);
	            $("#modal-delete-collection-request").modal('hide');
	            pm.tracker.trackEvent("request", "delete");
	        });

	        $("#modal-delete-collection-request").on('keydown', function (event) {
	            if (event.keyCode === 13) {
	                pm.tracker.trackEvent("interaction", "shortcut", "delete_collection_request");
	                var id=$("#modal-delete-collection-request-yes").attr('data-id');
	                model.deleteCollectionRequest(id);
	                $("#modal-delete-collection-request").modal('hide');
	                event.preventDefault();
	                pm.tracker.trackEvent("request", "delete");
	                return false;
	            }
	        });
	    },

	    render: function(request) {
	        try {
	            $('#modal-delete-collection-request-yes').attr('data-id', request.id);
	            $('#modal-delete-collection-request-name').text(request.name);
	            $('#modal-delete-collection-request').modal('show');
	        }
	        catch(e) {
	            throw "DeleteCollection Modal shown with null request. Request: " + JSON.stringify(request);
	        }
	    }
	});

	module.exports = DeleteCollectionRequestModal;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(29);
	var ActivityFeed = __webpack_require__(208);
	var FEATURES = __webpack_require__(1).FEATURES;

	var CollectionMainView = Backbone.View.extend({
	    initialize: function initialize() {
	        if (pm.isTesting) {
	            //exclude this till we figure out why
	            return;
	        }
	        var model = this.model;
	        var view = this;

	        this.collection = null;
	        this.folderId = null;
	        this.currentTab = "explore";
	        this.isOverlayOpen = false;

	        pm.nn = this;

	        model.on("showCollection", this.showCollection, this);
	        model.on("folderAdded", this.onFolderAdded, this);
	        model.on("updateCollectionMeta", this.updateCollectionMeta, this);
	        model.on("updateFolder", this.onFolderUpdated, this);
	        model.on("folderDuplicated", this.onFolderDuplicated, this);
	        model.on("deleteFolder", this.onFolderDeleted, this);
	        model.on("removeCollectionRequest", this.refreshCurrentView, this);
	        model.on("updateCollectionRequest", this.refreshCurrentView, this);
	        model.on("addCollectionRequest", this.refreshCurrentView, this);
	        model.on("moveRequestToFolder", this.refreshCurrentView, this);
	        model.on("collectionReordered", this.refreshCurrentView, this);
	        model.on("folderReordered", this.refreshCurrentView, this);
	        model.on("remove", this.onCollectionRemoved, this);
	        pm.mediator.on("loadRequest", this.onLoadRequest, this);

	        pm.mediator.on("collectionMainViewClose", this.onCollectionMainViewClose, this);

	        var $collectionView = $("#collection-browser-container");

	        $('#collection-browser-tabs a[data-toggle="tab"]').on('shown', function (e) {
	            var selectedTab = $(e.target).parent().data('tab');
	            if (selectedTab === 'activity') {
	                view.currentTab = 'activity';
	                view.mountActivityFeed();
	            } else {
	                view.currentTab = 'explore';
	            }
	        });

	        $collectionView.on("click", ".collection-actions-add-folder", function () {
	            var id = $(this).attr('data-id');
	            var c = model.get(id);
	            model.trigger("showAddFolderModal", c);
	        });

	        $collectionView.on("click", ".collection-overview-request-wrapper", function () {
	            $(this).toggleClass("active-overview-request");
	        });

	        $('body').on('keydown', 'select', function (event) {
	            if (event.keyCode === 27) {
	                view.hideOverlay();
	            }
	        });

	        $collectionView.on("click", ".collection-actions-edit", function () {
	            var id = $(this).attr('data-id');
	            var c = model.get(id);
	            model.trigger("showEditModal", c);
	        });

	        $collectionView.on("click", ".collection-actions-delete", function () {
	            var id = $(this).attr('data-id');
	            var name = $(this).attr('data-name');
	            var shared = $(this).attr('data-shared');
	            $('#modal-delete-collection-yes').attr('data-id', id);
	            $('#modal-delete-collection-yes').attr('data-shared', shared);
	            var sharedWithTeam = $(this).attr('data-shared');
	            if (sharedWithTeam === "true" && pm.user.id) {
	                $('#collection-share-warning').html("This collection has been shared with your team. If you delete this collection, all users who have subscribed to the collection will automatically be unsubscribed");
	            } else {
	                $('#collection-share-warning').text("");
	            }
	            $("#modal-delete-collection-name").text(name);
	            $('#modal-delete-collection').modal('show');
	        });

	        $collectionView.on("click", ".collection-action-duplicate", function () {
	            var id = $(this).attr('data-id');
	            var c = model.get(id);
	            model.trigger("duplicateCollection", c);
	            pm.tracker.trackEvent("collection", "duplicate");
	        });

	        $collectionView.on("click", ".collection-actions-unsubscribe", function () {
	            var id = $(this).attr('data-id');
	            var owner = $(this).attr('data-owner');
	            var collectionMeta = {
	                owner: owner,
	                model_id: id
	            };

	            pm.syncManager.addChangeset("collection", "unsubscribe", { owner: collectionMeta.owner }, collectionMeta.model_id, true);
	            var status = model.deleteCollectionFromDataStoreWithOptSync(collectionMeta.model_id, true, false, function () {});
	            view.hideOverlay();
	        });

	        $collectionView.on("click", ".collection-actions-download", function (event) {
	            console.log("Download collection");

	            var id = $(this).attr('data-id');
	            model.saveCollection(id);

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collectionView.on("click", ".folder-actions-wrapper, .request-actions-wrapper", function (e) {
	            e.stopPropagation();
	        });

	        $collectionView.on("click", ".collection-actions-add-folder", function (event) {
	            var id = $(this).attr('data-id');
	            var c = model.get(id);
	            model.trigger("showAddFolderModal", c);
	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collectionView.on("click", ".collection-actions-share", function (event) {
	            var id = $(this).attr('data-id');
	            model.trigger("shareCollectionModal", id);
	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collectionView.on("click", ".folder-actions-edit", function () {
	            var id = $(this).attr('data-id');
	            var c = model.getFolderById(id);
	            model.trigger("showEditFolderModal", c);
	        });

	        $collectionView.on("click", ".folder-actions-delete", function () {
	            var id = $(this).attr('data-id');
	            var name = $(this).attr('data-name');
	            $('#modal-delete-folder-yes').attr('data-id', id);
	            $('#modal-delete-folder-name').text(name);
	            $('#modal-delete-folder').modal('show');
	        });

	        $collectionView.on("click", ".folder-actions-duplicate", function () {
	            var id = $(this).attr('data-id');
	            var c = model.getFolderById(id);
	            model.trigger("duplicateFolder", c);
	            pm.tracker.trackEvent("folder", "duplicate");
	        });

	        $collectionView.on("click", ".request-actions-delete", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("deleteCollectionRequest", request);
	        });

	        $collectionView.on("click", ".request-actions-edit", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("editCollectionRequest", request);
	        });

	        $collectionView.on("click", ".request-actions-duplicate", function (event) {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("duplicateCollectionRequest", request);
	            pm.tracker.trackEvent("request", "duplicate");

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        //set the correct left-margin for the overlay
	        var overlayWidth = window.innerWidth / 2; //width of collection overlay is always 50%
	        $("#collection-view").css({ 'margin-left': '-' + overlayWidth + 'px' });

	        $("#collection-view-close").click(function () {
	            view.hideOverlay();
	        });

	        $collectionView.on("click", ".folder-overview-collection-name", function () {
	            var id = $(this).attr('data-collection-id');
	            var c = model.get(id);
	            model.trigger("showCollection", c);
	        });

	        $collectionView.on("click", ".back-button", function () {
	            var id = $(this).attr('data-collection-id');
	            var c = model.get(id);
	            model.trigger("showCollection", c);
	        });

	        $collectionView.on("click", ".overview-folder-head", function () {
	            //$(this).parent().toggleClass("overview-folder-details-visible");
	            var folderId = $(this).attr('data-folder-id');
	            view.showFolder(folderId);
	        });

	        $collectionView.on("click", ".overview-open-request-in-builder", function () {
	            var id = $(this).attr('data-id');
	            model.loadCollectionRequest(id);
	        });

	        /*Request actions*/
	        $collectionView.on("click", ".overview-request-actions-delete", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("deleteCollectionRequest", request);
	        });

	        $collectionView.on("click", ".overview-request-actions-edit", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("editCollectionRequest", request);
	        });

	        $collectionView.on("click", ".overview-request-actions-duplicate", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("duplicateCollectionRequest", request);
	            pm.tracker.trackEvent("request", "duplicate");
	        });

	        $collectionView.on("click", ".overview-run-collection", function () {
	            var collectionId = $(this).attr('data-collection-id');
	            var env = pm.envManager.get("selectedEnv");
	            var environmentId = env ? env.id : null;
	            pm.mediator.trigger("openModule", "test_runner", collectionId, null, environmentId);
	        });

	        $collectionView.on("click", ".overview-run-folder", function () {
	            var collectionId = $(this).attr('data-collection-id');
	            var folderId = $(this).attr('data-folder-id');

	            var env = pm.envManager.get("selectedEnv");
	            var environmentId = env ? env.id : null;

	            pm.mediator.trigger("openModule", "test_runner", collectionId, folderId, environmentId);
	        });
	    },

	    mountActivityFeed: function mountActivityFeed() {
	        if (!pm.features.isEnabled(FEATURES.ACTIVITY_FEED)) {
	            return;
	        }
	        React.render(React.createElement(ActivityFeed, { collectionId: this.collection.get('id'),
	            actionHandler: this.handleActivityFeedActions.bind(this)
	        }), $('#collection-browser-activity')[0]);
	    },

	    unmountActivityFeed: function unmountActivityFeed() {
	        React.unmountComponentAtNode($('#collection-browser-activity')[0]);
	    },

	    handleActivityFeedActions: function handleActivityFeedActions(payload) {
	        if (!payload.type || !payload.id) {
	            return;
	        }
	        if (payload.type === 'folder') {
	            if (!this.collection.hasFolderId(payload.id)) {
	                pm.alerts.error("This folder doesn't exist anymore");
	                return;
	            }
	            this.switchTab("explore");
	            this.showFolder(payload.id);
	            return;
	        }
	        if (payload.type === 'request') {
	            var request = pm.collections.getRequestById(payload.id);
	            if (!request) {
	                pm.alerts.error("This request doesn't exist anymore");
	                return;
	            }

	            var folderId = this.collection.requestExistsInCollectionFolders(payload.id);
	            if (folderId) {
	                this.switchTab("explore");
	                this.showFolder(folderId);
	                this.highlightRequest(payload.id);
	            } else {
	                this.switchTab("explore");
	                this.showCollection(this.collection);
	                this.highlightRequest(payload.id);
	            }
	        }
	    },

	    highlightRequest: function highlightRequest(requestId) {
	        $("#collection-overview-request-" + requestId).toggleClass("active-overview-request");
	    },

	    onLoadRequest: function onLoadRequest() {
	        this.hideOverlay();
	    },

	    showFolder: function showFolder(folderId) {
	        if (this.currentTab !== 'explore') {
	            return;
	        }
	        this.folderId = folderId;
	        var folder = _.cloneDeep(pm.collections.getFolderById(folderId));
	        var collectionId = folder.collection_id;
	        var collectionModel = pm.collections.getCollectionById(collectionId);

	        if (collectionModel) {
	            var collection = collectionModel.toJSON();
	            folder.subscribed = collection.subscribed;
	            folder.collectionName = collection.name;
	            folder.collectionId = collection.id;
	            folder.write = collection.write;
	            this.organizeCollectionRequestsIntoFolder(folder, collection);
	            if (folder.description) {
	                if (folder.description.indexOf("<p>") == -1) {
	                    folder.description = marked(folder.description);
	                }
	            }

	            $("#collection-browser-explore").html(Handlebars.templates.folder_overview_main(folder));

	            if (!this.isOverlayOpen) {
	                this.switchTab('explore');
	                this.showOverlay();
	            }

	            $('#collection-view a[rel="tooltip"]').tooltip({
	                delay: { "show": 500, "hide": 100 }
	            });
	        }
	    },

	    onFolderUpdated: function onFolderUpdated(collection, folder) {
	        if (this.folderId && this.folderId === folder.id) {
	            this.showFolder(folder.id);
	            return;
	        }

	        if (this.collection && this.collection.get("id") === collection.get("id")) {
	            this.showCollection(collection);
	            return;
	        }
	    },

	    onFolderDuplicated: function onFolderDuplicated(collection) {
	        if (this.collection && this.collection.id === collection.id) {
	            this.showCollection(collection);
	        }
	    },

	    onFolderDeleted: function onFolderDeleted(collection) {
	        if (this.collection && this.collection.id === collection.id) {
	            this.showCollection(collection);
	        }
	    },

	    refreshCurrentView: function refreshCurrentView() {
	        if (this.folderId) {
	            this.showFolder(this.folderId);
	            return;
	        }
	        if (this.collection) {
	            this.showCollection(this.collection);
	            return;
	        }
	    },

	    onCollectionMainViewClose: function onCollectionMainViewClose(id) {
	        this.hideOverlay();
	    },

	    showOverlay: function showOverlay() {
	        var overlayWidth = $("#collection-view").width();

	        $("#collection-view").css({
	            'margin-left': '-' + overlayWidth + 'px'
	        }).show().animate({
	            'margin-left': '0px'
	        }, 200, "easeInQuad", (function () {
	            this.isOverlayOpen = true;

	            if (pm.features.isEnabled(FEATURES.ACTIVITY_FEED)) {
	                $('#collection-browser-tab-activity').css('display', 'block');
	            } else {
	                $('#collection-browser-tab-activity').css('display', 'none');
	            }
	        }).bind(this));
	    },

	    hideOverlay: function hideOverlay() {
	        var overlayWidth = $("#collection-view").width();
	        $("#collection-view").animate({
	            'margin-left': '-' + overlayWidth + 'px'
	        }, 200, "easeOutQuad", (function () {
	            $("#collection-view").hide();
	            this.isOverlayOpen = false;
	            if (this.collection) {
	                pm.mediator.trigger("collectionMainViewClosed", this.collection.id);
	                pm.currentOverlayCollection = null;
	                this.collection = null;
	                this.folderId = null;
	                this.switchTab('explore');
	                this.unmountActivityFeed();
	            }
	            if (this.folderId) {
	                this.folderId = null;
	            }
	        }).bind(this));
	    },

	    updateCollectionMeta: function updateCollectionMeta(collection) {
	        if (!this.collection || this.collection.get('id') !== collection.id) {
	            return;
	        }
	        $("#collection-overview-name").text(collection.get("name"));
	        var desc = collection.get("description");
	        if (!desc) {
	            desc = "No description";
	        }
	        desc = marked(desc);
	        $("#collection-overview-description").html(desc);
	    },

	    switchTab: function switchTab(tab) {
	        if (tab === "explore") {
	            this.currentTab = 'explore';
	            $('#collection-browser-tabs a[href="#collection-browser-explore"]').tab('show');
	        }

	        if (tab === "activity") {
	            this.currentTab = 'activity';
	            $('#collection-browser-tabs a[href="#collection-browser-activity"]').tab('show');
	        }
	    },

	    showCollection: function showCollection(collection) {
	        //switching collections. unmount current activityfeed
	        if (this.collection && this.collection.id !== collection.id) {
	            this.unmountActivityFeed();
	        }

	        this.collection = collection;
	        this.folderId = null;

	        if (this.currentTab === 'activity') {
	            this.mountActivityFeed();
	            return;
	        }

	        var oldThis = this;

	        var collectionJSON = _.cloneDeep(collection.toJSON());

	        //format date
	        if (collectionJSON.timestamp && collectionJSON.timestamp !== 0) {
	            var d = new Date(collectionJSON.timestamp);
	            collectionJSON.lastUpdatedAt = d.full();
	        }

	        if (collectionJSON.updatedAt) {
	            var d = new Date(collectionJSON.updatedAt);
	            if (d) {
	                collectionJSON.lastUpdatedAt = d.full();
	            }
	        }

	        if (collectionJSON.description) {
	            collectionJSON.description = marked(collectionJSON.description);
	        }

	        // TODO
	        // Collection main view should NOT do sidebar changes

	        //show template
	        this.organizeRequestsIntoFolders(collectionJSON);

	        if (pm.user.get("syncEnabled") && pm.user.get("teamSyncEnabled")) {
	            //all collections in the sidebar will have a documentation link if the user is part of a cloud plan and sync is enabled
	            collectionJSON.docsLink = pm.webUrl + "/dashboard/documentation?collection_id=" + collectionJSON.id + "&owner=" + collectionJSON.owner + "&user_id=" + pm.user.id + "&access_token=" + pm.user.get("access_token");
	        }

	        $("#collection-browser-explore").html(Handlebars.templates.collection_overview_main(collectionJSON));
	        $("#collection-overview-description").html(collectionJSON.description); //because handlebars can't handle markdown

	        if (!this.isOverlayOpen) {
	            this.switchTab('explore');
	            this.showOverlay();
	        }

	        pm.currentOverlayCollection = collectionJSON.id;
	        $('#collection-view a[rel="tooltip"]').tooltip({
	            delay: { "show": 500, "hide": 100 }
	        });
	    },

	    onCollectionRemoved: function onCollectionRemoved(model) {
	        if (this.collection && model) {
	            if (this.collection.id === model.id) {
	                this.hideOverlay();
	            }
	        }
	    },

	    onFolderAdded: function onFolderAdded(model) {
	        if (this.collection && model) {
	            if (this.collection.id === model.id) {
	                this.showCollection(model);
	            }
	        }
	    },

	    changeCollectionAttributeFromInline: function changeCollectionAttributeFromInline(attribute, collectionId, newValue) {
	        var id = collectionId;
	        var name = $("#collection-overview-name").text();
	        var desc = $("#collection-overview-description").text();
	        if (attribute === "name") {
	            name = newValue;
	        } else if (attribute === "description") {
	            desc = newValue;
	        }
	        this.model.updateCollectionMeta(id, name, desc);
	    },

	    organizeRequestsIntoFolders: function organizeRequestsIntoFolders(json) {
	        var folders = json.folders || [];
	        var requests = json.requests || [];
	        var collectionRequests = [];
	        var numFolders = folders.length;

	        for (var i = 0; i < numFolders; i++) {
	            var thisOrder = folders[i].order || [];
	            if (!json.folders[i].requests) {
	                json.folders[i]["requests"] = [];
	            }
	            _.each(thisOrder, function (rid) {
	                var requestJson = _.find(requests, function (request) {
	                    return request.id === rid;
	                });
	                if (requestJson) {
	                    if (!requestJson.description) {
	                        requestJson.description = "";
	                    }
	                    if (requestJson.description.indexOf("<p>") === -1) {
	                        requestJson.description = marked(requestJson.description);
	                    }
	                    json.folders[i].requests.push(requestJson);
	                }
	            });
	        }

	        var cOrder = json.order || [];
	        _.each(cOrder, function (rid) {
	            var requestJson = _.find(requests, function (request) {
	                return request.id === rid;
	            });
	            if (requestJson) {
	                if (!requestJson.description) {
	                    requestJson.description = "";
	                }
	                if (requestJson.description.indexOf("<p>") === -1) {
	                    requestJson.description = marked(requestJson.description);
	                }
	                collectionRequests.push(requestJson);
	            }
	        });

	        json.requests = collectionRequests;
	    },

	    organizeCollectionRequestsIntoFolder: function organizeCollectionRequestsIntoFolder(folder, collection) {
	        var requests = collection.requests || [];
	        var folderRequests = [];
	        var thisOrder = folder.order || [];
	        _.each(thisOrder, function (rid) {
	            var requestJson = _.cloneDeep(_.find(requests, function (request) {
	                return request.id === rid;
	            }));
	            if (requestJson) {
	                if (!requestJson.description) {
	                    requestJson.description = "";
	                }
	                if (requestJson.description.indexOf("<p>") === -1) {
	                    requestJson.description = marked(requestJson.description);
	                }
	                folderRequests.push(requestJson);
	            }
	        });
	        folder.requests = folderRequests;
	    }

	});

	module.exports = CollectionMainView;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _ActivityFeed = __webpack_require__(209);

	var _ActivityFeed2 = _interopRequireDefault(_ActivityFeed);

	var _modelsActivityFeedModel = __webpack_require__(233);

	var _modelsActivityFeedModel2 = _interopRequireDefault(_modelsActivityFeedModel);

	var CollectionBrowserActivityFeed = (function (_React$Component) {
	  _inherits(CollectionBrowserActivityFeed, _React$Component);

	  function CollectionBrowserActivityFeed(props) {
	    _classCallCheck(this, CollectionBrowserActivityFeed);

	    _get(Object.getPrototypeOf(CollectionBrowserActivityFeed.prototype), 'constructor', this).call(this, props);

	    this.state = {
	      loading: false,
	      refreshing: true,
	      error: false,
	      activities: []
	    };

	    this.initializeModel(this.props.collectionId);
	    this.fetchLatest();
	  }

	  _createClass(CollectionBrowserActivityFeed, [{
	    key: 'initializeModel',
	    value: function initializeModel(collectionId) {
	      this.detachModelEvents();

	      this.model = new _modelsActivityFeedModel2['default']([], {
	        collectionId: collectionId
	      });

	      this.attachModelEvents();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.refreshFeed();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.detachModelEvents();
	      delete this.model;
	    }
	  }, {
	    key: 'attachModelEvents',
	    value: function attachModelEvents() {
	      if (this.model) {
	        this.model.on('change', this.handleModelChange, this);
	        this.model.on('error', this.handleModelError, this);
	      }
	    }
	  }, {
	    key: 'detachModelEvents',
	    value: function detachModelEvents() {
	      if (this.model) {
	        this.model.off('change', this.handleModelChange, this);
	        this.model.off('error', this.handleModelError, this);
	      }
	    }
	  }, {
	    key: 'handleModelChange',
	    value: function handleModelChange() {
	      this.setState({
	        activities: this.model.toJSON(),
	        loading: false,
	        refreshing: false,
	        error: false
	      });
	    }
	  }, {
	    key: 'handleModelError',
	    value: function handleModelError() {
	      this.setState({
	        error: true
	      });
	    }
	  }, {
	    key: 'handleActions',
	    value: function handleActions(payload) {
	      this.props.actionHandler && this.props.actionHandler(payload);
	    }
	  }, {
	    key: 'refreshFeed',
	    value: function refreshFeed() {
	      this.setState({
	        refreshing: true,
	        error: false
	      });
	      this.model.fetchLatest();
	    }
	  }, {
	    key: 'fetchPreviousActivity',
	    value: function fetchPreviousActivity() {
	      this.setState({
	        loading: true,
	        error: false
	      });
	      this.model.fetchPrevious();
	    }
	  }, {
	    key: 'fetchLatest',
	    value: function fetchLatest() {
	      this.model.fetchLatest();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(_ActivityFeed2['default'], { loading: this.state.loading,
	        refreshing: this.state.refreshing,
	        activities: this.state.activities,
	        error: this.state.error,
	        loadMore: this.fetchPreviousActivity.bind(this),
	        actionHandler: this.handleActions.bind(this)
	      });
	    }
	  }]);

	  return CollectionBrowserActivityFeed;
	})(_react2['default'].Component);

	exports['default'] = CollectionBrowserActivityFeed;
	module.exports = exports['default'];

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _reactAddons = __webpack_require__(210);

	var _reactAddons2 = _interopRequireDefault(_reactAddons);

	var _ActivityItem = __webpack_require__(228);

	var _ActivityItem2 = _interopRequireDefault(_ActivityItem);

	var _CollectionActivity = __webpack_require__(229);

	var ReactCSSTransitionGroup = _reactAddons2['default'].addons.CSSTransitionGroup;

	var ActivityFeed = (function (_React$Component) {
	  _inherits(ActivityFeed, _React$Component);

	  function ActivityFeed(props) {
	    _classCallCheck(this, ActivityFeed);

	    _get(Object.getPrototypeOf(ActivityFeed.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(ActivityFeed, [{
	    key: 'didReachEndOfFeed',
	    value: function didReachEndOfFeed() {
	      var lastActivity = _.last(this.props.activities);
	      if (!lastActivity || lastActivity.meta.model === 'collection' && lastActivity.meta.action === 'create') {
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      return _reactAddons2['default'].createElement(
	        'div',
	        { className: 'activity-feed' },
	        _reactAddons2['default'].createElement(
	          ReactCSSTransitionGroup,
	          { transitionName: 'activity', component: 'div' },
	          this.props.activities.map(function (activity) {
	            return _reactAddons2['default'].createElement(_ActivityItem2['default'], { activity: activity,
	              key: activity.revision,
	              actionHandler: _this.props.actionHandler
	            });
	          }),
	          !this.props.error && !this.didReachEndOfFeed() && _reactAddons2['default'].createElement(_CollectionActivity.LoadFeed, { loadMore: this.props.loadMore,
	            loading: this.props.loading,
	            error: this.props.error,
	            key: 'loading-more' })
	        )
	      );
	    }
	  }]);

	  return ActivityFeed;
	})(_reactAddons2['default'].Component);

	exports['default'] = ActivityFeed;
	module.exports = exports['default'];

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var warning = __webpack_require__(52);
	warning(
	  false,
	  // Require examples in this string must be split to prevent React's
	  // build tools from mistaking them for real requires.
	  // Otherwise the build tools will attempt to build a 'react-addons-{addon}' module.
	  'require' + "('react/addons') is deprecated. " +
	  'Access using require' + "('react-addons-{addon}') instead."
	);

	module.exports = __webpack_require__(211);


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'use strict';

	var LinkedStateMixin = __webpack_require__(212);
	var React = __webpack_require__(30);
	var ReactComponentWithPureRenderMixin = __webpack_require__(215);
	var ReactCSSTransitionGroup = __webpack_require__(217);
	var ReactFragment = __webpack_require__(223);
	var ReactTransitionGroup = __webpack_require__(218);
	var ReactUpdates = __webpack_require__(81);

	var cloneWithProps = __webpack_require__(224);
	var shallowCompare = __webpack_require__(216);
	var update = __webpack_require__(227);
	var warning = __webpack_require__(52);

	var warnedAboutBatchedUpdates = false;

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: function () {
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(warnedAboutBatchedUpdates, 'React.addons.batchedUpdates is deprecated. Use ' + 'ReactDOM.unstable_batchedUpdates instead.') : undefined;
	      warnedAboutBatchedUpdates = true;
	    }
	    return ReactUpdates.batchedUpdates.apply(this, arguments);
	  },
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  shallowCompare: shallowCompare,
	  update: update
	};

	if (false) {
	  React.addons.Perf = require('./ReactDefaultPerf');
	  React.addons.TestUtils = require('./ReactTestUtils');
	}

	module.exports = React;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'use strict';

	var ReactLink = __webpack_require__(213);
	var ReactStateSetters = __webpack_require__(214);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function (key) {
	    return new ReactLink(this.state[key], ReactStateSetters.createStateKeySetter(this, key));
	  }
	};

	module.exports = LinkedStateMixin;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   _handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(30);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ? React.PropTypes.any.isRequired : linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;

/***/ },
/* 214 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'use strict';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function (component, funcReturningState) {
	    return function (a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function (component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function (funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function (key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentWithPureRenderMixin
	 */

	'use strict';

	var shallowCompare = __webpack_require__(216);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function (nextProps, nextState) {
	    return shallowCompare(this, nextProps, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule shallowCompare
	*/

	'use strict';

	var shallowEqual = __webpack_require__(144);

	/**
	 * Does a shallow comparison for props and state.
	 * See ReactComponentWithPureRenderMixin
	 */
	function shallowCompare(instance, nextProps, nextState) {
	  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
	}

	module.exports = shallowCompare;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(30);

	var assign = __webpack_require__(66);

	var ReactTransitionGroup = __webpack_require__(218);
	var ReactCSSTransitionGroupChild = __webpack_require__(220);

	function createTransitionTimeoutPropValidator(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;

	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	          return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	        }
	    }
	  };
	}

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: ReactCSSTransitionGroupChild.propTypes.name,

	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool,
	    transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
	    transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),
	    transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')
	  },

	  getDefaultProps: function () {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function (child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return React.createElement(ReactCSSTransitionGroupChild, {
	      name: this.props.transitionName,
	      appear: this.props.transitionAppear,
	      enter: this.props.transitionEnter,
	      leave: this.props.transitionLeave,
	      appearTimeout: this.props.transitionAppearTimeout,
	      enterTimeout: this.props.transitionEnterTimeout,
	      leaveTimeout: this.props.transitionLeaveTimeout
	    }, child);
	  },

	  render: function () {
	    return React.createElement(ReactTransitionGroup, assign({}, this.props, { childFactory: this._wrapChild }));
	  }
	});

	module.exports = ReactCSSTransitionGroup;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(30);
	var ReactTransitionChildMapping = __webpack_require__(219);

	var assign = __webpack_require__(66);
	var emptyFunction = __webpack_require__(42);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function () {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function () {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function () {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function (nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function () {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(this._handleDoneEntering.bind(this, key));
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function (key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      this.setState(function (state) {
	        var newChildren = assign({}, state.children);
	        delete newChildren[key];
	        return { children: newChildren };
	      });
	    }
	  },

	  render: function () {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
	      }
	    }
	    return React.createElement(this.props.component, this.props, childrenToRender);
	  }
	});

	module.exports = ReactTransitionGroup;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var flattenChildren = __webpack_require__(143);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around flattenChildren().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function (children) {
	    if (!children) {
	      return children;
	    }
	    return flattenChildren(children);
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function (prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(30);
	var ReactDOM = __webpack_require__(31);

	var CSSCore = __webpack_require__(221);
	var ReactTransitionEvents = __webpack_require__(222);

	var onlyChild = __webpack_require__(179);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  propTypes: {
	    name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      active: React.PropTypes.string
	    }), React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      enterActive: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      leaveActive: React.PropTypes.string,
	      appear: React.PropTypes.string,
	      appearActive: React.PropTypes.string
	    })]).isRequired,

	    // Once we require timeouts to be specified, we can remove the
	    // boolean flags (appear etc.) and just accept a number
	    // or a bool for the timeout flags (appearTimeout etc.)
	    appear: React.PropTypes.bool,
	    enter: React.PropTypes.bool,
	    leave: React.PropTypes.bool,
	    appearTimeout: React.PropTypes.number,
	    enterTimeout: React.PropTypes.number,
	    leaveTimeout: React.PropTypes.number
	  },

	  transition: function (animationType, finishCallback, userSpecifiedDelay) {
	    var node = ReactDOM.findDOMNode(this);

	    if (!node) {
	      if (finishCallback) {
	        finishCallback();
	      }
	      return;
	    }

	    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
	    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
	    var timeout = null;

	    var endListener = function (e) {
	      if (e && e.target !== node) {
	        return;
	      }

	      clearTimeout(timeout);

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    // If the user specified a timeout delay.
	    if (userSpecifiedDelay) {
	      // Clean-up the animation after the specified delay
	      timeout = setTimeout(endListener, userSpecifiedDelay);
	      this.transitionTimeouts.push(timeout);
	    } else {
	      // DEPRECATED: this listener will be removed in a future version of react
	      ReactTransitionEvents.addEndEventListener(node, endListener);
	    }
	  },

	  queueClass: function (className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function () {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function () {
	    this.classNameQueue = [];
	    this.transitionTimeouts = [];
	  },

	  componentWillUnmount: function () {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	    this.transitionTimeouts.forEach(function (timeout) {
	      clearTimeout(timeout);
	    });
	  },

	  componentWillAppear: function (done) {
	    if (this.props.appear) {
	      this.transition('appear', done, this.props.appearTimeout);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function (done) {
	    if (this.props.enter) {
	      this.transition('enter', done, this.props.enterTimeout);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function (done) {
	    if (this.props.leave) {
	      this.transition('leave', done, this.props.leaveTimeout);
	    } else {
	      done();
	    }
	  },

	  render: function () {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(40);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function (element, className) {
	    !!/\s/.test(className) ?  false ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function (element, className) {
	    !!/\s/.test(className) ?  false ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
	        .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function (element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function (element, className) {
	    !!/\s/.test(className) ?  false ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : undefined;
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(36);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactFragment
	 */

	'use strict';

	var ReactChildren = __webpack_require__(137);
	var ReactElement = __webpack_require__(69);

	var emptyFunction = __webpack_require__(42);
	var invariant = __webpack_require__(40);
	var warning = __webpack_require__(52);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is an array.
	 */

	var numericPropertyRegex = /^\d+$/;

	var warnedAboutNumeric = false;

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function (object) {
	    if (typeof object !== 'object' || !object || Array.isArray(object)) {
	       false ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : undefined;
	      return object;
	    }
	    if (ReactElement.isValidElement(object)) {
	       false ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : undefined;
	      return object;
	    }

	    !(object.nodeType !== 1) ?  false ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM ' + 'elements are not valid children of React components.') : invariant(false) : undefined;

	    var result = [];

	    for (var key in object) {
	      if (false) {
	        if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : undefined;
	          warnedAboutNumeric = true;
	        }
	      }
	      ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
	    }

	    return result;
	  }
	};

	module.exports = ReactFragment;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'use strict';

	var ReactElement = __webpack_require__(69);
	var ReactPropTransferer = __webpack_require__(225);

	var keyOf = __webpack_require__(106);
	var warning = __webpack_require__(52);

	var CHILDREN_PROP = keyOf({ children: null });

	var didDeprecatedWarn = false;

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 * @deprecated
	 */
	function cloneWithProps(child, props) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(didDeprecatedWarn, 'cloneWithProps(...) is deprecated. ' + 'Please use React.cloneElement instead.') : undefined;
	    didDeprecatedWarn = true;
	    process.env.NODE_ENV !== 'production' ? warning(!child.ref, 'You are calling cloneWithProps() on a child with a ref. This is ' + 'dangerous because you\'re creating a new child which will not be ' + 'added as a ref to its parent.') : undefined;
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) && child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'use strict';

	var assign = __webpack_require__(66);
	var emptyFunction = __webpack_require__(42);
	var joinClasses = __webpack_require__(226);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function (props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function (a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function (oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;

/***/ },
/* 226 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} className
	 * @return {string}
	 */
	function joinClasses(className /*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var assign = __webpack_require__(66);
	var keyOf = __webpack_require__(106);
	var invariant = __webpack_require__(40);
	var hasOwnProperty = ({}).hasOwnProperty;

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({ $push: null });
	var COMMAND_UNSHIFT = keyOf({ $unshift: null });
	var COMMAND_SPLICE = keyOf({ $splice: null });
	var COMMAND_SET = keyOf({ $set: null });
	var COMMAND_MERGE = keyOf({ $merge: null });
	var COMMAND_APPLY = keyOf({ $apply: null });

	var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function (command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  !Array.isArray(value) ?  false ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : invariant(false) : undefined;
	  var specValue = spec[command];
	  !Array.isArray(specValue) ?  false ? invariant(false, 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue) : invariant(false) : undefined;
	}

	function update(value, spec) {
	  !(typeof spec === 'object') ?  false ? invariant(false, 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : invariant(false) : undefined;

	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    !(Object.keys(spec).length === 1) ?  false ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : invariant(false) : undefined;

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    !(mergeObj && typeof mergeObj === 'object') ?  false ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : invariant(false) : undefined;
	    !(nextValue && typeof nextValue === 'object') ?  false ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : invariant(false) : undefined;
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function (item) {
	      nextValue.push(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function (item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    !Array.isArray(value) ?  false ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : invariant(false) : undefined;
	    !Array.isArray(spec[COMMAND_SPLICE]) ?  false ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	    spec[COMMAND_SPLICE].forEach(function (args) {
	      !Array.isArray(args) ?  false ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    !(typeof spec[COMMAND_APPLY] === 'function') ?  false ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : invariant(false) : undefined;
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _CollectionActivity = __webpack_require__(229);

	var _RequestActivity = __webpack_require__(231);

	var _FolderActivity = __webpack_require__(232);

	var ActivityItem = (function (_React$Component) {
	  _inherits(ActivityItem, _React$Component);

	  function ActivityItem(props) {
	    _classCallCheck(this, ActivityItem);

	    _get(Object.getPrototypeOf(ActivityItem.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(ActivityItem, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      switch (activity.meta.model + ':' + activity.meta.action) {
	        case 'collection:create':
	          return _react2['default'].createElement(_CollectionActivity.Create, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'collection:update':
	          return _react2['default'].createElement(_CollectionActivity.Update, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'collection:destroy':
	          return _react2['default'].createElement(_CollectionActivity.Delete, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'collection:share':
	          return _react2['default'].createElement(_CollectionActivity.Share, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'collection:unshare':
	          return _react2['default'].createElement(_CollectionActivity.Unshare, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'collection:subscribe':
	          return _react2['default'].createElement(_CollectionActivity.Subscribe, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'collection:unsubscribe':
	          return _react2['default'].createElement(_CollectionActivity.Unsubscribe, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'request:create':
	          return _react2['default'].createElement(_RequestActivity.Create, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'request:update':
	          return _react2['default'].createElement(_RequestActivity.Update, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'request:destroy':
	          return _react2['default'].createElement(_RequestActivity.Delete, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'request:transfer':
	          return _react2['default'].createElement(_RequestActivity.Transfer, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'folder:create':
	          return _react2['default'].createElement(_FolderActivity.Create, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'folder:update':
	          return _react2['default'].createElement(_FolderActivity.Update, { activity: activity, actionHandler: this.props.actionHandler });
	        case 'folder:destroy':
	          return _react2['default'].createElement(_FolderActivity.Delete, { activity: activity, actionHandler: this.props.actionHandler });
	        default:
	          return false;
	      }
	    }
	  }]);

	  return ActivityItem;
	})(_react2['default'].Component);

	exports['default'] = ActivityItem;

	ActivityItem.propTypes = {
	  activity: _react2['default'].PropTypes.object.isRequired
	};
	module.exports = exports['default'];

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _ActivityItemComponents = __webpack_require__(230);

	var Create = (function (_React$Component) {
	  _inherits(Create, _React$Component);

	  function Create(props) {
	    _classCallCheck(this, Create);

	    _get(Object.getPrototypeOf(Create.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Create, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' created this collection'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Create;
	})(_react2['default'].Component);

	var Update = (function (_React$Component2) {
	  _inherits(Update, _React$Component2);

	  function Update(props) {
	    _classCallCheck(this, Update);

	    _get(Object.getPrototypeOf(Update.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Update, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' edited this collection'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Update;
	})(_react2['default'].Component);

	var Delete = (function (_React$Component3) {
	  _inherits(Delete, _React$Component3);

	  function Delete(props) {
	    _classCallCheck(this, Delete);

	    _get(Object.getPrototypeOf(Delete.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Delete, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' removed this collection'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Delete;
	})(_react2['default'].Component);

	var Share = (function (_React$Component4) {
	  _inherits(Share, _React$Component4);

	  function Share(props) {
	    _classCallCheck(this, Share);

	    _get(Object.getPrototypeOf(Share.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Share, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' shared this collection'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Share;
	})(_react2['default'].Component);

	var Unshare = (function (_React$Component5) {
	  _inherits(Unshare, _React$Component5);

	  function Unshare(props) {
	    _classCallCheck(this, Unshare);

	    _get(Object.getPrototypeOf(Unshare.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Unshare, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' made this collection private'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Unshare;
	})(_react2['default'].Component);

	var Subscribe = (function (_React$Component6) {
	  _inherits(Subscribe, _React$Component6);

	  function Subscribe(props) {
	    _classCallCheck(this, Subscribe);

	    _get(Object.getPrototypeOf(Subscribe.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Subscribe, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' subscribed to this collection'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Subscribe;
	})(_react2['default'].Component);

	var Unsubscribe = (function (_React$Component7) {
	  _inherits(Unsubscribe, _React$Component7);

	  function Unsubscribe(props) {
	    _classCallCheck(this, Unsubscribe);

	    _get(Object.getPrototypeOf(Unsubscribe.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Unsubscribe, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' unsubscribed from this collection'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Unsubscribe;
	})(_react2['default'].Component);

	var LoadFeed = (function (_React$Component8) {
	  _inherits(LoadFeed, _React$Component8);

	  function LoadFeed(props) {
	    _classCallCheck(this, LoadFeed);

	    _get(Object.getPrototypeOf(LoadFeed.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(LoadFeed, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper activity-item-loadfeed' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          this.props.loading ? _react2['default'].createElement(_ActivityItemComponents.Loading, null) : _react2['default'].createElement(_ActivityItemComponents.LoadMore, { handler: this.props.loadMore }),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(
	                'span',
	                { onClick: this.props.loadMore },
	                this.props.loading ? ' loading...' : ' show more'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return LoadFeed;
	})(_react2['default'].Component);

	exports.Create = Create;
	exports.Update = Update;
	exports.Delete = Delete;
	exports.Share = Share;
	exports.Unshare = Unshare;
	exports.Subscribe = Subscribe;
	exports.Unsubscribe = Unsubscribe;
	exports.LoadFeed = LoadFeed;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(183);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Header = (function (_React$Component) {
	  _inherits(Header, _React$Component);

	  function Header(props) {
	    _classCallCheck(this, Header);

	    _get(Object.getPrototypeOf(Header.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Header, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-header' },
	        this.props.children
	      );
	    }
	  }]);

	  return Header;
	})(_react2['default'].Component);

	var Heading = (function (_React$Component2) {
	  _inherits(Heading, _React$Component2);

	  function Heading(props) {
	    _classCallCheck(this, Heading);

	    _get(Object.getPrototypeOf(Heading.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Heading, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-heading' },
	        this.props.children
	      );
	    }
	  }]);

	  return Heading;
	})(_react2['default'].Component);

	var ProfilePic = (function (_React$Component3) {
	  _inherits(ProfilePic, _React$Component3);

	  function ProfilePic(props) {
	    _classCallCheck(this, ProfilePic);

	    _get(Object.getPrototypeOf(ProfilePic.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(ProfilePic, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-profile-pic-wrapper' },
	        _react2['default'].createElement('span', { className: 'icon-user-avatar-default' })
	      );
	    }
	  }]);

	  return ProfilePic;
	})(_react2['default'].Component);

	var Meta = (function (_React$Component4) {
	  _inherits(Meta, _React$Component4);

	  function Meta(props) {
	    _classCallCheck(this, Meta);

	    _get(Object.getPrototypeOf(Meta.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Meta, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-meta' },
	        this.props.children
	      );
	    }
	  }]);

	  return Meta;
	})(_react2['default'].Component);

	var Body = (function (_React$Component5) {
	  _inherits(Body, _React$Component5);

	  function Body(props) {
	    _classCallCheck(this, Body);

	    _get(Object.getPrototypeOf(Body.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Body, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-body' },
	        this.props.children
	      );
	    }
	  }]);

	  return Body;
	})(_react2['default'].Component);

	var Folder = (function (_React$Component6) {
	  _inherits(Folder, _React$Component6);

	  function Folder(props) {
	    _classCallCheck(this, Folder);

	    _get(Object.getPrototypeOf(Folder.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Folder, [{
	    key: 'handleClick',
	    value: function handleClick() {
	      var payload = {
	        type: 'folder',
	        id: this.props.id
	      };
	      if (this.props.actionHandler) {
	        this.props.actionHandler(payload);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'span',
	        { className: 'activity-item-folder',
	          onClick: this.handleClick.bind(this) },
	        this.props.name
	      );
	    }
	  }]);

	  return Folder;
	})(_react2['default'].Component);

	var Request = (function (_React$Component7) {
	  _inherits(Request, _React$Component7);

	  function Request(props) {
	    _classCallCheck(this, Request);

	    _get(Object.getPrototypeOf(Request.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Request, [{
	    key: 'handleClick',
	    value: function handleClick() {
	      var payload = {
	        type: 'request',
	        id: this.props.id
	      };
	      if (this.props.actionHandler) {
	        this.props.actionHandler(payload);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var abbrvMethod = getAbbrvMethodName(this.props.method);
	      var methodClasses = (0, _classnames2['default'])('activity-item-request-method', 'method-' + this.props.method);
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-request' },
	        _react2['default'].createElement(
	          'span',
	          { className: methodClasses, onClick: this.handleClick.bind(this) },
	          abbrvMethod
	        ),
	        _react2['default'].createElement(
	          'span',
	          { className: 'activity-item-request-name', onClick: this.handleClick.bind(this) },
	          this.props.name
	        )
	      );
	    }
	  }]);

	  return Request;
	})(_react2['default'].Component);

	var User = (function (_React$Component8) {
	  _inherits(User, _React$Component8);

	  function User(props) {
	    _classCallCheck(this, User);

	    _get(Object.getPrototypeOf(User.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(User, [{
	    key: 'render',
	    value: function render() {
	      var displayName = this.props.name || this.props.username;
	      return _react2['default'].createElement(
	        'span',
	        { className: 'activity-item-user' },
	        displayName
	      );
	    }
	  }]);

	  return User;
	})(_react2['default'].Component);

	var Time = (function (_React$Component9) {
	  _inherits(Time, _React$Component9);

	  function Time(props) {
	    _classCallCheck(this, Time);

	    _get(Object.getPrototypeOf(Time.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Time, [{
	    key: 'render',
	    value: function render() {
	      var date = new Date(this.props.timestamp),
	          formattedDate = undefined;

	      if (date.isToday()) {
	        formattedDate = date.format('Today at {h}:{mm}{tt}');
	      } else if (date.isYesterday()) {
	        formattedDate = date.format('Yesterday at {h}:{mm}{tt}');
	      } else {
	        formattedDate = date.format('{Month} {d}, {yyyy} at {h}:{mm}{tt}');
	      }
	      return _react2['default'].createElement(
	        'span',
	        { className: 'activity-item-time' },
	        formattedDate
	      );
	    }
	  }]);

	  return Time;
	})(_react2['default'].Component);

	var LoadMore = (function (_React$Component10) {
	  _inherits(LoadMore, _React$Component10);

	  function LoadMore(props) {
	    _classCallCheck(this, LoadMore);

	    _get(Object.getPrototypeOf(LoadMore.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(LoadMore, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-load-more-wrapper',
	          onClick: this.props.handler },
	        _react2['default'].createElement('span', { className: 'icon-collections-more' })
	      );
	    }
	  }]);

	  return LoadMore;
	})(_react2['default'].Component);

	var Loading = (function (_React$Component11) {
	  _inherits(Loading, _React$Component11);

	  function Loading(props) {
	    _classCallCheck(this, Loading);

	    _get(Object.getPrototypeOf(Loading.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Loading, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-loading-wrapper' },
	        _react2['default'].createElement('div', { className: 'loading' })
	      );
	    }
	  }]);

	  return Loading;
	})(_react2['default'].Component);

	exports.Header = Header;
	exports.Heading = Heading;
	exports.ProfilePic = ProfilePic;
	exports.Meta = Meta;
	exports.Body = Body;
	exports.User = User;
	exports.Folder = Folder;
	exports.Request = Request;
	exports.Time = Time;
	exports.LoadMore = LoadMore;
	exports.Loading = Loading;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _ActivityItemComponents = __webpack_require__(230);

	var Create = (function (_React$Component) {
	  _inherits(Create, _React$Component);

	  function Create(props) {
	    _classCallCheck(this, Create);

	    _get(Object.getPrototypeOf(Create.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Create, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper request-create' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' added a request'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          _ActivityItemComponents.Body,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.Request, _extends({}, activity.data.output, {
	            actionHandler: this.props.actionHandler }))
	        )
	      );
	    }
	  }]);

	  return Create;
	})(_react2['default'].Component);

	var Update = (function (_React$Component2) {
	  _inherits(Update, _React$Component2);

	  function Update(props) {
	    _classCallCheck(this, Update);

	    _get(Object.getPrototypeOf(Update.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Update, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper request-update' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' edited a request'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          _ActivityItemComponents.Body,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.Request, _extends({}, activity.data.output, {
	            actionHandler: this.props.actionHandler }))
	        )
	      );
	    }
	  }]);

	  return Update;
	})(_react2['default'].Component);

	var Delete = (function (_React$Component3) {
	  _inherits(Delete, _React$Component3);

	  function Delete(props) {
	    _classCallCheck(this, Delete);

	    _get(Object.getPrototypeOf(Delete.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Delete, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper request-delete' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' removed a request'
	              )
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          _ActivityItemComponents.Body,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.Request, activity.data.output)
	        )
	      );
	    }
	  }]);

	  return Delete;
	})(_react2['default'].Component);

	var Transfer = (function (_React$Component4) {
	  _inherits(Transfer, _React$Component4);

	  function Transfer(props) {
	    _classCallCheck(this, Transfer);

	    _get(Object.getPrototypeOf(Transfer.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Transfer, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      var source = undefined,
	          destination = undefined;

	      if (activity.data.output.from.model === 'folder') {
	        source = _react2['default'].createElement(
	          'span',
	          null,
	          _react2['default'].createElement(
	            'span',
	            null,
	            ' from '
	          ),
	          _react2['default'].createElement(_ActivityItemComponents.Folder, _extends({}, activity.data.output.from.meta, {
	            actionHandler: this.props.actionHandler }))
	        );
	      }

	      if (activity.data.output.to.model === 'folder') {
	        destination = _react2['default'].createElement(
	          'span',
	          null,
	          _react2['default'].createElement(
	            'span',
	            null,
	            ' to '
	          ),
	          _react2['default'].createElement(_ActivityItemComponents.Folder, _extends({}, activity.data.output.to.meta, {
	            actionHandler: this.props.actionHandler }))
	        );
	      }

	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper request-transfer' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' moved a request'
	              ),
	              source,
	              destination
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          _ActivityItemComponents.Body,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.Request, _extends({}, activity.data.output, {
	            actionHandler: this.props.actionHandler }))
	        )
	      );
	    }
	  }]);

	  return Transfer;
	})(_react2['default'].Component);

	exports.Create = Create;
	exports.Update = Update;
	exports.Delete = Delete;
	exports.Transfer = Transfer;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _ActivityItemComponents = __webpack_require__(230);

	var Create = (function (_React$Component) {
	  _inherits(Create, _React$Component);

	  function Create(props) {
	    _classCallCheck(this, Create);

	    _get(Object.getPrototypeOf(Create.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Create, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper folder-create' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' created a folder: '
	              ),
	              _react2['default'].createElement(_ActivityItemComponents.Folder, _extends({}, activity.data.output, {
	                actionHandler: this.props.actionHandler }))
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Create;
	})(_react2['default'].Component);

	var Update = (function (_React$Component2) {
	  _inherits(Update, _React$Component2);

	  function Update(props) {
	    _classCallCheck(this, Update);

	    _get(Object.getPrototypeOf(Update.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Update, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper folder-update' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' edited a folder: '
	              ),
	              _react2['default'].createElement(_ActivityItemComponents.Folder, _extends({}, activity.data.output, {
	                actionHandler: this.props.actionHandler }))
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Update;
	})(_react2['default'].Component);

	var Delete = (function (_React$Component3) {
	  _inherits(Delete, _React$Component3);

	  function Delete(props) {
	    _classCallCheck(this, Delete);

	    _get(Object.getPrototypeOf(Delete.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Delete, [{
	    key: 'render',
	    value: function render() {
	      var activity = this.props.activity;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'activity-item-wrapper folder-delete' },
	        _react2['default'].createElement(
	          _ActivityItemComponents.Header,
	          null,
	          _react2['default'].createElement(_ActivityItemComponents.ProfilePic, null),
	          _react2['default'].createElement(
	            'div',
	            { className: 'activity-item-head' },
	            _react2['default'].createElement(
	              _ActivityItemComponents.Heading,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.User, activity.meta.user),
	              _react2['default'].createElement(
	                'span',
	                null,
	                ' removed a folder: '
	              ),
	              _react2['default'].createElement(_ActivityItemComponents.Folder, activity.data.output)
	            ),
	            _react2['default'].createElement(
	              _ActivityItemComponents.Meta,
	              null,
	              _react2['default'].createElement(_ActivityItemComponents.Time, { timestamp: activity.meta.createdAt })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Delete;
	})(_react2['default'].Component);

	exports.Create = Create;
	exports.Update = Update;
	exports.Delete = Delete;

/***/ },
/* 233 */
/***/ function(module, exports) {

	var ActivityModel = Backbone.Model.extend({
	  idAttribute: 'revision'
	});

	var ActivityFeedModel = Backbone.Collection.extend({
	  model: ActivityModel,
	  DEFAULT_COUNT: 15,


	  initialize: function(models, options) {
	    this.collectionId = options.collectionId
	  },

	  fetchLatest: function(count) {
	    var fetchCount = count || this.DEFAULT_COUNT
	      , since_id = this.getSinceId() || 0

	    pm.api.getCollectionRevisions(
	      this.collectionId,
	      fetchCount,
	      since_id,
	      null,
	      function refreshFeedSuccess(response) {
	        // TODO: cleaner backbone id && comparator logic
	        if(this.length) {
	          var existingActivities = this.toJSON();
	          var newActivities = response.data;
	          var combinedActivities = newActivities.concat(existingActivities);
	          this.reset(combinedActivities)
	        } else {
	          this.reset(response.data)
	        }
	        this.trigger('change')
	      }.bind(this),
	      function refreshFeedFailure() {
	        pm.alerts.error("Couldn't fetch activity feed");
	        this.trigger('error')
	      }.bind(this)
	    )
	  },

	  getSinceId: function() {
	    return _.first(this.pluck('revision'))
	  },

	  getMaxId: function() {
	    return _.last(this.pluck('revision'))
	  },

	  fetchPrevious: function(count) {
	    var fetchCount = count || this.DEFAULT_COUNT
	      , since_id = 0
	      , max_id = this.getMaxId();

	    pm.api.getCollectionRevisions(
	      this.collectionId,
	      fetchCount,
	      since_id,
	      max_id,
	      function fetchPreviousSuccess(response) {
	        this.add(response.data)
	        this.trigger('change')
	      }.bind(this),
	      function fetchPreviousFailure() {
	        pm.alerts.error("Couldn't fetch activity feed");
	        this.trigger('error')
	      }.bind(this)
	    )
	  }
	});

	module.exports = ActivityFeedModel;


/***/ },
/* 234 */
/***/ function(module, exports) {

	var SyncLogger = Backbone.Model.extend({
	    debugLog: Function.prototype.bind.call(console.debug, console),

	    debug: function() {
	        if(postman_env==="sync_dev") { //or debug flag is true
	            this.debugLog.apply(console, arguments);
	        }
	    },

	    log: function(err, logString) {
	        if(!this.logging) {
	            return;
	        }
	        var currTime =  this.getLogDate();
	        if(logString instanceof Array) {
	            var len = logString.length;
	            console.groupCollapsed(currTime + " - " + logString.join(" - "));
	            console.dir(currTime + " - " + err.stack);
	            for(var i=0;i<len;i++) {
	                console.log(currTime + " - " + logString[i]);
	            }
	            console.groupEnd();

	        }
	        else {
	            console.groupCollapsed(currTime + " - " + logString);
	            console.dir(currTime + " - " + err.stack);
	            console.groupEnd();
	        }
	    },

	    //error
	    error: function(msg, url, linenumber, colNumber, stack, errorObject) {
	        var installationId = pm.settings.getSetting("installation_id");
	        var userId = pm.user.id;
	        var accessToken = pm.user.get("access_token");
	        var currTime = new Date();
	        var version = pm.getVersion();
	        //Custom errors are send only if sync is enabled
	        if(pm.syncManager.syncEnabled) {
	            if(msg.indexOf("sails")!==-1 ||
	              (url && url.indexOf("sails")!==-1) ||
	               msg.indexOf("SecurityError")!==-1) { 
	                //sails/iframe errors. do not sent
	            }
	            else {
	                // pm.api.postErrorToServer(msg || "", url, linenumber+"", colNumber+"", stack | "", installationId, userId, currTime, version, accessToken);
	                pm.crashReporter.report(errorObject);
	            }
	        }
	        console.error(this.getLogDate()+" - " +msg);
	    },

	    //This sends uncaught errors - irrespective of sync
	    errorForce: function(msg, url, linenumber, colNumber, stack, errorObject) {
	        //if it show up in testing mode, FAIL THE TEST
	        if(pm.isTesting) {
	            pm.COMPULSARY_TEST_FAIL = true;
	            return;
	        }
	        var installationId = pm.settings.getSetting("installation_id");
	        var userId = pm.user.id;
	        var accessToken = pm.user.get("access_token");
	        var currTime = new Date();
	        var version = pm.getVersion();
	        if(msg.indexOf("sails")==-1 && (!url || url.indexOf("sails")==-1) && msg.indexOf("SecurityError")==-1) {
	            // pm.api.postErrorToServer(("Uncaught - " + msg) || "Uncaught - ", url, linenumber+"", colNumber+"", stack | "", installationId, userId, currTime, version, accessToken);
	            pm.crashReporter.report(errorObject);
	        }
	        console.error(this.getLogDate()+" - " +msg);
	    },

	    initialize: function() {
	        //global errors are sent to the server irrespective of sync
	        window.onerror = function(msg, url, linenumber, colnumber, stackTrace) {
	            pm.syncLogger.errorForce(msg, url, linenumber, colnumber, stackTrace.stack);
	            return false;
	        };

	        //turn this on?
	        this.logging = false;
	    },

	    getLogDate: function() {
	        var a = new Date();
	        return a.getHours()+":"+a.getMinutes()+":"+a.getMinutes()+"."+a.getMilliseconds();
	    }
	});

	module.exports = SyncLogger;


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var Raven = __webpack_require__(236);

	var CrashReporter = Backbone.Model.extend({

	  defaults: {
	    "enabled": false,
	  },

	  initialize: function() {

	    if(!ENABLE_CRASH_REPORTING) {
	      return;
	    }

	    this.setEnabled(pm.settings.getSetting('googleAnalytics'));

	    this.configure();

	    /* listen to settings change */
	    pm.mediator.on('settings:change:googleAnalytics', function(newEnabledSetting) {
	      this.setEnabled(newEnabledSetting);
	    }.bind(this));

	    pm.mediator.on('sendCustomError', function(error) {
	      this.report(error);
	    }.bind(this));

	    /* listen to uncaught error */
	    window.onerror = function(msg, url, linenumber, colnumber, error) {
	      this.report(error);
	    }.bind(this);

	    /* listen to user auth events to set/unset user context */
	    pm.user.on('login', this.setUserContext, this);
	    pm.user.on('logout', this.clearUserContext, this);
	    pm.user.on('onLogout', this.clearUserContext, this);

	    if(pm.user.id) {
	      this.setUserContext();
	    }
	  },

	  setEnabled: function(isEnabled) {
	    if(isEnabled !== undefined && isEnabled !== null) {
	      this.set('enabled', isEnabled);
	    }
	  },

	  setUserContext: function() {
	    var installationId = pm.settings.getSetting("installation_id");
	    Raven.setUserContext({
	      id: pm.user.id,
	      app_id: installationId
	    });
	  },

	  clearUserContext: function() {
	    Raven.setUserContext();
	  },

	  configure: function() {
	    var installationId = pm.settings.getSetting("installation_id");
	    var version = pm.getVersion();
	    var target = postman_electron ? "electron" : "chrome";
	    var sentryDsn = (postman_electron) ? MAC_PROD_SENTRY_DSN : CHROME_PROD_SENTRY_DSN;
	    Raven.config(sentryDsn, {
	      collectWindowErrors: false,
	      tags: {
	        target: target,
	        channel: postman_env,
	        version: version,
	        app_id: installationId
	      },
	      release: version,
	      transport: this._send
	    }).install();
	    Raven.debug = false;
	  },

	  _send: function(opts) {
	    opts.auth.sentry_data = JSON.stringify(opts.data);

	    function urlencode(o) {
	      var pairs = [];
	      _.each(o, function(value, key) {
	        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
	      });
	      return pairs.join('&');
	    }

	    var src = opts.url + '?' + urlencode(opts.auth);

	    $.ajax({
	      url: src,
	      method: 'GET',
	      success: opts.onSuccess,
	      error: opts.onError,
	      crossDomain: true
	    });
	  },

	  report: function(error) {
	    if(!this.get('enabled')) {
	      return;
	    }

	    Raven.captureException(error);
	  }
	});

	module.exports = CrashReporter;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! Raven.js 1.3.0 (768fdca) | github.com/getsentry/raven-js */

	/*
	 * Includes TraceKit
	 * https://github.com/getsentry/TraceKit
	 *
	 * Copyright 2015 Matt Robenolt and other contributors
	 * Released under the BSD license
	 * https://github.com/getsentry/raven-js/blob/master/LICENSE
	 *
	 */
	;(function(window, undefined){
	'use strict';

	/*
	 TraceKit - Cross brower stack traces - github.com/occ/TraceKit
	 MIT license
	*/

	var TraceKit = {
	    remoteFetching: false,
	    collectWindowErrors: true,
	    // 3 lines before, the offending line, 3 lines after
	    linesOfContext: 7,
	    debug: false
	};

	// global reference to slice
	var _slice = [].slice;
	var UNKNOWN_FUNCTION = '?';


	function getLocationHref() {
	    if (typeof document === 'undefined')
	        return '';

	    return document.location.href;
	};

	/**
	 * TraceKit.report: cross-browser processing of unhandled exceptions
	 *
	 * Syntax:
	 *   TraceKit.report.subscribe(function(stackInfo) { ... })
	 *   TraceKit.report.unsubscribe(function(stackInfo) { ... })
	 *   TraceKit.report(exception)
	 *   try { ...code... } catch(ex) { TraceKit.report(ex); }
	 *
	 * Supports:
	 *   - Firefox: full stack trace with line numbers, plus column number
	 *              on top frame; column number is not guaranteed
	 *   - Opera:   full stack trace with line and column numbers
	 *   - Chrome:  full stack trace with line and column numbers
	 *   - Safari:  line and column number for the top frame only; some frames
	 *              may be missing, and column number is not guaranteed
	 *   - IE:      line and column number for the top frame only; some frames
	 *              may be missing, and column number is not guaranteed
	 *
	 * In theory, TraceKit should work on all of the following versions:
	 *   - IE5.5+ (only 8.0 tested)
	 *   - Firefox 0.9+ (only 3.5+ tested)
	 *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require
	 *     Exceptions Have Stacktrace to be enabled in opera:config)
	 *   - Safari 3+ (only 4+ tested)
	 *   - Chrome 1+ (only 5+ tested)
	 *   - Konqueror 3.5+ (untested)
	 *
	 * Requires TraceKit.computeStackTrace.
	 *
	 * Tries to catch all unhandled exceptions and report them to the
	 * subscribed handlers. Please note that TraceKit.report will rethrow the
	 * exception. This is REQUIRED in order to get a useful stack trace in IE.
	 * If the exception does not reach the top of the browser, you will only
	 * get a stack trace from the point where TraceKit.report was called.
	 *
	 * Handlers receive a stackInfo object as described in the
	 * TraceKit.computeStackTrace docs.
	 */
	TraceKit.report = (function reportModuleWrapper() {
	    var handlers = [],
	        lastArgs = null,
	        lastException = null,
	        lastExceptionStack = null;

	    /**
	     * Add a crash handler.
	     * @param {Function} handler
	     */
	    function subscribe(handler) {
	        installGlobalHandler();
	        handlers.push(handler);
	    }

	    /**
	     * Remove a crash handler.
	     * @param {Function} handler
	     */
	    function unsubscribe(handler) {
	        for (var i = handlers.length - 1; i >= 0; --i) {
	            if (handlers[i] === handler) {
	                handlers.splice(i, 1);
	            }
	        }
	    }

	    /**
	     * Remove all crash handlers.
	     */
	    function unsubscribeAll() {
	        uninstallGlobalHandler();
	        handlers = [];
	    }

	    /**
	     * Dispatch stack information to all handlers.
	     * @param {Object.<string, *>} stack
	     */
	    function notifyHandlers(stack, isWindowError) {
	        var exception = null;
	        if (isWindowError && !TraceKit.collectWindowErrors) {
	          return;
	        }
	        for (var i in handlers) {
	            if (hasKey(handlers, i)) {
	                try {
	                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));
	                } catch (inner) {
	                    exception = inner;
	                }
	            }
	        }

	        if (exception) {
	            throw exception;
	        }
	    }

	    var _oldOnerrorHandler, _onErrorHandlerInstalled;

	    /**
	     * Ensures all global unhandled exceptions are recorded.
	     * Supported by Gecko and IE.
	     * @param {string} message Error message.
	     * @param {string} url URL of script that generated the exception.
	     * @param {(number|string)} lineNo The line number at which the error
	     * occurred.
	     * @param {?(number|string)} colNo The column number at which the error
	     * occurred.
	     * @param {?Error} ex The actual Error object.
	     */
	    function traceKitWindowOnError(message, url, lineNo, colNo, ex) {
	        var stack = null;

	        if (lastExceptionStack) {
	            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);
	            processLastException();
	        } else if (ex) {
	            // New chrome and blink send along a real error object
	            // Let's just report that like a normal error.
	            // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror
	            stack = TraceKit.computeStackTrace(ex);
	            notifyHandlers(stack, true);
	        } else {
	            var location = {
	                'url': url,
	                'line': lineNo,
	                'column': colNo
	            };
	            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);
	            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);
	            stack = {
	                'message': message,
	                'url': getLocationHref(),
	                'stack': [location]
	            };
	            notifyHandlers(stack, true);
	        }

	        if (_oldOnerrorHandler) {
	            return _oldOnerrorHandler.apply(this, arguments);
	        }

	        return false;
	    }

	    function installGlobalHandler ()
	    {
	        if (_onErrorHandlerInstalled) {
	            return;
	        }
	        _oldOnerrorHandler = window.onerror;
	        window.onerror = traceKitWindowOnError;
	        _onErrorHandlerInstalled = true;
	    }

	    function uninstallGlobalHandler ()
	    {
	        if (!_onErrorHandlerInstalled) {
	            return;
	        }
	        window.onerror = _oldOnerrorHandler;
	        _onErrorHandlerInstalled = false;
	        _oldOnerrorHandler = undefined;
	    }

	    function processLastException() {
	        var _lastExceptionStack = lastExceptionStack,
	            _lastArgs = lastArgs;
	        lastArgs = null;
	        lastExceptionStack = null;
	        lastException = null;
	        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));
	    }

	    /**
	     * Reports an unhandled Error to TraceKit.
	     * @param {Error} ex
	     * @param {?boolean} rethrow If false, do not re-throw the exception.
	     * Only used for window.onerror to not cause an infinite loop of
	     * rethrowing.
	     */
	    function report(ex, rethrow) {
	        var args = _slice.call(arguments, 1);
	        if (lastExceptionStack) {
	            if (lastException === ex) {
	                return; // already caught by an inner catch block, ignore
	            } else {
	              processLastException();
	            }
	        }

	        var stack = TraceKit.computeStackTrace(ex);
	        lastExceptionStack = stack;
	        lastException = ex;
	        lastArgs = args;

	        // If the stack trace is incomplete, wait for 2 seconds for
	        // slow slow IE to see if onerror occurs or not before reporting
	        // this exception; otherwise, we will end up with an incomplete
	        // stack trace
	        window.setTimeout(function () {
	            if (lastException === ex) {
	                processLastException();
	            }
	        }, (stack.incomplete ? 2000 : 0));

	        if (rethrow !== false) {
	            throw ex; // re-throw to propagate to the top level (and cause window.onerror)
	        }
	    }

	    report.subscribe = subscribe;
	    report.unsubscribe = unsubscribe;
	    report.uninstall = unsubscribeAll;
	    return report;
	}());

	/**
	 * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript
	 *
	 * Syntax:
	 *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)
	 * Returns:
	 *   s.name              - exception name
	 *   s.message           - exception message
	 *   s.stack[i].url      - JavaScript or HTML file URL
	 *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)
	 *   s.stack[i].args     - arguments passed to the function, if known
	 *   s.stack[i].line     - line number, if known
	 *   s.stack[i].column   - column number, if known
	 *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#
	 *
	 * Supports:
	 *   - Firefox:  full stack trace with line numbers and unreliable column
	 *               number on top frame
	 *   - Opera 10: full stack trace with line and column numbers
	 *   - Opera 9-: full stack trace with line numbers
	 *   - Chrome:   full stack trace with line and column numbers
	 *   - Safari:   line and column number for the topmost stacktrace element
	 *               only
	 *   - IE:       no line numbers whatsoever
	 *
	 * Tries to guess names of anonymous functions by looking for assignments
	 * in the source code. In IE and Safari, we have to guess source file names
	 * by searching for function bodies inside all page scripts. This will not
	 * work for scripts that are loaded cross-domain.
	 * Here be dragons: some function names may be guessed incorrectly, and
	 * duplicate functions may be mismatched.
	 *
	 * TraceKit.computeStackTrace should only be used for tracing purposes.
	 * Logging of unhandled exceptions should be done with TraceKit.report,
	 * which builds on top of TraceKit.computeStackTrace and provides better
	 * IE support by utilizing the window.onerror event to retrieve information
	 * about the top of the stack.
	 *
	 * Note: In IE and Safari, no stack trace is recorded on the Error object,
	 * so computeStackTrace instead walks its *own* chain of callers.
	 * This means that:
	 *  * in Safari, some methods may be missing from the stack trace;
	 *  * in IE, the topmost function in the stack trace will always be the
	 *    caller of computeStackTrace.
	 *
	 * This is okay for tracing (because you are likely to be calling
	 * computeStackTrace from the function you want to be the topmost element
	 * of the stack trace anyway), but not okay for logging unhandled
	 * exceptions (because your catch block will likely be far away from the
	 * inner function that actually caused the exception).
	 *
	 */
	TraceKit.computeStackTrace = (function computeStackTraceWrapper() {
	    var sourceCache = {};

	    /**
	     * Attempts to retrieve source code via XMLHttpRequest, which is used
	     * to look up anonymous function names.
	     * @param {string} url URL of source code.
	     * @return {string} Source contents.
	     */
	    function loadSource(url) {
	        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.
	            return '';
	        }
	        try {
	            var getXHR = function() {
	                try {
	                    return new window.XMLHttpRequest();
	                } catch (e) {
	                    // explicitly bubble up the exception if not found
	                    return new window.ActiveXObject('Microsoft.XMLHTTP');
	                }
	            };

	            var request = getXHR();
	            request.open('GET', url, false);
	            request.send('');
	            return request.responseText;
	        } catch (e) {
	            return '';
	        }
	    }

	    /**
	     * Retrieves source code from the source code cache.
	     * @param {string} url URL of source code.
	     * @return {Array.<string>} Source contents.
	     */
	    function getSource(url) {
	        if (!isString(url)) return [];
	        if (!hasKey(sourceCache, url)) {
	            // URL needs to be able to fetched within the acceptable domain.  Otherwise,
	            // cross-domain errors will be triggered.
	            var source = '';
	            var domain = '';
	            try { domain = document.domain; } catch (e) {}
	            if (url.indexOf(domain) !== -1) {
	                source = loadSource(url);
	            }
	            sourceCache[url] = source ? source.split('\n') : [];
	        }

	        return sourceCache[url];
	    }

	    /**
	     * Tries to use an externally loaded copy of source code to determine
	     * the name of a function by looking at the name of the variable it was
	     * assigned to, if any.
	     * @param {string} url URL of source code.
	     * @param {(string|number)} lineNo Line number in source code.
	     * @return {string} The function name, if discoverable.
	     */
	    function guessFunctionName(url, lineNo) {
	        var reFunctionArgNames = /function ([^(]*)\(([^)]*)\)/,
	            reGuessFunction = /['"]?([0-9A-Za-z$_]+)['"]?\s*[:=]\s*(function|eval|new Function)/,
	            line = '',
	            maxLines = 10,
	            source = getSource(url),
	            m;

	        if (!source.length) {
	            return UNKNOWN_FUNCTION;
	        }

	        // Walk backwards from the first line in the function until we find the line which
	        // matches the pattern above, which is the function definition
	        for (var i = 0; i < maxLines; ++i) {
	            line = source[lineNo - i] + line;

	            if (!isUndefined(line)) {
	                if ((m = reGuessFunction.exec(line))) {
	                    return m[1];
	                } else if ((m = reFunctionArgNames.exec(line))) {
	                    return m[1];
	                }
	            }
	        }

	        return UNKNOWN_FUNCTION;
	    }

	    /**
	     * Retrieves the surrounding lines from where an exception occurred.
	     * @param {string} url URL of source code.
	     * @param {(string|number)} line Line number in source code to centre
	     * around for context.
	     * @return {?Array.<string>} Lines of source code.
	     */
	    function gatherContext(url, line) {
	        var source = getSource(url);

	        if (!source.length) {
	            return null;
	        }

	        var context = [],
	            // linesBefore & linesAfter are inclusive with the offending line.
	            // if linesOfContext is even, there will be one extra line
	            //   *before* the offending line.
	            linesBefore = Math.floor(TraceKit.linesOfContext / 2),
	            // Add one extra line if linesOfContext is odd
	            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),
	            start = Math.max(0, line - linesBefore - 1),
	            end = Math.min(source.length, line + linesAfter - 1);

	        line -= 1; // convert to 0-based index

	        for (var i = start; i < end; ++i) {
	            if (!isUndefined(source[i])) {
	                context.push(source[i]);
	            }
	        }

	        return context.length > 0 ? context : null;
	    }

	    /**
	     * Escapes special characters, except for whitespace, in a string to be
	     * used inside a regular expression as a string literal.
	     * @param {string} text The string.
	     * @return {string} The escaped string literal.
	     */
	    function escapeRegExp(text) {
	        return text.replace(/[\-\[\]{}()*+?.,\\\^$|#]/g, '\\$&');
	    }

	    /**
	     * Escapes special characters in a string to be used inside a regular
	     * expression as a string literal. Also ensures that HTML entities will
	     * be matched the same as their literal friends.
	     * @param {string} body The string.
	     * @return {string} The escaped string.
	     */
	    function escapeCodeAsRegExpForMatchingInsideHTML(body) {
	        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('"', '(?:"|&quot;)').replace(/\s+/g, '\\s+');
	    }

	    /**
	     * Determines where a code fragment occurs in the source code.
	     * @param {RegExp} re The function definition.
	     * @param {Array.<string>} urls A list of URLs to search.
	     * @return {?Object.<string, (string|number)>} An object containing
	     * the url, line, and column number of the defined function.
	     */
	    function findSourceInUrls(re, urls) {
	        var source, m;
	        for (var i = 0, j = urls.length; i < j; ++i) {
	            // console.log('searching', urls[i]);
	            if ((source = getSource(urls[i])).length) {
	                source = source.join('\n');
	                if ((m = re.exec(source))) {
	                    // console.log('Found function in ' + urls[i]);

	                    return {
	                        'url': urls[i],
	                        'line': source.substring(0, m.index).split('\n').length,
	                        'column': m.index - source.lastIndexOf('\n', m.index) - 1
	                    };
	                }
	            }
	        }

	        // console.log('no match');

	        return null;
	    }

	    /**
	     * Determines at which column a code fragment occurs on a line of the
	     * source code.
	     * @param {string} fragment The code fragment.
	     * @param {string} url The URL to search.
	     * @param {(string|number)} line The line number to examine.
	     * @return {?number} The column number.
	     */
	    function findSourceInLine(fragment, url, line) {
	        var source = getSource(url),
	            re = new RegExp('\\b' + escapeRegExp(fragment) + '\\b'),
	            m;

	        line -= 1;

	        if (source && source.length > line && (m = re.exec(source[line]))) {
	            return m.index;
	        }

	        return null;
	    }

	    /**
	     * Determines where a function was defined within the source code.
	     * @param {(Function|string)} func A function reference or serialized
	     * function definition.
	     * @return {?Object.<string, (string|number)>} An object containing
	     * the url, line, and column number of the defined function.
	     */
	    function findSourceByFunctionBody(func) {
	        if (typeof document === 'undefined')
	            return;

	        var urls = [window.location.href],
	            scripts = document.getElementsByTagName('script'),
	            body,
	            code = '' + func,
	            codeRE = /^function(?:\s+([\w$]+))?\s*\(([\w\s,]*)\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/,
	            eventRE = /^function on([\w$]+)\s*\(event\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/,
	            re,
	            parts,
	            result;

	        for (var i = 0; i < scripts.length; ++i) {
	            var script = scripts[i];
	            if (script.src) {
	                urls.push(script.src);
	            }
	        }

	        if (!(parts = codeRE.exec(code))) {
	            re = new RegExp(escapeRegExp(code).replace(/\s+/g, '\\s+'));
	        }

	        // not sure if this is really necessary, but I don’t have a test
	        // corpus large enough to confirm that and it was in the original.
	        else {
	            var name = parts[1] ? '\\s+' + parts[1] : '',
	                args = parts[2].split(',').join('\\s*,\\s*');

	            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\s+/g, '\\s+');
	            re = new RegExp('function' + name + '\\s*\\(\\s*' + args + '\\s*\\)\\s*{\\s*' + body + '\\s*}');
	        }

	        // look for a normal function definition
	        if ((result = findSourceInUrls(re, urls))) {
	            return result;
	        }

	        // look for an old-school event handler function
	        if ((parts = eventRE.exec(code))) {
	            var event = parts[1];
	            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);

	            // look for a function defined in HTML as an onXXX handler
	            re = new RegExp('on' + event + '=[\\\'"]\\s*' + body + '\\s*[\\\'"]', 'i');

	            if ((result = findSourceInUrls(re, urls[0]))) {
	                return result;
	            }

	            // look for ???
	            re = new RegExp(body);

	            if ((result = findSourceInUrls(re, urls))) {
	                return result;
	            }
	        }

	        return null;
	    }

	    // Contents of Exception in various browsers.
	    //
	    // SAFARI:
	    // ex.message = Can't find variable: qq
	    // ex.line = 59
	    // ex.sourceId = 580238192
	    // ex.sourceURL = http://...
	    // ex.expressionBeginOffset = 96
	    // ex.expressionCaretOffset = 98
	    // ex.expressionEndOffset = 98
	    // ex.name = ReferenceError
	    //
	    // FIREFOX:
	    // ex.message = qq is not defined
	    // ex.fileName = http://...
	    // ex.lineNumber = 59
	    // ex.columnNumber = 69
	    // ex.stack = ...stack trace... (see the example below)
	    // ex.name = ReferenceError
	    //
	    // CHROME:
	    // ex.message = qq is not defined
	    // ex.name = ReferenceError
	    // ex.type = not_defined
	    // ex.arguments = ['aa']
	    // ex.stack = ...stack trace...
	    //
	    // INTERNET EXPLORER:
	    // ex.message = ...
	    // ex.name = ReferenceError
	    //
	    // OPERA:
	    // ex.message = ...message... (see the example below)
	    // ex.name = ReferenceError
	    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)
	    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'

	    /**
	     * Computes stack trace information from the stack property.
	     * Chrome and Gecko use this property.
	     * @param {Error} ex
	     * @return {?Object.<string, *>} Stack trace information.
	     */
	    function computeStackTraceFromStackProp(ex) {
	        if (isUndefined(ex.stack) || !ex.stack) return;

	        var chrome = /^\s*at (.*?) ?\(?((?:(?:file|https?|chrome-extension):.*?)|<anonymous>):(\d+)(?::(\d+))?\)?\s*$/i,
	            gecko = /^\s*(.*?)(?:\((.*?)\))?@((?:file|https?|chrome).*?):(\d+)(?::(\d+))?\s*$/i,
	            winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:ms-appx|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
	            lines = ex.stack.split('\n'),
	            stack = [],
	            parts,
	            element,
	            reference = /^(.*) is undefined$/.exec(ex.message);

	        for (var i = 0, j = lines.length; i < j; ++i) {
	            if ((parts = gecko.exec(lines[i]))) {
	                element = {
	                    'url': parts[3],
	                    'func': parts[1] || UNKNOWN_FUNCTION,
	                    'args': parts[2] ? parts[2].split(',') : '',
	                    'line': +parts[4],
	                    'column': parts[5] ? +parts[5] : null
	                };
	            } else if ((parts = chrome.exec(lines[i]))) {
	                element = {
	                    'url': parts[2],
	                    'func': parts[1] || UNKNOWN_FUNCTION,
	                    'line': +parts[3],
	                    'column': parts[4] ? +parts[4] : null
	                };
	            } else if ((parts = winjs.exec(lines[i]))) {
	                element = {
	                    'url': parts[2],
	                    'func': parts[1] || UNKNOWN_FUNCTION,
	                    'line': +parts[3],
	                    'column': parts[4] ? +parts[4] : null
	                };
	            } else {
	                continue;
	            }

	            if (!element.func && element.line) {
	                element.func = guessFunctionName(element.url, element.line);
	            }

	            if (element.line) {
	                element.context = gatherContext(element.url, element.line);
	            }

	            stack.push(element);
	        }

	        if (!stack.length) {
	            return null;
	        }

	        if (stack[0].line && !stack[0].column && reference) {
	            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);
	        } else if (!stack[0].column && !isUndefined(ex.columnNumber)) {
	            // FireFox uses this awesome columnNumber property for its top frame
	            // Also note, Firefox's column number is 0-based and everything else expects 1-based,
	            // so adding 1
	            stack[0].column = ex.columnNumber + 1;
	        }

	        return {
	            'name': ex.name,
	            'message': ex.message,
	            'url': getLocationHref(),
	            'stack': stack
	        };
	    }

	    /**
	     * Computes stack trace information from the stacktrace property.
	     * Opera 10 uses this property.
	     * @param {Error} ex
	     * @return {?Object.<string, *>} Stack trace information.
	     */
	    function computeStackTraceFromStacktraceProp(ex) {
	        // Access and store the stacktrace property before doing ANYTHING
	        // else to it because Opera is not very good at providing it
	        // reliably in other circumstances.
	        var stacktrace = ex.stacktrace;
	        if (isUndefined(ex.stacktrace) || !ex.stacktrace) return;

	        var testRE = / line (\d+), column (\d+) in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\) in (.*):\s*$/i,
	            lines = stacktrace.split('\n'),
	            stack = [],
	            parts;

	        for (var i = 0, j = lines.length; i < j; i += 2) {
	            if ((parts = testRE.exec(lines[i]))) {
	                var element = {
	                    'line': +parts[1],
	                    'column': +parts[2],
	                    'func': parts[3] || parts[4],
	                    'args': parts[5] ? parts[5].split(',') : [],
	                    'url': parts[6]
	                };

	                if (!element.func && element.line) {
	                    element.func = guessFunctionName(element.url, element.line);
	                }
	                if (element.line) {
	                    try {
	                        element.context = gatherContext(element.url, element.line);
	                    } catch (exc) {}
	                }

	                if (!element.context) {
	                    element.context = [lines[i + 1]];
	                }

	                stack.push(element);
	            }
	        }

	        if (!stack.length) {
	            return null;
	        }

	        return {
	            'name': ex.name,
	            'message': ex.message,
	            'url': getLocationHref(),
	            'stack': stack
	        };
	    }

	    /**
	     * NOT TESTED.
	     * Computes stack trace information from an error message that includes
	     * the stack trace.
	     * Opera 9 and earlier use this method if the option to show stack
	     * traces is turned on in opera:config.
	     * @param {Error} ex
	     * @return {?Object.<string, *>} Stack information.
	     */
	    function computeStackTraceFromOperaMultiLineMessage(ex) {
	        // Opera includes a stack trace into the exception message. An example is:
	        //
	        // Statement on line 3: Undefined variable: undefinedFunc
	        // Backtrace:
	        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz
	        //         undefinedFunc(a);
	        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy
	        //           zzz(x, y, z);
	        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx
	        //           yyy(a, a, a);
	        //   Line 1 of function script
	        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }
	        //   ...

	        var lines = ex.message.split('\n');
	        if (lines.length < 4) {
	            return null;
	        }

	        var lineRE1 = /^\s*Line (\d+) of linked script ((?:file|https?)\S+)(?:: in function (\S+))?\s*$/i,
	            lineRE2 = /^\s*Line (\d+) of inline#(\d+) script in ((?:file|https?)\S+)(?:: in function (\S+))?\s*$/i,
	            lineRE3 = /^\s*Line (\d+) of function script\s*$/i,
	            stack = [],
	            scripts = document.getElementsByTagName('script'),
	            inlineScriptBlocks = [],
	            parts,
	            i,
	            len,
	            source;

	        for (i in scripts) {
	            if (hasKey(scripts, i) && !scripts[i].src) {
	                inlineScriptBlocks.push(scripts[i]);
	            }
	        }

	        for (i = 2, len = lines.length; i < len; i += 2) {
	            var item = null;
	            if ((parts = lineRE1.exec(lines[i]))) {
	                item = {
	                    'url': parts[2],
	                    'func': parts[3],
	                    'line': +parts[1]
	                };
	            } else if ((parts = lineRE2.exec(lines[i]))) {
	                item = {
	                    'url': parts[3],
	                    'func': parts[4]
	                };
	                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block
	                var script = inlineScriptBlocks[parts[2] - 1];
	                if (script) {
	                    source = getSource(item.url);
	                    if (source) {
	                        source = source.join('\n');
	                        var pos = source.indexOf(script.innerText);
	                        if (pos >= 0) {
	                            item.line = relativeLine + source.substring(0, pos).split('\n').length;
	                        }
	                    }
	                }
	            } else if ((parts = lineRE3.exec(lines[i]))) {
	                var url = window.location.href.replace(/#.*$/, ''),
	                    line = parts[1];
	                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[i + 1]));
	                source = findSourceInUrls(re, [url]);
	                item = {
	                    'url': url,
	                    'line': source ? source.line : line,
	                    'func': ''
	                };
	            }

	            if (item) {
	                if (!item.func) {
	                    item.func = guessFunctionName(item.url, item.line);
	                }
	                var context = gatherContext(item.url, item.line);
	                var midline = (context ? context[Math.floor(context.length / 2)] : null);
	                if (context && midline.replace(/^\s*/, '') === lines[i + 1].replace(/^\s*/, '')) {
	                    item.context = context;
	                } else {
	                    // if (context) alert("Context mismatch. Correct midline:\n" + lines[i+1] + "\n\nMidline:\n" + midline + "\n\nContext:\n" + context.join("\n") + "\n\nURL:\n" + item.url);
	                    item.context = [lines[i + 1]];
	                }
	                stack.push(item);
	            }
	        }
	        if (!stack.length) {
	            return null; // could not parse multiline exception message as Opera stack trace
	        }

	        return {
	            'name': ex.name,
	            'message': lines[0],
	            'url': getLocationHref(),
	            'stack': stack
	        };
	    }

	    /**
	     * Adds information about the first frame to incomplete stack traces.
	     * Safari and IE require this to get complete data on the first frame.
	     * @param {Object.<string, *>} stackInfo Stack trace information from
	     * one of the compute* methods.
	     * @param {string} url The URL of the script that caused an error.
	     * @param {(number|string)} lineNo The line number of the script that
	     * caused an error.
	     * @param {string=} message The error generated by the browser, which
	     * hopefully contains the name of the object that caused the error.
	     * @return {boolean} Whether or not the stack information was
	     * augmented.
	     */
	    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {
	        var initial = {
	            'url': url,
	            'line': lineNo
	        };

	        if (initial.url && initial.line) {
	            stackInfo.incomplete = false;

	            if (!initial.func) {
	                initial.func = guessFunctionName(initial.url, initial.line);
	            }

	            if (!initial.context) {
	                initial.context = gatherContext(initial.url, initial.line);
	            }

	            var reference = / '([^']+)' /.exec(message);
	            if (reference) {
	                initial.column = findSourceInLine(reference[1], initial.url, initial.line);
	            }

	            if (stackInfo.stack.length > 0) {
	                if (stackInfo.stack[0].url === initial.url) {
	                    if (stackInfo.stack[0].line === initial.line) {
	                        return false; // already in stack trace
	                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {
	                        stackInfo.stack[0].line = initial.line;
	                        stackInfo.stack[0].context = initial.context;
	                        return false;
	                    }
	                }
	            }

	            stackInfo.stack.unshift(initial);
	            stackInfo.partial = true;
	            return true;
	        } else {
	            stackInfo.incomplete = true;
	        }

	        return false;
	    }

	    /**
	     * Computes stack trace information by walking the arguments.caller
	     * chain at the time the exception occurred. This will cause earlier
	     * frames to be missed but is the only way to get any stack trace in
	     * Safari and IE. The top frame is restored by
	     * {@link augmentStackTraceWithInitialElement}.
	     * @param {Error} ex
	     * @return {?Object.<string, *>} Stack trace information.
	     */
	    function computeStackTraceByWalkingCallerChain(ex, depth) {
	        var functionName = /function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i,
	            stack = [],
	            funcs = {},
	            recursion = false,
	            parts,
	            item,
	            source;

	        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {
	            if (curr === computeStackTrace || curr === TraceKit.report) {
	                // console.log('skipping internal function');
	                continue;
	            }

	            item = {
	                'url': null,
	                'func': UNKNOWN_FUNCTION,
	                'line': null,
	                'column': null
	            };

	            if (curr.name) {
	                item.func = curr.name;
	            } else if ((parts = functionName.exec(curr.toString()))) {
	                item.func = parts[1];
	            }

	            if (typeof item.func === 'undefined') {
	              try {
	                item.func = parts.input.substring(0, parts.input.indexOf('{'));
	              } catch (e) { }
	            }

	            if ((source = findSourceByFunctionBody(curr))) {
	                item.url = source.url;
	                item.line = source.line;

	                if (item.func === UNKNOWN_FUNCTION) {
	                    item.func = guessFunctionName(item.url, item.line);
	                }

	                var reference = / '([^']+)' /.exec(ex.message || ex.description);
	                if (reference) {
	                    item.column = findSourceInLine(reference[1], source.url, source.line);
	                }
	            }

	            if (funcs['' + curr]) {
	                recursion = true;
	            }else{
	                funcs['' + curr] = true;
	            }

	            stack.push(item);
	        }

	        if (depth) {
	            // console.log('depth is ' + depth);
	            // console.log('stack is ' + stack.length);
	            stack.splice(0, depth);
	        }

	        var result = {
	            'name': ex.name,
	            'message': ex.message,
	            'url': getLocationHref(),
	            'stack': stack
	        };
	        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);
	        return result;
	    }

	    /**
	     * Computes a stack trace for an exception.
	     * @param {Error} ex
	     * @param {(string|number)=} depth
	     */
	    function computeStackTrace(ex, depth) {
	        var stack = null;
	        depth = (depth == null ? 0 : +depth);

	        try {
	            // This must be tried first because Opera 10 *destroys*
	            // its stacktrace property if you try to access the stack
	            // property first!!
	            stack = computeStackTraceFromStacktraceProp(ex);
	            if (stack) {
	                return stack;
	            }
	        } catch (e) {
	            if (TraceKit.debug) {
	                throw e;
	            }
	        }

	        try {
	            stack = computeStackTraceFromStackProp(ex);
	            if (stack) {
	                return stack;
	            }
	        } catch (e) {
	            if (TraceKit.debug) {
	                throw e;
	            }
	        }

	        try {
	            stack = computeStackTraceFromOperaMultiLineMessage(ex);
	            if (stack) {
	                return stack;
	            }
	        } catch (e) {
	            if (TraceKit.debug) {
	                throw e;
	            }
	        }

	        try {
	            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);
	            if (stack) {
	                return stack;
	            }
	        } catch (e) {
	            if (TraceKit.debug) {
	                throw e;
	            }
	        }

	        return {
	            'name': ex.name,
	            'message': ex.message,
	            'url': getLocationHref()
	        };
	    }

	    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;
	    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;
	    computeStackTrace.guessFunctionName = guessFunctionName;
	    computeStackTrace.gatherContext = gatherContext;

	    return computeStackTrace;
	}());

	'use strict';

	// First, check for JSON support
	// If there is no JSON, we no-op the core features of Raven
	// since JSON is required to encode the payload
	var _Raven = window.Raven,
	    hasJSON = !!(typeof JSON === 'object' && JSON.stringify),
	    // Raven can run in contexts where there's no document (react-native)
	    hasDocument = typeof document !== 'undefined',
	    lastCapturedException,
	    lastEventId,
	    globalServer,
	    globalKey,
	    globalProject,
	    globalContext = {},
	    globalOptions = {
	        logger: 'javascript',
	        ignoreErrors: [],
	        ignoreUrls: [],
	        whitelistUrls: [],
	        includePaths: [],
	        crossOrigin: 'anonymous',
	        collectWindowErrors: true,
	        maxMessageLength: 100
	    },
	    isRavenInstalled = false,
	    objectPrototype = Object.prototype,
	    // capture references to window.console *and* all its methods first
	    // before the console plugin has a chance to monkey patch
	    originalConsole = window.console || {},
	    originalConsoleMethods = {},
	    plugins = [],
	    startTime = now();

	for (var method in originalConsole) {
	  originalConsoleMethods[method] = originalConsole[method];
	}
	/*
	 * The core Raven singleton
	 *
	 * @this {Raven}
	 */
	var Raven = {
	    VERSION: '1.3.0',

	    debug: false,

	    /*
	     * Allow multiple versions of Raven to be installed.
	     * Strip Raven from the global context and returns the instance.
	     *
	     * @return {Raven}
	     */
	    noConflict: function() {
	        window.Raven = _Raven;
	        return Raven;
	    },

	    /*
	     * Configure Raven with a DSN and extra options
	     *
	     * @param {string} dsn The public Sentry DSN
	     * @param {object} options Optional set of of global options [optional]
	     * @return {Raven}
	     */
	    config: function(dsn, options) {
	        if (globalServer) {
	            logDebug('error', 'Error: Raven has already been configured');
	            return Raven;
	        }
	        if (!dsn) return Raven;

	        var uri = parseDSN(dsn),
	            lastSlash = uri.path.lastIndexOf('/'),
	            path = uri.path.substr(1, lastSlash);

	        // merge in options
	        if (options) {
	            each(options, function(key, value){
	                // tags and extra are special and need to be put into context
	                if (key == 'tags' || key == 'extra') {
	                    globalContext[key] = value;
	                } else {
	                    globalOptions[key] = value;
	                }
	            });
	        }

	        // "Script error." is hard coded into browsers for errors that it can't read.
	        // this is the result of a script being pulled in from an external domain and CORS.
	        globalOptions.ignoreErrors.push(/^Script error\.?$/);
	        globalOptions.ignoreErrors.push(/^Javascript error: Script error\.? on line 0$/);

	        // join regexp rules into one big rule
	        globalOptions.ignoreErrors = joinRegExp(globalOptions.ignoreErrors);
	        globalOptions.ignoreUrls = globalOptions.ignoreUrls.length ? joinRegExp(globalOptions.ignoreUrls) : false;
	        globalOptions.whitelistUrls = globalOptions.whitelistUrls.length ? joinRegExp(globalOptions.whitelistUrls) : false;
	        globalOptions.includePaths = joinRegExp(globalOptions.includePaths);

	        globalKey = uri.user;
	        globalProject = uri.path.substr(lastSlash + 1);

	        // assemble the endpoint from the uri pieces
	        globalServer = '//' + uri.host +
	                      (uri.port ? ':' + uri.port : '') +
	                      '/' + path + 'api/' + globalProject + '/store/';

	        if (uri.protocol) {
	            globalServer = uri.protocol + ':' + globalServer;
	        }

	        if (globalOptions.fetchContext) {
	            TraceKit.remoteFetching = true;
	        }

	        if (globalOptions.linesOfContext) {
	            TraceKit.linesOfContext = globalOptions.linesOfContext;
	        }

	        TraceKit.collectWindowErrors = !!globalOptions.collectWindowErrors;

	        // return for chaining
	        return Raven;
	    },

	    /*
	     * Installs a global window.onerror error handler
	     * to capture and report uncaught exceptions.
	     * At this point, install() is required to be called due
	     * to the way TraceKit is set up.
	     *
	     * @return {Raven}
	     */
	    install: function() {
	        if (isSetup() && !isRavenInstalled) {
	            TraceKit.report.subscribe(handleStackInfo);

	            // Install all of the plugins
	            each(plugins, function(_, plugin) {
	                plugin();
	            });

	            isRavenInstalled = true;
	        }

	        return Raven;
	    },

	    /*
	     * Wrap code within a context so Raven can capture errors
	     * reliably across domains that is executed immediately.
	     *
	     * @param {object} options A specific set of options for this context [optional]
	     * @param {function} func The callback to be immediately executed within the context
	     * @param {array} args An array of arguments to be called with the callback [optional]
	     */
	    context: function(options, func, args) {
	        if (isFunction(options)) {
	            args = func || [];
	            func = options;
	            options = undefined;
	        }

	        return Raven.wrap(options, func).apply(this, args);
	    },

	    /*
	     * Wrap code within a context and returns back a new function to be executed
	     *
	     * @param {object} options A specific set of options for this context [optional]
	     * @param {function} func The function to be wrapped in a new context
	     * @return {function} The newly wrapped functions with a context
	     */
	    wrap: function(options, func) {
	        // 1 argument has been passed, and it's not a function
	        // so just return it
	        if (isUndefined(func) && !isFunction(options)) {
	            return options;
	        }

	        // options is optional
	        if (isFunction(options)) {
	            func = options;
	            options = undefined;
	        }

	        // At this point, we've passed along 2 arguments, and the second one
	        // is not a function either, so we'll just return the second argument.
	        if (!isFunction(func)) {
	            return func;
	        }

	        // We don't wanna wrap it twice!
	        if (func.__raven__) {
	            return func;
	        }

	        function wrapped() {
	            var args = [], i = arguments.length,
	                deep = !options || options && options.deep !== false;
	            // Recursively wrap all of a function's arguments that are
	            // functions themselves.

	            while(i--) args[i] = deep ? Raven.wrap(options, arguments[i]) : arguments[i];

	            try {
	                /*jshint -W040*/
	                return func.apply(this, args);
	            } catch(e) {
	                Raven.captureException(e, options);
	                throw e;
	            }
	        }

	        // copy over properties of the old function
	        for (var property in func) {
	            if (hasKey(func, property)) {
	                wrapped[property] = func[property];
	            }
	        }
	        wrapped.prototype = func.prototype;

	        // Signal that this function has been wrapped already
	        // for both debugging and to prevent it to being wrapped twice
	        wrapped.__raven__ = true;
	        wrapped.__inner__ = func;

	        return wrapped;
	    },

	    /*
	     * Uninstalls the global error handler.
	     *
	     * @return {Raven}
	     */
	    uninstall: function() {
	        TraceKit.report.uninstall();
	        isRavenInstalled = false;

	        return Raven;
	    },

	    /*
	     * Manually capture an exception and send it over to Sentry
	     *
	     * @param {error} ex An exception to be logged
	     * @param {object} options A specific set of options for this error [optional]
	     * @return {Raven}
	     */
	    captureException: function(ex, options) {
	        // If not an Error is passed through, recall as a message instead
	        if (!isError(ex)) return Raven.captureMessage(ex, options);

	        // Store the raw exception object for potential debugging and introspection
	        lastCapturedException = ex;

	        // TraceKit.report will re-raise any exception passed to it,
	        // which means you have to wrap it in try/catch. Instead, we
	        // can wrap it here and only re-raise if TraceKit.report
	        // raises an exception different from the one we asked to
	        // report on.
	        try {
	            var stack = TraceKit.computeStackTrace(ex);
	            handleStackInfo(stack, options);
	        } catch(ex1) {
	            if(ex !== ex1) {
	                throw ex1;
	            }
	        }

	        return Raven;
	    },

	    /*
	     * Manually send a message to Sentry
	     *
	     * @param {string} msg A plain message to be captured in Sentry
	     * @param {object} options A specific set of options for this message [optional]
	     * @return {Raven}
	     */
	    captureMessage: function(msg, options) {
	        // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an
	        // early call; we'll error on the side of logging anything called before configuration since it's
	        // probably something you should see:
	        if (!!globalOptions.ignoreErrors.test && globalOptions.ignoreErrors.test(msg)) {
	            return;
	        }

	        // Fire away!
	        send(
	            objectMerge({
	                message: msg + ''  // Make sure it's actually a string
	            }, options)
	        );

	        return Raven;
	    },

	    addPlugin: function(plugin) {
	        plugins.push(plugin);
	        if (isRavenInstalled) plugin();
	        return Raven;
	    },

	    /*
	     * Set/clear a user to be sent along with the payload.
	     *
	     * @param {object} user An object representing user data [optional]
	     * @return {Raven}
	     */
	    setUserContext: function(user) {
	        // Intentionally do not merge here since that's an unexpected behavior.
	        globalContext.user = user;

	        return Raven;
	    },

	    /*
	     * Merge extra attributes to be sent along with the payload.
	     *
	     * @param {object} extra An object representing extra data [optional]
	     * @return {Raven}
	     */
	    setExtraContext: function(extra) {
	        mergeContext('extra', extra);

	        return Raven;
	    },

	    /*
	     * Merge tags to be sent along with the payload.
	     *
	     * @param {object} tags An object representing tags [optional]
	     * @return {Raven}
	     */
	    setTagsContext: function(tags) {
	        mergeContext('tags', tags);

	        return Raven;
	    },

	    /*
	     * Clear all of the context.
	     *
	     * @return {Raven}
	     */
	    clearContext: function() {
	        globalContext = {};

	        return Raven;
	    },

	    /*
	     * Get a copy of the current context. This cannot be mutated.
	     *
	     * @return {object} copy of context
	     */
	    getContext: function() {
	        // lol javascript
	        return JSON.parse(JSON.stringify(globalContext));
	    },

	    /*
	     * Set release version of application
	     *
	     * @param {string} release Typically something like a git SHA to identify version
	     * @return {Raven}
	     */
	    setRelease: function(release) {
	        globalOptions.release = release;

	        return Raven;
	    },

	    /*
	     * Set the dataCallback option
	     *
	     * @param {function} callback The callback to run which allows the
	     *                            data blob to be mutated before sending
	     * @return {Raven}
	     */
	    setDataCallback: function(callback) {
	        globalOptions.dataCallback = callback;

	        return Raven;
	    },

	    /*
	     * Set the shouldSendCallback option
	     *
	     * @param {function} callback The callback to run which allows
	     *                            introspecting the blob before sending
	     * @return {Raven}
	     */
	    setShouldSendCallback: function(callback) {
	        globalOptions.shouldSendCallback = callback;

	        return Raven;
	    },

	    /**
	     * Override the default HTTP transport mechanism that transmits data
	     * to the Sentry server.
	     *
	     * @param {function} transport Function invoked instead of the default
	     *                             `makeRequest` handler.
	     *
	     * @return {Raven}
	     */
	    setTransport: function(transport) {
	        globalOptions.transport = transport;

	        return Raven;
	    },

	    /*
	     * Get the latest raw exception that was captured by Raven.
	     *
	     * @return {error}
	     */
	    lastException: function() {
	        return lastCapturedException;
	    },

	    /*
	     * Get the last event id
	     *
	     * @return {string}
	     */
	    lastEventId: function() {
	        return lastEventId;
	    },

	    /*
	     * Determine if Raven is setup and ready to go.
	     *
	     * @return {boolean}
	     */
	    isSetup: function() {
	        return isSetup();
	    }
	};

	// Deprecations
	Raven.setUser = Raven.setUserContext;
	Raven.setReleaseContext = Raven.setRelease;

	function triggerEvent(eventType, options) {
	    // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it
	    var evt, key;

	    if (!hasDocument)
	        return;

	    options = options || {};

	    eventType = 'raven' + eventType.substr(0,1).toUpperCase() + eventType.substr(1);

	    if (document.createEvent) {
	        evt = document.createEvent('HTMLEvents');
	        evt.initEvent(eventType, true, true);
	    } else {
	        evt = document.createEventObject();
	        evt.eventType = eventType;
	    }

	    for (key in options) if (hasKey(options, key)) {
	        evt[key] = options[key];
	    }

	    if (document.createEvent) {
	        // IE9 if standards
	        document.dispatchEvent(evt);
	    } else {
	        // IE8 regardless of Quirks or Standards
	        // IE9 if quirks
	        try {
	            document.fireEvent('on' + evt.eventType.toLowerCase(), evt);
	        } catch(e) {}
	    }
	}

	var dsnKeys = 'source protocol user pass host port path'.split(' '),
	    dsnPattern = /^(?:(\w+):)?\/\/(?:(\w+)(:\w+)?@)?([\w\.-]+)(?::(\d+))?(\/.*)/;

	function RavenConfigError(message) {
	    this.name = 'RavenConfigError';
	    this.message = message;
	}
	RavenConfigError.prototype = new Error();
	RavenConfigError.prototype.constructor = RavenConfigError;

	/**** Private functions ****/
	function parseDSN(str) {
	    var m = dsnPattern.exec(str),
	        dsn = {},
	        i = 7;

	    try {
	        while (i--) dsn[dsnKeys[i]] = m[i] || '';
	    } catch(e) {
	        throw new RavenConfigError('Invalid DSN: ' + str);
	    }

	    if (dsn.pass)
	        throw new RavenConfigError('Do not specify your private key in the DSN!');

	    return dsn;
	}

	function isUndefined(what) {
	    return what === void 0;
	}

	function isFunction(what) {
	    return typeof what === 'function';
	}

	function isString(what) {
	    return objectPrototype.toString.call(what) === '[object String]';
	}

	function isObject(what) {
	    return typeof what === 'object' && what !== null;
	}

	function isEmptyObject(what) {
	    for (var k in what) return false;
	    return true;
	}

	// Sorta yanked from https://github.com/joyent/node/blob/aa3b4b4/lib/util.js#L560
	// with some tiny modifications
	function isError(what) {
	    return isObject(what) &&
	        objectPrototype.toString.call(what) === '[object Error]' ||
	        what instanceof Error;
	}

	/**
	 * hasKey, a better form of hasOwnProperty
	 * Example: hasKey(MainHostObject, property) === true/false
	 *
	 * @param {Object} host object to check property
	 * @param {string} key to check
	 */
	function hasKey(object, key) {
	    return objectPrototype.hasOwnProperty.call(object, key);
	}

	function each(obj, callback) {
	    var i, j;

	    if (isUndefined(obj.length)) {
	        for (i in obj) {
	            if (hasKey(obj, i)) {
	                callback.call(null, i, obj[i]);
	            }
	        }
	    } else {
	        j = obj.length;
	        if (j) {
	            for (i = 0; i < j; i++) {
	                callback.call(null, i, obj[i]);
	            }
	        }
	    }
	}

	function handleStackInfo(stackInfo, options) {
	    var frames = [];

	    if (stackInfo.stack && stackInfo.stack.length) {
	        each(stackInfo.stack, function(i, stack) {
	            var frame = normalizeFrame(stack);
	            if (frame) {
	                frames.push(frame);
	            }
	        });
	    }

	    triggerEvent('handle', {
	        stackInfo: stackInfo,
	        options: options
	    });

	    processException(
	        stackInfo.name,
	        stackInfo.message,
	        stackInfo.url,
	        stackInfo.lineno,
	        frames,
	        options
	    );
	}

	function normalizeFrame(frame) {
	    if (!frame.url) return;

	    // normalize the frames data
	    var normalized = {
	        filename:   frame.url,
	        lineno:     frame.line,
	        colno:      frame.column,
	        'function': frame.func || '?'
	    }, context = extractContextFromFrame(frame), i;

	    if (context) {
	        var keys = ['pre_context', 'context_line', 'post_context'];
	        i = 3;
	        while (i--) normalized[keys[i]] = context[i];
	    }

	    normalized.in_app = !( // determine if an exception came from outside of our app
	        // first we check the global includePaths list.
	        (!!globalOptions.includePaths.test && !globalOptions.includePaths.test(normalized.filename)) ||
	        // Now we check for fun, if the function name is Raven or TraceKit
	        /(Raven|TraceKit)\./.test(normalized['function']) ||
	        // finally, we do a last ditch effort and check for raven.min.js
	        /raven\.(min\.)?js$/.test(normalized.filename)
	    );

	    return normalized;
	}

	function extractContextFromFrame(frame) {
	    // immediately check if we should even attempt to parse a context
	    if (!frame.context || !globalOptions.fetchContext) return;

	    var context = frame.context,
	        pivot = ~~(context.length / 2),
	        i = context.length, isMinified = false;

	    while (i--) {
	        // We're making a guess to see if the source is minified or not.
	        // To do that, we make the assumption if *any* of the lines passed
	        // in are greater than 300 characters long, we bail.
	        // Sentry will see that there isn't a context
	        if (context[i].length > 300) {
	            isMinified = true;
	            break;
	        }
	    }

	    if (isMinified) {
	        // The source is minified and we don't know which column. Fuck it.
	        if (isUndefined(frame.column)) return;

	        // If the source is minified and has a frame column
	        // we take a chunk of the offending line to hopefully shed some light
	        return [
	            [],  // no pre_context
	            context[pivot].substr(frame.column, 50), // grab 50 characters, starting at the offending column
	            []   // no post_context
	        ];
	    }

	    return [
	        context.slice(0, pivot),    // pre_context
	        context[pivot],             // context_line
	        context.slice(pivot + 1)    // post_context
	    ];
	}

	function processException(type, message, fileurl, lineno, frames, options) {
	    var stacktrace, i, fullMessage;

	    if (!!globalOptions.ignoreErrors.test && globalOptions.ignoreErrors.test(message)) return;

	    message += '';
	    fullMessage = type + ': ' + message;

	    if (frames && frames.length) {
	        fileurl = frames[0].filename || fileurl;
	        // Sentry expects frames oldest to newest
	        // and JS sends them as newest to oldest
	        frames.reverse();
	        stacktrace = {frames: frames};
	    } else if (fileurl) {
	        stacktrace = {
	            frames: [{
	                filename: fileurl,
	                lineno: lineno,
	                in_app: true
	            }]
	        };
	    }

	    if (!!globalOptions.ignoreUrls.test && globalOptions.ignoreUrls.test(fileurl)) return;
	    if (!!globalOptions.whitelistUrls.test && !globalOptions.whitelistUrls.test(fileurl)) return;

	    // Fire away!
	    send(
	        objectMerge({
	            // sentry.interfaces.Exception
	            exception: {
	                values: [{
	                    type: type,
	                    value: message,
	                    stacktrace: stacktrace
	                }]
	            },
	            culprit: fileurl,
	            message: fullMessage
	        }, options)
	    );
	}

	function objectMerge(obj1, obj2) {
	    if (!obj2) {
	        return obj1;
	    }
	    each(obj2, function(key, value){
	        obj1[key] = value;
	    });
	    return obj1;
	}

	function truncate(str, max) {
	    return str.length <= max ? str : str.substr(0, max) + '\u2026';
	}

	function trimPacket(data) {
	    // For now, we only want to truncate the two different messages
	    // but this could/should be expanded to just trim everything
	    var max = globalOptions.maxMessageLength;
	    data.message = truncate(data.message, max);
	    if (data.exception) {
	        var exception = data.exception.values[0];
	        exception.value = truncate(exception.value, max);
	    }

	    return data;
	}

	function now() {
	    return +new Date();
	}

	function getHttpData() {
	    if (!hasDocument || !document.location || !document.location.href) {
	        return;
	    }

	    var httpData = {
	        headers: {
	            'User-Agent': navigator.userAgent
	        }
	    };

	    httpData.url = document.location.href;

	    if (document.referrer) {
	        httpData.headers.Referer = document.referrer;
	    }

	    return httpData;
	}

	function send(data) {
	    var baseData = {
	        project: globalProject,
	        logger: globalOptions.logger,
	        platform: 'javascript'
	    }, httpData = getHttpData();

	    if (httpData) {
	        baseData.request = httpData;
	    }

	    data = objectMerge(baseData, data);

	    // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge
	    data.tags = objectMerge(objectMerge({}, globalContext.tags), data.tags);
	    data.extra = objectMerge(objectMerge({}, globalContext.extra), data.extra);

	    // Send along our own collected metadata with extra
	    data.extra['session:duration'] = now() - startTime;

	    // If there are no tags/extra, strip the key from the payload alltogther.
	    if (isEmptyObject(data.tags)) delete data.tags;

	    if (globalContext.user) {
	        // sentry.interfaces.User
	        data.user = globalContext.user;
	    }

	    // Include the release if it's defined in globalOptions
	    if (globalOptions.release) data.release = globalOptions.release;
	    // Include server_name if it's defined in globalOptions
	    if (globalOptions.serverName) data.server_name = globalOptions.serverName;

	    if (isFunction(globalOptions.dataCallback)) {
	        data = globalOptions.dataCallback(data) || data;
	    }

	    // Why??????????
	    if (!data || isEmptyObject(data)) {
	        return;
	    }

	    // Check if the request should be filtered or not
	    if (isFunction(globalOptions.shouldSendCallback) && !globalOptions.shouldSendCallback(data)) {
	        return;
	    }

	    // Send along an event_id if not explicitly passed.
	    // This event_id can be used to reference the error within Sentry itself.
	    // Set lastEventId after we know the error should actually be sent
	    lastEventId = data.event_id || (data.event_id = uuid4());

	    // Try and clean up the packet before sending by truncating long values
	    data = trimPacket(data);

	    logDebug('debug', 'Raven about to send:', data);

	    if (!isSetup()) return;

	    (globalOptions.transport || makeRequest)({
	        url: globalServer,
	        auth: {
	            sentry_version: '7',
	            sentry_client: 'raven-js/' + Raven.VERSION,
	            sentry_key: globalKey
	        },
	        data: data,
	        options: globalOptions,
	        onSuccess: function success() {
	            triggerEvent('success', {
	                data: data,
	                src: globalServer
	            });
	        },
	        onError: function failure() {
	            triggerEvent('failure', {
	                data: data,
	                src: globalServer
	            });
	        }
	    });
	}

	function makeRequest(opts) {
	    // Tack on sentry_data to auth options, which get urlencoded
	    opts.auth.sentry_data = JSON.stringify(opts.data);

	    var img = newImage(),
	        src = opts.url + '?' + urlencode(opts.auth),
	        crossOrigin = opts.options.crossOrigin;

	    if (crossOrigin || crossOrigin === '') {
	        img.crossOrigin = crossOrigin;
	    }
	    img.onload = opts.onSuccess;
	    img.onerror = img.onabort = opts.onError;
	    img.src = src;
	}

	// Note: this is shitty, but I can't figure out how to get
	// sinon to stub document.createElement without breaking everything
	// so this wrapper is just so I can stub it for tests.
	function newImage() {
	    return document.createElement('img');
	}

	var ravenNotConfiguredError;

	function isSetup() {
	    if (!hasJSON) return false;  // needs JSON support
	    if (!globalServer) {
	        if (!ravenNotConfiguredError)
	          logDebug('error', 'Error: Raven has not been configured.');
	        ravenNotConfiguredError = true;
	        return false;
	    }
	    return true;
	}

	function joinRegExp(patterns) {
	    // Combine an array of regular expressions and strings into one large regexp
	    // Be mad.
	    var sources = [],
	        i = 0, len = patterns.length,
	        pattern;

	    for (; i < len; i++) {
	        pattern = patterns[i];
	        if (isString(pattern)) {
	            // If it's a string, we need to escape it
	            // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
	            sources.push(pattern.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1"));
	        } else if (pattern && pattern.source) {
	            // If it's a regexp already, we want to extract the source
	            sources.push(pattern.source);
	        }
	        // Intentionally skip other cases
	    }
	    return new RegExp(sources.join('|'), 'i');
	}

	function uuid4() {
	    var crypto = window.crypto || window.msCrypto;

	    if (!isUndefined(crypto) && crypto.getRandomValues) {
	        // Use window.crypto API if available
	        var arr = new Uint16Array(8);
	        crypto.getRandomValues(arr);

	        // set 4 in byte 7
	        arr[3] = arr[3] & 0xFFF | 0x4000;
	        // set 2 most significant bits of byte 9 to '10'
	        arr[4] = arr[4] & 0x3FFF | 0x8000;

	        var pad = function(num) {
	            var v = num.toString(16);
	            while (v.length < 4) {
	                v = '0' + v;
	            }
	            return v;
	        };

	        return (pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) +
	        pad(arr[5]) + pad(arr[6]) + pad(arr[7]));
	    } else {
	        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
	        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
	            var r = Math.random()*16|0,
	                v = c == 'x' ? r : (r&0x3|0x8);
	            return v.toString(16);
	        });
	    }
	}

	function logDebug(level) {
	    if (originalConsoleMethods[level] && Raven.debug) {
	        // _slice is coming from vendor/TraceKit/tracekit.js
	        // so it's accessible globally
	        originalConsoleMethods[level].apply(originalConsole, _slice.call(arguments, 1));
	    }
	}

	function afterLoad() {
	    // Attempt to initialize Raven on load
	    var RavenConfig = window.RavenConfig;
	    if (RavenConfig) {
	        Raven.config(RavenConfig.dsn, RavenConfig.config).install();
	    }
	}

	function urlencode(o) {
	    var pairs = [];
	    each(o, function(key, value) {
	        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
	    });
	    return pairs.join('&');
	}

	function mergeContext(key, context) {
	    if (isUndefined(context)) {
	        delete globalContext[key];
	    } else {
	        globalContext[key] = objectMerge(globalContext[key] || {}, context);
	    }
	}

	afterLoad();

	// This is being exposed no matter what because there are too many weird
	// usecases for how people use Raven. If this is really a problem, I'm sorry.
	window.Raven = Raven;

	// Expose Raven to the world
	if (true) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Raven;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module === 'object') {
	    // browserify
	    module.exports = Raven;
	} else if (typeof exports === 'object') {
	    // CommonJS
	    exports = Raven;
	}

	})(typeof window !== 'undefined' ? window : this);


/***/ },
/* 237 */
/***/ function(module, exports) {

	var LocalChanges = Backbone.Model.extend({
	    /**
	     * Functions:
	     * add an unsynced change
	     * check for conflicts - this will show a modal even if a single server change has a conflict. if not, callback
	     */

	    defaults: function() {
	        return {
	            syncEnabled: true
	        }
	    },

	    initialize: function() {
	        pm.mediator.on("setSync", this.setSync, this);
	        this.currentUnsynced = [];

	        this.serverChangesReadyToBeSaved = [];

	        pm.mediator.on("addUnsyncedChange", this.onAddUnsyncedChange, this);
	        pm.mediator.on("resolveConflicts", this.onResolveConflicts, this);
	        pm.mediator.on("singleUnsyncedChangeSynced", this.onUnsyncedChangeSynced, this);
	        pm.mediator.on("beginUnsyncedStream", this.onBeginStream, this);

	        pm.mediator.on("conflictsResolved", this.onConflictsResolved, this);
	        pm.mediator.on("commitTransaction", this.onCommitTransaction, this);
	        pm.mediator.on("singleClientChangeSent", this.onSingleClientChangeSent, this);
	        pm.mediator.on("deleteSyncedData", this.deleteSyncedData, this);
	        pm.mediator.on("deleteUnsyncedData", this.onDeleteUnsyncedData, this);
	        pm.mediator.on("syncAllObjects", this.syncAllObjects, this);
	        pm.mediator.on("syncAllRequestsFix", this.syncAllRequestsFix, this);
	        this.syncEnabled = this.get("syncEnabled");
	        this.loadUnsyncedChanges();
	    },

	    setSync: function(syncEnabled) {
	        this.syncEnabled = syncEnabled;
	    },

	    onDeleteUnsyncedData: function() {
	        pm.indexedDB.clearUnsyncedChanges();
	        this.currentUnsynced = [];
	    },


	    deleteSyncedData: function() {
	        //delete all unsynced changes -
	        pm.indexedDB.clearUnsyncedChanges();
	        this.currentUnsynced = [];

	        //clear all synced changes
	        //all collections, envs, requests, responses, systemValues
	        pm.indexedDB.deleteAllCollections(function() {
	            pm.collections.reset();
	        });

	        pm.indexedDB.deleteEachCollectionRequest();

	        pm.indexedDB.environments.deleteAllEnvironments(function() {
	            pm.environments.reset();
	        });
	        pm.indexedDB.deleteAllHistoryRequests(function() {
	            pm.history.reset();
	        });

	        pm.indexedDB.subscriptions.deleteAllSubscriptions(function() {
	            pm.subscriptionManger.clearSubscriptions();
	        });

	        pm.indexedDB.headerPresets.deleteAllHeaderPresets(function() {
	            pm.headerPresets.reset()
	        });

	        pm.indexedDB.testRuns.deleteAllTestRuns(function() {
	            var message = {
	                "id": "test_runner",
	                "event": "allRunsDeleted",
	                "object": {}
	            };

	            pm.appWindow.sendMessageWrapper(message);
	        });

	        pm.indexedDB.tabs.deleteAllTabs();

	        //delete globals
	        var blankGlobals = {
	            'globals': JSON.stringify([])
	        };
	        pm.storage.setValue(blankGlobals, function() {
	            pm.globals.set({
	                "globals": []
	            });
	            pm.appWindow.trigger("sendMessageObject", "updatedGlobals", []);
	        });

	        pm.indexedDB.deleteAllSince(function() {});

	        pm.indexedDB.updateLastSynced(1, function() {});

	        pm.syncManager.retrySentChangesInterval = null;

	        pm.mediator.trigger("clearSystemValues");
	    },

	    //load unsynced changes from DB
	    loadUnsyncedChanges: function() {
	        if (!this.syncEnabled) return;
	        var oldThis = this;
	        pm.syncLogger.log(new Error(), "Loading unsynced changes from DB...");
	        pm.indexedDB.getUnsyncedChanges(function(changes) {
	            pm.syncLogger.log(new Error(), "DB returned " + changes.length + " unsynced changes.");
	            oldThis.currentUnsynced = changes;
	        });
	    },

	    onBeginStream: function(realtime, stream, deleteFirstChange, forceAllChanges) {
	        pm.syncManager.inBulkOperation = true;
	        this.onUnsyncedChangeSynced(null, realtime, stream, deleteFirstChange, forceAllChanges);
	    },

	    /**
	     * Is triggered when the server responds to a request. If the request came from the unsynced queue, the next one must be triggered
	     * unsyncedKey is the change that triggered this
	     * realtime=true if the change DID NOT come from the unsynced queue
	     * stream is the stream of the change that triggered this
	     */
	    onUnsyncedChangeSynced: function(unsyncedKey, realtime, stream, deleteFirstChange, forceAllChanges) {
	        if (typeof deleteFirstChange === "undefined") {
	            deleteFirstChange = true;
	        }

	        if (typeof forceAllChanges === "undefined") {
	            forceAllChanges = false;
	        }

	        //res is the change that caused this

	        //if this is true, set clearChange = true for all changes
	        pm.syncManager.forceAllChanges = forceAllChanges;
	        setTimeout(function() {
	            pm.syncManager.forceAllChanges = false;
	        }, 200000);

	        var oldThis = this;

	        if (realtime === true) {
	            //do not delete the change - nothing to be deleted
	        } else {
	            var currentUnsynced = this.currentUnsynced;
	            var idxToRemove = -1;
	            var isChangesetForStream = false;

	            if (!currentUnsynced || currentUnsynced.length == 0) {
	                pm.syncManager.forceAllChanges = false;
	                pm.syncManager.sendingAllClientData = false;
	                pm.syncManager.inBulkOperation = false;
	                pm.syncManager.trigger("syncFinished");

	                if (pm.syncManager.doIntegrityCheck) {
	                    setTimeout(function() {
	                        pm.syncManager.startIntegrityCheck();
	                        pm.syncManager.doIntegrityCheck = false;
	                    }, 500);
	                }
	                //nothing else do do. Nothing in unsynced changes
	                pm.mediator.trigger("syncClientChanges", currentUnsynced, null);
	                return;

	            }

	            if (deleteFirstChange) {
	                var changeToDelete = null;

	                //get index (in the currentUnsynced array) of the change to be deleted
	                for (var i = 0; i < currentUnsynced.length; i++) {
	                    if ((!unsyncedKey || currentUnsynced[i].id == unsyncedKey)) {
	                        idxToRemove = i;
	                        isChangesetForStream = true;
	                        break;
	                    }
	                }
	                if (idxToRemove !== -1) {
	                    changeToDelete = currentUnsynced[idxToRemove];
	                    oldThis.deleteUnsyncedChange(changeToDelete.id);
	                    currentUnsynced = this.currentUnsynced;
	                }

	                if (currentUnsynced.length == 0) {
	                    pm.syncManager.forceAllChanges = false;
	                    pm.syncManager.sendingAllClientData = false;
	                    pm.syncManager.inBulkOperation = false;
	                    pm.syncManager.trigger("syncFinished");
	                }

	                oldThis.currentUnsynced = currentUnsynced;
	                pm.mediator.trigger("syncClientChanges", currentUnsynced, stream);
	            } else {
	                pm.mediator.trigger("syncClientChanges", currentUnsynced, stream);
	            }
	        }
	    },

	    //This is called when all changesets of a collection have been added - not commited when offline
	    onCommitTransaction: function(stream) {
	        if (!this.syncEnabled) return;

	        //if a stream is already being processed
	        if (pm.syncManager.inBulkOperation) return;


	        if (pm.syncManager.get("loggedIn") === true && pm.syncManager.get("allClientChangesSynced") === true) {
	            //console.log(pm.syncLogger.getLogDate() + " - " +"Committing...");
	            pm.syncManager.inBulkOperation = true;
	            pm.mediator.trigger("syncClientChanges", this.currentUnsynced, stream);
	        }
	    },

	    getUnsyncedChangeId: function(entity, verb, data, meta) {
	        var entityKey;
	        var stream;

	        //for transfer changes, there won't be any data. The meta field will hold the request's id
	        if (verb === "transfer" || verb === "unsubscribe") {
	            entityKey = entity + ":" + meta;
	            stream = meta;
	        } else {
	            if (!data.id && verb === "subscribe") {
	                data.id = data.collectionId;
	            }
	            entityKey = entity + ":" + data.id;
	            stream = data.id;
	        }

	        if (verb === "history") {
	            stream = null;
	        }

	        //user's don't need an ID - it's determined by the socket on the server side
	        if (entity === "user") {
	            entityKey = "user:NOID";
	            stream = null;
	        }

	        if (verb === "transfer") {
	            entityKey += ":transfer";
	            data["id"] = meta;
	            stream = meta;
	        }

	        if (verb === "unsubscribe") {
	            entityKey += ":unsubscribe";
	            data["id"] = meta;
	            stream = meta;
	        }

	        if (verb === "importCollection" || verb==="importFolder") {
	            entityKey += ":import";
	            //stream += ":import";
	        }

	        if (!stream && data.collectionId) {
	            stream = data.collectionId;
	        }

	        return {
	            stream: stream,
	            entityKey: entityKey
	        };
	    },

	    /**
		* @description Called when the syncManager is not connected to the socket, and the change must be saved locally
		* @param entity
		* @param verb
		* @param data
		* @param meta
		* @param addToTop - if explicitly true, the new change is added to the top of the queue
		*/
	    onAddUnsyncedChange: function(entity, verb, data, meta, sentOnce, addToTop) {
	        if (typeof addToTop === "undefined") {
	            addToTop = false;
	        }
	        var timestamp = (new Date().getTime());
	        var entityKey = this.getUnsyncedChangeId(entity, verb, data, meta).entityKey;
	        var currentUnsynced = this.currentUnsynced;
	        var oldThis = this;

	        if (verb === "transfer") {
	            data["id"] = meta;
	        }
	        if (verb === "unsubscribe") {
	            data["id"] = meta;
	        }

	        var changeset = {
	            id: entityKey,
	            entity: entity,
	            verb: verb,
	            data: data,
	            timestamp: timestamp,
	            sentOnce: sentOnce
	        };


	        var mergeChanges = true;

	        if (verb == "transfer" && this._checkForTransferAfterCreate(entityKey, data) == -2) {
	            pm.syncLogger.log(new Error(), "Transfer merged with create...no further action required");
	            return;
	        }

	        if (verb == "destroy" && this._checkForDeleteAfterTransfer(entityKey, data) == -2) {
	            pm.syncLogger.log(new Error(), "Delete after transfer. Transfer change deleted...the delete change will be added now");
	        }

	        var changeIndex = this._findIndex(currentUnsynced, function(change) {
	            return (change != undefined && change.id === entityKey)
	        });


	        //no change with same entityId
	        if (changeIndex == -1) {
	            var unsyncedChange = changeset;
	            currentUnsynced.push(unsyncedChange);
	            pm.indexedDB.addUnsyncedChange(unsyncedChange, function() {
	            });
	            oldThis.currentUnsynced = currentUnsynced;
	        } else {
	            //go through the data properties of the existing changeset and merge data
	            var currentObj = currentUnsynced[changeIndex];
	            var newVerb = this._getNewVerbAndResolveConflicts(verb, currentObj.verb, entityKey, currentUnsynced, currentObj, changeset);
	            if (newVerb == -1) {
	                pm.syncLogger.log(new Error(), "Changeset deleted");
	                return;
	            }
	            _.extend(currentObj.data, changeset.data);

	            currentObj.verb = newVerb;
	            currentUnsynced[changeIndex] = currentObj;
	            changeset.data = currentObj.data;
	            changeset.verb = currentObj.verb;
	            changeset.sentOnce = currentObj.sentOnce || sentOnce;

	            if (sentOnce) {
	                pm.syncLogger.error("Failed Unsynced changed READDED");
	                //this change was already sent once and failed
	                var userId = pm.user.id;
	                var version = pm.getVersion();
	                pm.api.sendUnsyncedChanges(userId, version, JSON.stringify(changeset), function() {
	                    console.log("Failed unsyncedchange sent to godserver");
	                });
	            }

	            var unsyncedChange = changeset;
	            pm.indexedDB.updateUnsyncedChange(unsyncedChange, function() {
	            });
	            oldThis.currentUnsynced = currentUnsynced;
	        }
	    },

	    _checkForTransferAfterCreate: function(entityKey, data) {
	        var parts = entityKey.split(":");
	        var currentUnsynced = this.currentUnsynced;
	        var oldThis = this;
	        parts.pop();
	        var oldKey = parts.join(":");
	        var changeIndex = this._findIndex(currentUnsynced, function(change) {
	            return (change != undefined && change.verb == "create" && change.id === oldKey)
	        });

	        if (changeIndex !== -1) {
	            var createChange = currentUnsynced[changeIndex];
	            //copy the transfer object into the create object
	            var transferObject = {};
	            var newTimestamp = (new Date().getTime());
	            if (data.to.model == "collection") {
	                transferObject["collection"] = data.to.model_id;
	                transferObject["folder"] = null;
	            } else if (data.to.model == "folder") {
	                transferObject["folder"] = data.to.model_id;
	            } else {
	                pm.syncLogger.error("Fatal Error: has to transfer to a collection or folder. Tried to transfer to: " + data.to.model);
	            }
	            _.extend(createChange.data, transferObject);
	            var changeset = {
	                id: oldKey,
	                entity: "request",
	                verb: "create",
	                data: createChange.data,
	                timestamp: newTimestamp
	            };

	            oldThis._updateUnsyncedChange(createChange.id, changeset);
	            return -2;
	        }
	    },

	    _checkForDeleteAfterTransfer: function(entityKey, data) {
	        var oldKey = entityKey + ":transfer";
	        var currentUnsynced = this.currentUnsynced;
	        var oldThis = this;

	        var changeIndex = this._findIndex(currentUnsynced, function(change) {
	            return (change != undefined && change.verb == "transfer" && change.id === oldKey)
	        });
	        if (changeIndex != -1) {
	            var transferChange = currentUnsynced[changeIndex];
	            //copy the transfer object into the create object
	            this.deleteUnsyncedChange(oldKey);
	            //-2 means the transfer request was deleted
	            return -2;
	        }
	    },

	    getUnsyncedChangesetIdsForCollection: function(cid) {
	        return _.map(pm.localChanges.currentUnsynced, function(changeset) {
	            if(changeset.data &&
	                (changeset.data.collection==cid || changeset.data.collectionId==cid)
	            ) {
	                return changeset.id
	            }
	        });
	    },

	    getUnsyncedChangesetIdsForFolder: function(fid) {
	        return _.map(pm.localChanges.currentUnsynced, function(changeset) {
	            if(changeset.data &&
	                (changeset.data.folder==fid ||
	                changeset.data.folderId==fid)
	            ) {
	                return changeset.id
	            }
	        });
	    },

	    deleteChangesForCollection: function(cid) {
	        var changes = this.getUnsyncedChangesetIdsForCollection(cid);
	        var oldThis = this;
	        _.each(changes, function(changeId) {
	            oldThis.deleteUnsyncedChange(changeId);
	        });
	    },

	    deleteChangesForFolder: function(fid) {
	        var changes = this.getUnsyncedChangesetIdsForFolder(fid);
	        var oldThis = this;
	        _.each(changes, function(changeId) {
	            oldThis.deleteUnsyncedChange(changeId);
	        });
	    },

	    _findIndex: function(arr, cond) {
	        var i, x;
	        var len = arr.length;
	        for (var i = 0; i < len; i++) {
	            x = arr[i];
	            if (cond(x)) return parseInt(i);
	        }
	        return -1;
	    },

	    _getNewVerbAndResolveConflicts: function(newVerb, oldVerb, id, currentUnsynced, changeset, newObject) {
	        //created/updated/destroyed
	        var oldThis = this;
	        if (newVerb === "create") {
	            return "create";
	        }
	        if (newVerb === "destroy") {
	            if (oldVerb === "create") {
	                //The old entry SHOULD BE REMOVED FROM UNSYNCED TABLE
	                //new entry should be discarded
	                this.deleteUnsyncedChange(id);

	                //if there are entries in the unsynced change table with the same folderId or collectionId as id, they should be deleted too
	                var actualId = (id.indexOf(":") === -1) ? id : id.split(":")[1];
	                if (changeset.entity === "collection") //or model
	                {
	                    for (var i = 0; i < currentUnsynced.length; i++) {
	                        if (currentUnsynced[i].data.collection === actualId) {
	                            this.deleteUnsyncedChange(currentUnsynced[i].id);
	                            currentUnsynced = pm.localChanges.currentUnsynced;
	                            i--;
	                        }
	                    }
	                } else if (changeset.entity === "folder") //or model
	                {
	                    for (var i = 0; i < currentUnsynced.length; i++) {
	                        if (currentUnsynced[i].data.folder === actualId) {
	                            this.deleteUnsyncedChange(currentUnsynced[i].id);
	                            currentUnsynced = pm.localChanges.currentUnsynced;
	                            i--;
	                        }
	                    }
	                }

	                return -1;
	            }
	            if (oldVerb === "update" || oldVerb === "transfer") {
	                return newVerb;
	            }
	        }
	        if (newVerb === "update") {
	            if (oldVerb === "create") {
	                return "create";
	            }
	            if (oldVerb === "update") {
	                return "update";
	            }
	            if (oldVerb === "destroy") {
	                pm.syncLogger.error("Fatal Error: Cannot update deleted object");
	                return;
	            }
	        }
	        if (newVerb === "transfer") {
	            if (oldVerb !== "transfer") {
	                pm.syncLogger.error("FATAL error - One transfer, and one create/update entry cannot have the same id");
	                return;
	            }
	            return newVerb;
	        }
	    },

	    /**
	     * Called when server changes are queued, and have to be conflict-resolved with current unsynced changes
	     */
	    onResolveConflicts: function(serverChanges) {
	        if (!this.syncEnabled) return;

	        //here, server queue represents all server changes
	        //for each change, add it to an array, setting conflict=true if there is a conflict
	        if (serverChanges.length === 0) {
	            //no more server changes to process
	            pm.mediator.trigger("syncClientChanges", this.currentUnsynced, null);
	            return;
	        }

	        var anyConflict = false;
	        var firstChange;
	        while (serverChanges.length !== 0 && (firstChange = serverChanges.shift())) {
	            pm.syncLogger.log(new Error(), "Server change to process: ");
	            pm.syncLogger.log(new Error(), firstChange);


	            if (firstChange.meta.model === "user") {
	                firstChange.model_id = "NOID";
	            }
	            var changesetId = firstChange.meta.model + ":" + firstChange.model_id;
	            if (firstChange.meta.action === "transfer") {
	                changesetId += ":transfer";
	            }



	            if(firstChange.meta.action==="create" && firstChange.meta.model==="collection") {
	                var numUnsynced = this.currentUnsynced.length;
	                for(var i=0;i<numUnsynced;i++) {
	                    var cc = this.currentUnsynced[i];
	                    if(cc.verb==="importCollection" && cc.data.id===firstChange.model_id) {
	                        pm.syncManager.addCollectionsToForceSync(cc.data.id);
	                        this.deleteUnsyncedChange(this.currentUnsynced[i].id);
	                        numUnsynced--;
	                        i--;
	                    }
	                }
	            }


	            //check for conflicts
	            var conflictingChange = this._findConflictingLocalChange(changesetId);

	            if(conflictingChange) {
	                /* -- FOR POSTMAN DEMO COLLECTION CONFLICTS, DELETE LOCAL CHANGES AND DON'T SHOW CONFLICTS--*/

	                if((postman_predef_collections.indexOf(conflictingChange.data.collection) !== -1)) { //for conflicts in the folders, requests, or responses
	                    this.deleteUnsyncedChange(conflictingChange.id);
	                    this.deleteChangesForCollection(conflictingChange.data.collection);
	                    pm.collections.deleteCollectionFromDataStoreWithOptSync(conflictingChange.data.collection, false, false, function() {});
	                    conflictingChange = null;
	                }

	                else if((postman_predef_collections.indexOf(conflictingChange.data.id) !== -1)) { //for conflicts in the collection itself
	                    this.deleteUnsyncedChange(conflictingChange.id);
	                    this.deleteChangesForCollection(conflictingChange.data.id);
	                    pm.collections.deleteCollectionFromDataStoreWithOptSync(conflictingChange.data.id, false, false, function() {});
	                    conflictingChange = null;
	                }
	            }

	            if (conflictingChange === null) {
	                pm.syncLogger.log(new Error(), "No conflict for this server change - adding change to processable changes");
	                this.serverChangesReadyToBeSaved.push(firstChange);
	            } else {
	                var conflictRows = this._getConflictRows(conflictingChange, firstChange);
	                //getConflictRows returns an array of rows to be displayed in the conflict resolver table

	                if (conflictRows !== null && conflictRows.length > 0) {
	                    anyConflict = true;

	                    //make sure there's a row with showRow==true
	                    var rowToShow = false;
	                    for (i = 0; i < conflictRows.length; i++) {
	                        if (conflictRows[i].showRow) {
	                            rowToShow = true;
	                        }
	                    }
	                    if (rowToShow) {
	                        var numRows = this._addConflictRows(conflictRows);
	                    } else {
	                        anyConflict = false;
	                    }
	                }
	            }
	        }

	        //if there is a conflict, saveServerChanges() will be called when the conflicts are resolved
	        if (!anyConflict) {
	            this._saveProcessedServerChange();
	        } else {
	            pm.conflictResolverModal.showModal();
	        }
	    },

	    _findConflictingLocalChange: function(id) {
	        var currentUnsynced = this.currentUnsynced;
	        var numChanges = currentUnsynced.length;
	        for (var i = 0; i < numChanges; i++) {
	            if (currentUnsynced[i].id === id) {
	                return currentUnsynced[i];
	            }
	        }
	        return null;
	    },

	    /**
	    * Given two changes, one local (from unsynced), one remote (from server queue), generates a set of conflict rows
	    * that the user must choose from, and deletes unsynced changes that were used to generate the conflict
	    */
	    _getConflictRows: function(localChange, remoteChange) {
	        //these fields are not filled by the user / are redundant. Don't need to be shown in the conflict screen
	        var fieldsToIgnore = {
	            'response': ['responseCode', 'state', 'headers', 'write', 'requestId', 'collection', 'collectionId', 'collectonId', 'time', 'searchResultScrolledTo', 'forceNoPretty', 'runTests', 'request', 'requestObject'],
	            'request': ['write', 'responses', 'collectionOwner'],
	            'folder': ['write', 'collection_name', 'collection_owner', 'order'],
	            'collection': ['folders', 'subscribed', 'public', 'remote_id', 'remoteLink', 'write', 'shared', 'order'],
	            'environment': ['syncedFilename']
	        };
	        var genericFieldsToIgnore = ['owner', 'timestamp', 'synced', 'createdAt', 'updatedAt', 'time', 'lastRevision', 'lastUpdatedBy', 'version'];

	        pm.syncLogger.log(new Error(), "Getting conflictRow for: localChange=");
	        pm.syncLogger.log(new Error(), localChange);
	        pm.syncLogger.log(new Error(), " and remoteChange=");
	        pm.syncLogger.log(new Error(), remoteChange);

	        var idParts = localChange.id.split(":");
	        var model = idParts[0];
	        var model_id = idParts[1];
	        var localAction; //string
	        var remoteAction; //string

	        if (remoteChange.meta) {
	            remoteChange.action = remoteChange.meta.action;
	            remoteChange.model = remoteChange.meta.model;
	        }

	        var remoteNameOrId = remoteChange.data.name;
	        if (remoteNameOrId == null) {
	            remoteNameOrId = remoteChange.data.id;
	        }

	        var localNameOrId = localChange.data.name;
	        if (localNameOrId == null) {
	            localNameOrId = localChange.data.id;
	        }

	        var ret = [];
	        var ret_template = {};

	        ret_template.localChange = _.cloneDeep(localChange);
	        ret_template.remoteChange = _.cloneDeep(remoteChange);
	        ret_template.model = model;
	        ret_template.model_id = model_id;
	        ret_template.nameOrId = localNameOrId;
	        ret_template.id = model_id;
	        ret_template.conflictId = localChange.id;
	        ret_template.key = "";
	        ret_template.revision = remoteChange.revision;
	        ret_template.showRow = true;

	        if (localChange.verb === "destroy" && remoteChange.action === "destroy") {
	            this.deleteUnsyncedChange(localChange.id);
	            return null;
	        }
	        if (localChange.verb === "create" && remoteChange.action === "create") {
	            //two creates should still be merged
	            localAction = "Created";
	            remoteAction = "Created";
	            var ret_template_temp = _.clone(ret_template);

	            ret_template_temp.localAction = localAction;
	            ret_template_temp.remoteAction = remoteAction;

	            //get changed keys
	            var localUpdates = localChange.data;
	            var subRevision = 0.001;
	            var anyRowConflicting = false;
	            if (!localUpdates.hasOwnProperty("folder") && !localUpdates.hasOwnProperty("folderId") && remoteChange.data.folder) {
	                localUpdates["folder"] = null;
	            }
	            for (var pKey in localUpdates) {
	                if (localUpdates.hasOwnProperty(pKey)) {
	                    ret_template_temp.showRow = true;
	                    if (pKey === "sharedWithTeam") {
	                        pKey = "shared";
	                        localUpdates["shared"] = localUpdates["sharedWithTeam"];
	                    }
	                    if (pKey === "owner" || genericFieldsToIgnore.indexOf(pKey) !== -1) {
	                        ret_template_temp.key = pKey;
	                        ret_template_temp.revision = remoteChange.revision + subRevision;
	                        ret_template_temp.showRow = false;
	                        //ret.push(_.clone(ret_template_temp));
	                    } else if (model === "user" && pKey !== "globals") {
	                        //nothing to do here
	                    } else if (fieldsToIgnore[model] && fieldsToIgnore[model].indexOf(pKey) !== -1) {
	                        //else if(model==="folder" && pKey==="collection") {
	                        ret_template_temp.key = pKey;
	                        ret_template_temp.revision = remoteChange.revision + subRevision;
	                        ret_template_temp.showRow = false;
	                        //ret.push(_.clone(ret_template_temp));
	                    } else if (pKey !== "folder" && ((remoteChange.data[pKey] == "null" && localUpdates[pKey] == null) || (remoteChange.data[pKey] == null && localUpdates[pKey] == "null"))) {
	                        //do nothing
	                    } else if(model === "request" &&
	                        (pKey==="data" && remoteChange.data["dataMode"]==="raw")) {
	                        //data field only matters if dataMode!=raw
	                    } else if(model === "request" &&
	                        (pKey==="rawModeData" && remoteChange.data["dataMode"]!=="raw")) {
	                        //rawModeData field only matters if dataMode==raw
	                    } else if (remoteChange.data.hasOwnProperty(pKey) &&
	                        localUpdates.hasOwnProperty(pKey) &&
	                        JSON.stringify(remoteChange.data[pKey]) !== JSON.stringify(localUpdates[pKey]) &&
	                        !arraysEqual(remoteChange.data[pKey], localUpdates[pKey])) {
	                        anyRowConflicting = true;
	                        ret_template_temp.key = pKey;
	                        var localChangeToShow = localUpdates[pKey];
	                        var remoteChangeToShow = remoteChange.data[pKey];
	                        if (pKey == "data" && remoteChange.data["dataMode"] == "raw") {
	                            //change
	                            localChangeToShow = localUpdates["rawModeData"];
	                            remoteChangeToShow = remoteChangeToShow[0];
	                            remoteChange.data[pKey] = remoteChangeToShow;
	                            localUpdates[pKey] = localChangeToShow;
	                        }
	                        var oldLocalChange = _.cloneDeep(localChangeToShow);
	                        if (typeof localChangeToShow === "object" || remoteChangeToShow instanceof Array) {

	                            localChangeToShow = JSON.stringify(objectDiff(remoteChangeToShow, localChangeToShow)).replace(/":"/g, '": "').replace(/","/g, '", "');
	                        }

	                        if (typeof remoteChangeToShow === "object" || remoteChangeToShow instanceof Array) {
	                            remoteChangeToShow = JSON.stringify(objectDiff(oldLocalChange, remoteChangeToShow)).replace(/":"/g, '": "').replace(/","/g, '", "');
	                        }

	                        ret_template_temp.serverValue = "Set to: " + remoteChangeToShow;
	                        ret_template_temp.localValue = "Set to: " + localChangeToShow;

	                        ret_template_temp.revision = remoteChange.revision + subRevision;
	                        subRevision += 0.001;

	                        //Hack if the key is globals
	                        if (pKey === "globals" && model === "user") {
	                            this._setGlobalConflictMessage(ret_template_temp, JSON.stringify(localUpdates["globals"]), JSON.stringify(remoteChange.data["globals"]));
	                        }

	                        //remove all unnessecary keys from the change
	                        /*for(var key1 in ret_template_temp.localChange.data) {
	                            if(key1!=="id" && key1!==pKey && !(model=="folder" && key1==="collection")) {
	                                delete ret_template_temp.localChange.data[key1];
	                                delete ret_template_temp.remoteChange.data[key1];
	                            }
	                        }*/

	                        ret.push(_.clone(ret_template_temp));
	                    }
	                }
	            }
	            //if there's no row conflicting with this change
	            if (anyRowConflicting === false) {
	                this.deleteUnsyncedChange(localChange.id);
	                return null;
	            }
	        }

	        if (localChange.verb === "update" && remoteChange.action === "update") {
	            localAction = "Updated";
	            remoteAction = "Updated";

	            var localUpdates = _.cloneDeep(localChange.data);

	            var pKeys = [];
	            for (var pKeysIterator in localUpdates) {
	                if (localUpdates.hasOwnProperty(pKeysIterator)) {
	                    pKeys.push(pKeysIterator);
	                }
	            }
	            var numKeys = pKeys.length;

	            //get changed keys

	            var subRevision = 0.001;
	            //for(var pKey in localUpdates) {
	            for (var i = 0; i < numKeys; i++) {
	                var ret_template_temp = _.cloneDeep(ret_template);
	                ret_template_temp.localAction = localAction;
	                ret_template_temp.remoteAction = remoteAction;

	                var pKey = pKeys[i];
	                if (localUpdates.hasOwnProperty(pKey)) {

	                    ret_template_temp.showRow = true;
	                    if (pKey === "owner" || genericFieldsToIgnore.indexOf(pKey) !== -1) {
	                        ret_template_temp.key = pKey;
	                        ret_template_temp.revision = remoteChange.revision + subRevision;
	                        ret_template_temp.showRow = false;
	                        //ret.push(_.clone(ret_template_temp));
	                    } else if (fieldsToIgnore[model] && fieldsToIgnore[model].indexOf(pKey) !== -1) {
	                        ret_template_temp.key = pKey;
	                        ret_template_temp.revision = remoteChange.revision + subRevision;
	                        ret_template_temp.showRow = false;
	                        //ret.push(_.clone(ret_template_temp));
	                    } else if ((remoteChange.data[pKey] == "null" && localUpdates[pKey] == null) || (remoteChange.data[pKey] == null && localUpdates[pKey] == "null")) {
	                        //do nothing
	                    } else if(model === "request" &&
	                        (pKey==="data" && remoteChange.data["dataMode"]==="raw")) {
	                        //data field only matters if dataMode!=raw
	                    } else if(model === "request" &&
	                        (pKey==="rawModeData" && remoteChange.data["dataMode"]!=="raw")) {
	                        //rawModeData field only matters if dataMode==raw
	                    } else if (remoteChange.data.hasOwnProperty(pKey) &&
	                        localUpdates.hasOwnProperty(pKey) &&
	                        JSON.stringify(remoteChange.data[pKey]) !== JSON.stringify(localUpdates[pKey]) &&
	                        !arraysEqual(remoteChange.data[pKey], localUpdates[pKey])) {
	                        ret_template_temp.key = pKey;

	                        //Replace so that word-break works correctly
	                        var localChangeToShow = localUpdates[pKey];
	                        var remoteChangeToShow = remoteChange.data[pKey];

	                        if (pKey == "data" && remoteChange.data["dataMode"] == "raw") {
	                            //change
	                            localChangeToShow = localUpdates["rawModeData"];
	                            remoteChangeToShow = remoteChangeToShow[0];
	                        }

	                        var oldLocalChange = _.cloneDeep(localChangeToShow);
	                        if (typeof localChangeToShow === "object" || remoteChangeToShow instanceof Array) {

	                            localChangeToShow = JSON.stringify(objectDiff(remoteChangeToShow, localChangeToShow)).replace(/":"/g, '": "').replace(/","/g, '", "');
	                        }

	                        if (typeof remoteChangeToShow === "object" || remoteChangeToShow instanceof Array) {
	                            remoteChangeToShow = JSON.stringify(objectDiff(oldLocalChange, remoteChangeToShow)).replace(/":"/g, '": "').replace(/","/g, '", "');
	                        }


	                        ret_template_temp.serverValue = "Updated to: " + remoteChangeToShow;
	                        ret_template_temp.localValue = "Updated to: " + localChangeToShow;

	                        ret_template_temp.revision = remoteChange.revision + subRevision;
	                        subRevision += 0.001;

	                        //Hack if the key is globals
	                        if (pKey === "globals" && model === "user") {
	                            this._setGlobalConflictMessage(ret_template_temp, localUpdates["globals"], remoteChange.data["globals"]);
	                        }

	                        //remove all unnessecary keys from the change
	                        /*for(var key1 in ret_template_temp.localChange.data) {
						if(key1!=="id" && key1!==pKey && !(model=="folder" && key1==="collection")) {
							delete ret_template_temp.localChange.data[key1];
							delete ret_template_temp.remoteChange.data[key1];
						}
					}*/

	                        ret.push(_.clone(ret_template_temp));
	                    }
	                }
	            }
	        } else if (localChange.verb === "destroy" && remoteChange.action === "update") {
	            localAction = "Deleted";
	            remoteAction = "Updated";
	            var ret_template_temp = _.clone(ret_template);
	            ret_template_temp.localAction = localAction;
	            ret_template_temp.serverValue = "Updated to: " + remoteChange.data;
	            ret_template_temp.localValue = "Deleted";
	            ret_template_temp.remoteAction = remoteAction;
	            ret.push(ret_template_temp);
	        } else if (localChange.verb === "update" && remoteChange.action === "destroy") {
	            localAction = "Updated";
	            remoteAction = "Deleted";
	            var ret_template_temp = _.clone(ret_template);
	            ret_template_temp.localAction = localAction;
	            ret_template_temp.remoteAction = remoteAction;
	            ret_template_temp.serverValue = "Deleted";
	            ret_template_temp.localValue = "Updated to: " + localChange.data;
	            ret.push(ret_template_temp);
	        } else if (localChange.verb === "transfer" && remoteChange.action === "transfer") {
	            localAction = "Moved";
	            remoteAction = "Moved";
	            var ret_template_temp = _.clone(ret_template);
	            ret_template_temp.key = "Destination";

	            ret_template_temp.localAction = localAction;
	            ret_template_temp.remoteAction = remoteAction;
	            ret_template_temp.serverValue = "Moved to: " + remoteChange.data.to.model + ":" + remoteChange.data.to.model_id;
	            ret_template_temp.localValue = "Moved to: " + localChange.data.to.model + ":" + localChange.data.to.model_id;
	            ret.push(ret_template_temp);
	        }

	        pm.syncLogger.log(new Error(), ["Conflict row generated: ", ret]);
	        return ret;
	    },


	    _updateUnsyncedChange: function(changeId, newChange) {
	        pm.syncLogger.log(new Error(), ["Updating changeId: ", changeId, " with change: ", newChange]);
	        if(newChange.verb==="transfer" && newChange.id.indexOf(":transfer")===-1) {
	            newChange.id += ":transfer";
	        }
	        pm.indexedDB.updateUnsyncedChange(newChange);


	        var currentUnsynced = this.currentUnsynced;
	        var numUnsynced = currentUnsynced.length;

	        var found = 0;
	        if(newChange.verb!=="transfer") {
	            for (var i = 0; i < numUnsynced; i++) {
	                if (currentUnsynced[i].id === changeId) {
	                    currentUnsynced[i] = newChange;
	                    this.currentUnsynced = currentUnsynced;
	                    found = 1;
	                }
	            }
	        }
	        if (found == 0) {
	            this.currentUnsynced.push(newChange);
	        }
	        return 0;
	    },

	    _updateUnsyncedChangeProp: function(changeId, key, value, changeset) {
	        var currentUnsynced = this.currentUnsynced;
	        var numUnsynced = currentUnsynced.length;
	        var modified = 0;
	        if(changeset.verb!=="transfer") {
	            for (var i = 0; i < numUnsynced; i++) {
	                if (currentUnsynced[i].id === changeId &&
	                    currentUnsynced[i].hasOwnProperty("data") &&
	                    currentUnsynced[i].verb!=="transfer") {
	                    currentUnsynced[i].data[key] = value;
	                    //for transfer conflicts, keep the verb as transfer
	                    if(key!=="folder") {
	                        currentUnsynced[i].verb = "update";
	                    }
	                    this.currentUnsynced = currentUnsynced;
	                    console.log("Updating local change ("+changeId+") with "+key+" = " + value);
	                    console.log(currentUnsynced[i]);
	                    modified = 1;
	                    return;
	                }
	            }
	        }
	        if(modified===0) {
	            this._updateUnsyncedChange(changeId, changeset);
	        }
	    },

	    deleteUnsyncedChange: function(changeId) {
	        var currentUnsynced = this.currentUnsynced;
	        var numUnsynced = currentUnsynced.length;
	        var oldThis = this;
	        var newUnsynced = [];
	        var retVal = -1;
	        for (var i = 0; i < numUnsynced; i++) {
	            if (currentUnsynced[i].id === changeId) {
	                pm.indexedDB.deleteUnsyncedChange(changeId, function() {
	                });
	                retVal = changeId;
	            }
	            else {
	                newUnsynced.push(currentUnsynced[i]);
	            }
	        }

	        this.currentUnsynced = newUnsynced;
	        return retVal;
	    },

	    _getJsonStringFromGlobal: function(global) {
	        if (!(global instanceof Array)) {
	            return [];
	        }
	        var numGlobals = global.length;
	        var obj = [];
	        for (var i = 0; i < numGlobals; i++) {
	            var thisObj = {};
	            thisObj[global[i].key] = global[i].value;
	            obj.push(thisObj);
	        }
	        return obj;
	    },

	    _setGlobalConflictMessage: function(ret_template_temp, localGlobals, remoteGlobals) {
	        var localValue = "Updated to " + JSON.stringify(this._getJsonStringFromGlobal(localGlobals), null, 2);
	        var serverValue = "Updated to " + JSON.stringify(this._getJsonStringFromGlobal(remoteGlobals), null, 2);
	        ret_template_temp.serverValue = serverValue;
	        ret_template_temp.localValue = localValue;
	    },

	    _addConflictRows: function(rowObject) {
	        var numRows = rowObject.length;
	        for (var i = 0; i < numRows; i++) {
	            pm.conflictResolverModal.addRow(rowObject[i]);
	        }
	    },

	    _saveProcessedServerChange: function() {
	        //dequeue the first server change, and execute, passing this function again in the callback

	        if (this.serverChangesReadyToBeSaved.length === 0) {
	            //stream = null because any change can go
	            pm.localChanges.isProcessingServerChange = false;
	            pm.mediator.trigger("beginUnsyncedStream", false, null, false);
	            return;
	        }

	        //if a collection sync triggers this while another change is being processed,
	        //don't start the collection stream
	        if(pm.localChanges.isProcessingServerChange) {
	            return;
	        }

	        //this is coming from the /sync response or the /collection?changeset response
	        var changeToSave = this.serverChangesReadyToBeSaved.shift();
	        this._saveServerChange(changeToSave, function() {
	            pm.localChanges.isProcessingServerChange = false;
	            _.bind(pm.localChanges._saveProcessedServerChange, pm.localChanges)();
	        });
	    },

	    _saveServerChange: function(message, callback) {
	        if (!this.syncEnabled) return;

	        if (!message) {
	            if (typeof callback == "function") {
	                callback();
	            }
	            return;
	        }

	        var model = message.meta.model;
	        var model_id = message.model_id;
	        var action = message.meta.action;
	        var data = message.data;

	        pm.syncManager.executeOrAddFunctionToQueue(function() {
	            //Accounting for API Change
	            message.model = message.meta.model;
	            message.action = message.meta.action;
	            pm.localChanges.isProcessingServerChange = true;
	            pm.mediator.trigger("syncChangeReceived", action, message, callback);
	        });
	    },

	    _syncFirstClientChange: function() {
	        if (!this.syncEnabled) return;
	        //check connectivity

	        //check serverChanges.length===0
	        pm.syncLogger.log(new Error(), "Syncing client change to sever...");

	        var currentUnsynced = this.currentUnsynced;
	        if (currentUnsynced.length === 0) {
	            pm.syncLogger.log(new Error(), "All client side changes have been resolved and synced");
	            this.set("allClientChangesSynced", true);
	            if (pm.syncManager.get("loggedIn") === true) {
	                this.set("syncFinished", true);
	                this.trigger("syncFinished");
	            }
	            return;
	        } else {
	            pm.syncLogger.log(new Error(), "Change so sync: ");
	            pm.syncLogger.log(new Error(), changeToSync);
	            var changeToSync = currentUnsynced[0];
	            var verb = changeToSync.verb;
	            var entity = changeToSync.entity;
	            var data = changeToSync.data;
	            var meta = changeToSync.meta;
	            if (verb === "transfer" && data && data.id != null) {
	                meta = data.id;
	            }
	            this._syncClientChangeToServer(verb, entity, data, meta, false);
	        }
	    },

	    onConflictsResolved: function(radioArray) {
	        var numValues = radioArray.length;
	        pm.syncLogger.log(new Error(), "Resolving " + numValues + " conflicts...");
	        for (var i = 0; i < numValues; i++) {
	            var thisRadio = $(radioArray[i]);
	            var model = thisRadio.attr('data-model');
	            var model_id = thisRadio.attr('data-model-id');
	            var key = thisRadio.attr('data-key');
	            var value = thisRadio.attr('value');
	            var changeToSync = thisRadio.data("change");
	            var remoteAction = thisRadio.attr('data-remote-action');
	            var localAction = thisRadio.attr('data-local-action');
	            var conflictID = thisRadio.attr('data-conflict-id');

	            if (remoteAction === "Updated" && localAction === "Updated") {
	                var objToUpdate = {};
	                objToUpdate['id'] = model_id;
	                objToUpdate[key] = value;

	                //id enetity verb data timestamp
	                if (thisRadio.attr('data-which-change') === "local") {
	                    //this._updateUnsyncedChange(conflictID, changeToSync);
	                    this._updateUnsyncedChangeProp(conflictID, key, changeToSync.data[key], changeToSync);
	                    //UPDATE the prop in the server change

	                    /*var serverChange = _.cloneDeep(changeToSync);
	                    serverChange[key] = value;
	                    //this.serverChangesReadyToBeSaved.push(serverChange);
	                    console.log("SERVER CHANGE SHOULD BE: ");
	                    console.log(serverChange);*/
	                    this.createOrUpdateServerChange(changeToSync, key, changeToSync.data[key]);
	                } else {
	                    //Add changeToSync to the serverChangesReadyToBeProcessedQueue
	                    //this should contain a revision!
	                    //this.serverChangesReadyToBeSaved.push(changeToSync);
	                    this.createOrUpdateServerChange(changeToSync, key, changeToSync.data[key]);

	                    //this.deleteUnsyncedChange(conflictID)
	                    //don't delete the local change
	                    console.log("Updating local change ("+conflictID+") with "+key+" = " + changeToSync.data[key]);
	                    this._updateUnsyncedChangeProp(conflictID, key, changeToSync.data[key], changeToSync);
	                }
	            } else if (remoteAction === "Created" && localAction === "Created") {
	                if (thisRadio.attr('data-which-change') === "local") {
	                    //change update to create. (the entity needs to be recreated on the server)
	                    //if the local change is selected, only the update needs to be sent to the server
	                    changeToSync.verb = "update";

	                    //to indicate to the order difference check in PmCollections.updateRemoteEntity that
	                    //an order update does not need to cause another collection force sync
	                    changeToSync.resolved = true;

	                    if (key === "folder" && model === "request") {
	                        //transfer to folder
	                        var destFolder = changeToSync.data.folder;
	                        var owner = changeToSync.data.owner;
	                        var rid = changeToSync.data.id;
	                        var rCollection = changeToSync.data.collection;
	                        changeToSync.action = "transfer";
	                        if (destFolder) {
	                            //transferring to a folder
	                            changeToSync.verb = "transfer";
	                            changeToSync.data = {
	                                to: {
	                                    model: "folder",
	                                    model_id: destFolder,
	                                    owner: owner
	                                },
	                                id: rid,
	                                owner: owner
	                            };
	                        } else {
	                            //transfer to the collection
	                            changeToSync.verb = "transfer";
	                            changeToSync.data = {
	                                to: {
	                                    model: "collection",
	                                    model_id: rCollection,
	                                    owner: owner
	                                },
	                                collectonId: rCollection,
	                                id: rid,
	                                owner: owner
	                            };
	                        }
	                        this._updateUnsyncedChange(conflictID, changeToSync);
	                    }
	                    else if (key == "shared") {
	                        if (value.has("true")) {
	                            changeToSync.verb = "share";
	                        } else {
	                            changeToSync.verb = "unshare";
	                        }
	                        this._updateUnsyncedChange(conflictID, changeToSync);
	                    }
	                    else {
	                        this._updateUnsyncedChangeProp(conflictID, key, changeToSync.data[key], changeToSync);
	                    }
	                    //this._updateUnsyncedChange(conflictID, changeToSync);

	                    /*var serverChange = _.cloneDeep(changeToSync);
	                    serverChange[key] = value;
	                    this.serverChangesReadyToBeSaved.push(serverChange);
	                    console.log("SERVER CHANGE SHOULD BE: ");
	                    console.log(serverChange);*/
	                    this.createOrUpdateServerChange(changeToSync, key, changeToSync.data[key]);
	                } else {
	                    //you choose the server. In this case, no need to send the local change.
	                    if (changeToSync.meta) {
	                        changeToSync.meta.action = "update";
	                        //to indicate to the order difference check in PmCollections.updateRemoteEntity that
	                        //an order update does not need to cause another collection force sync
	                        changeToSync.meta.resolved = true;
	                    }
	                    changeToSync.action = "update";
	                    changeToSync.model = model;
	                    changeToSync.model_id = model_id;

	                    //handle transfer conflicts
	                    if (key === "folder" && model === "request") {
	                        //transfer to folder
	                        var destFolder = changeToSync.data.folder;
	                        var owner = changeToSync.data.owner;
	                        var rid = changeToSync.data.id;
	                        var rCollection = changeToSync.data.collection;
	                        changeToSync.action = "transfer";
	                        if (destFolder) {
	                            //transferring to a folder
	                            changeToSync.verb = "transfer";
	                            changeToSync.data = {
	                                to: {
	                                    model: "folder",
	                                    model_id: destFolder,
	                                    owner: owner
	                                },
	                                from: {
	                                    model: "collection",
	                                    model_id: rCollection,
	                                    owner: owner
	                                },
	                                id: rid,
	                                collectionId: rCollection,
	                                owner: owner
	                            };
	                        } else {
	                            //transfer to the collection
	                            changeToSync.verb = "transfer";
	                            changeToSync.data = {
	                                to: {
	                                    model: "collection",
	                                    model_id: rCollection,
	                                    owner: owner
	                                },
	                                id: rid,
	                                collectionId: rCollection,
	                                owner: owner
	                            };
	                        }

	                        if (changeToSync.meta) {
	                            changeToSync.meta.action = "transfer";
	                        }
	                    }

	                    console.log("Pushing server change: ");
	                    //console.log(changeToSync);
	                    this.createOrUpdateServerChange(changeToSync, key, changeToSync.data[key]);

	                    //this.deleteUnsyncedChange(conflictID);
	                    console.log("Trying to update local change with server value");
	                    this._updateUnsyncedChangeProp(conflictID, key, changeToSync.data[key], changeToSync);
	                }
	            } else if (remoteAction === "Deleted" && localAction === "Updated") {
	                if (thisRadio.attr('data-which-change') === "local") {
	                    //change update to create. (the entity needs to be recreated on the server)
	                    changeToSync.verb = "create";
	                    this._updateUnsyncedChange(conflictID, changeToSync);
	                } else {
	                    //you choose the server. In this case, no need to send the local change.
	                    this.serverChangesReadyToBeSaved.push(changeToSync);

	                    this.deleteUnsyncedChange(conflictID);
	                }
	            } else if (remoteAction === "Updated" && localAction === "Deleted") {
	                if (thisRadio.attr('data-which-change') === "local") {
	                    //don't do anything - the local unsyncedChange is still there
	                } else {
	                    this.serverChangesReadyToBeSaved.push(changeToSync);
	                    this.deleteUnsyncedChange(conflictID);
	                }
	            } else if (remoteAction === "Moved" && localAction === "Moved") {
	                if (thisRadio.attr('data-which-change') === "local") {
	                    this._updateUnsyncedChange(conflictID, changeToSync);
	                } else {
	                    this.serverChangesReadyToBeSaved.push(changeToSync);
	                    this.deleteUnsyncedChange(conflictID);
	                }
	            } else {
	                pm.syncLogger.log(new Error(), "ERROR");
	            }
	        }
	        //all conflicts have been resolved
	        pm.conflictResolverModal.clearTable();

	        //to save first processes change from the queue
	        console.log("Saving first server change - ");
	        pm.localChanges.isProcessingServerChange = false;
	        this._saveProcessedServerChange();
	    },

	    createOrUpdateServerChange: function(changeToSync, key, value) {
	        if(!changeToSync.action) {
	            changeToSync.action = "update";
	        }
	        if(!changeToSync.id) {
	            changeToSync.id = changeToSync.model + ":" + changeToSync.model_id;
	        }
	        if(!changeToSync.meta) {
	            if(changeToSync.entity) {
	                changeToSync.meta = {
	                    model: changeToSync.entity,
	                    action: changeToSync.verb
	                }
	            }
	            else {
	                changeToSync.meta = {
	                    model: changeToSync.model,
	                    action: changeToSync.action
	                }
	            }
	        }
	        /*console.log("Trying to create/update server change. ChangeToSync: ");
	        console.log(changeToSync);
	        console.log("Setting " + key +" = " + value);
	        console.log("Curr serverChangesReadyToBeSaved:");
	        console.log(this.serverChangesReadyToBeSaved);*/
	        var currLen = this.serverChangesReadyToBeSaved.length;
	        var found = 0;
	        for(var i=0;i<currLen;i++) {
	            var thisId = this.serverChangesReadyToBeSaved[i].id;
	            if(!thisId) {
	                thisId = this.serverChangesReadyToBeSaved[i].model + ":" +
	                    this.serverChangesReadyToBeSaved[i].model_id;
	            }
	            if(thisId===changeToSync.id) {
	                console.log("Updating server change " + changeToSync.id);
	                console.log("Setting " + key +" = " + value);
	                this.serverChangesReadyToBeSaved[i].data[key]=value;
	                found = 1;
	            }
	        }
	        if(found==0) {
	            console.log("Adding change to server queue: ");
	            console.log(changeToSync);
	            this.serverChangesReadyToBeSaved.push(changeToSync);
	        }
	    },

	    syncAllRequestsFix: function() {
	        if (!this.syncEnabled) return;
	        var collModels = pm.collections.getAllCollections();
	        var collRequests = _.flatten(collModels.map(function(a) {
	            return a.get("requests")
	        })); //to sync
	        collRequests.map(function(obj) {
	            pm.syncManager.addChangeset("request", "create", obj, null, true);
	        });
	    },

	    isCollectionMine: function(cModel) {
	        return (cModel.get("owner") === pm.user.id || cModel.get("owner") == 0 || cModel.get("owner") == "0");
	    },

	    /**
	     if collection dump is true, all the user's collections are sent as /importCollection requests, not as separate changesets
	    */
	    syncAllObjects: function(syncImmediately, collectionDump, collectionId) {
	        var oldThis = this;

	        if (typeof syncImmediately === "undefined") {
	            syncImmediately = true;
	        }

	        if (typeof collectionDump === "undefined") {
	            collectionDump = true;
	        }


	        //Only use the /importCollection API for the first-ever SYNC
	        //NOT if sync is re-enabled
	        if (pm.settings.getSetting("syncedEver")) {
	            collectionDump = false;
	        } else {
	            pm.settings.setSetting("syncedEver", true);
	        }

	        if (!this.syncEnabled) return;

	        var allCollModels = pm.collections.getAllCollections(); //for folder/request creates
	        if (collectionId) {
	            allCollModels = [pm.collections.get(collectionId)];
	        }
	        var collModels = _.filter(allCollModels.map(function(c) {
	            if (c && oldThis.isCollectionMine(c)) {
	                return c;
	            }
	        }), function(maybeUndef) {
	            return maybeUndef;
	        });

	        var subscribedCollections = _.filter(pm.collections.getAllCollections().map(function(c) {
	            if (c && !oldThis.isCollectionMine(c)) {
	                return c;
	            }
	        }), function(maybeUndef) {
	            return maybeUndef;
	        });

	        var cForReqs = allCollModels;
	        if (collectionDump) {
	            cForReqs = subscribedCollections;
	        }

	        var collJsons = collModels.map(function(a) {
	            return a.getAsJSON()
	        }); //to sync

	        var folderArrays = [];

	        //forcibly adding folderIds to requests
	        var collRequests = _.flatten(cForReqs.map(
	            function(a) {
	                //get requests
	                var allRequests = a.get("requests");
	                //create map from requestId to folderId
	                var rfMap = {};
	                var thisFolders = a.get("folders");

	                if (!oldThis.isCollectionMine(a)) {
	                    //it is a subscribed collection
	                    //don't add folders, don't return requests
	                    return [];
	                }

	                _.map(thisFolders, function(folder) {
	                    for (var i = 0; i < folder.order.length; i++) {
	                        rfMap[folder.order[i]] = folder.id;
	                    }
	                });

	                var reqsToSend = _.map(allRequests, function(thisReq) {
	                    if (rfMap.hasOwnProperty(thisReq.id)) {
	                        thisReq.folder = rfMap[thisReq.id];
	                    } else {
	                        delete thisReq.folder;
	                    }
	                    thisReq.owner = a.get("owner");
	                    return thisReq;
	                });

	                folderArrays.push(thisFolders);
	                return reqsToSend;
	            }
	        )); //to sync

	        var folderJsons = _.flatten(folderArrays); //to sync

	        var responses = _.flatten(
	            collRequests.map(function(a) {
	                _.map(a["responses"], function(res) {
	                    res.collectionId = a.collectionId;
	                    res.requestId = a.id;
	                    res.owner = a.owner;
	                });
	                return a["responses"];
	            })
	        ); //to sync

	        var envModels = pm.environments.models;
	        var envJsons = envModels.map(function(a) {
	            return a.toJSON()
	        }); //to sync

	        //NOT syncing initial history
	        var historyModels = pm.history.models;
	        var historyJsons = historyModels.map(function(a) {
	            return a.toJSON()
	        }); //to sync

	        var headerPresetModels = pm.headerPresets.models;
	        var headerPresetJsons = headerPresetModels.map(function(a) {
	            return a.toJSON()
	        }); //to sync

	        var collIds = [];

	        collJsons.map(function(obj) {
	            if (!collectionDump) {
	                pm.syncManager.addChangeset("collection", "create", obj, null, syncImmediately);
	            } else {
	                //dump whole collection
	                pm.collections.getCollectionDataForFileJson(obj.id, function(name, type, filedata) {
	                    var cJson = pm.collections.sanitizeCollection(filedata);
	                    pm.syncManager.addChangeset("collection", "importCollection", cJson, null, syncImmediately);
	                });
	            }
	        });


	        //if collectionDump==true these are only called for subscribed collections
	        folderJsons.map(function(obj) {
	            //this shouldnt be needed!
	            pm.syncManager.addChangeset("folder", "create", obj, null, false);
	        });

	        collRequests.map(function(obj) {
	            //this shouldnt be needed either
	            pm.syncManager.addChangeset("request", "create", obj, null, false);
	        });


	        responses.map(function(obj) {
	            if (!obj) return;
	            if (!obj.hasOwnProperty("request")) return;

	            obj.request = obj.requestId;
	            obj.collection = obj.collectionId;
	            obj.collectionId = obj.collectionId;
	            obj.owner = request.owner;
	            pm.syncManager.addChangeset("response", "create", obj, null, syncImmediately);
	        });

	        if (syncImmediately) { //only send history requests for the very first sync, not a force sync
	            historyJsons = _.takeRight(historyJsons, 100);
	            historyJsons.map(function(obj) {
	                pm.syncManager.addChangeset("request", "history", obj, null, syncImmediately);
	            });
	        }

	        if (!collectionId) {
	            envJsons.map(function(obj) {
	                if (obj && obj.id) {
	                    //don't add the default empty env
	                    pm.syncManager.addChangeset("environment", "create", obj, null, syncImmediately);
	                }
	            });

	            headerPresetJsons.map(function(obj) {
	                pm.syncManager.addChangeset("headerpreset", "create", obj, null, syncImmediately);
	            });


	            //Globals updating is done in Globals.js after all the values have come
	            pm.globals.syncAllGlobalsOnce = true;
	        }

	        console.log(pm.syncLogger.getLogDate() + " - " + "All data exported");
	    }
	});

	module.exports = LocalChanges;


/***/ },
/* 238 */
/***/ function(module, exports) {

	var SyncManagerNew = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            unsyncedChanges: [],
	            syncConflicts: null,
	            loggedIn: false,
	            socketConnected: false,
	            sinceId: 0,
	            syncFinished: false,
	            finishedLoading: {
	                environments: false,
	                collections: false,
	                history: false,
	                globals: false
	            },
	            connectingToSocket: false,
	            syncEnabled: false
	        };
	    },

	    attachSyncStatusTriggers: function() {
	        this.on("change:loggedIn", function(m,v,o) {
	            pm.appWindow.trigger("sendMessageObject", "sync.changeLoggedIn", o);
	        });
	        this.on("change:lastTimestamp", function(m,v,o) {
	            pm.appWindow.trigger("sendMessageObject", "sync.changeLastTimestamp", o);
	        });
	        this.on("syncFinished", function() {
	            pm.appWindow.trigger("sendMessageObject", "sync.syncFinished");
	            pm.syncManager.set("currentSyncStatus", "syncFinished");
	        });
	        this.on("syncStarting", function() {
	            pm.appWindow.trigger("sendMessageObject", "sync.syncStarting");
	            pm.syncManager.set("currentSyncStatus", "syncStarting");
	        });
	        this.on("makeConnecting", function() {
	            pm.appWindow.trigger("sendMessageObject", "sync.makeConnecting");
	            pm.syncManager.set("currentSyncStatus", "makeConnecting");
	        });
	        this.on("makeNotConnected", function() {
	            pm.appWindow.trigger("sendMessageObject", "sync.makeNotConnected");
	            pm.syncManager.set("currentSyncStatus", "makeNotConnected");
	        });
	        this.on("disabledSync", function() {
	            pm.appWindow.trigger("sendMessageObject", "sync.disabledSync");
	            pm.syncManager.set("currentSyncStatus", "disabledSync");
	        });
	    },


	    // Fixed
	    initialize: function() {
	        var syncManager = this;

	        if(!pm.syncMediatorInitialized) {
	            pm.syncMediatorInitialized = true;


	            //GLOBAL SYNC FLAG
	            pm.mediator.on("setSync", this.setSync, this);
	            pm.mediator.on("syncOperationFailed", function(err) {
	                pm.syncLogger.error("Sync Operation Failed. Reason: " + JSON.stringify(err));
	                pm.syncLogger.debug("Sync operation failed");
	                //take the first item, add it to the end
	                if(pm.syncQueue.length===0) {
	                    return;
	                }
	                var failedItem = pm.syncQueue.shift();
	                //pm.syncQueue.push(failedItem);
	                if(pm.syncQueue.length===0) {
	                    return;
	                }
	                var funcToExecute = pm.syncQueue[0];
	                funcToExecute();
	            });

	            pm.mediator.on("syncClientChanges", this.onSyncClientChanges, this);

	            pm.mediator.on("clearSystemValues", this.onClearSystemValues, this);
	            pm.mediator.on("startCollectionForceSyncs", this.startCollectionForceSyncs, this);
	            pm.mediator.on("appOnline",this.onAppOnline, this);
	            pm.mediator.on("appOffline",this.onAppOffline, this);


	            pm.mediator.on("syncOperationDone", function() {
	                return;
	                if(pm.syncManager.get("loggedIn") === true) {
	                    //pm.syncManager._processNextServerChange();
	                    //pm.syncManager._saveNextServerChange();
	                }
	            });

	            pm.mediator.on("isTeamMember", function(isTeamSync) {
	                if(isTeamSync) {
	                    $(".team-sync-disabled").removeClass("team-sync-disabled");
	                }
	                else {
	                    $(".team-sync-only").addClass("team-sync-disabled");
	                }
	            }, this);

	            this.on("itemLoaded", this.itemLoaded, this);

	            this.on("singleSyncDone", this._syncFirstClientChange, this);
	            this.on("syncFinishedWithDelay", function() {
	                this.set("lastTimestamp", parseInt(Date.now()/1000));
	            }, this);

	            //this sends all unsynced changes to the serverDB
	            this.on("sendUnsyncedReport", this.sendUnsyncedReport, this);

	            if(this.isPrimaryWindow() && !pm.isTestRunner) {
	                this.attachSyncStatusTriggers();
	            }

	            if(!pm.isTestRunner) {
	                pm.appWindow.trigger("registerInternalEvent", "sync.changeLoggedIn", function(newLogin) {
	                    this.set("loggedIn", newLogin);
	                }, this);
	                pm.appWindow.trigger("registerInternalEvent", "sync.changeLastTimestamp", function(newTimestamp) {
	                    this.set("lastTimestamp", newTimestamp);
	                }, this);
	                pm.appWindow.trigger("registerInternalEvent", "sync.syncFinished", function() {
	                    this.trigger("syncFinished");
	                }, this);
	                pm.appWindow.trigger("registerInternalEvent", "sync.syncStarting", function() {
	                    this.trigger("syncStarting");
	                }, this);
	                pm.appWindow.trigger("registerInternalEvent", "sync.makeConnecting", function() {
	                    this.trigger("makeConnecting");
	                }, this);
	                pm.appWindow.trigger("registerInternalEvent", "sync.makeNotConnected", function() {
	                    this.trigger("makeNotConnected");
	                }, this);
	                pm.appWindow.trigger("registerInternalEvent", "sync.disabledSync", function() {
	                    this.trigger("disabledSync");
	                }, this);
	                pm.appWindow.trigger("registerInternalEvent", "sync.clickSyncIcon", function() {
	                    this.trigger("clickSyncIcon");
	                }, this);
	            }
	        }


	        //only initilize for the main window - not the runner
	        if(pm.isTestRunner || !this.isPrimaryWindow()) {
	            return;
	        }

	        this.showServerErrors = false;
	        this.retriedChanges = [];

	        this.sentChanges = [];
	        this.retrySentChangesInterval = null;
	        this.lastKeyTried = null;
	        this.lastKeyCount = 0;
	        this.sendingAllClientData = false;
	        this.secondsTillReconnect = 0;
	        this.secondsTillReconnectLabel = "Trying now...";
	        this.collectionsToForceSync = [];
	        this.foldersToForceSync = [];
	        this.collectionsRecentlyForceSynced = {};
	        this.socketCount = 0;
	        this.authErrorForSync = false;
	        this.authErrorForSyncTimer = null;

	        pm.appWindow.trigger("registerInternalEvent", "syncFromMainWindow", this.onChangesetFromOtherWindow, this);

	        this.retryChangesTime = 20000;

	        if(postman_electron) {
	            this.clientUserAgent = navigator.userAgent + " " + "PostmanClient/"+pm.getCodebaseVersion()+" (AppId=" + pm.settings.getSetting("installation_id") + ")";
	        }
	        else {
	            this.clientUserAgent = navigator.userAgent + " " + "PostmanClient/" + pm.getVersion() + " (AppId=" + pm.settings.getSetting("installation_id") + ")";
	        }

	        this.changesetErrorCounts = {};
	        this.changesetErrorTimeouts = {};
	        this.changesetAttemptCounts = {};
	        this.changesetAttemptTimeouts = {};

	        this.renewCount = 0;

	        this.serverChanges = [];

	        this.set("lastSyncedAt", pm.settings.getSetting("lastSyncedAt"));


	        this.clientChangesReadyToBeSent = [];
	        this.set("loginAttempts", 0);
	        this.set("reconnectTimeout", 1000*(Math.floor(Math.random()*10) + 10)); //set random value b/w 10 and 20 seconds

	        this.syncStartingTimer = null;
	        this.on("syncStartingWithDelay", function() {
	            if(!syncManager.syncFinishedTimer) {
	                clearTimeout(syncManager.syncStartingTimer);
	                syncManager.syncStartingTimer = null;
	                syncManager.syncStartingTimer = setTimeout(function() {
	                    syncManager.trigger("syncStarting");
	                },500);
	            }
	        });

	        this.syncFinishedTimer = null;
	        this.on("syncFinishedWithDelay", function() {
	            if(!syncManager.inBulkOperation) {
	                clearTimeout(syncManager.syncFinishedTimer);
	                syncManager.syncFinishedTimer = setTimeout(function() {
	                    clearTimeout(syncManager.syncStartingTimer);
	                    clearTimeout(syncManager.syncFinishedTimer);
	                    syncManager.syncFinishedTimer = null;
	                    syncManager.syncStartingTimer = null;

	                    syncManager.trigger("syncFinished");
	                },500);
	            }
	        });

	        this.inBulkOperation = false;

	        pm.mediator.on("databaseOperationComplete", function() {
	            pm.syncLogger.log(new Error(),"Database operation complete...checking for next item in sync queue");
	            if(pm.syncQueue.length===0) {
	                pm.syncLogger.log(new Error(),"Sync queue is empty");
	                return;
	            }
	            pm.syncQueue.shift();
	            if(pm.syncQueue.length===0) {
	                pm.syncLogger.log(new Error(),"Sync queue had one operation, which was already completed");
	                return;
	            }

	            pm.syncLogger.log(new Error(),"Executing next function...");
	            var funcToExecute = pm.syncQueue[0];
	            funcToExecute();
	        });

	        pm.indexedDB.getLastSynced(function(changes) {
	            syncManager.set("lastTimestamp", changes[0].value);
	        });

	        this.updateSince(); //should stay in this file
	        this.set("loggedIn",false);
	        this.set("finalRevisionNumber",-1);
	        this.set("csrfToken","");
	        this.createSocket();

	        this.set("allClientChangesSynced", false);
	    },

	    onAppOnline: function() {
	        this.set("connectingToSocket", false);
	        this.createSocket();
	    },

	    onAppOffline: function() {
	        if(pm.syncSocket) {
	            pm.syncSocket.disconnect();
	        }
	    },

	    updateStateToAllWindows: function() {
	        var state = this.get("currentSyncStatus");
	        this.trigger(state);
	    },

	    isPrimaryWindow: function() {
	        if(window.pmPrimaryWindowId === undefined) {
	            return true;
	        }
	        if(pm.appWindow.get("id") == window.pmPrimaryWindowId) {
	            return true;
	        }
	        else {
	            if(window.pmWindowsOpenList.length==1) {
	                //only one window open
	                //this has to be made primary
	                window.pmPrimaryWindowId = pm.appWindow.get("id");
	                pm.appWindow.trigger("sendMessageObject", "pmWindowPrimaryChanged", window.pmPrimaryWindowId);
	                return true;
	            }
	        }
	        return false;
	    },

	    setSync: function(syncEnabled) {
	        if(pm.syncManager.isPrimaryWindow()) {
	            pm.appWindow.trigger("sendMessageObject", "sync.setSync", syncEnabled);
	        }

	        this.syncEnabled = syncEnabled;
	        if(!this.isPrimaryWindow()) {
	            return;
	        }
	        if(syncEnabled == true) {
	            //this.set("loggingIn", false);
	            this.signIn();
	        }
	        pm.syncLogger.debug("Sync set to: " + syncEnabled);
	    },

	    onClearSystemValues: function() {
	        this.set("since",{own:0});
	        this.set("sinceId",0);
	        this.set("lastTimestamp",null);
	        pm.indexedDB.deleteAllSyncValues(function() {
	            //pm.syncStatusManager.clearNotifs();
	        });
	        pm.syncLogger.debug("System values cleared (since, lastTimestamp)");
	    },

	    itemLoaded: function(item) {
	        var currentLoaded = this.get("finishedLoading");
	        currentLoaded[item]=true;
	        this.set("finishedLoading", currentLoaded);
	        this.signIn();
	    },

	    hasDatabaseLoaded: function() {
	        var currentLoaded = this.get("finishedLoading");
	        for(var prop in currentLoaded) {
	            if(currentLoaded.hasOwnProperty(prop)) {
	                if(currentLoaded[prop]===false) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    },

	    createSocket: function() {
	        if(!this.syncEnabled) {
	            console.log("SYNC: SyncEnabled is false. returning from createSocket");
	            return;
	        }
	        if(!this.isPrimaryWindow()) {
	            console.log("SYNC: Not the primary window. Returning from createSocket");
	            return;
	        }

	        if(this.get("connectingToSocket")==true) {
	            console.log("Already connecting to socket. Not restarting connection");
	            return;
	        }

	        if(this.get("socketConnected")==true) {
	            console.log("Already connected to socket. Not restarting connection");
	            return;
	        }

	        pm.syncLogger.debug("Create socket invoked");

	        pm.syncLogger.log(new Error(),"Trying to connect to socket: " + postman_syncserver_url);
	        io.sails.transports = ["websocket"];
	        io.sails.autoConnect = false;
	        /*io.socket.socket.options["try multiple transports"] = false;
	        io.socket.socket.options["reconnection delay"] = 3000;*/
	        //io.sails.useCORSRouteToGetCookie = true;
	        
	        if(pm.syncSocket && pm.syncSocket.hasOwnProperty("removeAllListeners")) {
	            pm.syncSocket.removeAllListeners();
	        }
	        this.set("loggingIn", false);
	        io.sails.url = postman_syncserver_url;
	        console.log("Setting url to " + postman_syncserver_url + "and connecting");
	        console.trace();
	        pm.syncSocket = io.sails.connect(postman_syncserver_url, {forceNew: true});
	        this.set("connectingToSocket", true);
	        this.trigger("makeConnecting");
	        console.log("SYNC: Calling attachListeners");
	        this.attachListeners();
	    },

	    tickReconnect: function() {
	        if(this.secondsTillReconnect>0) {
	            this.secondsTillReconnect--;
	        }
	        $("#sync-reconnect-timer").text(this.secondsTillReconnect);
	        this.secondsTillReconnectLabel = "Trying again ..."
	    },

	    tryToReconnect: function() {
	        return; //dont need to call this manually
	        //socket1.2 takes care of it
	        console.log("SYNC: Invoked tryToReconnect");
	        //pm.syncSocket.socket.reconnect();
	        var oldThis = this;
	        clearTimeout(this.reconnectTimeoutId);
	        var oldTimeout = this.get("reconnectTimeout");
	        if(!oldTimeout) {
	            this.set("reconnectTimeout", 5000);
	        }
	        reconnectTimeoutId = setTimeout(function() {
	            if(pm.syncManager.get("loggingIn") && !pm.syncManager.get("syncActive")) {
	                //still not logged in
	                var loginsAttempted = oldThis.get("loginAttempts");
	                pm.syncLogger.debug("Trying to reconnect..", "Login attempts: " + loginsAttempted);
	                if(loginsAttempted > 1) {
	                  pm.alerts.warning('Oops. We\'re having trouble connecting you to the Sync service. Please try restarting the app after some time.', {
	                    timeout: 30000,
	                    dedupeId: "sync-connection-error"
	                  });
	                    oldThis.signOut(false);
	                    oldThis.set("loginAttempts", 0);
	                    oldThis.trigger("makeNotConnected");
	                    clearInterval(oldThis.get("tickInterval"));
	                    return;
	                }
	                oldThis.set("loginAttempts", loginsAttempted+1);
	                pm.syncManager.set("loggingIn", false);

	                //confirm this is working
	                if(oldThis.get("csrfReceived")==false) {
	                   oldThis.createSocket();
	                }
	                else {
	                    pm.syncManager.signIn();
	                }

	                var newTimeout = oldThis.get("reconnectTimeout")*2;
	                oldThis.set("reconnectTimeout", newTimeout);
	            }
	        },this.get("reconnectTimeout"));
	        this.secondsTillReconnect = parseInt(this.get("reconnectTimeout")/1000);
	        clearInterval(this.get("tickInterval"));
	        this.set("tickInterval", setInterval(function() {
	            oldThis.tickReconnect();
	        }, 1000));
	        this.trigger("makeConnecting");
	        this.set("loggingIn", true);
	    },

	    //call when and how - pass the model to some view.
	    //or include this code there directly
	    signIn: function() {
	        console.log("SYNC: Invoking signin");

	        if(!this.syncEnabled) {
	            pm.syncLogger.log(new Error(),"Sync is not enabled...cannot proceed with sign in");
	            pm.syncLogger.debug("Sign in stopped because syncEnabled=false");
	            console.log("SYNC: Syncenabled is false. Returning from sign in");
	            return;
	        }

	        if(pm.isTestRunner) {
	            //cannot enable syncManager in the test runner
	            return;
	        }

	        if(!this.isPrimaryWindow()) {
	            console.log("SYNC: Not primary window. Returning from sign in");
	            return;
	        }

	        if(pm.isTesting===true && (pm["hasStartedSyncTest"] !== true)) {
	            return;
	        }

	        pm.syncLogger.log(new Error(),"Attempting to sign in...");
	        //if you are already logged in to the socket
	        /*if(this.get("loggedIn")===true) {
	            pm.syncLogger.log(new Error(),"The user is already logged in to anakin...cannot sign in again");
	            return;
	        }*/

	        //if you're not logged in to postman
	        if(pm.user.isLoggedIn()===false && pm.isTesting===false) {
	            pm.syncLogger.log(new Error(),"The user isn't logged in to Postman...cannot sign in to anakin");
	            pm.syncLogger.debug("Sign in stopped because the user isn't logged in");
	            console.log("SYNC: User not logged in. Returning from sign in");
	            return;
	        }

	        //if all object have not been loaded
	        if(this.hasDatabaseLoaded()===false) {
	            pm.syncLogger.log(new Error(),"Database hasn't loaded yet...cannot sign in to anakin");
	            return;
	        }

	        //if the socket object doesn't exist
	        if(pm.syncSocket==null) {
	            pm.syncLogger.log(new Error(),"Socket doesn't exist - will try after connection is established");
	            pm.syncLogger.debug("Sign in stopped because socket doesnt exists...creating socket");
	            console.log("SYNC: Socket not created. Returning from sign in");
	            this.createSocket();
	            return;
	        }

	        //if the socket hasn't been connected yet
	        if(this.get("socketConnected")===false) {
	            pm.syncLogger.log(new Error(),"Socket connection is not established yet...you will be signed in to sync as soon as the socket is connected");
	            pm.syncLogger.debug("Sign in stopped because socket is not connected");
	            console.log("SYNC: Socket not connected. Returning from sign in");

	            if(this.get("connectingToSocket")===false && pm.syncSocket===null) {
	                this.createSocket();
	            }
	            else if(this.get("connectingToSocket")===false) {
	                console.log("SYNC: Recreating socket. Returning from sign in");
	                if(pm.syncSocket && pm.syncSocket.hasOwnProperty("removeAllListeners")) {
	                    pm.syncSocket.removeAllListeners();
	                }
	                delete pm.syncSocket;
	                this.createSocket();
	            }
	            return;
	        }

	        if(this.get("loggingIn")===true) {
	            pm.syncLogger.log(new Error(),"Sync login is already in progress");
	            pm.syncLogger.debug("Sync stopped because Login is in progess");
	            console.log("SYNC: Already logging in. Returning from sign in");
	            setTimeout(function() {
	                if(pm.syncManager.get("loggingIn")) {
	                    pm.syncManager.set("loggingIn", false);
	                    pm.syncManager.signIn();
	                }
	            },3000);
	            return;
	        }

	        if(this.get("csrfReceived")==true) {
	            console.log("SYNC: CSRF token already received.");
	            return;
	        }


	        var oldThis=this;

	        var testUserId = (pm.isTesting===true)?'test':'1';
	        var testAccessToken = (pm.isTesting===true)?'test':'xyz';

	        var userId = (postman_env==="local")?testUserId:pm.user.id;
	        var accessToken = (postman_env==="local")?testAccessToken:pm.user.get("access_token");

	        this.set("loggingIn",true);

	        this.tryToReconnect();

	        pm.syncLogger.log(new Error(),"Sending login request with user_id="+userId+", access_token="+accessToken);
	        this.set("csrfReceived", false);
	        var headers = {};
	        this.addUserAgent(headers);
	        console.log("SYNC: Sending CSRF token request");
	        pm.syncManager.makeRequest('get','/csrfToken', null, headers, function(res) {
	            if(!res) {
	                res = {};
	            }
	            oldThis.set("csrfToken", (res["_csrf"]));
	            oldThis.set("csrfReceived", true);
	            clearInterval(oldThis.get("reconnectTimeInterval"));
	            oldThis.set("waitingForSyncResponse", true);
	            console.log("SYNC: Recd csrf response. Making create call");
	            pm.syncLogger.debug("Sending session create");
	            var sessionCreateObject = {
	                user_id: userId,
	                access_token: accessToken,
	                 _csrf: res["_csrf"]
	            };

	            oldThis.addUserAgent(sessionCreateObject);
	            pm.syncManager.makeRequest('post', '/'+postman_sync_api_version+'/session/create', sessionCreateObject, null, function (resData) {
	                
	                $(".sync-connection-error").remove();
	                oldThis.set("reconnectTimeout", 5000);
	                oldThis.set("syncActive", true);

	                if(resData.error && resData.error.name=="tokenAuthError") {
	                    pm.syncLogger.debug("Token auth error");
	                    oldThis.renewCount++;
	                    if(oldThis.renewCount>2) {
	                      pm.alerts.warning('There was a problem logging in to Sync. Please restart the app without logging out.', {
	                        dedupeId: 'sync-connection-error',
	                        persist: true
	                      });
	                      return;
	                    }
	                    pm.syncSocket.disconnect();
	                    pm.syncSocket.removeAllListeners();
	                    delete pm.syncSocket;
	                    //pm.user.renewToken();
	                    //new API to recreate token on Anakin
	                    pm.api.recreateSyncUser(function(result) {
	                        pm.user.getSyncData();
	                    });
	                    return;
	                }

	                pm.mediator.trigger("socketConnected");
	                oldThis.renewCount = 0;
	                if(resData.minVersion) {
	                    var currentVersion = pm.getVersion();
	                    if(resData.minVersion.supportedVersions.indexOf(currentVersion) === -1) {
	                        //this version is not supported. Must update
	                        pm.mediator.trigger("minVersionModal", resData.minVersion.message);
	                        return;
	                    }
	                }
	                oldThis.set("syncFinished", false);
	                oldThis.set("loginAttempts", 0);
	                if(resData.error) {
	                    pm.syncLogger.debug("Error in session create", resData.error);
	                    pm.syncLogger.log(new Error(),"Login failure - " + resData.error.description);
	                    oldThis.set("loggingIn",false);
	                    oldThis.set("loggedIn",false);
	                }
	                else {
	                    pm.mediator.trigger('socket:connected');
	                    pm.syncLogger.debug("Making sync call");
	                    //oldThis.checkAllSync();
	                    oldThis.set("loggedIn",true);
	                    oldThis.set("loggingIn",false);
	                    if(oldThis.get("waitingForSyncResponse")) {
	                        oldThis.requestInitialSync();
	                    }
	                    oldThis.set("waitingForSyncResponse", false);
	                }
	            });
	        });
	    },

	    checkAllSync: function() {
	        if(!pm.settings.getSetting("syncedOnce")) {
	            pm.mediator.trigger("syncAllObjects", true);
	            pm.settings.setSetting("syncedOnce", true);
	            this.sendingAllClientData = true;
	        }
	    },

	    signOut: function(resetSyncProperties) {
	        pm.syncLogger.debug("Triggered socket signOut", resetSyncProperties);
	        if(typeof resetSyncProperties === "undefined") {
	            resetSyncProperties = true;
	        }


	        var oldThis = this;

	        this.set("syncActive", false);
	        this.set("csrfReceived", false);
	        pm.localChanges.isProcessingServerChange = false;

	        if(!this.syncEnabled || this.get("connectingToSocket")===true || this.get("loggedIn")===false || !pm.syncSocket) {
	            this.set("loggedIn",false);
	            this.set("socketConnected", false);
	            this.set("connectingToSocket", false);


	            clearTimeout(this.reconnectTimeoutId);

	            if(resetSyncProperties) {
	                this.syncEnabled = false;
	                pm.indexedDB.deleteAllSince(function() {});
	                pm.indexedDB.updateLastSynced(1, function(){});
	                pm.mediator.trigger("clearSystemValues");
	                this.trigger("disabledSync");
	            }

	            pm.syncManager.retrySentChangesInterval = null;

	            if(pm.syncSocket) {
	                oldThis.explicitLogout = resetSyncProperties;
	                pm.syncSocket.removeAllListeners();
	                pm.syncSocket.disconnect();
	            }
	            return;
	        }

	        var headers = {};
	        this.addUserAgent(headers);
	        pm.syncManager.makeRequest('get',
	            '/'+postman_sync_api_version+'/session/destroy', null, headers, function (resData) {
	            pm.syncLogger.log(new Error(),"Logged out: ");
	            pm.syncLogger.log(new Error(),resData);
	            oldThis.set("loggedIn",false);
	            oldThis.set("socketConnected", false);
	            oldThis.set("connectingToSocket", false);
	            clearTimeout(oldThis.reconnectTimeoutId);
	            if(pm.syncSocket) {
	                oldThis.explicitLogout = resetSyncProperties;
	                pm.syncSocket.removeAllListeners();
	                pm.syncSocket.disconnect();
	            }
	            if(resetSyncProperties) {
	                oldThis.syncEnabled = false;
	                pm.indexedDB.deleteAllSince(function() {});
	                pm.indexedDB.updateLastSynced(1, function(){});
	            }
	            pm.syncManager.retrySentChangesInterval = null;
	            pm.mediator.trigger("clearSystemValues");
	        });
	    },

	    getTeamCollections: function(userId, access_token, orgId, successCallback, failCallback) {
	        if(!pm.user.isTeamMember()) return;

	        /*var getUrl = pm.webUrl + "/profile/team/collections";
	        getUrl += "?user_id=" + pm.user.get("id");*/
	        var newGetUrl = postman_syncserver_url + "/api/team/"+orgId;

	        pm.syncManager.makeRequest('get',"/"+postman_sync_api_version+"/team/" + orgId, null, null, function(res) {
	            if(res.hasOwnProperty("data")) {
	                successCallback(res);
	            }
	            else {
	                failCallback(res);
	            }
	        });
	    },


	    /**
	     * Sends all unsynced changes in the DB to the database
	     * @param successCallback
	     * @param errorCallback
	     */
	    sendUnsyncedReport: function(successCallback, errorCallback) {
	        var syncManager = this;
	        syncManager.forceAllChanges = false;

	        if(!pm.user.isLoggedIn()) {
	            return;
	        }

	        if(this.sentInitialSyncRequest === true) {
	            //the response for the initial sync request was not received
	            //ask to reload the app
	            pm.alerts.warning('Oops! There was a problem communicating with the Sync server. Try restarting the app.', {
	              persist: true,
	              dedupeId: 'sync-connection-error'
	            });
	            this.sentInitialSyncRequest = false;
	            return;
	        }

	        var userId = pm.user.id;
	        var accessToken = pm.user.get("access_token");
	        var version = chrome.runtime.getManifest().version;
	        var changes = pm.localChanges.get("unsyncedChanges");
	        if(changes.length == 0) {
	            syncManager.trigger("syncFinished");
	            syncManager.set("allClientChangesSynced", true);
	            successCallback();
	        }
	        else {
	            changes = _.filter(changes,function(change) {return change.verb!=='history'});
	            copyToClipboard(JSON.stringify(changes));
	            pm.api.sendUnsyncedChanges(userId, version, JSON.stringify(changes), function() {
	                pm.indexedDB.clearUnsyncedChanges();
	                pm.localChanges.currentUnsynced = [];
	                syncManager.trigger("syncFinished");
	                syncManager.set("allClientChangesSynced", true);
	                pm.alerts.warning('Oops! There was a problem syncing some of your changes. Your changes have been stored in the app, and they\'ll be applied as soon as possible', {
	                  dedupeId: 'could-not-send-changes',
	                  persist: true
	                });
	                successCallback();
	            }, errorCallback);
	        };
	    },

	    updateSinceFromMessage: function(message) {
	        if(!message) {
	            console.log("Could not update sinceId. message is null");
	            return;
	        }
	        if(message.revision && (typeof message.revision === "number")) {
	            var currentTimestamp = (new Date()).getTime();
	            pm.indexedDB.updateSince(message.revision,currentTimestamp, function() {
	                pm.syncLogger.log(new Error(),"SinceId updated to "+message.revision+", timestamp updated to " + currentTimestamp);
	                pm.syncManager.set("sinceId", message.revision);
	                pm.syncManager.set("since", {own: message.revision});
	            });
	        }
	        else {
	            if(message.action==="subscribe" || message.action==="unsubscribe") {
	                //console.log(pm.syncLogger.getLogDate() + " - " +"No revisionId received for subscribe/unsubscribe");
	            }
	            else if(message.meta && message.meta.model === "environment") {
	                //console.log("envs are not versioned");
	            }
	            else if(message.hasOwnProperty("model_id") && message.hasOwnProperty("owner")) {
	                //console.log(pm.syncLogger.getLogDate() + " - " +"No revisionId received for subscribe/unsubscribe");
	            }
	            else {
	                if(!message.error || !(message.error.name==="instanceFoundError" || !message.error.name==="instanceNotFoundError")) {
	                    //dont throw errors for duplication
	                    if(message.error === "CSRF mismatch") {
	                        var headers = {};
	                        this.addUserAgent(headers);
	                        pm.syncManager.makeRequest('get','/csrfToken', null, headers, function(res) {
	                            if(!res) {
	                                res = {};
	                            }
	                            pm.syncManager.set("csrfToken", (res["_csrf"]));
	                        });
	                    }
	                    //pm.syncLogger.error("Invalid sinceId received. Message: " + JSON.stringify(message));
	                    //pm.syncLogger.log(new Error(), "Invalid sinceId received. Message: ");
	                    //pm.syncLogger.log(new Error(), message);
	                }

	                //if it is instanceNotFound, ask them to duplicate it
	                if(message.error && message.error.name=="instanceNotFoundError" && message.error.details && message.error.details.model) {
	                    var modelName = message.error.details.model;
	                    var additionalInfoForRequest = (modelName=="folder" || modelName=="collection")
	                        ?"If you were working on a request, duplicate the parent folder or collection.":"";

	                    var errorMsg = "The " + modelName + " was not found. Try duplicating it. " + additionalInfoForRequest;
	                    //pm.syncLogger.error("Notifying the user to duplicate the " + modelName);
	                    if(pm.syncManager.showServerErrors) {
	                      pm.alerts.error(errorMsg);
	                    }
	                }
	                else {
	                    if(pm.syncManager.showServerErrors) {
	                        var error_msg = (message.err && message.err.error) ? message.err.error : ((message.error) ? message.error.message : "Unknown error");
	                        pm.alerts.error(error_msg);
	                    }
	                }
	            }
	        }
	    },

	    updateSince: function() {
	        var oldThis=this;
	        pm.indexedDB.getSince(function(a) {
	            //a will be an array (own: 2, u1:c1: 4...)
	            if(a==null || (typeof a === "undefined")) {
	                pm.syncLogger.log(new Error(),"sinceId not updated. Obj from db: ");
	                pm.syncLogger.log(new Error(),a);
	            }
	            var sinceObject = {};
	            _.map(a, function(elem) {
	                sinceObject[elem.id] = elem.value;
	            });
	            oldThis.set("since", sinceObject);
	            pm.syncLogger.debug("Updating since", sinceObject);
	        });
	    },


	    /**
	     * This is called when the server requests a force sync
	     */
	    startForceSync: function(collectionId, folderId) {
	        if(typeof collectionId === "undefined") {
	            collectionId = null;
	        }
	        if(typeof folderId === "undefined") {
	            folderId = null;
	        }
	        pm.syncLogger.debug("Starting force sync", collectionId);
	        var oldThis = this;
	        var sinceId;
	        if(folderId) {
	             //only sync a folder
	            pm.collections.resyncFolderId(folderId, true);
	            return;
	        }
	        if(collectionId) {
	            //only sync for a collection
	            sinceId = this.get("since").own || 0;
	            //create collection changesets only
	            pm.mediator.trigger("syncAllObjects", false, false, collectionId);
	        }
	        else {
	           //clear local unsynced changes
	            pm.localChanges.onDeleteUnsyncedData();

	            //create all local entities as 'CREATE' unsynced changes
	            pm.mediator.trigger("syncAllObjects", false, false);
	            sinceId = 0;
	        }

	        var lastTimestamp = this.get("lastTimestamp");
	        this._sendSyncRequest(sinceId, lastTimestamp, 40000, -1, collectionId);

	        //this should automatically cause conflictsss
	    },

	    /**
	     * @description called ONLY when signIn is successful
	     */
	    requestInitialSync: function() {
	        if(!this.syncEnabled) return;

	        //this will have to go
	        if(pm.user.freshSignIn === true) {
	            pm.user.freshSignIn = false;
	            if(typeof collectionId === "undefined") {
	                collectionId = null;
	            }
	            if(typeof folderId === "undefined") {
	                folderId = null;
	            }
	            pm.syncLogger.debug("Starting force sync", collectionId);
	            var oldThis = this;
	            var sinceId;

	           //clear local unsynced changes
	            pm.localChanges.onDeleteUnsyncedData();

	            //create all local entities as 'CREATE' unsynced changes
	            pm.mediator.trigger("syncAllObjects", false, true);
	            sinceId = 0;

	            var lastTimestamp = this.get("lastTimestamp");
	            this._sendSyncRequest(sinceId, lastTimestamp, 40000, -1, collectionId);
	            return;
	        }

	        pm.syncLogger.log(new Error(),"Making initial since request");
	        pm.syncLogger.debug("Making initial sync request");
	        var storedSince = this.get("since");
	        var sinceId = 0;
	        if(storedSince && storedSince.own) {
	            sinceId = storedSince.own;
	        }
	        var lastTimestamp = this.get("lastTimestamp");
	        this._sendSyncRequest(sinceId, lastTimestamp, 40000, -1);
	    },

	    startIntegrityCheck: function() {
	        if(pm.syncManager.didIntegrityCheckRecently) {
	            return;
	        }
	        //yay
	        pm.syncManager.didIntegrityCheckRecently = true;
	        setTimeout(function() {
	            pm.syncManager.didIntegrityCheckRecently = false;
	        }, 10000);
	        pm.syncLogger.debug("Starting integrity check");
	        pm.syncManager.makeRequest('get',"/"+postman_sync_api_version+"/collection?populate=true&meta=true", null, null, function(res) {
	            //could result in a throttle error
	            if(!(res instanceof Array)) {
	                //error
	                return;
	            }
	            var collections = _.pluck(res,"data"),
	                collectionIds = _.pluck(res,"model_id");

	            var folders = [], requests = [];
	            _.each(collections, function(c) {
	                if(c) {
	                    if(c.folders) {
	                        folders = folders.concat(c.folders);
	                    }
	                    if(c.requests) {
	                        requests = requests.concat(c.requests);
	                    }
	                }
	            });

	            var folderIds = _.pluck(folders, "id");

	            var requestIds = _.pluck(requests, "id");

	            var localCollections = pm.collections.getAllOwnCollections(),
	                localFolders = [],
	                localRequests = [];

	            _.each(localCollections, function(c) {
	                localFolders = localFolders.concat(c.get("folders"));
	                localRequests = localRequests.concat(c.get("requests"));
	            });

	            var localCollectionIds = _.pluck(localCollections,"id"),
	                localFolderIds = _.pluck(localFolders,"id"),
	                localRequestIds = _.pluck(localRequests,"id");

	            var extraLocalCollections = _.difference(localCollectionIds, collectionIds),
	                extraLocalFolders = _.difference(localFolderIds, folderIds),
	                extraLocalRequests = _.difference(localRequestIds, requestIds);

	            pm.syncLogger.debug("Extra local collections", extraLocalCollections);
	            _.each(extraLocalCollections, function(cid) {
	                pm.collections.resyncCollectionId(cid, false);
	                var thisCollection = pm.collections.get(cid);
	                var thisFolders = _.pluck(thisCollection.get("folders"),"id");
	                var thisRequests = _.pluck(thisCollection.get("requests"),"id");
	                extraLocalFolders = _.difference(extraLocalFolders, thisFolders);
	                extraLocalRequests = _.difference(extraLocalRequests, thisRequests);
	            });

	            pm.syncLogger.debug("Extra local folders", extraLocalFolders);
	            _.each(extraLocalFolders, function(fid) {
	                pm.collections.resyncFolderId(fid, false);
	                var thisFolder = pm.collections.getFolderById(fid);
	                var thisRequests = thisFolder.order;
	                extraLocalRequests = _.difference(extraLocalRequests, thisRequests);
	            });

	            pm.syncLogger.debug("Extra local requests", extraLocalRequests);
	            _.each(extraLocalRequests, function(rid) {
	                pm.collections.resyncRequestId(rid, false);
	            });

	            pm.mediator.trigger("beginUnsyncedStream", false, null, false);
	        });
	    },

	    /**
	     * @description This sends the initial sync request to POST /sync, which gets a paginated list of server-side changes (S). Will be called after sign in
	     * @param lastRevisionNumber
	     * @param lastTimestamp
	     * @param maxEntries
	     * @param finalRevisionNumber
	     * @private
	     */
	    _sendSyncRequest: function(lastRevisionNumber, lastTimestamp, maxEntries, finalRevisionNumber, collectionId) {
	        if(!this.syncEnabled) return;

	        var syncRequestObject = {};

	        if(collectionId) {

	        }
	        else {
	            syncRequestObject["since_id"] = lastRevisionNumber
	            syncRequestObject["since_timestamp"] = lastTimestamp;
	            syncRequestObject["count"] = maxEntries;
	            syncRequestObject["_csrf"] = this.get("csrfToken");
	            pm.syncLogger.log(new Error(),"Making /sync request with obj: ...");
	            pm.syncLogger.log(new Error(),syncRequestObject);
	            if(finalRevisionNumber!==-1) {
	                //syncRequestObject["max_id"] = finalRevisionNumber;
	            }
	        }

	        var oldThis = this;
	        this.sentInitialSyncRequest = true;
	        this.trigger("syncStarting");

	        if(collectionId) {
	            pm.syncManager.makeRequest('get',"/"+postman_sync_api_version+"/collection/"+collectionId+"?populate=true&changeset=true", null, null, function(msg) {
	                if(!oldThis.syncEnabled) {
	                    return;
	                }
	                oldThis.sentInitialSyncRequest = false;
	                pm.syncLogger.log(new Error(),"Sync response received: ");
	                pm.syncLogger.log(new Error(),msg);
	                oldThis._handleNewSyncResponse(msg);
	                if(lastRevisionNumber!==0) {
	                    //integrity check for all data
	                    /*setTimeout(function() {
	                        pm.syncManager.startIntegrityCheck();
	                    },10000);*/
	                }
	            });
	        }
	        else {
	            var urlParams = $.param(syncRequestObject);
	            pm.syncManager.makeRequest('get',"/"+postman_sync_api_version+"/session/sync?" + urlParams, null, null, function(msg) {
	                if(!oldThis.syncEnabled) {
	                    return;
	                }
	                oldThis.sentInitialSyncRequest = false;
	                pm.syncLogger.log(new Error(),"Sync response received: ");
	                pm.syncLogger.log(new Error(),msg);
	                oldThis._handleNewSyncResponse(msg);
	                clearTimeout(oldThis.get("socketConnectTimeout"));
	                clearInterval(oldThis.get("tickInterval"));
	                if(lastRevisionNumber!==0) {
	                    //integrity check for all data
	                    pm.syncManager.doIntegrityCheck = true;
	                }
	            });
	        }
	    },

	    /**
	     * @description This adds all server changes to the server queue, makes an additional sync call if needed, and starts processing
	     * @param message
	     * @private
	     */
	    _handleNewSyncResponse: function(message) {
	        pm.syncLogger.log(new Error(),"Handling sync response: ");
	        pm.syncLogger.log(new Error(),message);
	        var oldThis = this;
	        if(!pm.user.isLoggedIn()) {
	            console.log("User logged out");
	            return;
	        }

	        //changesets for a single collection only (called during collection resync)
	        if(message.meta && message.data && message.meta.model==="collection") {
	            var changes = message.data;
	            var numChanges = changes.length;
	            var currentMaxRevision = 0;
	            for(var i=0;i<numChanges;i++) {
	                //this change will have a revisionNumber and a changeset
	                if(!changes[i].hasOwnProperty("meta")) {
	                    pm.syncLogger.log(new Error(),"Server change did not have meta field. " + JSON.stringify(changes[i]));
	                    continue;
	                }

	                /* user permission */
	                if(message.hasOwnProperty("meta") && message.meta.hasOwnProperty("access")) {
	                  changes[i].meta.access = message.meta.access;
	                }

	                this.serverChanges.push(changes[i]);
	                if(changes[i].revision > currentMaxRevision) {
	                    currentMaxRevision = changes[i].revision;
	                }
	            }
	            this.set("initialSyncComplete",true); //this means that the S changes have been received
	            pm.mediator.trigger('resolveConflicts',this.serverChanges);
	        }

	        //all changesets
	        else if(message.own) {
	            var finalRevisionNumberToExpect = message.own.max_id;
	            var lastSinceId = message.own.last_since_id;
	            if(lastSinceId!==-1) {
	                var messageForSinceUpdate = {"revision":lastSinceId};
	            }

	            this.set("finalRevisionNumber", finalRevisionNumberToExpect);

	            var oldTimestamp = this.get("lastTimestamp");
	            if(message.reset_timestamp && oldTimestamp < message.reset_timestamp) {
	                this.startForceSync();
	                this.set("lastTimestamp", message.sync_timestamp);
	                return;
	            }
	            this.set("lastTimestamp", message.sync_timestamp);

	            pm.indexedDB.updateLastSynced(message.sync_timestamp, function(){});

	            var changes = _.filter(message.own.entities, function(entity) {
	                return !(entity["action"]==="subscribe");
	            });
	            changes = changes.concat(_.map(message.subscribe.entities, function(entity) {
	                entity["subscribe"]=true;
	                return entity;
	            }));

	            var numChanges = changes.length;
	            var currentMaxRevision = 0;
	            for(var i=0;i<numChanges;i++) {
	                //this change will have a revisionNumber and a changeset
	                if(!changes[i].hasOwnProperty("meta")) {
	                    pm.syncLogger.log(new Error(),"Server change did not have meta field. " + JSON.stringify(changes[i]));
	                    continue;
	                }

	                this.serverChanges.push(changes[i]);
	                if(changes[i].revision > currentMaxRevision) {
	                    currentMaxRevision = changes[i].revision;
	                }
	            }

	            this.set("initialSyncComplete",true); //this means that the S changes have been received
	            pm.mediator.trigger('resolveConflicts',this.serverChanges);
	        }
	        //if theres a instancenotfounderror, resync the whole collection
	        else if(message.error && message.error.name==="instanceNotFoundError") {
	            pm.mediator.trigger('resolveConflicts',this.serverChanges);
	        }
	        else if(message.error && message.error.name=="authenticationError") {
	            //if this happens very often
	            if(this.authErrorForSync) {
	                if(postman_electron) {
	                    //TODO: Test in electron
	                    pm.cookieManager.deleteDomain("getpostman.com");
	                }
	                else {
	                    //TODO: figure out some other way for chrome
	                }
	            }
	            this.authErrorForSyncTimer = setTimeout(function() {
	                oldThis.authErrorForSync = false;
	            }, 1000);
	            this.authErrorForSync = true;
	            
	            pm.syncSocket.disconnect();
	            pm.syncSocket.removeAllListeners();
	            delete pm.syncSocket;
	            pm.api.recreateSyncUser(function(result) {
	                pm.user.getSyncData();
	            });
	        }
	        else {
	            console.error("Failure to sync.");
	            pm.alerts.error('There was an error while syncing. Please force sync after some time (<i>Settings > Sync > Force Sync</i>).', {
	              timeout: 5000,
	              dedupeId: 'failure-to-sync',
	              showAsHtml: true
	            });
	            pm.syncLogger.error("Sync operation returned malformed message (no message.own): " + JSON.stringify(message));
	        }

	    },

	    //is called during the initial sync operation
	    //is called whenever the next unsynced change needs to be processed
	    onSyncClientChanges: function(unsyncedChanges, stream) {
	        var numChanges = unsyncedChanges.length;

	        if(unsyncedChanges.length === 0) {
	            //all client changes have been synced
	            this.trigger("syncFinished");
	            this.set("allClientChangesSynced", true);
	            pm.mediator.trigger("startCollectionForceSyncs");
	            //nothing else to do
	        }
	        else {
	            var changeToSync = unsyncedChanges[0];
	            if(!stream) {
	                stream = changeToSync.stream;
	            }
	            this._syncClientChange(changeToSync, stream);
	        }
	    },

		_syncClientChange: function(changeToSync, stream) {
	        if(!this.syncEnabled) return;

	        //check serverChanges.length===0
	        pm.syncLogger.log(new Error(),"Syncing client change to sever...");
	        pm.syncLogger.log(new Error(),"Change so sync: ");
	        pm.syncLogger.log(new Error(),changeToSync);
	        var verb = changeToSync.verb;
	        var entity = changeToSync.entity;
	        if(!entity) {
	            entity = changeToSync.model;
	        }
	        var data = changeToSync.data;
	        var meta = changeToSync.meta;
	        if(verb==="transfer" && data && data.id!=null) {
	            meta = data.id;
	        }
	        if(verb==="unsubscribe" && data && data.id!=null) {
	            meta = data.id;
	        }

	        //set the right owner
	        //for folders
	        if(!data.hasOwnProperty("owner")) {
	            if (data.hasOwnProperty("collection")) {
	                var collection = pm.collections.getCollectionById(data.collection);
	                if(collection) {
	                    data.owner = pm.collections.getCollectionById(data.collection).get("owner");
	                }
	            }
	            //for collections
	            if (entity === "collection") {
	                var collection = pm.collections.getCollectionById(data.id);
	                if(collection) {
	                    data.owner = pm.collections.getCollectionById(data.id).get("owner");
	                }
	            }
	            //for requests
	            if (entity === "request") {
	                var request = pm.collections.getRequestById(data.id);
	                if(request) {
	                    data.owner = pm.collections.getRequestById(data.id).owner;
	                }
	            }
	        }

	        var unsyncedChangeKey = pm.localChanges.getUnsyncedChangeId(entity, verb, data, meta);
	        var unsyncedKey = unsyncedChangeKey.entityKey;
	        this._syncClientChangeToServer(verb, entity, data, meta, false, stream, unsyncedKey);
	    },

	    _getInitSynObject: function(since, changes) {
	        var ret = {};
	        ret["since_id"]=since;
	        var clientData = [];
	        var numChanges = changes.length;
	        for(var i=0;i<numChanges;i++) {
	            var change = changes[i];
	            var model = change.entity;
	            var model_id = change.data.id;
	            var action = change.verb;
	            var data = change.data;
	            clientData.push({
	                "model": model,
	                "model_id": model_id,
	                "action": action,
	                "data": data
	            });
	        }
	        ret["client_data"] = clientData;
	        return ret;
	    },

	    executeOrAddFunctionToQueue: function(func) {
			pm.syncQueue.push(func);
	        if(pm.syncQueue.length==1) {
	        	var funcToExec = pm.syncQueue.shift();
				funcToExec();
	        }
	    },

	    //Since the serverhas now moved action and model to the meta property.
	    handleNewMessageFormat: function(message) {
	        if(!message.hasOwnProperty("meta")) {
	            return;
	        }

	        message.model = message.meta.model;
	        message.action = message.meta.action;

	        this.set("lastTimestamp", Date.now());
	    },

	    attachListeners: function() {
	        console.log("SYNC: Invoking attachListeners");
	        if(!this.syncEnabled) {
	            console.log("SYNC: Syncenabled is false. Returning attachListeners");
	            return;
	        }

	        if(pm.syncSocket==null) {
	            console.log("SYNC: socket is null. Returning attachListeners");
	            return;
	        }
	        pm.syncLogger.log(new Error(),"Attaching listeners to socket.");
	        console.log("SYNC: Attaching listeners");
	        var syncManager = this;
	        pm.syncSocket.on('connect', function socketConnected() {
	                console.log("SYNC: Socket.connect listener fired");
	                syncManager.socketCount++;

	                clearTimeout(syncManager.get("socketConnectTimeout"));

	                pm.syncManager.set("connectingToSocket", false);
	                pm.syncManager.set("socketConnected",true);
	                pm.syncSocket.on('user', function (message) {
						//console.log(pm.syncLogger.getLogDate() + " - " +"Not listening to user events");
	                });

	                pm.syncSocket.on('subscribe',function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    //console.log(pm.syncLogger.getLogDate() + " - " +"subscribe_collection: ",message);
	                    pm.syncManager.executeOrAddFunctionToQueue(function() {
	                        //TODO: check for errors here
	                        pm.mediator.trigger("syncChangeReceived","subscribe",message);
	                    });
	                });

	                pm.syncSocket.on('unsubscribe',function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    //console.log(pm.syncLogger.getLogDate() + " - " +"unsubscribe_collection: ",message);
	                    pm.syncManager.executeOrAddFunctionToQueue(function() {
	                        pm.mediator.trigger("syncChangeReceived","unsubscribe",message);
	                    });
	                });

	                pm.syncSocket.on('create',function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    //console.log(pm.syncLogger.getLogDate() + " - " +"Created: ",message);
	                    pm.syncManager.executeOrAddFunctionToQueue(function() {
	                        pm.mediator.trigger("syncChangeReceived","create",message);
	                    });
	                });

	                pm.syncSocket.on('import',function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    //console.log(pm.syncLogger.getLogDate() + " - " +"Created: ",message);
	                    pm.syncManager.executeOrAddFunctionToQueue(function() {
	                        pm.mediator.trigger("syncChangeReceived","import",message);
	                    });
	                });

	                pm.syncSocket.on('update',function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    //console.log(pm.syncLogger.getLogDate() + " - " +"Updated: ",message);
		                pm.syncManager.executeOrAddFunctionToQueue(function() {
			                pm.mediator.trigger("syncChangeReceived","update",message);
		                });
	                });

	                pm.syncSocket.on('destroy',function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    //console.log(pm.syncLogger.getLogDate() + " - " +"Destroyed: "+message);
		                pm.syncManager.executeOrAddFunctionToQueue(function() {
			                pm.mediator.trigger("syncChangeReceived","destroy",message);
		                });
	                });

	                pm.syncSocket.on('history',function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    pm.syncLogger.log(new Error(),["History: ", message]);
		                pm.syncManager.executeOrAddFunctionToQueue(function() {
			                pm.mediator.trigger("syncChangeReceived","history",message);
		                });
	                });

	                pm.syncSocket.on('transfer', function(message) {
	                    if(!syncManager.isPrimaryWindow()) {
	                        return;
	                    }
	                    syncManager.handleNewMessageFormat(message);
	                    pm.syncLogger.log(new Error(),"Transfer notif received");
	                    if(message.revision!=null) {
	                        pm.syncManager.updateSinceFromMessage(message);
	                    }
		                pm.syncManager.executeOrAddFunctionToQueue(function() {
			                pm.mediator.trigger("syncChangeReceived","transfer",message);
		                });
	                });

	                pm.syncSocket.on('disconnect', function (logout) {
	                    var logout = pm.syncManager.explicitLogout;
	                    if(typeof logout==="undefined") {
	                        logout = false;
	                    }
	                    pm.syncManager.set("connectingToSocket", false);
	                    pm.syncManager.set("socketConnected", false);
	                    pm.syncManager.explicitLogout = false;
	                    pm.syncManager.set("csrfReceived", false);
	                    pm.syncManager.socketCount--;
	                    //if(!syncManager.syncEnabled) {
	                        //move all retry changes to unsynced
	                        syncManager.addAllRetryChangesToUnsynced();
	                        pm.syncLogger.log(new Error(),'Socket is now disconnected!');
	                        syncManager.set("socketConnected", false)
	                        syncManager.set("syncActive", false);
	                        if(logout) {
	                            syncManager.trigger("disabledSync");
	                        }
	                        else {
	                            syncManager.trigger("makeNotConnected");
	                        }
	                        if(syncManager.get("loggedIn")==true) {
	                            syncManager.tryToReconnect();
	                        }
	                        if(logout) {
	                            syncManager.set("loggedIn",false);
	                            syncManager.socketCount = 0;
	                        }
	                        if(!logout) {
	                            syncManager.set("loggingIn", true);
	                        }
	                    //}
	                });

	                pm.syncSocket.on('share', function (message) {
	                  if(!syncManager.isPrimaryWindow()) {
	                    return;
	                  }

	                  syncManager.handleNewMessageFormat(message);
	                  pm.syncLogger.log(new Error(), ["Share: ", message]);

	                  pm.syncManager.executeOrAddFunctionToQueue(function() {
	                    pm.mediator.trigger("syncChangeReceived", "share", message);
	                  });
	                  pm.mediator.trigger('socket:share', message);
	                });

	                pm.syncSocket.on('unshare', function (message) {
	                  if(!syncManager.isPrimaryWindow()) {
	                    return;
	                  }

	                  syncManager.handleNewMessageFormat(message);
	                  pm.syncLogger.log(new Error(), ["Unshare:: ", message]);

	                  pm.syncManager.executeOrAddFunctionToQueue(function() {
	                    pm.mediator.trigger("syncChangeReceived", "unshare", message);
	                  });
	                  pm.mediator.trigger('socket:unshare', message);
	                });

	                if(pm.user.isLoggedIn()===true) {
	                    pm.syncManager.signIn();
	                }
	        });

	        clearTimeout(this.get("socketConnectTimeout"));
	        this.set("socketConnectTimeout", setTimeout(function() {
	            pm.syncManager.trigger("makeNotConnected");
	        },20000));
	    },

	    /**
	     * @description - invoked after a single client->server message's response has been received. may be a realtime event,
	     * or one sent after the user has logged in (as part of the sync flow). In the latter case, unsyncedChange[0] will be deleted
	     * @param realtime
	     * @param callback
	     * @private
	     */
	    _clearClientChangeIfNeeded: function(unsyncedKey, realtime, stream, callback) {
		    //only delete the unsynced change IF the change is not a realtime change
		    pm.mediator.trigger("singleUnsyncedChangeSynced", unsyncedKey, realtime, stream);
	        //console.log(pm.syncLogger.getLogDate() + " - " +"Successfully sent client change to server");
		    callback();
	    },

	    getEntityFromId: function (entity, id, ownerId, secondArgument, callback) {
	        if(!this.syncEnabled) return;
	        var oldThis = this;
	        pm.syncManager.makeRequest('get',"/"+postman_sync_api_version+"/"+entity+"/"+id+"?owner="+ownerId, null, null, function(res) {
	            //console.log(pm.syncLogger.getLogDate() + " - " +"GET complete", res);
	            if(res.hasOwnProperty("error")) {
	                oldThis.handleErrorObject(res, entity, {}, "GET",null, id);
	            }
	            else {
	                callback(res, secondArgument);
	            }
	        });
	    },

	    getEntityForCollection: function(entity, ownerId, collectionId, callback) {
	        if(!this.syncEnabled) return;
	        pm.syncManager.makeRequest("get","/"+postman_sync_api_version+"/"+entity+"?collection="+collectionId+"&owner="+ownerId, null, null, function(res) {
	            //console.log(pm.syncLogger.getLogDate() + " - " +"GET complete", res);
	            callback(res);
	        });
	    },


	    getFoldersForObject: function(objectWithFolders, ownerId, subscribeOnly) {
	        if(typeof subscribeOnly === "undefined") {
	            subscribeOnly = false;
	        }
	        var folderIds = objectWithFolders.folders_ids;
	        var oldThis = this;
	        if(!folderIds) {
	            //get folder ids
	            if(ownerId == "0") {
	                ownerId = pm.user.id;
	            }
	            pm.syncManager.getEntityForCollection("folder", ownerId, objectWithFolders.id, function(results) {
	                _.map(results, function (res) {
	                    if(res.meta && res.data) {
	                        //New API
	                        res = res.data;
	                    }

	                    if (subscribeOnly && pm.subscriptionManger.subscribedTo.indexOf(res.collection) === -1) {
	                        console.log("the collection was unsubscribed to before this folder was received");
	                        return;
	                    }

	                    pm.collections.addFolderFromRemote(res, null);

	                    //for nested folders
	                    if (res.folders_ids) {
	                        pm.syncManager.getFoldersForObject(res, ownerId, subscribeOnly);
	                    }
	                    pm.syncManager.getRequestsForObject(res, ownerId, res.id, "folder");
	                });
	            });
	        }
	        else {
	            _.map(folderIds, function (fid) {
	                pm.syncManager.getEntityFromId("folder", fid, ownerId, null, function (res) {
	                    //res will be a folder
	                    //if (oldThis.subscribedTo.indexOf(res.collection) === -1) {
	                    //    console.log("the collection was unsubscribed to before this folder was received");
	                    //    return;
	                    //}
	                    if(res.meta && res.data) {
	                        //New API
	                        res = res.data;
	                    }

	                    pm.collections.addFolderFromRemote(res, null);

	                    //for nested folders
	                    if (res.folders_ids) {
	                        pm.syncManager.getFoldersForObject(res, ownerId, subscribeOnly);
	                    }
	                    pm.syncManager.getRequestsForObject(res, ownerId, fid, "folder");
	                });
	            });
	        }

	    },

	    getRequestsForObject: function(objectWithOrder, ownerId, parentId, parentType) {
	        var oldThis = this;
	        var numRequestsAdded = 0;
	        _.map(objectWithOrder.order, function(requestId) {
	            if(ownerId == "0") {
	                ownerId = pm.user.id;
	            }
	            pm.syncManager.getEntityFromId("request",requestId, ownerId, objectWithOrder, function(res,owo) {
	                if(res.meta && res.data) {
	                    //New API
	                    res = res.data;
	                }

	                if(!res) {
	                    //probably send an invalid requestId
	                    pm.syncLogger.error("No requestData received for requestId: " + requestId+", owner=" + ownerId);
	                    return;
	                }

	                if(pm.collections.getRequestById(res.id)) {
	                    //we already have the request
	                    return;
	                }

	                res["collectionId"]=res.collection;
	                if(res.dataMode==="raw" && res.rawModeData) {
	                    res.data = res.rawModeData;
	                    delete res.rawModeData;
	                }
	                pm.collections.addFullCollectionRequest(res, null);

	                oldThis.getResponsesForRequest(res.id, ownerId);
	                numRequestsAdded++;
	                //Change objectWithOrder to owo if order becomes a problem
	                if(numRequestsAdded === objectWithOrder.order.length) {

	                    setTimeout(function(pt, pi, oo) {
	                        return function() {
	                            pm.collections.trigger("sortRequestContainer", pt, pi, oo);
	                        }
	                    }(parentType, parentId, objectWithOrder.order), 1000);

	                }
	            });
	        });
	    },

	    //TODO: Change
	    getResponsesForRequest: function(requestId, ownerId) {
	        if(ownerId == "0") {
	            ownerId = pm.user.id;
	        }
	        pm.syncManager.makeRequest('get',"/"+postman_sync_api_version+"/response?request="+requestId+"&owner="+ownerId, null, null, function(res) {
	            if(res.error && res.error.message) {
	                console.log(pm.syncLogger.getLogDate() + "Error getting responses for request: " + requestId + ". Reason:" + res.error.message);
	                return;
	            }
	            if(res.length==0) {
	                //console.log("No responses for this request");
	                return;
	            }
	            pm.collections.addResponsesToCollectionRequestWithoutSync(requestId, res, function() {});
	        });
	    },

	    isErrorResponse: function(res, jwr) {
	        if(!res) {
	            //TODO: Have to log this separately.
	            //this points to a server error
	            return true;
	        }

	        if(res.hasOwnProperty("error")) {
	            return true;
	        }

	        if(jwr && jwr.hasOwnProperty("statusCode") && jwr.statusCode!==200) {
	            return true;
	        }

	        if(res.hasOwnProperty("statusCode") && res.statusCode!==200) {
	            return true;
	        }

	        return false;
	    },

	    //called when all other unsynced changes have been processed
	    //goes throught the list of IDs of collections to force sync
	    startCollectionForceSyncs: function() {
	        var ids = this.collectionsToForceSync;
	        if(ids.length>0) {
	            var id = this.collectionsToForceSync.splice(0,1);
	            this.startForceSync(id[0]);
	            return;
	        }
	        var fids = this.foldersToForceSync;
	        if(fids.length>0) {
	            var id = this.foldersToForceSync.splice(0,1);
	            this.startForceSync(null, id[0]);
	        }
	    },


	    /**
	     * @description handle custom error names as sent by anakin
	     * @param res
	     * @param verb is the verb that caused the original error. if it's transfer, we need to resend
	     */
	    handleErrorObject: function(res, entity, data, verb, unsyncedKey, meta) {
	        var oldThis = this;
	        var clearChange = true;

	        if(verb!=="subscribe") {
	            if(this.changesetErrorCounts.hasOwnProperty(verb+":"+unsyncedKey)) {
	                this.changesetErrorCounts[verb+":"+unsyncedKey]++;
	            }
	            else {
	                this.changesetErrorCounts[verb+":"+unsyncedKey] = 1;
	            }
	            clearTimeout(this.changesetErrorTimeouts[verb+":"+unsyncedKey]);
	            this.changesetErrorTimeouts[verb+":"+unsyncedKey] = setTimeout(function(v,u) {
	                return function() {
	                    delete oldThis.changesetErrorCounts[v+":"+u];
	                }
	            }(verb,unsyncedKey), 2000);
	        }

	        //prevent any change from being sent twice. Why is this needed??
	        /*var retriedIndex = this.retriedChanges.indexOf(unsyncedKey);
	        if(retriedIndex !== -1) {
	            this.retriedChanges.splice(retriedIndex, 1);
	            return true;
	        }*/

	        if(!res) {
	            //no error object :s
	            //dunno what to 
	            pm.mediator.trigger("sendCustomError", new Error("No res object received for entity = " + entity + " verb = " + verb));
	            return true;
	        }

	        if(verb==="share") {
	            if(res.error.name!="isSharedError") {
	                pm.mediator.trigger("shareError", "share", meta);
	            }
	            return true;
	        }
	        else if(verb==="unshare") {
	            //only throw error to the UI if the error is not isNotSharedError
	            if(res.error.name!=="isNotSharedError") {
	                pm.mediator.trigger("shareError", "unshare", meta);
	            }
	            return true;
	        }
	        else if(verb==="importCollection") {
	            //if the server already has the collection that you're duplicating, don't do anything
	            if(res && res.error && (res.error.name==="throttleError" || res.error.name==="instanceFoundError")) {
	                return true;
	            }
	            else {
	                pm.syncManager.addCollectionsToForceSync(data.id);
	                return true;
	            }
	        }
	        else if(verb==="importFolder") {
	            if(res.error && res.error.name==="throttleError") {
	                return true;
	            }
	            else {
	                pm.syncManager.foldersToForceSync.push(data.id);
	                return true;
	            }
	        }

	        if(verb==="subscribe" && res.error.name==="isSubscribedError") {
	            //already subscribed. get from server
	            if(!pm.collections.get(data.collectionId)) {
	                pm.collections.getMissingServerCollection(data.collectionId, data.owner);
	            }
	            pm.mediator.trigger("alreadySubscribed", data.collectionId);
	            return true;
	        }

	        if(verb==="subscribe" && res.error.name==="serverError") {
	            //no-one knows - server is incapable of handling 2 subscribe/unsubscribes quickly
	            //retry after a while
	            pm.mediator.trigger("tempSubscribeError", data.collectionId);
	            return false;
	        }

	        if(verb==="unsubscribe" && res.error.name==="serverError") {
	            //no-one knows - server is incapable of handling 2 subscribe/unsubscribes quickly
	            //retry after a while
	            return false;
	        }

	        if(!res.error) {
	            //non-anakin error (sent via socket/sails)
	            return false;
	        }

	        //occurs during an update
	        if(res.error.name === "changeParentError") {
	            //collection to folder:
	            var details = res.error.details;
	            if(details.request.model === "folder") {
	                var oldLocation = {};
	                if(details.server.model === "folder" && details.server.model_id == "") {
	                    //trying to move from collection to folder
	                    oldLocation.model = "collection";
	                    oldLocation.model_id = data.collection;
	                    oldLocation.owner = data.owner;
	                }
	                else {
	                    //trying to move from folder to folder
	                    oldLocation.model = "folder";
	                    oldLocation.model_id = details.server.model_id;
	                    oldLocation.owner = data.owner;
	                }
	                var toLocation = {
	                    model:"folder",
	                    model_id: details.request.model_id,
	                    owner: data.owner
	                };
	                pm.syncManager.addChangeset("request","transfer",
	                    {
	                        "to": toLocation,
	                        "from": oldLocation,
	                        "owner": data.owner
	                    }
	                    , data.id, true);
	                clearChange = true;
	            }
	            else { //folder to collection
	                //we don't know what to do
	                clearChange = true;
	            }
	        }
	        else if (res.error.name === "orderUpdateError") {
	            if (entity === "collection") {
	                pm.syncManager.addCollectionsToForceSync(data.id);
	                clearChange = true;
	            }
	            else if(entity === "folder") {
	                pm.syncManager.addCollectionsToForceSync(data.collection);
	                clearChange = true;
	            }
	        }
	        else if(res.error.name === "instanceFoundError") {
	            clearChange = true;
	            if(verb==="history") {
	                clearChange = true;
	            }
	            else {
	                //start force sync for the collection here
	                if(entity==="collection") {
	                    pm.syncManager.addCollectionsToForceSync(data.id);
	                }
	                else if(entity==="folder") {
	                    pm.syncManager.addCollectionsToForceSync(data.collection);
	                    //pm.collections.updateFolderToRemote(data.id, true);
	                }
	                else if(entity==="request") {
	                    //to prevent the error-causing change from deleting this change
	                    setTimeout(function(dataObject){
	                        return function() {
	                            pm.collections.resyncRequestId(dataObject.id, true, true);
	                        }
	                    }(data), 1000);
	                }
	            }
	        }
	        else if (res.error.name === "instanceNotFoundError") {
	            if(verb === "history" || verb === "destroy") {
	                clearChange = true;
	            }
	            else {
	                oldThis.deleteChangesForEntity(res.error.details.model, res.error.details.model_id);
	                setTimeout(function(details){
	                    return function() {
	                        oldThis.handleInstanceNotFound(details);
	                    }
	                }(res.error.details), 5);
	                if (verb === "transfer") {
	                    clearChange = false;
	                }
	                else {
	                    clearChange = true;
	                }
	                //always clear. everything will be recreated anyway. for transfer, the transfer change needs to be replayed
	            }
	        }
	        else if(res.error.name==="throttleError") {
	            clearChange = false;
	        }
	        else if(res.error.name==="authenticationError") {
	            pm.syncSocket.disconnect();
	            pm.syncSocket.removeAllListeners();
	            delete pm.syncSocket;
	            pm.api.recreateSyncUser(function(result) {
	                pm.user.getSyncData();
	            });
	            clearChange = false;
	        }
	        else if(res.error === "CSRF mismatch") {
	            clearChange = false;
	        }
	        else if(res.error.name === "forbiddenError" && verb==="update") {
	            if(!pm.user.isTeamMember()) {
	                pm.alerts.warning('Oops... something went wrong. Try duplicating the collection.', {
	                dedupeId: 'forbiddenError',
	                timeout: 10000
	              });
	            }
	            else {
	              pm.alerts.warning('Oops...something went wrong. If this object was in your collection, try duplicating the collection. Otherwise, try resubscribing to it', {
	                dedupeId: 'forbiddenError',
	                timeout: 10000
	              });
	            }
	            clearChange = true;

	        }
	        else {
	            //all serverError / new errors
	            clearChange = false;
	            pm.syncLogger.error("Unknown error while sending data to the server. Error: " + JSON.stringify(res.error));
	            pm.syncLogger.error("Data that was sent("+entity+","+verb+"): " + JSON.stringify(data));
	            //start force sync if verb!=history
	        }

	        //if you're not clearing the change
	        if(clearChange == false) {
	            this.retriedChanges.push(unsyncedKey);
	        }
	        else {
	            var retriedIndex = this.retriedChanges.indexOf(unsyncedKey);
	            if(retriedIndex !== -1) {
	                this.retriedChanges.splice(retriedIndex, 1);
	            }
	        }
	        return clearChange;
	    },

	    //Deletes all unsynced changes for entity#id
	    deleteChangesForEntity: function(entity, id) {
	        switch(entity) {
	            case "collection":
	                pm.localChanges.deleteChangesForCollection(id);
	                break;
	            case "folder":
	                pm.localChanges.deleteChangesForFolder(id);
	                break;
	            default:
	                break;
	        }
	    },

	    handleInstanceNotFound: function(details) {
	        if(!details) {
	            pm.syncLogger.error("Sobti - No details received for instanceNotFound");
	            return;
	        }
	        var status = true;
	        this.deleteChangesForEntity(details.model, details.model_id);
	        switch(details.model) {
	            case "collection":
	                status = pm.collections.resyncCollectionId(details.model_id, true);
	                break;
	            case "folder":
	                status = pm.collections.resyncFolderId(details.model_id, true);
	                break;
	            case "request":
	                status = pm.collections.resyncRequestId(details.model_id, true);
	                break;
	            case "environment":
	                status = pm.environments.resyncEnvironmentId(details.model_id, true);
	                break;
	            default:
	                pm.syncLogger.error("instanceNotFound recd for model: " + details.model);
	                break;
	        }
	        return status;
	    },

	    addCollectionsToForceSync: function(cid) {
	        if(pm.syncManager.collectionsRecentlyForceSynced[cid]) {
	            //do nothing
	            return null;
	        }
	        else {
	            pm.localChanges.deleteChangesForCollection(cid);
	            pm.syncManager.collectionsRecentlyForceSynced[cid] = true;
	            setTimeout(function(cid) {
	                return function() {
	                    delete pm.syncManager.collectionsRecentlyForceSynced[cid];
	                }
	            }(cid), 5000);
	            if(this.collectionsToForceSync.indexOf(cid)===-1) {
	                this.collectionsToForceSync.push(cid);
	            }

	            //no need to do this. this function is always called from within a response handler, so will be invoked once the "syncnextrequest" func is called
	            /*
	            if(pm.localChanges.currentUnsynced.length==0) {
	                this.startCollectionForceSyncs();
	            }*/
	            return true;
	        }
	    },

	    addUserAgent: function(data) {
	        if(!data) {
	            data = {};
	        }
	        data["user-agent"] = this.clientUserAgent;
	    },

	    handleAttemptObject: function(verb, unsyncedKey) {
	        var oldThis = this;
	        if(this.changesetAttemptCounts.hasOwnProperty(verb+":"+unsyncedKey)) {
	            this.changesetAttemptCounts[verb+":"+unsyncedKey]++;
	        }
	        else {
	            this.changesetAttemptCounts[verb+":"+unsyncedKey] = 1;
	        }
	        clearTimeout(this.changesetAttemptTimeouts[verb+":"+unsyncedKey]);
	        this.changesetAttemptTimeouts[verb+":"+unsyncedKey] = setTimeout(function(v,u) {
	            return function() {
	                delete oldThis.changesetAttemptCounts[v+":"+u];
	            }
	        }(verb,unsyncedKey), 500);
	    },

	    cleanseUpdateObject: function(entity, data) {
	        if(entity==="collection" || entity==="folder") {
	            delete data.timestamp;
	            delete data.synced;
	            delete data.remote_id;
	            delete data.requests;
	            delete data.createdAt;
	            delete data.subscribed;
	            delete data.updatedAt;
	            delete data.sharedWithTeam;
	        }

	        if(entity==="collection") {
	            delete data.folders;
	        }

	        delete data.collectionId;
	        delete data.collection_id;
	        delete data.folder_id;
	    },

	    _syncClientChangeToServer: function (verb, entity, data, meta, realtime, stream, unsyncedKey) {
	        if(!this.isPrimaryWindow()) {
	            //only sync for the fist window
	            return;
	        }
	        var oldThis = this;

	        var testUserId = (pm.isTesting===true)?'test':'1';
	        var userId = (postman_env==="local")?testUserId:pm.user.id;

	        if(data) {
	            data["_csrf"] = this.get("csrfToken");
	        }

	        if(verb==="update") {
	            this.cleanseUpdateObject(entity, data);
	        }

	        if(!unsyncedKey || unsyncedKey=="") {
	            var unsyncedChangeKey = pm.localChanges.getUnsyncedChangeId(entity, verb, data, meta);
	            unsyncedKey = unsyncedChangeKey.entityKey;
	        }
	        if(this.changesetAttemptCounts[verb+":"+unsyncedKey]>2) {
	            //console.log("Not syncing same change again");

	            clearTimeout(this.changesetAttemptTimeouts[verb+":"+unsyncedKey]);
	            this.changesetAttemptTimeouts[verb+":"+unsyncedKey] = setTimeout(function(v,u) {
	                return function() {
	                    delete oldThis.changesetAttemptCounts[v+":"+u];
	                }
	            }(verb,unsyncedKey), 500);
	            return;
	        }

	        this.handleAttemptObject(verb, unsyncedKey);

	        switch (verb) {
	            case 'share':
	                this.trigger("syncStartingWithDelay");
	                if(!meta) {
	                    meta = data.id;
	                }
	                if(data && !data.hasOwnProperty('team')) {
	                    var orgs = pm.user.get("organizations");
	                    if(orgs.length > 0) {
	                        data.team = orgs[0].id;
	                    }
	                }
	                pm.syncManager.makeRequest('put',"/"+postman_sync_api_version+"/collection/share/"+meta, data, null, function(realtime, stream, data, unsyncedKey, meta) {
	                  return function(res) {
	                      oldThis.trigger("syncFinishedWithDelay");
	                      var clearChange = true;
	                      if(oldThis.isErrorResponse(res, arguments[1])) {
	                          clearChange = _.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey, meta);
	                          pm.mediator.trigger("syncErrorReceived", "share", res);
	                      }

	                      if(clearChange || pm.syncManager.forceAllChanges) {
	                          pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                          oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                              return obj.key === unsyncedKey
	                          });
	                      }
	                  }
	                }(realtime, stream, data, unsyncedKey, meta));
	                break;
	            case 'unshare':
	                this.trigger("syncStartingWithDelay");
	                if(!meta) {
	                    meta = data.id;
	                }
	                pm.syncManager.makeRequest('put',"/"+postman_sync_api_version+"/collection/unshare/"+meta, {_csrf: oldThis.get("csrfToken")}, null, function(realtime, stream, data, meta, unsyncedKey) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey, meta);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, meta, unsyncedKey));
	                break;
	            case 'create':
	                //for folders and collections, add the correct order
	                if(entity==="collection") {
	                    pm.collections.updateCollectionOwnerWithoutSync(data.id, userId);
	                    data.owner = userId;

	                    var collectionJson = pm.collections.get(data.id);
	                    if(collectionJson) {
	                        data.order = pm.collections.get(data.id).get("order");
	                    }
	                }
	                else if(entity==="folder") {
	                    var folderJson = pm.collections.getFolderById(data.id);
	                    if(folderJson) {
	                        data.order = folderJson.order;
	                    }
	                }

	                //always set the correct owner. But this should be set corerctly anyway :(
	                if((entity==="folder" || entity==="request" || entity==="response")) {
	                    //ONLY TILL TEAM SYNC
	                    //after team sync is introduced, use the else clause
	                    if(!pm.user.isTeamMember()) {
	                        data.owner = pm.user.id;
	                    }
	                    else if(data.collection) {
	                        data.owner = pm.collections.getOwnerForCollection(data.collection);
	                    }
	                }

	                var optOwner = "";
	                if(data.owner) optOwner = "?owner="+data.owner;
	                this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('post', '/'+postman_sync_api_version+'/' + entity + optOwner, data, null, function(realtime, stream, data) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));

	                break;
	            case 'importCollection':
	                var optOwner = "";
	                if(data.owner) optOwner = "?owner="+data.owner;
	                this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('post', '/'+postman_sync_api_version+'/collection/import', data, null, function(realtime, stream, data) {
	                    return function(res) {
	                        //oldThis.set("allClientChangesSynced", true); //hail mary
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));
	                break;
	            case 'importFolder':
	                var optOwner = "";
	                if(data.owner) optOwner = "?owner="+data.owner;
	                this.trigger("syncStartingWithDelay");
	                pm.syncSocket.post('/'+postman_sync_api_version+'/folder/import', data, function(realtime, stream, data) {
	                    return function(res) {
	                        //oldThis.set("allClientChangesSynced", true); //hail mary
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));
	                break;
	            case 'update':
	                if (entity == "user") {
	                    data.id = userId;
	                }
	               /* if (entity == "folder") {
	                    delete data.collection;
	                    delete data.collectionId;
	                }*/
	                if(entity==="request") {
	                    delete data.folder;
	                }

	                //always set the correct owner. But this should be set corerctly anyway :(
	                if((entity==="folder" || entity==="request" || entity==="response")) {
	                    if(!pm.user.isTeamMember()) {
	                        data.owner = pm.user.id;
	                    }
	                    else if(data.collection) {
	                        data.owner = pm.collections.getOwnerForCollection(data.collection);
	                    }
	                }

	                this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('put', '/'+postman_sync_api_version+'/' + entity + '/' + data.id, data, null, function(realtime, stream, data) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));
	                break;
	            case 'destroy':
	                var optOwner = "?";
	                if(data.owner) optOwner = "?owner="+data.owner;
	                this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('delete', '/'+postman_sync_api_version+'/' + entity + '/' + data.id + optOwner,{_csrf: oldThis.get("csrfToken")}, null, function(realtime, stream, data) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));
	                break;
	            case 'history':
	                //Disable syncing... for history
	                //this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('post', '/'+postman_sync_api_version+'/user/history', data, null, function(realtime, stream, data) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));
	                break;
	            case 'transfer':
	                this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('put', '/'+postman_sync_api_version+'/request/transfer/'+meta, data, null, function(realtime, stream, data) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));
	                break;
	            case 'subscribe':
	                this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('put', '/'+postman_sync_api_version+'/' + entity + '/subscribe/'+meta, data, null, function(realtime, stream, data) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        if(oldThis.isErrorResponse(res, arguments[1])) {
	                            clearChange =_.bind(oldThis.handleErrorObject, oldThis)(res, entity, data, verb, unsyncedKey);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.mediator.trigger("successfulSubscribe", res);
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey));
	                break;
	            case 'unsubscribe':
	                this.trigger("syncStartingWithDelay");
	                pm.syncManager.makeRequest('put','/'+postman_sync_api_version+'/' + entity + '/unsubscribe/' + meta, data, null, function(realtime, stream, data, unsyncedKey, meta) {
	                    return function(res) {
	                        oldThis.trigger("syncFinishedWithDelay");
	                        var clearChange = true;
	                        //always unsubscribe
	                        clearChange = true;
	                        if(oldThis.isErrorResponse(res)) {
	                            pm.mediator.trigger("unsuccessfulUnsubscribe", data.id);
	                        }

	                        if(clearChange || pm.syncManager.forceAllChanges) {
	                            pm.mediator.trigger("successfulUnsubscribe", res);
	                            pm.syncManager._handleServerResponseAfterSendingClientChange(unsyncedKey, res, realtime, stream);
	                            oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                                return obj.key === unsyncedKey
	                            });
	                        }
	                    }
	                }(realtime, stream, data, unsyncedKey, meta));
	                break;
	            default:
	                pm.syncLogger.log(new Error(),"Invalid action: " + verb);
	                pm.syncManager._handleServerResponseAfterSendingClientChange(null, null, null, stream);
	                oldThis.sentChanges = _.reject(oldThis.sentChanges, function (obj) {
	                    return obj.key === unsyncedKey
	                });
	                break;
	        }
	    },

	    _handleServerResponseAfterSendingClientChange: function(unsyncedKey, res, realtime, stream) {
	        pm.syncLogger.log(new Error(),["Response after sending data to server: ", res]);
	        pm.syncManager._clearClientChangeIfNeeded(unsyncedKey, realtime, stream, function() {
	            pm.syncManager.updateSinceFromMessage(res);
	        });
	    },

		checkSizeOfFields: function(entity, verb, data) {
			if(entity === "response" && verb==="create") {
				if(data.text && data.text.length > postman_sync_rawtext_limit) {
	        pm.alerts.warning('Response too large. The response body for "'+data.name+'" cannot be synced. The maximum length for the response text is ' + postman_sync_rawtext_limit + ' characters', {
	          timeout: 10000
	        });
	        data.text = "";
					return false;
				}
			}
	        //request fields are not subject to size checks
	        /*
			else if(entity==="request") {
				if(data.rawModeData && data.rawModeData.length > postman_sync_rawtext_limit) {
					noty(
						{
							type:'warning',
							text:'Request data too large. The raw data for "'+data.name+'" cannot be synced. The maximum length for the raw data is ' + postman_sync_rawtext_limit + ' characters',
							layout:'topCenter',
							timeout:5000
						});
	                data.rawModeData = "";
					return false;
				}

				if(data.preRequestScript && data.preRequestScript.length > postman_sync_rawtext_limit) {
					noty(
						{
							type:'warning',
							text:'Request data too large. The pre-request script for "'+data.name+'" cannot be synced. The maximum length for the pre-request script is ' + postman_sync_rawtext_limit + ' characters',
							layout:'topCenter',
							timeout:5000
						});
	                data.preRequestScript = "";
					return false;
				}

				if(data.tests && data.tests.length > postman_sync_rawtext_limit) {
					noty(
						{
							type:'warning',
							text:'Request data too large. The tests for "'+data.name+'" cannot be synced. The maximum length for the test script is ' + postman_sync_rawtext_limit + ' characters',
							layout:'topCenter',
							timeout:5000
						});
	                data.tests = "";
					return false;
				}
			}
	        */

			return true;
		},

	    onChangesetFromOtherWindow: function(entity, verb, data_orig, meta, syncImmediately, addToTop) {
	        if(this.isPrimaryWindow()) {
	            this.addChangeset(entity, verb, data_orig, meta, syncImmediately, addToTop);
	        }
	    },

	    addChangeset: function(entity, verb, data_orig, meta, syncImmediately, addToTop) {
	        if(!this.syncEnabled) return;

	        if(!this.isPrimaryWindow()) {
	            pm.appWindow.trigger("sendMessageObject", "syncFromMainWindow",
	                entity, verb, data_orig, meta, syncImmediately, addToTop);
	            return;
	        }

	        if(!pm.user.isTeamMember()) {
	            if(verb==="share" || verb==="unshare") {
	                return;
	            }
	        }

	        var data = _.clone(data_orig);
	        //data.timestamp=(new Date()).getTime();
	        if(data!=null) {
	            data.timestamp=new Date(data.timestamp);
	        }

	        var testUserId = (pm.isTesting===true)?'test':'1';
	        var userId = (postman_env==="local")?testUserId:pm.user.id;

	        pm.syncLogger.log(new Error(),["Changeset recorder - entity:",entity," verb:",verb," data:",data]);

	        //Set owner in request and response
	        if((entity==="request" || entity==="response") && !data.owner) {
	            data.owner = pm.collections.getOwnerForCollection(data.collectionId);
	            if(!data.owner || postman_env==="local") {
	                data.owner = userId;
	            }
	        }

	        //Set owner for folder
	        else if((entity==="folder") && !data.owner) {
	            data.owner = pm.collections.getOwnerForCollection(data.collection_id);
	            if(!data.owner || postman_env==="local") {
	                data.owner = userId;
	            }
	        }
	        else if(verb === "create" && !data.owner && postman_env==="local") {
	            data.owner = userId;
	        }

		    //To preserve type of request.data
		    if(entity==="request") {
			    if(data["dataMode"]==="raw" && (typeof data["data"] === "string")) {
				    data["rawModeData"] = data["data"];
				    data["data"] = [];
			    }
	            delete data.responses;
		    }

		    //remove useless header descriptions
	        if(entity==="response") {
	            if(verb==="create") {
	                var numHeaders = (data.headers)?data.headers.length:0;
	                for(var i=0;i<numHeaders;i++) {
	                    data.headers[i].description="";
	                }

	                if(data.responseCode && data.responseCode.detail) {
	                    delete data.responseCode.detail;
	                }
	            }

	            if(data.request && (typeof data.request==="object")) {
	                data.request = data.request.id;

	                //add a reference to the parent folder for a response.
	                //this way, this change will be deleted by deleteChangesetsForFolder()
	                var request = pm.collections.getRequestById(data.request);
	                if(request) {
	                    data.folderId = request.folder;
	                }
	            }

	            if(typeof data.requestObject === "object") {
	                data.requestObject = JSON.stringify(data.requestObject);
	            }
	        }

	        //ensure a method for requests
	        if(entity==="request" && verb==="create") {
	            if(!data.method) {
	                data.method = "GET";
	            }
	        }

		    //set correct collectionid in child entities
	        if((entity==="request" || entity==="response") && verb==="create" && data.hasOwnProperty("collectionId")) {
	            data["collection"]=data["collectionId"];
	            delete data["collectionId"];
	        }

	        if(entity==="request" && data.hasOwnProperty("helperAttributes") && (typeof data.helperAttributes === 'object')) {
	            data.helperAttributes = JSON.stringify(data.helperAttributes);
	        }

	        //if(entity==="request" && data.hasOwnProperty("folder") && !data.folder) {
	        //    delete data.folder;
	        //}

		    if(entity==="request" && verb==="create" && data.hasOwnProperty("folderId") && !data.folder) {
			    data.folder = data.folderId;
		    }

		    //Adding check for SIZE
	        //TODO: Add size check sometime
		    if(this.checkSizeOfFields(entity, verb, data) === false) {
			    console.log("One of the size checks failed. Not syncing");
			    return;
		    }

	        //if((entity==="request" || entity==="response") && verb==="create") {
	        //    data["owner"] = pm.collections.getOwnerForCollection(data_orig.collectionId);
	        //}
	        //---END HACKS

	        //To preserve type of request.data
	        if(entity==="request") {
	            if(data["dataMode"]==="raw" && (typeof data["data"] === "string")) {
	                data["rawModeData"] = data["data"];
	                data["data"] = [];
	            }
	        }

	        if(entity==="folder" && (verb==="create" || verb==="update") && data.hasOwnProperty("collection_id")) {
	            data["collection"]=data["collection_id"];
	            delete data["collection_id"];
	        }

	        if(entity==="collection" && verb==="create") {
	            data["folders"] = [];
	        }


	        if(pm.localChanges.currentUnsynced.length>0 || this.get("syncActive")===false || syncImmediately===false || this.get("allClientChangesSynced")===false || verb==="importCollection" || verb==="importFolder") {
	            if(data === null) {
	                data={'id':meta};
	            }
	            //pm.mediator.trigger("addUnsyncedChange",entity, verb, data, meta, false, addToTop);
	            pm.localChanges.onAddUnsyncedChange(entity, verb, data, meta, false, addToTop);

	            //only trigger the timeout if the is the first change in the queue. otherwise it'll automatically be triggered
	            if(verb==="importCollection" ||
	            verb==="importFolder" ||
	            (verb==="create" && (entity==="environment" || entity==="headerpreset")) //entities that have no dependencies
	            ) {
	                setTimeout(function() {
	                    if(pm.localChanges.currentUnsynced.length === 1) {
	                        pm.mediator.trigger("commitTransaction", data.id);
	                    }
	                }, 500);
	            }

	        }
	        else {
	            if(data==null) {
	                data={'id':meta};
	            }

	            var oldThis = this;

	            try {
	                //NOT adding to unsynced...screw it
	                var unsyncedChangeKey = pm.localChanges.getUnsyncedChangeId(entity, verb, data, meta);
	                var unsyncedKey = unsyncedChangeKey.entityKey;
	                if(this.changesetErrorCounts[verb+":"+unsyncedKey]>2) {
	                    //console.log("Not syncing same change again");
	                    //do not send the same changeset consecutively
	                    clearTimeout(this.changesetErrorTimeouts[verb+":"+unsyncedKey]);
	                    this.changesetErrorTimeouts[verb+":"+unsyncedKey] = setTimeout(function(v,u) {
	                        return function() {
	                            delete oldThis.changesetErrorCounts[v+":"+u];
	                        }
	                    }(verb,unsyncedKey), 1500);
	                    pm.syncLogger.debug("Throttling client change ", verb+":"+unsyncedKey);
	                    return;
	                }

	                if(this.changesetAttemptCounts[verb+":"+unsyncedKey]>2) {
	                    //console.log("Not syncing same change again");

	                    clearTimeout(this.changesetAttemptTimeouts[verb+":"+unsyncedKey]);
	                    this.changesetAttemptTimeouts[verb+":"+unsyncedKey] = setTimeout(function(v,u) {
	                        return function() {
	                            delete oldThis.changesetAttemptCounts[v+":"+u];
	                        }
	                    }(verb,unsyncedKey), 500);
	                    pm.syncLogger.debug("Throttling client change ", verb+":"+unsyncedKey);
	                    return;
	                }

	                if(verb!=="importCollection" && verb!=="importFolder") {
	                    this.sentChanges.push({
	                        key: unsyncedChangeKey.entityKey,
	                        changeset: {
	                            entity: entity,
	                            verb: verb,
	                            data: data,
	                            meta: meta
	                        }
	                    });
	                }

	                //this will never be hit
	                if(verb==="importCollection" || verb==="importFolder") {
	                    pm.mediator.trigger("addUnsyncedChange",entity, verb, data, meta, false, addToTop);
	                    this.set("allClientChangesSynced", false); //hail mary
	                }

	                clearInterval(this.retrySentChangesInterval);
	                var oldThis = this;
	                this.retrySentChangesInterval = setInterval(function() {
	                    oldThis.retrySentChanges();
	                },this.retryChangesTime);

	                this._syncClientChangeToServer(verb, entity, data, meta, false, unsyncedChangeKey.stream, unsyncedChangeKey.entityKey);
	            }
	            catch(e) {
	                pm.syncLogger.error("SyncClientChangeToServer threw error. That means the socket wasnt connected properly. Adding to unsynced");
	                //will be synced when connection is reestablished
	            }
	        }
	    },

	    addAllRetryChangesToUnsynced: function() {
	        while(this.sentChanges.length>0) {
	            var thisChange = this.sentChanges[0].changeset;
	            pm.mediator.trigger("addUnsyncedChange",thisChange.entity, thisChange.verb, thisChange.data, thisChange.meta, true);
	            this.sentChanges.splice(0,1);
	        }
	    },

	    retrySentChanges: function() {
	        var oldThis = this;
	        if(this.lastKeyCount > 3) {
	            //add each to unsynced and clear timeout
	            var numChanges = this.sentChanges.length;
	            if(this.sentChanges.length > 0) {
	                var thisChange = this.sentChanges[0].changeset;
	                pm.mediator.trigger("addUnsyncedChange",thisChange.entity, thisChange.verb, thisChange.data, thisChange.meta, true);
	                //pm.mediator.trigger("beginUnsyncedStream", false, null, false);
	                //force sync here
	                pm.alerts.error('Oops. We\'re having trouble syncing your changes. Try a force sync (<i>Settings > Sync > Force Sync</i>).', {
	                  dedupeId: "sync-force-error",
	                  showAsHtml: true
	                });
	                this.sentChanges.splice(0,1);
	                console.log("Tried to send a changset 3 times..adding to unsynced changes");
	            }
	            this.lastKeyCount = 0;
	            clearInterval(this.retrySentChangesInterval);
	            this.retrySentChangesInterval = setInterval(function() {
	                oldThis.retrySentChanges();
	            },this.retryChangesTime);
	        }
	        else if(this.sentChanges.length > 0) {
	            var changeKey = this.sentChanges[0].key;
	            var thisChange = this.sentChanges[0].changeset;
	            console.log("Resending: " + changeKey);
	            if(this.lastKeyTried === changeKey) {
	                this.lastKeyCount++;
	            }
	            else {
	                this.lastKeyCount = 0;
	            }
	            this.lastKeyTried = changeKey;

	            this._syncClientChangeToServer(thisChange.verb, thisChange.entity, thisChange.data, thisChange.meta, true, null, changeKey);
	            clearInterval(this.retrySentChangesInterval);
	            this.retrySentChangesInterval = setInterval(function() {
	                oldThis.retrySentChanges();
	            },20000);
	            return;
	        }
	        else {
	            clearInterval(this.retrySentChangesInterval);
	        }
	    },

	    saveGlobals: function(newGlobals) {
	        pm.globals.saveGlobals(newGlobals, false);
	    },

	    mergeEntitiesForUpdate: function (newO, oldO) {
	        var ret = {};
	        ret["id"]=newO.id;
	        ret["owner"]=newO.owner;
	        for(key in oldO) {
	            if((newO[key]!=oldO[key]) && (JSON.stringify(newO[key])!=JSON.stringify(oldO[key]))) {
	                ret[key]=newO[key];
	            }
	        }
	        //add all new keys. Like helperAttributes!!
	        for(key in newO) {
	            if(!oldO.hasOwnProperty(key)) {
	                ret[key] = newO[key];
	            }
	        }

	        return ret;
	    },

	    makeRequest: function(method, url, data, headers, callback) {
	        if(!method) {
	            throw "Method must be defined";
	        }
	        method = method.toLowerCase();
	        var validMethods = ['get','post','put','delete'];
	        if(validMethods.indexOf(method)===-1) {
	            throw "Method must be one of get/post/put/delete";
	        }

	        if(!headers) {
	            headers = {};
	        }
	        this.addUserAgent(headers);

	        pm.syncSocket.request({
	            method: method,
	            url: url,
	            data: data,
	            headers: headers
	        }, function(res) {
	            callback(res);
	        });
	    }
	});

	module.exports = SyncManagerNew;


/***/ },
/* 239 */
/***/ function(module, exports) {

	var SyncSettingsModal = Backbone.View.extend({

	    initialize: function() {
	        var view = this;
	        $("#disable-sync-settings").click(function() {
	            if(!pm.user.isLoggedIn()) {
	                return;
	            }
	            var userId = pm.user.id;
	            var accessToken = pm.user.get("access_token");
	            pm.api.disableSync(userId, accessToken, function() {
	                $(".disable-sync-message").hide();
	                $("#disable-sync-success").show();
	                pm.syncManager.signOut();
	                pm.settings.setSetting("enableSync", false);
	                pm.settings.setSetting("syncedOnce", false);
	                pm.mediator.trigger("setSync",false);
	                pm.user.setSyncEnabled(false);
	                pm.tracker.trackEvent("sync", "disable");
	                $("#disable-sync-settings").hide();
	                $(".enable-sync-settings").show();
	            }, function() {
	                $(".disable-sync-message").hide();
	                $("#disable-sync-error").show();
	            });
	        });

	        $("#send-unsynced-changes").click(function() {
	            pm.syncManager.trigger("sendUnsyncedReport", function() {
	                $(".sendunsycned-message").hide();
	                $("#sendunsynced-error").show();
	                $("#sendunsynced-success").show();
	            }, function() {
	                $(".sendunsycned-message").hide();
	                $("#sendunsynced-success").hide();
	                $("#sendunsynced-error").show();
	            });
	        });
	    }
	});

	module.exports = SyncSettingsModal;


/***/ },
/* 240 */
/***/ function(module, exports) {

	var SubscriptionHandler = Backbone.Model.extend({
		initialize: function() {
			//--Sync listeners---
			this.loadSubscriptions();
			this.subscribedTo = [];
			this.collectionSidebarTimeouts = {};
			pm.mediator.on("syncChangeReceived", this.onSyncChangeReceived, this);
			pm.mediator.on("unsubscribeFromCollection", this.unsubscribeFromCollectionWithOptSync, this);
			pm.mediator.on("unsuccessfulUnsubscribe", this.onUnsuccessfulUnsubscribe, this);
			pm.mediator.on("alreadySubscribed", this.onAlreadySubscribed, this);
		},

		isSubscribedTo: function(subsId) {
			var inCollectionList = (_.pluck(pm.collections.models, "id").indexOf(subsId)!==-1);
			var index = this.subscribedTo.indexOf(subsId);
			if(index===-1) {
				return false;
			}
			if(!inCollectionList) {
				this.subscribedTo.splice(index, 1);
				this.trigger('change');
				return false;
			}
			return true;
		},

		onAlreadySubscribed: function(id) {
			if(this.subscribedTo.indexOf(id)===-1) {
				this.subscribedTo.push(id);
				this.trigger('change');
			}
		},

		clearSubscriptions: function() {
			this.subscribedTo = [];
			this.trigger('change');
		},

		loadSubscriptions: function() {
			var oldThis = this;
			pm.indexedDB.subscriptions.getAllSubscriptions(function(subs) {
				_.map(subs, function(sub) {
					oldThis.subscribedTo.push(sub.id);
					oldThis.trigger('change');
				});
			});
		},

		//Sync handlers
		onSyncChangeReceived: function(verb, message, callback) {
			if(verb !== "subscribe" && verb !== "unsubscribe") {
				return;
			}

			if(message.data.owner === pm.user.id) {
				//someone else subscribed to this collection. No action needed here
				if(typeof callback === "function") {
					callback();
				}
				return;
			}

			var orgs = pm.user.get("organizations");
			if(!orgs || orgs.length <= 0) {
				//Teams are not enabled
				if(typeof callback === "function") {
					callback();
				}
				return;
			}
			try {
				var oldThis = this;
				if (verb === "subscribe") {
					if (message.data && message.data.hasOwnProperty("user") && message.data.user != pm.user.id) {
						//someone else subscribed to my collection
						//do nothing
						if (typeof callback === "function") {
							callback();
						}
					} else {
						this.subscribeToCollectionWithOptSync(message, false, function (alreadySubscribed) {
							//pm.mediator.trigger("subscribedToCollection", message.data.model_id);
							// if (alreadySubscribed !== true) {
								//not required - we get the whole collection in one call
								//pm.syncManager.getFoldersForObject(message.data, message.data.owner, true);
								//pm.syncManager.getRequestsForObject(message.data, message.data.owner, message.data.id, "collection");
							// }
							if (typeof callback === "function") {
								callback();
							}
						});
					}
				} else if (verb === "unsubscribe") {
					if (message.data && message.data.hasOwnProperty("user") && message.data.user != pm.user.id) {
						//someone else subscribed to my collection
						//do nothing
						//console.log(pm.syncLogger.getLogDate() + " - " +"Someone unsubscribed from my collection");
						if (typeof callback === "function") {
							callback();
						}
					} else {
						this.unsubscribeFromCollectionWithOptSync(message, false, function () {
							//pm.mediator.trigger("unsubscribedFromCollection", message.data.model_id);
							if (typeof callback === "function") {
								callback();
							}
						});
					}
				} else {
					pm.syncLogger.error("Unknown Subs change: " + verb);
					if(typeof callback === "function") {
						callback();
					}
				}
			} catch(e) {
				pm.syncLogger.error("Error in saving Subs change: " + e.message);
				if(typeof callback === "function") {
					callback();
				}
			}
		},

		onUnsuccessfulUnsubscribe: function(res) {
			var id = res;
			if (res.data && res.data.model_id) {
				id = res.data.model_id;
			}
	        pm.collections.deleteCollectionFromDataStoreWithOptSync(id, true, false, function() {});
	        pm.indexedDB.subscriptions.deleteSubscription(id, function(){});

	        var subsIdx = this.subscribedTo.indexOf(id);
			if (subsIdx !== -1) {
				this.subscribedTo.splice(subsIdx, 1);
				this.trigger('change');
			}
		},

		unsubscribeFromCollectionWithOptSync: function(message, toSync, callback) {
			//var subsId = message.owner + ":" + message.collectionId;
			var subsId = message.data.model_id || message.model_id

			var oldThis = this;
			if(this.isSubscribedTo(subsId)) {
				pm.indexedDB.subscriptions.deleteSubscription(subsId, function () {

					if (toSync) {
						//if the notif has come due to an action from this app, message.owner won't be there. but that's ok because toSync = false
						pm.syncManager.addChangeset("collection", "unsubscribe", {owner: message.owner}, subsId, true);
					}

					var subsIdx = oldThis.subscribedTo.indexOf(subsId);
					if (subsIdx !== -1) {
						oldThis.subscribedTo.splice(subsIdx, 1);
						oldThis.trigger('change');
					}

					var status = pm.collections.deleteCollectionFromDataStoreWithOptSync(subsId, true, false, function() {});

					if(typeof callback === "function") {
						callback();
					}
				});
			} else {
				//not subscribed - just delete
				var status = pm.collections.deleteCollectionFromDataStoreWithOptSync(subsId, true, false, function() {});

				if(typeof callback === "function") {
					callback();
				}
			}

			//call callback regardless
			pm.syncManager.updateSinceFromMessage(message);
		},

		subscribeToCollectionWithOptSync: function(wholeMessage, toSync, callback) {
			var message = wholeMessage.data;
			var oldThis = this;
			//add subscription data to DB
			var subscription = {
				//id: message.owner+":"+message.id,
				id: (message.id || message.model_id),
				userId: wholeMessage.meta.owner || message.owner,
				collectionId: (message.id || message.model_id)
			};
			//console.log("Subscribing to collection: " + message.name);
			if(this.isSubscribedTo(subscription.id)) {
				console.log(pm.syncLogger.getLogDate() + " - " +"Already subscribed to collection with id: " + subscription.id);
				pm.mediator.trigger("databaseOperationComplete");
				pm.mediator.trigger('syncOperationDone');
				if(typeof callback === "function") {
					callback(true);
				}
				pm.syncManager.updateSinceFromMessage(wholeMessage);
				return;
			}
			var status = pm.indexedDB.subscriptions.addSubscription(subscription, function(subscription) {
				//create a collection from the message, and add it
				//once it's added, look the the folder field and order field, and get requests
				setTimeout(function() {
					pm.syncManager.makeRequest('get',
					 "/"+postman_sync_api_version+"/collection/"+subscription.id+"?owner="+subscription.userId+"&populate=true&changeset=true",
					 null, null, function(msg) {
		                pm.syncManager._handleNewSyncResponse(msg, true);
		            });
				}, 1000);


				//Old API. Now we get the whole collection at once
				/*var newCollection = {
					id: message.id,
					name: message.name,
					description: message.description,
					owner: message.owner,
					order: message.order || [],
					write: message.write,
					subscribed: true,
					justSubscribed: true,
					createdAt: message.createdAt,
					updatedAt: message.updatedAt
				};

				pm.collections.addFullCollection(newCollection, true, callback);*/

				if(typeof callback === "function") {
					callback();
				}

				if(toSync) {
					pm.syncManager.addChangeset("collection", "subscribe", {owner: message.owner}, message.id, true);
				}

				pm.mediator.trigger("addedSubscription"); //TODO: This should add a sinceId of 0 for this subscription
				oldThis.subscribedTo.push(subscription.id);
				oldThis.trigger('change');
			});

			if(status===-1) {
				pm.mediator.trigger('syncOperationFailed', 'Adding db subscription failed');
			} else {
				pm.syncManager.updateSinceFromMessage(wholeMessage);
			}
		},

		subscribeToCollection: function(collectionId, ownerId) {
			pm.syncManager.addChangeset("collection", "subscribe", {
				collectionId: collectionId,
				owner: ownerId
			}, collectionId, true);
		}
	});

	module.exports = SubscriptionHandler;


/***/ },
/* 241 */
/***/ function(module, exports) {

	var SyncStatusNotif = Backbone.View.extend({

		initialize: function() {
			var model = this.model;
			var view = this;
	        this.syncErrorTimer = null;
	        this.syncError2Timer = null;
	        this.iconClickTimer = null;

	        this.tooltipText = {
	            "offline": "You appear to be offline. Make sure you are logged in and check your internet connection.",
	            "connecting": "Connecting to the Postman server.... If you are not able to connect, try restaring the app.",
	            "syncing": "Syncing your data",
	            "insync": "In Sync"
	        };

			model.on("change:loggedIn", this.onChangeStatus, this);
	        model.on("syncFinished", this.makeInSync, this);
	        model.on("syncStarting", this.makeSyncing, this);
	        model.on("makeConnecting", this.makeConnecting, this);
	        model.on("makeNotConnected", this.makeNotConnected, this);
	        model.on("disabledSync", this.makeDisabled, this);

	        model.on("change:lastTimestamp", this.updateInsyncTooltip, this);
	        model.on("clickSyncIcon", this.onIconClick, this);

			pm.mediator.on("setSync", this.setSync, this);

	        pm.mediator.on("showStatus:notConnected", function() {
	            this.makeNotConnected(true);
	        }, this);

			this.$icon = $("#sync-status-icon");
			this.$text = $("#sync-status-text");

	        $("#sync-status-dropdown").css('visibility', 'hidden');

	        this.defaultStateTimeout = setTimeout(function() {
	            if(pm.user.get("syncEnabled")) {
	                view.makeNotConnected(true);
	            }
	            else {
	                view.makeDisabled();
	            }
	        }, 400);

	        $("#force-sync-by-user").click(function() {
	            model.startForceSync();
	        });

	        $("#open-sync-settings").click(function() {
	            $('#modal-settings').modal('show');
	            $('#modal-settings a[href="#settings-sync"]').tab('show');
	        });

	        $("#retry-sync-connection").click(function() {
	            model.set("loggingIn",false);
	            model.set("reconnectTimeout", 5000);
	            model.signIn();
	        });

	        $("#sync-status-icon").click(function() {
	            view.onIconClick();
	        });

	/*        $("#sync-status-dropdowner").tooltip({
	            title: view.getSyncTooltip
	        });*/
		},

	    onIconClick: function() {
	        var oldThis = this;
	        if(oldThis.iconClickTimer) {
	            return;
	        }
	        //only if disabled is not shown
	        if(pm.syncManager.isPrimaryWindow()) {
	            if($("#sync-status-dropdown").css('visibility')!=='visible') {
	                /*$('#modal-settings').modal('show');
	                $('#modal-settings a[href="#settings-sync"]').tab('show');*/
	                //if in sync, sync again
	                if(oldThis.currentStatus==="insync") {
	                    pm.syncManager.requestInitialSync();
	                }
	                else if(!pm.syncManager.get("connectingToSocket")) {// if(oldThis.currentStatus==="not-connected") {
	                    clearTimeout(oldThis.defaultStateTimeout);
	                    oldThis.makeNotConnected();
	                    pm.syncManager.set("csrfReceived", false);
	                    pm.syncManager.createSocket();
	                }
	                //else: already connecting. do nothing
	            }
	        }
	        else {
	            pm.appWindow.trigger("sendMessageObject", "sync.clickSyncIcon");
	        }

	        oldThis.iconClickTimer = setTimeout(function() {
	            clearTimeout(oldThis.iconClickTimer);
	            oldThis.iconClickTimer = null;
	        }, 5000);
	    },

	    getSyncTooltip: function() {
	        var date = new Date(pm.syncManager.get("lastTimestamp")*1000);
	        var dateFormat = '{Weekday}, {12hr}:{mm}{TT}'; //Monday, 5:30PM
	        var dateLabel = date.relative(function(value, unit, ms, loc) {
	            if (ms.abs() > (2).day()) {
	                // Returns an absolute date, but only if the offset is greater than 2 dayS.
	                return "Last synced: " + dateFormat;
	            }
	            else if (ms.abs() > (1).day()) {
	                return 'Last synced yesterday';
	            }
	            else if(ms.abs() > (6).hours()) {
	                return "Last synced: " + date.hoursAgo() + " hours ago";
	            }
	            else if(ms.abs() > (1).hours()) {
	                return "Last synced over an hour ago";
	            }
	            else if(ms.abs() > (1).minute()) {
	                return "Last synced: " + date.minutesAgo() + " minutes ago";
	            }
	            else {
	                return 'Last synced less than a minute ago';
	            }
	        });
	        return dateLabel;
	    },

	    getConnectingTooltip: function() {
	        return this.tooltipText["connecting"] + pm.syncManager.secondsTillReconnectLabel;
	    },

		setSync: function(syncEnabled) {
	        var model = this.model;
			if(syncEnabled) {
				$("#sync-status").show();
				//this.onIconClick();
			}
			else {
	            //model.trigger("disabledSync");
			}
		},

		onChangeStatus: function() {
			if(this.model.get("loggedIn")===true) {
	            if(this.model.get("syncFinished")===true) {
				    this.makeInSync();
	            }
	            else {
	                this.makeSyncing();
	            }
	            //show force sync section
	            $("#force-sync-section").show();
			}
			else {
				this.makeDisabled();
	            //hide force sync section
	            $("#force-sync-section").hide();
			}
		},

		makeInSync: function() {
			this.$icon.removeClass("notInSync").removeClass("syncDisabled").removeClass("syncing").addClass("inSync");
			this.$text.addClass("in-sync").text("In Sync");
	        clearTimeout(this.syncErrorTimer);
	        clearTimeout(this.syncError2Timer);
	        clearTimeout(pm.syncManager.syncStartingTimer);
	        clearTimeout(pm.syncManager.syncFinishedTimer);
	        $(".sync-connection-error").remove(); //to remove the noty notifs
	        pm.syncManager.syncStartingTimer = null;
	        pm.syncManager.syncFinishedTimer = null;
	        var view = this;
	        $("#sync-status-dropdown").css('visibility','hidden');
	        $("#sync-status-dropdowner").tooltip('destroy').removeAttr('data-original-title').tooltip({
	            title: _.bind(view.getSyncTooltip, view)
	        });
	        this.currentStatus = "insync";
	        //$(".ss-always,.ss-insync").show();
		},

	    makeConnecting: function() {
	        var view  = this;
	        this.$icon.removeClass("inSync").removeClass("syncDisabled").addClass("syncing").removeClass("notInSync");
	        this.$text.removeClass("in-sync").text("Connecting");
	        $("#sync-status-dropdown").css('visibility','hidden');
	        $("#sync-status-dropdowner").tooltip('destroy').removeAttr('data-original-title').tooltip({
	            title: _.bind(view.getConnectingTooltip, view)
	        });
	        this.currentStatus = "connecting";
	        //$(".ss-always,.ss-connecting").show();
	    },

	    makeNotConnected: function(viewOnly) {
	        if(typeof viewOnly === "undefined") {
	            viewOnly = false;
	        }

	        var view  = this;
	        this.$icon.removeClass("inSync").removeClass("syncDisabled").removeClass("syncing").addClass("notInSync");
	        this.$text.addClass("in-sync").text("Offline");
	        $("#sync-status-dropdown").css('visibility','hidden');
	        $("#sync-status-dropdowner").tooltip('destroy').removeAttr('data-original-title').tooltip({
	            title: 'Click to reconnect'
	        });
	        this.currentStatus = "not-connected";
	        if(!viewOnly) {
	            pm.syncManager.set("connectingToSocket", false);
	            pm.syncManager.set("socketConnected", false);
	        }
	    },

	    makeNotInSync: function() {
	        this.$icon.removeClass("inSync").removeClass("syncDisabled").removeClass("syncing").addClass("notInSync");
	        this.$text.addClass("in-sync").text("Not in sync");
	        clearTimeout(this.syncErrorTimer);
	        clearTimeout(this.syncError2Timer);
	        $("#sync-status-dropdown").css('visibility','hidden');
	        $("#sync-status-dropdowner").attr('data-original-title', this.tooltipText["offline"]).tooltip();
	        this.currentStatus = "offline";
	        //$(".ss-always,.ss-offline").show();
	    },

	    makeSyncing: function() {
	        var view  = this;
	        this.$icon.removeClass("inSync").removeClass("syncDisabled").addClass("syncing").removeClass("notInSync");
	        this.$text.removeClass("in-sync").text("Syncing");
	        clearTimeout(this.syncErrorTimer);
	        clearTimeout(this.syncError2Timer);
	        $("#sync-status-dropdown").css('visibility','hidden');
	        $("#sync-status-dropdowner").attr('data-original-title', this.tooltipText["syncing"]).tooltip();
	        view.currentStatus = "sycning";

	        $(".sync-connection-error").remove(); //to remove the noty notifs
	        //$(".ss-always,.ss-syncing").show();

	        if(pm.syncManager.sendingAllClientData == false) {
	            this.syncError2Timer = setTimeout(function() {
	                if(!($("#modal-conflict-resolver").css('display')=="block")) {
	                    if(pm.syncManager.sentInitialSyncRequest === true) {
	                        //the response for the initial sync request was not received
	                        //ask to reload the app
	                        pm.alerts.warning('Oops! There was a problem communicating with the Sync server. Try restarting the app.', {
	                          persist: true,
	                          dedupeId: 'sync-connection-error'
	                        });
	                        pm.syncManager.sentInitialSyncRequest = false;
	                        return;
	                    }
	                    pm.mediator.trigger("beginUnsyncedStream", false, null, true, true);
	                }
	            },100000);
	            this.syncErrorTimer = setTimeout(function() {
	                view.handleOverdueUnsyncedChanges();
	            },300000);
	        }
	    },

	    makeDisabled: function() {
	        this.$icon.removeClass("inSync").removeClass("syncing").addClass("syncDisabled");
	        this.$text.addClass("in-sync").text("Sync Off");
	        clearTimeout(this.syncErrorTimer);
	        clearTimeout(this.syncError2Timer);
	        $("#sync-status-dropdown").css('visibility','visible');
	        $("#sync-status-dropdowner").attr('data-original-title', "").tooltip('destroy');
	        this.currentStatus = "disabled";
	        $(".ss-disabled").show();
	        var error = new Error();
	        if(postman_env==="sync_dev") {
	            console.log("Status changed to disabled: " + error.stack.toString());
	        }
	    },

	    handleOverdueUnsyncedChanges: function() {
	        //if it takes too long, we call force sync
	        this.model.startForceSync();
	    }
	});

	module.exports = SyncStatusNotif;


/***/ },
/* 242 */
/***/ function(module, exports) {

	var TestRunnerSync = Backbone.Model.extend({
	    defaults: function () {
	        return {}
	    },

	    initialize: function () {
	        pm.mediator.on("syncChangeReceived", this.onSyncChangeReceived, this);

	        //from the test runner window
	        pm.appWindow.trigger("registerInternalEvent", "testRunAdded", this.testRunAddedInRunner, this);
	        pm.appWindow.trigger("registerInternalEvent", "testRunDeleted", this.testRunRemovedInRunner, this);
	    },

	    testRunAddedInRunner: function(testRunJson) {
	        //console.log("Sending sync event to server for testRun add");
	        pm.syncManager.addChangeset("collectionrun","create",testRunJson, null, true);
	    },

	    testRunRemovedInRunner: function(message) {
	        var id = message.id;
	        //console.log("Sending sync event to server for testRun delete");
	        pm.syncManager.addChangeset("collectionrun","destroy",{id:id}, null, true);
	    },

	    onSyncChangeReceived: function(verb, message, callback) {
	        if(!message.model) message.model = message.type;

	        var allowedTypes = ["collectionrun"];
	        if(allowedTypes.indexOf(message.model) === -1) {
	            return;
	        }
	        try {
	            if (verb === "create") {
	                this.createRemoteEntity(message, callback);
	            }
	            else if (verb === "destroy" || verb === "delete") {
	                this.deleteRemoteEntity(message, callback);
	            }
	            else {
	                pm.syncLogger.error("Unknown Testrunner change: " + verb);
	                if(typeof callback === "function") callback();
	            }
	        }
	        catch(e) {
	            pm.syncLogger.error("Error in saving Testrunner change: " + e.message);
	            if(typeof callback === "function") callback();
	        }
	    },

	    createRemoteEntity: function(message, callback) {
	        message.data.timestamp = (new Date(message.data.createdAt)).getTime();

	        message.data.collection_id = message.data.collection;
	        message.data.folder_id = message.data.folder;
	        message.data.environment_id = message.data.environment;
	        try {
	            if(typeof message.data.results==="string") {
	                message.data.results = JSON.parse(message.data.results);
	            }
	        }
	        catch(e) {
	            pm.syncLogger.error("Error in parsing remote message.data.results: " + JSON.stringify(message.data));
	        }

	        pm.indexedDB.testRuns.addTestRun(message.data, function(data) {
	            //added to db
	        });

	        var messageToSend = {
	            "id": "test_runner",
	            "event": "testRunAddedRemotely",
	            "object": message.data
	        };

	        pm.appWindow.sendMessageWrapper(message);

	        if(typeof callback==="function") callback();
	    },

	    deleteRemoteEntity: function(message, callback) {
	        var message = {
	            "id": "test_runner",
	            "event": "testRunDeletedRemotely",
	            "object": {id:message.data.id}
	        };

	        pm.appWindow.sendMessageWrapper(message);
	        //this was to send to the collection runner window

	        pm.indexedDB.testRuns.deleteTestRun(message.object.id, function() {});

	        if(typeof callback==="function") callback();
	    }
	});

	module.exports = TestRunnerSync;


/***/ },
/* 243 */
/***/ function(module, exports) {

	var ConflictResolverModal = Backbone.View.extend({
	    initialize: function() {
	        var oldThis = this;
	        var model = this.model;
	        var view = this;
	        this.clearTable();
	        this.rowsShownCount = 0;

	        $("#re-sync-conflicts").click(function() {
	            var radiosToUse = $("#confictResolverTable input[type='radio']:checked");
	            //pm.syncManager.resolveConflicts(radiosToUse);
		        pm.mediator.trigger("conflictsResolved", radiosToUse);
	            $("#modal-conflict-resolver").modal('hide');
	            oldThis.rowsShownCount = 0;
	        });

	        $(".check-all-conflict").change(function() {
	            var val = $(this).val();
	            if(val==="server") {
	                $(".conflictRow[data-showrow=true] input[type=radio][data-which-change=server]").click();
	            }
	            else {
	                $(".conflictRow[data-showrow=true] input[type=radio][data-which-change=local]").click();   
	            }
	        });

	    },

	    clearTable: function() {
	        $("#confictResolverTable>tbody").empty();
	        this.rowsShownCount = 0;
	    },

	    addRow: function(conflictRow) {
	        //delete all old rows with the same id
	        $("tr#conflictRow-"+conflictRow.model+"-"+conflictRow.model_id+"-"+conflictRow.key).remove();

	        $("#confictResolverTable>tbody").append(Handlebars.templates.conflict_resolver_row(conflictRow));
	        $("#"+conflictRow.model+"-"+conflictRow.model_id+"-"+conflictRow.key+"-server").data("change", _.cloneDeep(conflictRow.remoteChange));
	        $("#"+conflictRow.model+"-"+conflictRow.model_id+"-"+conflictRow.key+"-local").data("change", _.cloneDeep(conflictRow.localChange));
	        this.rowsShownCount++;

	        if(conflictRow.showRow === false) {
	            $("tr#conflictRow-"+conflictRow.model+"-"+conflictRow.model_id+"-"+conflictRow.key).hide();
	            this.rowsShownCount--;
	        }
	    },

	    getCount: function() {
	        return $("tr.conflictRow").length;
	    },

	    showModal: function() {
	        $("#modal-conflict-resolver").modal();
	        var numRows = this.rowsShownCount
	        pm.tracker.trackEvent("sync", "view", "conflict", numRows);
	    },

	    initializeEditor: function() {
	        if (this.editor) {
	            return;
	        }
	    }
	});

	module.exports = ConflictResolverModal;


/***/ },
/* 244 */
/***/ function(module, exports) {

	var MinVersionModal = Backbone.View.extend({
		initialize: function() {
			pm.mediator.on("minVersionModal", this.showModal, this);
		},

	    showModal: function(message) {
	        $("#modal-min-version #min-version-message").text(message);
	        $("#modal-min-version").modal("show");
		}
	});

	module.exports = MinVersionModal;


/***/ },
/* 245 */
/***/ function(module, exports) {

	var HistoryRequest = Backbone.Model.extend({
	    defaults: function() {
	        return {
	        };
	    }
	});

	var History = Backbone.Collection.extend({
	    model: HistoryRequest,

	    initialize: function() {
	        var model = this;

	        pm.indexedDB.getAllRequestItems(function (historyRequests) {
	            var outAr = [];
	            var count = historyRequests.length;

	            if (count === 0) {
	                historyRequests = [];
	            }
	            else {
	                for (var i = 0; i < count; i++) {
	                    var r = historyRequests[i];
	                    pm.mediator.trigger("addToURLCache", r.url);

	                    var request = r;
	                    request.position = "top";

	                    outAr.push(request);
	                }
	            }

	            if(pm.syncManager) pm.syncManager.trigger("itemLoaded","history");

	            model.add(outAr, {merge: true});
	        });

		    //--Sync listeners---
		    pm.mediator.on("syncChangeReceived", this.onSyncChangeReceived, this);
	    },

	    requestExists:function (request) {
	        var index = -1;
	        var method = request.method.toLowerCase();

	        if (isMethodWithBody(method)) {
	            return -1;
	        }

	        var requests = this.toJSON();
	        var len = requests.length;

	        for (var i = 0; i < len; i++) {
	            var r = requests[i];
	            if (r.url.length !== request.url.length ||
	                r.headers.length !== request.headers.length ||
	                r.method !== request.method) {
	                index = -1;
	            }
	            else {
	                if (r.url === request.url) {
	                    if (r.headers === request.headers) {
	                        index = i;
	                    }
	                }
	            }

	            if (index >= 0) {
	                break;
	            }
	        }

	        return index;
	    },

	    loadRequest:function (id) {
	        var request = this.get(id).toJSON();
	        // console.log("Load request: ", request);
	        if((pm.settings.getSetting("requestNewTab") ||
	            (pm.settings.getSetting("trackUnsavedRequests") && pm.tabManager.getCurrentTab().get("isTabDirty"))) && !pm.testRunner) {
	            request.id = id;
	            pm.mediator.trigger("loadRequestInNewTab", request);
	        }
	        else {
	            pm.mediator.trigger("loadRequest", request, false, false);
	        }

	        this.trigger("loadRequest");
	    },

	    addSelectedIdsToCollection: function(listOfIds) {
	        var requestArray = [];
	        var history = this;

	        /*Convert History request to collection request*/
	        _.each(listOfIds, function(id) {
	            var request = history.get(id);
	            if(request) {
	                request = request.toJSON();
	                request.helperAttributes = JSON.stringify(request.helperAttributes);
	                request.id = guid(); //New request ID
	                delete request.position;
	                delete request.timestamp;
	                request.name = request.url;
	                request.description = "";
	                request.descriptionFormat = "html";
	                requestArray.push(request);
	            }
	        });

	        pm.mediator.trigger("addRequestsToCollection", requestArray);
	        console.log("Array generated :)");
	    },

	    addRequestFromJSON: function(requestJSON) {
	        var request = JSON.parse(requestJSON);
	        this.addRequestFromRemote(request.url, request.method, request.headers, request.data, request.dataMode, request.preRequestScript, request.pathVariables, request.currentHelper, request.helperAttributes, null, null);
	    },

	    addRequestFromObject: function(request) {
	        return this.addRequest(request.url, request.method, request.headers, request.data, request.dataMode, request.preRequestScript, request.pathVariables, request.currentHelper, request.helperAttributes, null, null);
	    },

	    addRequestFromRemote: function(request) {
	        var id = guid();
	        this.addRequestWithId(
	            id,
	            request.url,
	            request.method,
	            request.headers,
	            request.data,
	            request.dataMode,
	            request.tests,
	            request.prScript,
	            request.pathVariables,
	            request.currentHelper,
	            request.helperAttributes,
	            true,
	            null,
	            null
	        );
	        return id;
	    },

		addRequestWithId: function(id, url, method, headers, data, dataMode, tests, prScript, pathVariables, currentHelper, helperAttributes, fromRemote, timestamp, callback) {
			var maxHistoryCount = pm.settings.getSetting("historyCount");

	        //force infinite history
	        maxHistoryCount = 0;

			var requests = this.toJSON();
			var requestsCount = requests.length;

			var collection = this;

			if(maxHistoryCount > 0) {
				if (requestsCount >= maxHistoryCount) {

					//Delete the last request
					var lastRequest = requests[0];
					this.deleteRequest(lastRequest.id);
				}
			}

	        if(!dataMode) {
	            dataMode = "params";
	        }

			var historyRequest = {
				"id":id,
				"url":url.toString(),
				"method":method.toString(),
				"headers":headers.toString(),
				"data":data,
				"dataMode":dataMode.toString(),
				"tests": tests,
				"preRequestScript": prScript,
	            "currentHelper": currentHelper,
	            "helperAttributes": helperAttributes,
	            "pathVariables": pathVariables,
				"timestamp":timestamp || new Date().getTime(),
				"version": 2
			};

	        //if(postman_webkit || postman_brackets) {
	        //    historyRequest["sandboxFiles"] = sandboxFiles;
	        //    historyRequest["sendMethod"] = sendMethod;
	        //}

	        // console.log("History request: ", historyRequest);

	        var index = this.requestExists(historyRequest);

	        if (index >= 0) {
	            var deletedId = requests[index].id;
	            this.deleteRequest(deletedId);
	        }

			pm.indexedDB.addRequest(historyRequest, function (request) {
					pm.mediator.trigger("addToURLCache", request.url);
	                pm.mediator.trigger("databaseOperationComplete");
					var historyRequestModel = new HistoryRequest(request);
					if(fromRemote===false) {
					    pm.syncManager.addChangeset("request","history",historyRequest, null, true);
					}
					historyRequestModel.set("position", "top");
					collection.add(historyRequestModel);
	                if(typeof callback === 'function') {
	                    callback();
	                }
			});
	        return 0;

		},

	    addRequest:function (url, method, headers, data, dataMode, tests, prScript, pathVariables, currentHelper, helperAttributes, timestamp, callback) {
		    var id = guid();
		    this.addRequestWithId(id, url, method, headers, data, dataMode, tests, prScript, pathVariables, currentHelper, helperAttributes, false, timestamp, callback);
	      return id;
	    },


	    deleteRequest:function (id) {
	        var collection = this;

	        pm.indexedDB.deleteRequest(id, function (request_id) {
	            collection.remove(request_id);
	            pm.mediator.trigger("databaseOperationComplete");
	        });
	    },

	    clear:function () {
	        var collection = this;
	        pm.indexedDB.deleteHistory(function () {
	            collection.reset([]);
	            pm.mediator.trigger("databaseOperationComplete");
	        });
	    },

	    clearSelected: function(idsToDelete) {
	      for(var i=0;i<idsToDelete.length;i++) {
	          this.deleteRequest(idsToDelete[i]);
	      }
	    },

	    filter: function(term) {
	        var requests = this.toJSON();

	        var count = requests.length;
	        var filteredItems = [];
	        for (var i = 0; i < count; i++) {
	            var id = requests[i].id;
	            var url = requests[i].url;

	            var filteredItem = {
	                id: id,
	                url: url,
	                toShow: false
	            };
	            url = url.toLowerCase();
	            if (url.indexOf(term) >= 0) {
	                filteredItem.toShow = true;
	            }
	            else {
	                filteredItem.toShow = false;
	            }

	            filteredItems.push(filteredItem);
	        }

	        this.trigger("filter", filteredItems);

	        return filteredItems;
	    },

	    revert: function() {
	        this.trigger("revertFilter");
	    },

	    //---Sync----
	    onSyncChangeReceived: function(verb, message, callback) {
	        if(!message.model) message.model = message.type;

	        var allowedTypes = ["history", "request"];
	        if(allowedTypes.indexOf(message.model) === -1) {
	            return;
	        }

	        if(message.model === "request" && verb === "history") {
	            //came from a sails10 app
	            message.model = "history";
	            verb = "create";
	        }
	        else if(message.model === "request" && verb !== "history") {
	            //collections model will handle this
	            return;
	        }

	        try {
	            if (verb === "create") {
	                //pm.syncStatusManager.addNotification("history", message.data, "create");
	                if (message.data.dataMode === "raw") {
	                    message.data.data = message.data.rawModeData;
	                    message.data.rawModeData = "";
	                }
	                if(!message.data.preRequestScript) {
	                    message.data.preRequestScript = "";
	                }
	                if(!message.data.tests) {
	                    message.data.tests = "";
	                }
	                var status = pm.history.addRequestWithId(message.data.id, message.data.url, message.data.method,
	                    message.data.headers, message.data.data, message.data.dataMode,
	                    message.data.tests, message.data.preRequestScript, message.data.pathVariables, message.data.currentHelper, message.data.helperAttributes, true, message.data.updatedAt, callback);
	                if (status == -1) {
	                    pm.mediator.trigger('syncOperationFailed', 'Adding history request failed');
	                }
	                else {
	                    pm.syncManager.updateSinceFromMessage(message);
	                }
	            }
	            else {
	                pm.syncLogger.error("Unknown history verb: " + verb);
	                if(typeof callback === "function") callback();
	            }
	        }
	        catch(e) {
	            pm.syncLogger.error("Error in saving History change: " + e.message);
	            if(typeof callback === "function") callback();
	        }
		}
	});

	module.exports = History;


/***/ },
/* 246 */
/***/ function(module, exports) {

	var Globals = Backbone.Model.extend({
	    isLoaded: false,
	    initializedSyncing: false,

	    defaults: function() {
	        return {
	            "globals": [],
	            "syncFileID": "postman_globals",
	            "synced": false
	        };
	    },

	    initialize:function () {
	        this.set({"globals": []});
	        this.syncAllGlobalsOnce = true;

	        var model = this;

	        pm.appWindow.trigger("registerInternalEvent", "updatedGlobals", this.onUpdatedGlobals, this);

	        pm.mediator.on("downloadGlobals", this.downloadGlobals, this);

	        this.startListeningForFileSystemSyncEvents();

	        pm.storage.getValue('globals', function(s) {
	            if (s) {
	                model.set({"globals": JSON.parse(s)});
	            }
	            else {
	                model.set({"globals": []});
	            }

	            model.isLoaded = true;
	            model.trigger("startSync");
	            if(pm.syncManager) pm.syncManager.trigger("itemLoaded","globals");
	        });

		    //--Sync listeners---
		    pm.mediator.on("syncChangeReceived", this.onSyncChangeReceived, this);

	        this.set("glbUpdateTimeout", null);
	    },

	    getEnabledValues: function() {
	        var retVal = [];
	        var values = this.get("globals");
	        if(!values) {
	            values = [];
	        }
	        for(i=0;i<values.length;i++) {
	            if(!values[i].hasOwnProperty("enabled") || values[i].enabled==true) {
	                retVal.push(values[i]);
	            }
	        }
	        return retVal;
	    },

	    startListeningForFileSystemSyncEvents: function() {
	        var model = this;
	        var isLoaded = model.isLoaded;
	        var initializedSyncing = model.initializedSyncing;

	        pm.mediator.on("initializedSyncableFileSystem", function() {
	            model.initializedSyncing = true;
	            model.trigger("startSync");
	        });

	        this.on("startSync", this.startSyncing, this);
	    },

	    startSyncing: function() {
	        var i = 0;
	        var model = this;
	        var globals;
	        var syncableFile;

	        if (this.isLoaded && this.initializedSyncing) {
	            pm.mediator.on("addSyncableFileFromRemote", function(type, data) {
	                if (type === "globals") {
	                    model.onReceivingSyncableFileData(data);
	                }
	            });

	            pm.mediator.on("updateSyncableFileFromRemote", function(type, data) {
	                if (type === "globals") {
	                    model.onReceivingSyncableFileData(data);
	                }
	            });

	            pm.mediator.on("deleteSyncableFileFromRemote", function(type, id) {
	                if (type === "globals") {
	                    model.onRemoveSyncableFile(id);
	                }
	            });
	        }
	    },

	    onReceivingSyncableFileData: function(data) {
	        var globals = JSON.parse(data);
	        this.mergeGlobals(globals, false, true, function() {});
	    },

	    onRemoveSyncableFile: function(id) {
	        // console.log("Do nothing");
	        // this.deleteEnvironment(id, true);
	    },

	    getAsSyncableFile: function(id) {
	        var name = id + ".globals";
	        var type = "globals";
	        var data = JSON.stringify(this.get("globals"));

	        return {
	            "name": name,
	            "type": type,
	            "data": data
	        };
	    },

	    addToSyncableFilesystem: function(id) {
	        var model = this;

	        var syncableFile = this.getAsSyncableFile(id);

	        pm.mediator.trigger("addSyncableFile", syncableFile, function(result) {
	            if(result === "success") {
	                // model.updateGlobalSyncStatus(id, true);
	            }
	        });
	    },

	    removeFromSyncableFilesystem: function(id) {
	        var name = id + ".globals";
	        pm.mediator.trigger("removeSyncableFile", name, function(result) {
	            model.saveGlobals([], false);
	        });
	    },

	    onUpdatedGlobals: function(globals) {
	        // console.log("Globals: This is ", this);
	        // console.log("Globals are now", globals);
	        this.set({"globals": globals});
	        var model = this;

	        clearTimeout(this.get("glbUpdateTimeout"));
	        this.set("glbUpdateTimeout", setTimeout(function(globals) {
	            return function() {
	                var o = {'globals': JSON.stringify(globals)};
	                pm.storage.setValue(o, function() {
	                    model.addToSyncableFilesystem(model.get("syncFileID"));
	                });
	            }
	        } (globals),1000));
	    },

	    downloadGlobals: function() {
	        var name = "globals.postman_globals";
	        var type = "application/json";

	        globalsJSON = this.get("globals");

	        var filedata = JSON.stringify(globalsJSON, null, '\t');

	        pm.filesystem.saveAndOpenFile(name, filedata, type, function () {
	          pm.alerts.success('Saved');
	        });
	    },

	    mergeGlobals:function (globals, syncToRemote, syncImmediately, callback) {
	        if(!globals) {
	            globals = [];
	        }

	        var model = this;

	        var currentGlobals = this.get("globals");
	        var globalsToSave = [];
	        //this will be an array of kv pairs
	        var numGlobals = currentGlobals.length;
	        for(var i=0;i<numGlobals;i++) {
	            var thisKey = currentGlobals[i].key;
	            //if the same key exists in the current globals array, use this one
	            var elem = _.find(globals, function(globalVar){ return globalVar.key === thisKey});
	            if(elem) {
	                globalsToSave.push(elem);
	            }
	            else {
	                globalsToSave.push(currentGlobals[i]);
	            }
	        }

	        //add the remaining new globals
	        var numNewGlobals = globals.length;
	        for(i=0;i<numNewGlobals;i++) {
	            var elem = _.find(globalsToSave, function(globalVar){return globalVar.key === globals[i].key});
	            if(!elem) {
	                globalsToSave.push(globals[i]);
	            }
	        }

	        this.set({"globals": globalsToSave});

	        var o = {'globals': JSON.stringify(globalsToSave)};

	        if(syncToRemote) {
	            var objectToUpdate = {"globals":globalsToSave};
	            pm.syncManager.addChangeset("user","update",objectToUpdate, null, syncImmediately);
	        }

	        pm.storage.setValue(o, function() {
	            pm.appWindow.trigger("sendMessageObject", "updatedGlobals", globalsToSave);
	            model.addToSyncableFilesystem(model.get("syncFileID"));
		        if(callback) callback();
	        });
	    },

	    clearGlobals: function () {
	        var model = this;

	        this.set({"globals": []});

	        var o = {'globals': JSON.stringify([])};

	        pm.storage.setValue(o, function() {
	            pm.appWindow.trigger("sendMessageObject", "clearedGlobals", []);
	            model.addToSyncableFilesystem(model.get("syncFileID"));
	        });
	    },

	    saveGlobals: function(oldGlobals, syncToRemote) {
	        var numGlobals = oldGlobals.length;
	        var globals = [];
	        var keys = [];
	        var duplicatesFound = false;
	        for(i=0;i<numGlobals;i++) {
	            if(keys.indexOf(oldGlobals[i].key)!==-1) {
	                //key exists. ignore this value, show error
	                duplicatesFound = true;
	            }
	            else {
	                keys.push(oldGlobals[i].key)
	                globals.push(oldGlobals[i]);
	            }
	        }

	        if(duplicatesFound) {
	          pm.alerts.warning('Some duplicate keys were found while saving global variables. These will not be saved.', {
	            timeout: 5000
	          });
	        }


	        this.set({"globals": globals});
	        var o = {'globals': JSON.stringify(globals)};

	        if(syncToRemote) {
	            var objectToUpdate = {"globals":globals};
	            if(this.globalSyncTimeout) {
	                clearTimeout(this.globalSyncTimeout);
	            }
	            this.globalSyncTimeout = setTimeout(function() {
	                pm.syncManager.addChangeset("user","update",objectToUpdate, null, true);
	            }, 1000);
	        }


	        pm.storage.setValue(o, function() {
	            pm.appWindow.trigger("sendMessageObject", "updatedGlobals", globals);
	        });
	    },


		//Sync
		onSyncChangeReceived: function(verb, message, callback) {
			var allowedTypes = ["user"];
			if(!message.model) message.model = message.type;
			if(allowedTypes.indexOf(message.model) === -1) {
				return;
			}
	        try {
	            if (verb === "update") {
	                if (message.data.hasOwnProperty("globals")) {
	                    this.mergeGlobals(message.data.globals, false, false, callback);

	                    //to update global values. only done during the first sync
	                    if(this.syncAllGlobalsOnce === true) {
	                        this.syncAllGlobalsOnce = false;
	                        setTimeout(function () {
	                            pm.storage.getValue('globals', function (gs) {
	                                var objectToUpdate = {"globals": JSON.parse(gs)};
	                                pm.syncManager.addChangeset("user", "update", objectToUpdate, null, true);
	                            });
	                        }, 4000);
	                    }
	                }
	                pm.syncLogger.log(new Error(), ["User updated: (name=updated) ", message.data]);
	            }
	            else {
	                pm.syncLogger.error("Unknown action for user: " + verb);
	                if(typeof callback === "function") callback();
	            }
	        }
	        catch(e) {
	            pm.syncLogger.error("Error in Saving user change: " + e.message);
	            if(typeof callback === "function") callback();
	        }
	    }
	});

	module.exports = Globals;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var Environment = __webpack_require__(11);

	var Environments = Backbone.Collection.extend({
	    model: Environment,

	    isLoaded: false,
	    initializedSyncing: false,

	    comparator: function(a, b) {
	        var counter;

	        var aName = a.get("name");
	        var bName = b.get("name");

	        if(!aName) {
	            aName = "";
	            a.set("name", "");
	        }

	        if(!bName) {
	            bName = "";
	            b.set("name", "");
	        }

	        if (aName.length > bName.length)
	            counter = bName.length;
	        else
	            counter = aName.length;

	        for (var i = 0; i < counter; i++) {
	            if (aName[i] == bName[i]) {
	                continue;
	            } else if (aName[i] > bName[i]) {
	                return 1;
	            } else {
	                return -1;
	            }
	        }
	        return 1;
	    },

	    initialize:function () {
	        var collection = this;

	        // TODO Events for in-memory updates
	        pm.appWindow.trigger("registerInternalEvent", "addedEnvironment", this.onAddedEnvironment, this);
	        pm.appWindow.trigger("registerInternalEvent", "updatedEnvironment", this.onUpdatedEnvironment, this);
	        pm.appWindow.trigger("registerInternalEvent", "deletedEnvironment", this.onDeletedEnvironment, this);

	        this.startListeningForFileSystemSyncEvents();

	        pm.indexedDB.environments.getAllEnvironments(function (environments) {
	            environments.sort(sortAlphabetical);
	            collection.add(environments, {merge: true});

	            collection.isLoaded = true;
	            collection.trigger("startSync");
	            if(pm.syncManager) pm.syncManager.trigger("itemLoaded","environments");
	            collection.trigger("loadedEnvironments");
	            pm.mediator.trigger("loadedEnvironments");
	        });

		    //--Sync listeners---
		    pm.mediator.on("syncChangeReceived", this.onSyncChangeReceived, this);

	        this["envUpdateTimeout"] = null;
	    },

	    // Functions for internal app window messaging
	    onAddedEnvironment: function(environment) {
	        this.add(environment, { merge: true });
	    },

	    onUpdatedEnvironment: function(environment) {
	        this.add(environment, { merge: true });
	        clearTimeout(this["envUpdateTimeout"]);
	        this["envUpdateTimeout"] = setTimeout(function(environment) {
	            return function() {
	                pm.indexedDB.environments.updateEnvironment(environment, function () {
	                    pm.mediator.trigger("databaseOperationComplete");
	                    //pm.syncManager.addChangeset("environment","update",environment, null, true);
	                });
	            }
	        } (environment), 1000);
	    },

	    onDeletedEnvironment: function(id) {
	        this.remove(id);
	    },

	    startListeningForFileSystemSyncEvents: function() {
	        var collection = this;
	        var isLoaded = collection.isLoaded;
	        var initializedSyncing = collection.initializedSyncing;

	        pm.mediator.on("initializedSyncableFileSystem", function() {
	            collection.initializedSyncing = true;
	            collection.trigger("startSync");
	        });

	        this.on("startSync", this.startSyncing, this);
	    },

	    startSyncing: function() {
	        var i = 0;
	        var collection = this;
	        var environment;
	        var synced;
	        var syncableFile;

	        if (this.isLoaded && this.initializedSyncing) {
	            pm.mediator.on("addSyncableFileFromRemote", function(type, data) {
	                if (type === "environment") {
	                    collection.onReceivingSyncableFileData(data);
	                }
	            });

	            pm.mediator.on("updateSyncableFileFromRemote", function(type, data) {
	                if (type === "environment") {
	                    collection.onReceivingSyncableFileData(data);
	                }
	            });

	            pm.mediator.on("deleteSyncableFileFromRemote", function(type, id) {
	                if (type === "environment") {
	                    collection.onRemoveSyncableFile(id);
	                }
	            });

	            // And this
	            for(i = 0; i < this.models.length; i++) {
	                environment = this.models[i];
	                synced = environment.get("synced");

	                if (!synced) {
	                    this.addToSyncableFilesystem(environment.get("id"));
	                }
	            }
	        }
	        else {
	        }
	    },

	    onReceivingSyncableFileData: function(data) {
	        this.importEnvironment(data, true);
	    },

	    onRemoveSyncableFile: function(id) {
	        this.deleteEnvironment(id, true);
	    },

	    getAsSyncableFile: function(id) {
	        var environment = this.get(id);
	        var name = id + ".environment";
	        var type = "environment";
	        var data = JSON.stringify(environment.toSyncableJSON());

	        return {
	            "name": name,
	            "type": type,
	            "data": data
	        };
	    },

	    addToSyncableFilesystem: function(id) {
	        var collection = this;

	        var syncableFile = this.getAsSyncableFile(id);
	        pm.mediator.trigger("addSyncableFile", syncableFile, function(result) {
	            if(result === "success") {
	                collection.updateEnvironmentSyncStatus(id, true);
	            }
	        });
	    },

	    removeFromSyncableFilesystem: function(id) {
	        var name = id + ".environment";
	        pm.mediator.trigger("removeSyncableFile", name, function(result) {
	        });
	    },

	    //this will be called in the syncmanager, when an event is received from the server
	    addFullEnvironment: function(env, callback) {
	        var name = env.name;
	        var values = env.values;
	        try {
	            this.addEnvironment(env.id, name, values, true, callback);
	        }
	        catch(e) {
	            console.log("Adding environment failed: "+e);
	            return -1;
	        }
	        return 0;
	    },

	    addEnvironmentWithoutId: function(name, values, doNotSync) {
	        var id = guid();
	        this.addEnvironment(id, name, values, doNotSync);
	    },

	    addEnvironment:function (id, name, values, doNotSync, callback) {
	        var collection = this;

	        if(!name || name.trim()=="") {
	            name = "New Environment";
	        }

	        var environment = {
	            id:id,
	            name:name,
	            values:values,
	            timestamp:new Date().getTime(),
	            synced: false
	        };

	        var envModel = new Environment(environment);
	        collection.add(envModel);

	        if(!doNotSync) {
	            pm.appWindow.trigger("sendMessageObject", "addedEnvironment", environment);
	        }

	        pm.indexedDB.environments.addEnvironment(environment, function () {
	            pm.mediator.trigger("databaseOperationComplete");
		        pm.mediator.trigger('syncOperationDone');
	            if (doNotSync) {
	                //console.log("Do not sync this change");
	            }
	            else {
	                pm.syncManager.addChangeset("environment","create",environment, null, true);
	                collection.addToSyncableFilesystem(environment.id);
	            }

		        if(callback) callback();

	        });
	    },

	    updateRemoteEnvironment: function(newEnv, callback) {
	        try {
	          this.updateEnvironment(newEnv.id, newEnv.name, newEnv.values, true, callback);
	        }
	        catch(e) {
	            console.log("Updating environment failed: "+e);
	            return -1;
	        }
	        return 0;
	    },

	    updateEnvironment:function (id, name, values, doNotSync, callback) {
	        var collection = this;

	        var environment = {
	            id:id,
	            name:name,
	            values:values,
	            timestamp:new Date().getTime()
	        };

	        var envModel = new Environment(environment);
	        collection.add(envModel, {merge: true});

	        pm.indexedDB.environments.updateEnvironment(environment, function () {
		        pm.mediator.trigger('syncOperationDone');
	            pm.mediator.trigger("databaseOperationComplete");
	            if (doNotSync) {
	                // console.log("Do not sync this change");
	            }
	            else {
	                pm.appWindow.trigger("sendMessageObject", "updatedEnvironment", environment);
	                if(collection.envSyncTimeout) {
	                    clearTimeout(collection.envSyncTimeout);
	                }
	                collection.envSyncTimeout = setTimeout(function() {
	                    pm.syncManager.addChangeset("environment","update",environment, null, true);
	                }, 500);
	                collection.addToSyncableFilesystem(environment.id);
	            }

		        if(callback) callback();
	        });
	    },

	    clearEnvironment: function(id, name) {
	        var collection = this;
	        var environment = {
	            id:id,
	            name:name,
	            values:[],
	            timestamp:new Date().getTime()
	        };
	        var envModel = new Environment(environment);
	        collection.add(envModel, {merge: true});

	        pm.indexedDB.environments.updateEnvironment(environment, function () {
	            pm.appWindow.trigger("sendMessageObject", "clearedEnvironment", environment);
	        });
	    },

	    updateEnvironmentSyncStatus: function(id, status) {
	        var collection = this;

	        var environment = this.get(id);
	        environment.set("synced", status);
	        collection.add(environment, {merge: true});
	        pm.appWindow.trigger("sendMessageObject", "updatedEnvironment", environment);

	        pm.indexedDB.environments.updateEnvironment(environment.toJSON(), function () {
	            pm.mediator.trigger("databaseOperationComplete");
	        });
	    },

	    deleteRemoteEnvironment: function(environmentId, callback) {
	        try {
	            this.deleteEnvironment(environmentId, true, callback);
	        }
	        catch(e) {
	            console.log("Deleting environment failed: "+e);
	            return -1;
	        }
	        return 0;
	    },

	    deleteEnvironment:function (id, doNotSync, callback) {
	        var collection = this;

	        pm.indexedDB.environments.deleteEnvironment(id, function () {
	            collection.remove(id);
	            pm.mediator.trigger("databaseOperationComplete");
		        pm.mediator.trigger('syncOperationDone');

	            if (doNotSync) {
	                // console.log("Do not sync this");
	            }
	            else {
	                pm.appWindow.trigger("sendMessageObject", "deletedEnvironment", id);
	                pm.syncManager.addChangeset("environment","destroy",null, id, true);
	                collection.removeFromSyncableFilesystem(id);
	            }

		        if(callback) callback();
	        });
	    },



	    downloadEnvironment:function (id) {
	        var environment = this.get(id);

	        environment.set("synced", false);

	        var name = environment.get("name") + ".postman_environment";
	        var type = "application/json";
	        var filedata = JSON.stringify(environment.toJSON(), null, '\t');
	        pm.filesystem.saveAndOpenFile(name, filedata, type, function () {
	          pm.alerts.success('Saved');
	        });
	    },

	    duplicateEnvironment:function (id) {
	        var oldEnvironment = this.get(id).toJSON();
	        var environment = _.clone(oldEnvironment);
	        environment.name = environment.name + " " + "copy";
	        environment.id = guid();

	        var collection = this;

	        pm.indexedDB.environments.addEnvironment(environment, function () {
	            var envModel = new Environment(environment);
	            collection.add(envModel);
	            pm.mediator.trigger("databaseOperationComplete");
	            pm.syncManager.addChangeset("environment","create",environment, null, true);
	            pm.appWindow.trigger("sendMessageObject", "addedEnvironment", environment);
	            collection.addToSyncableFilesystem(environment.id);
	        });
	    },

	    importEnvironment: function(data, doNotSync) {
	        var collection = this;
			var environment = data;
		    try {
	            //could be a parsed object as well
	            if(typeof data === "string") {
	                environment = JSON.parse(data);
	            }
	        }
	        catch(err) {
	            pm.alerts.error('Could not import. File is not a valid JSON file.');
	        }

	        if(!environment.id || environment.id.trim() === "") {
	            environment.id = guid();
	        }

	        if(!environment.name || environment.name.trim() === "") {
	            environment.name = "New Environment";
	        }

	        pm.indexedDB.environments.addEnvironment(environment, function () {
	            var envModel = new Environment(environment);
	            collection.add(envModel, {merge: true});

	            pm.syncManager.addChangeset("environment", "create", environment, null, false);
	            pm.mediator.trigger("databaseOperationComplete");
	            if (!doNotSync) {
	                pm.appWindow.trigger("sendMessageObject", "updatedEnvironment", environment);
	                collection.trigger("importedEnvironment", environment);
	                collection.addToSyncableFilesystem(environment.id);
	            }

	        });
	    },

	    importEnvironments:function (files) {
	        var collection = this;

	        // Loop through the FileList
	        for (var i = 0, f; f = files[i]; i++) {
	            var reader = new FileReader();

	            // Closure to capture the file information.
	            reader.onload = (function (theFile) {
	                return function (e) {
	                    // Render thumbnail.
	                    collection.importEnvironment(e.currentTarget.result);
	                };
	            })(f);

	            // Read in the image file as a data URL.
	            reader.readAsText(f);
	        }
	    },

	    mergeEnvironments: function(environments) {
	        var size = environments.length;
	        var collection = this;

	        function onUpdateEnvironment(environment) {
	            var envModel = new Environment(environment);
	            collection.add(envModel, {merge: true});
	            pm.mediator.trigger("sendMessageObject", "updatedEnvironment", environment);
	            pm.syncManager.addChangeset("environment","update",environment, null, true);
	            pm.mediator.trigger("databaseOperationComplete");
	            collection.addToSyncableFilesystem(environment.id);
	        }

	        for(var i = 0; i < size; i++) {
	            var environment = environments[i];
	            collection.importEnvironment(environment);
	            //Why is this updating??
	            //pm.indexedDB.environments.updateEnvironment(environment, onUpdateEnvironment);
	        }
	    },

	    resyncEnvironmentId: function(id, syncImmediately) {
	        if(typeof syncImmediately === "undefined") {
	            syncImmediately = true;
	        }
	        var collection = this;
	        var env = collection.get(id);
	        if(!env) {
	            return false;
	        }

	        env = env.toJSON();

	        pm.syncManager.addChangeset("environment","create",env, null, syncImmediately, true);
	        return true;
	    },


		//---Sync----
		onSyncChangeReceived: function(verb, message, callback) {
			if(!message.model) message.model = message.type;

			var allowedTypes = ["environment"];
			if(allowedTypes.indexOf(message.model) === -1) {
				return;
			}
	        try {
	            if (verb === "create") {
	                if (this.get(message.data.id)) {
	                    this.updateRemoteEntity(message, callback);
	                }
	                else {
	                    this.createRemoteEntity(message, callback);
	                }
	            }
	            else if (verb === "update") {
	                this.updateRemoteEntity(message, callback);
	            }
	            else if (verb === "destroy" || verb === "delete") {
	                this.deleteRemoteEntity(message, callback);
	            }
	            else {
	                pm.syncLogger.error("Unknown action for env: " + verb);
	                if(typeof callback === "function") callback();
	            }
	        }
	        catch(e) {
	            pm.syncLogger.error("Error in Saving env change: " + e.message);
	            if(typeof callback === "function") callback();
	        }
			//else if()
		},

		createRemoteEntity: function(message, callback) {
			if(message.model === "environment") {
				//pm.syncStatusManager.addNotification("environment",message.data, "create");
				var status = pm.environments.addFullEnvironment(message.data, callback);
				if(status==-1) {
					pm.mediator.trigger('syncOperationFailed', "Adding full environment failed");
				}
				else {
					pm.syncManager.updateSinceFromMessage(message);
				}
				pm.syncLogger.log(new Error(),["Environment created: ",message.data]);
			}
		},

		updateRemoteEntity: function(message, callback) {
			if(message.model === "environment") {
				//pm.syncStatusManager.addNotification("environment",message.data, "update");
				var status = pm.environments.updateRemoteEnvironment(message.data, callback);
				if(status==-1) {
					pm.mediator.trigger('syncOperationFailed', "Updating remote environment failed");
				}
				else {
					pm.syncManager.updateSinceFromMessage(message);
				}
				pm.syncLogger.log(new Error(),["Environment updated: ", message.data]);
			}
		},

		deleteRemoteEntity: function(message, callback) {
			if(message.model === "environment") {
				pm.syncLogger.log(new Error(),["Environment destroyed: ",message.data]);
				var status = pm.environments.deleteRemoteEnvironment(message.data.id, callback);
				if(status==-1) {
					pm.mediator.trigger('syncOperationFailed', "Deleting remote env failed");
				}
				else {
					pm.syncManager.updateSinceFromMessage(message);
				}
			}
		}
	});

	module.exports = Environments;


/***/ },
/* 248 */
/***/ function(module, exports) {

	var VariableProcessor = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            environments: null,
	            globals: null,
	            externalDataVariables: [],
	            functions: {},
	            selectedEnv:null,
	            selectedEnvironmentId:""
	        };
	    },

	    initialize: function() {
	        this.get("environments").on("reset", this.setCurrentEnvironment, this);
	        this.get("environments").on("change", this.setCurrentEnvironment, this);
	        this.get("environments").on("add", this.setCurrentEnvironment, this);
	        this.get("environments").on("remove", this.setCurrentEnvironment, this);

	        this.set("selectedEnvironmentId", pm.settings.getSetting("selectedEnvironmentId"));
	        this.set("selectedEnv", this.get("environments").get(pm.settings.getSetting("selectedEnvironmentId")));

	        pm.mediator.on("setEnvironmentVariable", this.setEnvironmentVariable, this);
	        pm.mediator.on("setGlobalVariable", this.setGlobalVariable, this);
	        pm.mediator.on("clearEnvironmentVariables", this.clearEnvironmentVariables, this);
	        pm.mediator.on("clearGlobalVariables", this.clearGlobalVariables, this);
	        pm.mediator.on("clearEnvironmentVariable", this.clearEnvironmentVariable, this);
	        pm.mediator.on("clearGlobalVariable", this.clearGlobalVariable, this);

	        this.initializeFunctions();
	    },

	    setGlobalVariable: function(v) {
	        var targetKey = v.key;
	        var targetValue = v.value + '';

	        var variableProcessor = this.get("variableProcessor");
	        var globals = this.get("globals");
	        var globalValues = _.clone(globals.get("globals"));
	        if(!globalValues) globalValues = [];

	        var count = globalValues.length;
	        var value;

	        var found = false;

	        for(var i = 0; i < count; i++) {
	            value = globalValues[i];
	            if (value.key === targetKey) {
	                found = true;
	                value.value = targetValue;
	                break;
	            }
	        }

	        if (!found) {
	            globalValues.push({
	                "key": targetKey,
	                "type": "text",
	                "value": targetValue
	            });
	        }

	        globals.saveGlobals(globalValues, true);

	        if(this.get("setGlobalsTimeout")) {
	            clearTimeout(this.get("setGlobalsTimeout"));
	        }
	        this.set("setGlobalsTimeout",setTimeout(function() {
	            globals.trigger("change:globals");
	        },100));
	    },

	    setEnvironmentVariable: function(v) {
	        var targetKey = v.key;
	        var targetValue = v.value + '';

	        var variableProcessor = this;
	        var environments = this.get("environments");
	        var selectedEnv = this.get("selectedEnv");
	        var found = false;

	        if (selectedEnv) {
	            var values = _.clone(selectedEnv.get("values"));
	            if(!values) values = [];

	            var count = values.length;
	            for(var i = 0; i < count; i++) {
	                value = values[i];
	                if (value.key === targetKey) {
	                    found = true;
	                    value.value = targetValue;
	                    break;
	                }
	            }

	            if (!found) {
	                values.push({
	                    "key": targetKey,
	                    "type": "text",
	                    "value": targetValue
	                });
	            }

	            var id = selectedEnv.get("id");
	            var name = selectedEnv.get("name");

	            environments.updateEnvironment(id, name, values);

	            // TODO For random reasons, selectedEnv is getting updated
	            var newEnvironment = environments.get(id);
	            this.setEnvironment(newEnvironment);
	        }
	    },

	    clearEnvironmentVariables: function() {
	        var variableProcessor = this;
	        var environments = this.get("environments");
	        var selectedEnv = this.get("selectedEnv");
	        var found = false;

	        if (selectedEnv) {
	            var id = selectedEnv.get("id");
	            var name = selectedEnv.get("name");

	            environments.clearEnvironment(id, name);

	            // TODO For random reasons, selectedEnv is getting updated
	            var newEnvironment = environments.get(id);
	            this.setEnvironment(newEnvironment);
	        }
	    },

	    clearEnvironmentVariable: function(targetKey) {
	        var variableProcessor = this;
	        var environments = this.get("environments");
	        var selectedEnv = this.get("selectedEnv");
	        var found = false;

	        if (selectedEnv) {
	            var values = _.clone(selectedEnv.get("values"));
	            if(!values) values = [];
	            var newValues = [];

	            var count = values.length;
	            for(var i = 0; i < count; i++) {
	                value = values[i];
	                if (value.key !== targetKey.key) {
	                    newValues.push(value);
	                }
	            }

	            var id = selectedEnv.get("id");
	            var name = selectedEnv.get("name");

	            environments.updateEnvironment(id, name, newValues);

	            // TODO For random reasons, selectedEnv is getting updated
	            var newEnvironment = environments.get(id);
	            this.setEnvironment(newEnvironment);
	        }
	    },

	    clearGlobalVariables: function() {
	        var variableProcessor = this.get("variableProcessor");
	        var globals = this.get("globals");
	        var globalValues = [];
	        globals.saveGlobals(globalValues);
	        globals.trigger("change:globals");
	    },

	    clearGlobalVariable: function(targetKey) {
	        var variableProcessor = this.get("variableProcessor");
	        var globals = this.get("globals");
	        var globalValues = _.clone(globals.get("globals"));
	        if(!globalValues) globalValues = [];

	        var count = globalValues.length;
	        var value;
	        var newValues = [];

	        var found = false;

	        for(var i = 0; i < count; i++) {
	            value = globalValues[i];
	            if (value.key !== targetKey.key) {
	                newValues.push(value);
	            }
	        }

	        globals.saveGlobals(newValues, true);

	        if(this.get("setGlobalsTimeout")) {
	            clearTimeout(this.get("setGlobalsTimeout"));
	        }
	        this.set("setGlobalsTimeout",setTimeout(function() {
	            globals.trigger("change:globals");
	        },100));
	    },

	    setExternalDataVariables: function(kvpairs) {
	        var vars = [];
	        for(key in kvpairs) {
	            if (kvpairs.hasOwnProperty(key)) {
	                vars.push({
	                    "key": key,
	                    "value": kvpairs[key],
	                    "type": "text"
	                });
	            }
	        }

	        this.set("externalDataVariables", vars);
	    },

	    initializeFunctions: function() {
	        var functions = {
	            "\\$guid": {
	                key: "$guid",
	                run: function() {
	                    return guid();
	                }
	            },

	            "\\$timestamp": {
	                key: "$timestamp",
	                run: function() {
	                    return Math.round(new Date().getTime() / 1000);
	                }
	            },

	            "\\$randomInt": {
	                key: "$randomInt",
	                run: function(min, max) {
	                    if (!min) min = 0;
	                    if (!max) max = 1000;
	                    return getRandomInt(min, max);
	                }
	            },

	            "\\$random [0-9]+,[0-9]+": {
	                key: "$randomInt",
	                run: function(min, max) {
	                    if (!min) min = 0;
	                    if (!max) max = 1000;

	                    return getRandomArbitrary(min, max);
	                }
	            }
	        };

	        this.set("functions", functions);
	    },

	    setCurrentEnvironment: function() {
	        this.set("selectedEnvironmentId", pm.settings.getSetting("selectedEnvironmentId"));
	        this.set("selectedEnv", this.get("environments").get(pm.settings.getSetting("selectedEnvironmentId")));
	    },

	    setEnvironment: function(environment) {
	        this.set("selectedEnvironmentId", environment.get("id"));
	        this.set("selectedEnv", environment);
	    },

	    disableEnvironment: function() {
	        this.set("selectedEnvironmentId", "");
	        this.set("selectedEnv", null);
	    },

	    setGlobals: function(globalsArray) {
	        var globals = this.get("globals");
	        globals.set("globals", globalsArray);
	    },

	    containsVariable:function (string, values) {
	        var variableDelimiter = pm.settings.getSetting("variableDelimiter");
	        var startDelimiter = variableDelimiter.substring(0, 2);
	        var endDelimiter = variableDelimiter.substring(variableDelimiter.length - 2);
	        var patString = startDelimiter + "[^\r\n]*" + endDelimiter;

	        var pattern = new RegExp(patString, 'g');
	        var matches = string.match(pattern);
	        var count = values.length;
	        var variable;

	        if(matches === null) {
	            return false;
	        }

	        for(var i = 0; i < count; i++) {

	            if (values[i].type === "function") {
	                variable = startDelimiter + values[i].matcher + endDelimiter;
	            }
	            else if(values[i].type === "text") {
	                variable = startDelimiter + values[i].key + endDelimiter;
	            }
	            //to account for the kveditor bug - saving globals w/o type
	            else if(!values[i].hasOwnProperty("type") && values[i].hasOwnProperty("key")) {
	                variable = startDelimiter + values[i].key + endDelimiter;
	            }

	            //what does this do?
	            //matches is an array
	            if(_.indexOf(matches, variable) >= 0) {
	                return true;
	            }

	            if(matches instanceof Array) {
	                if(matches[0].indexOf(variable) >=0 ) {
	                    return true;
	                }
	            }
	        }

	        return false;
	    },

		processString:function (string, values, iterationCount) {
	        if (!values) return string;
	        if(typeof iterationCount === "undefined") {
	            iterationCount = 0;
	        }
	        if(iterationCount > 20) { //to prevent infinite recursion
	            return string;
	        }

	        var count = values.length;
	        var finalString = _.clone(string);
	        var patString;
	        var pattern;


	        var variableDelimiter = pm.settings.getSetting("variableDelimiter");
	        var startDelimiter = variableDelimiter.substring(0, 2);
	        var endDelimiter = variableDelimiter.substring(variableDelimiter.length - 2);
	        try {
	            for (var i = 0; i < count; i++) {
	                patString = startDelimiter + values[i].key + endDelimiter;
	                pattern = new RegExp(patString, 'g');
	                var valToUse = _.clone(values[i].value);
	                //TODO: required because of zendesk ticket #163
	                if(valToUse === null) {
	                    //error condition
	                    //console.log("For this variable (key="+values[i].key+"), value is null. Not substituting...");
	                    valToUse = "";
	                }

	                if(typeof valToUse === "object") {
	                    if(typeof valToUse["run"] !== "function") {
	                        //valToUse is an object, but doesn't have a .run field
	                        //not substituting
	                        continue;
	                    }
	                    else {
	                        var result = valToUse.run();
	                        finalString = finalString.replace(pattern, result);
	                    }
	                }
	                else {
	                    valToUse += ""; //force to string
	                    var ampersandPattern = new RegExp("\\$",'g');
	                    valToUse = valToUse.replace(ampersandPattern, "$$$$");
	                    finalString = finalString.replace(pattern,valToUse);
	                }
	            }
	        }
	        catch(e) {
	            console.log(e);
	            finalString = string;
	        }

	        if (this.containsVariable(finalString, values)) {
	            finalString = this.processString(finalString, values, iterationCount+1);
	            return finalString;
	        }
	        else {
	            return finalString;
	        }
	    },

	    getCurrentValue: function(string) {
	        if (typeof string === "number") {
	            return string;
	        }

	        var envModel = this.get("selectedEnv");
	        var envValues = [];

	        if (envModel) {
	            envValues = envModel.getEnabledValues();
	        }

	        var globals = this.get("globals").getEnabledValues();
	        var values = [];

	        var valueMap = {};

	        if (globals) {
	            for(var i=0;i<globals.length;i++) {
	                if(globals[i].hasOwnProperty("enabled") && globals[i].enabled==false) {
	                    //reject this value
	                }
	                else {
	                    valueMap[globals[i].key] = globals[i];
	                }
	            }
	        }

	        for(i=0;i<envValues.length;i++) {
	            valueMap[envValues[i].key] = envValues[i];
	        }

	        var externalDataVariables = this.get("externalDataVariables");

	        if (externalDataVariables) {
	            for (i = 0; i < externalDataVariables.length; i++) {
	                valueMap[externalDataVariables[i].key] = externalDataVariables[i];
	            }
	        }


	        var functions = this.get("functions");
	        var fs = [];
	        for(f in functions) {
	            if(functions.hasOwnProperty(f)) {
	                var kvpair = {
	                    "key": f,
	                    "matcher": functions[f].key,
	                    "value": functions[f],
	                    "type": "function"
	                };

	                valueMap[f] = kvpair;
	            }
	        }

	        values = _.values(valueMap);

	        if (string) {
	            var finalString = _.clone(this.processString(string, values, 0));

	            return finalString;
	        }
	        else {
	            return string;
	        }

	    }
	});

	module.exports = VariableProcessor;


/***/ },
/* 249 */
/***/ function(module, exports) {

	var EnvironmentsSelector = Backbone.View.extend({
	    environments: null,
	    variableProcessor: null,

	    initialize: function() {
	        this.environments = this.options.environments;
	        this.variableProcessor = this.options.variableProcessor;

	        this.environments.on('change', this.render, this);
	        this.environments.on('reset', this.render, this);
	        this.environments.on('add', this.render, this);
	        this.environments.on('remove', this.render, this);

	        this.variableProcessor.on('change:selectedEnv', this.render, this);

	        var environments = this.environments;
	        var variableProcessor = this.variableProcessor;

	        $('#environment-selector').on("click", ".environment-list-item", function () {
	            var id = $(this).attr('data-id');
	            var selectedEnv = environments.get(id);

	            variableProcessor.set({"selectedEnv": selectedEnv});
	            pm.settings.setSetting("selectedEnvironmentId", selectedEnv.id);
	            $('#environment-selector .environment-list-item-selected').text(selectedEnv.name);
	        });

	        $('#environment-selector').on("click", ".environment-list-item-noenvironment", function () {
	            variableProcessor.set({"selectedEnv": null});
	            pm.settings.setSetting("selectedEnvironmentId", "");
	            $('#environment-selector .environment-list-item-selected').text("No environment");
	        });

	        $("#environment-selector").click(function() {
	            pm.mediator.trigger("dismissTooltip", "env-dropdown");
	        });

	        this.render();
	    },

	    render: function() {
	        var oldThis = this;
	        if(this.setEnvTimeout) {
	            clearTimeout(this.setEnvTimeout);
	        }
	        this.setEnvTimeout = setTimeout(function() {
	            $('#environment-selector .dropdown-menu').text("");
	            $('#environment-selector .dropdown-menu').append(Handlebars.templates.environment_selector_actions());
	            $('#environment-selector .dropdown-menu').append(Handlebars.templates.environment_selector({"items": oldThis.environments.toJSON()}));

	            if(!postman_electron) {
	                $("#manage-cookies-modal-wrapper").remove();
	            }

	            var selectedEnv = oldThis.variableProcessor.get("selectedEnv");

	            if (selectedEnv && selectedEnv.toJSON().name) {
	                $('#environment-selector .environment-list-item-selected').text(selectedEnv.toJSON().name);
	            }
	            else {
	                $('#environment-selector .environment-list-item-selected').text("No environment");
	            }
	        }, 100);
	    }
	});

	module.exports = EnvironmentsSelector;


/***/ },
/* 250 */
/***/ function(module, exports) {

	var EnvironmentManagerModal = Backbone.View.extend({
	    environments: null,
	    globals: null,
	    setEnvTimeout: null,

	    initialize: function() {
	        this.environments = this.options.environments;
	        this.globals = this.options.globals;

	        this.environments.on('change', this.render, this);
	        this.environments.on('reset', this.render, this);
	        this.environments.on('add', this.render, this);
	        this.environments.on('remove', this.render, this);
	        this.environments.on("importedEnvironment", this.onImportedEnvironment, this);

	        this.globals.on('change:globals', this.render, this);

	        var environments = this.environments;
	        var globals = this.globals;
	        var view = this;

	        $("#modal-environments").on("shown", function () {
	            pm.app.trigger("modalOpen", "#modal-environments");
	        });

	        $("#modal-environments").on("hidden", function () {
	            pm.app.trigger("modalClose");
	            //view.showSelector();
	        });

	        $('#environments-list').on("click", ".environment-action-delete", function () {
	            var id = $(this).attr('data-id');
	            environments.deleteEnvironment(id);
	        });

	        $('#environments-list').on("click", ".environment-action-edit", function () {
	            var id = $(this).attr('data-id');
	            view.showEditor(id);
	        });

	        $('#environments-list').on("click", ".environment-action-duplicate", function () {
	            var id = $(this).attr('data-id');
	            environments.duplicateEnvironment(id);
	        });

	        $('#environments-list').on("click", ".environment-action-download", function () {
	            var id = $(this).attr('data-id');
	            environments.downloadEnvironment(id);
	        });

	        $('.environment-action-back').on("click", function () {
	            view.showSelector();
	        });

	        $('#environment-files-input').on('change', function (event) {
	            var files = event.target.files;
	            console.log("Start importEnvironments");
	            environments.importEnvironments(files);
	            $('#environment-files-input').val("");
	        });

	        $('.environments-actions-add').on("click", function () {
	            view.showEditor();
	        });

	        $('.environments-actions-import').on('click', function () {
	            view.showImporter();
	        });

	        $('.environments-actions-manage-globals').on('click', function () {
	            view.showGlobals();
	        });

	        $("#environment-globals-download").on('click', function() {
	            view.downloadGlobals();
	        });

	        function submitEnvironmentEditorForm() {
	            var id = $('#environment-editor-id').val();
	            var name = $('#environment-editor-name').val();
	            var values = $('#environment-keyvaleditor').keyvalueeditor('getValues');

	            if(values instanceof Array) {
	                $("#environment-modal-error").text("");
	                if (id === "0") {
	                    if(!name || name.length==0) {
	                        $("#new-env-name-missing").show();
	                        return;
	                    }
	                    else {
	                        $("#new-env-name-missing").hide();
	                    }
	                    environments.addEnvironmentWithoutId(name, values);
	                }
	                else {
	                    environments.updateEnvironment(id, name, values);
	                }

	                $('#environment-editor-name').val("");
	                $('#environment-keyvaleditor').keyvalueeditor('reset', []);

	                view.showSelector();
	            }
	            else {
	                //error
	                if(values.result==="error") {
	                    var msg = values.message;
	                    $("#environment-modal-error").text(msg);
	                }
	            }
	        }

	        $('#environment-editor-form').submit(function() {
	            submitEnvironmentEditorForm();
	            return false;
	        });

	        $('.environments-actions-add-submit').on("click", function () {
	            submitEnvironmentEditorForm();
	        });

		    $("#environment-editor").keydown(function (event) {
			    if (event.keyCode === 13) {
				    submitEnvironmentEditorForm();
				    event.preventDefault();
				    return false;
			    }

			    return true;
		    });


		    $("#globals-editor").keydown(function (event) {
			    if (event.keyCode === 13) {
				    $("a.environments-actions-add-back").click();
				    event.preventDefault();
				    return false;
			    }

			    return true;
		    });

		    $('.environments-actions-add-back').on("click", function () {
	            var values = $('#globals-keyvaleditor').keyvalueeditor('getValues');
	            if(values instanceof Array) {
	                globals.saveGlobals(values, true);
	                view.showSelector();
	                $("#globals-modal-error").text("");
	                $('#environment-editor-name').val("");
	                $('#environment-keyvaleditor').keyvalueeditor('reset', []);
	            }
	            else {
	                //error
	                if(values.result==="error") {
	                    var msg = values.message;
	                    $("#globals-modal-error").text(msg);
	                }
	            }
	        });

	        $('#environments-list-help-toggle').on("click", function (event) {
	            var d = $('#environments-list-help-detail').css("display");
	            if (d === "none") {
	                $('#environments-list-help-detail').css("display", "inline");
	                $(event.currentTarget).text("Hide");
	            }
	            else {
	                $('#environments-list-help-detail').css("display", "none");
	                $(event.currentTarget).text("Tell me more");
	            }
	        });

	        var params = {
	            placeHolderKey:"Key",
	            placeHolderValue:"Value",
	            deleteButton:'<span class="icon-delete"/>',
	            uniqueKeys: true,
	            sortable: true
	        };

	        $('#environment-keyvaleditor').keyvalueeditor('init', params);
	        $('#globals-keyvaleditor').keyvalueeditor('init', params);

	        $(document).bind('keydown', 'e', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "show_env_modal");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            $('#modal-environments').modal({
	                keyboard:true
	            });
	        });

	        this.render();
	    },

	    onImportedEnvironment: function(environment) {
	      pm.alerts.success('Import successful');
	    },

	    showEditor:function (id) {
	        if (id) {
	            var environment = this.environments.get(id).toJSON();
	            $('#environment-editor-name').val(environment.name);
	            $('#environment-editor-id').val(id);
	            $('#environment-keyvaleditor').keyvalueeditor('reset', environment.values);
	        }
	        else {
	            $('#environment-editor-id').val(0);
	        }

	        $('#environments-list-wrapper').css("display", "none");
	        $('#environment-editor').css("display", "block");
	        $('#globals-editor').css("display", "none");
	        $("#new-env-name-missing").hide();
	        $('#modal-environments .modal-footer').css("display", "block");
	    },

	    downloadGlobals: function() {
	        pm.mediator.trigger("downloadGlobals");
	    },

	    showSelector:function () {
	        $('#environments-list-wrapper').css("display", "block");
	        $('#environment-editor').css("display", "none");
	        $('#environment-importer').css("display", "none");
	        $('#globals-editor').css("display", "none");
	        $('.environments-actions-add-submit').css("display", "inline");
	        $('#modal-environments .modal-footer').css("display", "none");
	    },

	    showImporter:function () {
	        $('#environments-list-wrapper').css("display", "none");
	        $('#environment-editor').css("display", "none");
	        $('#globals-editor').css("display", "none");
	        $('#environment-importer').css("display", "block");
	        $('.environments-actions-add-submit').css("display", "none");
	        $('#modal-environments .modal-footer').css("display", "block");
	    },

	    showGlobals:function () {
	        $('#environments-list-wrapper').css("display", "none");
	        $('#environment-editor').css("display", "none");
	        $('#globals-editor').css("display", "block");
	        $('#environment-importer').css("display", "none");
	        $('.environments-actions-add-submit').css("display", "none");
	        $('#modal-environments .modal-footer').css("display", "block");
	    },

	    render: function() {
	        var oldThis = this;
	        if(this.setEnvTimeout) {
	            clearTimeout(this.setEnvTimeout);
	        }
	        this.setEnvTimeout = setTimeout(function() {
	            $('#environments-list tbody').text("");
	            $('#environments-list tbody').append(Handlebars.templates.environment_list({"items": oldThis.environments.toJSON()}));
	            $('#globals-keyvaleditor').keyvalueeditor('reset', oldThis.globals.get("globals"));
	        },100);
	    }
	});

	module.exports = EnvironmentManagerModal;


/***/ },
/* 251 */
/***/ function(module, exports) {

	var QuickLookPopOver = Backbone.View.extend({
	    initialize: function() {
	        var view = this;
	        
	        this.environments = this.options.environments;
	        this.variableProcessor = this.options.variableProcessor;
	        this.globals = this.options.globals;

	        this.environments.on('change', this.render, this);
	        this.variableProcessor.on('change:selectedEnv', this.render, this);

	        this.globals.on('change:globals', this.render, this);

	        // $('#environment-quicklook').on("mouseenter", function () {
	        //     $('#environment-quicklook-content').css("display", "block");
	        // });

	        // $('#environment-quicklook').on("mouseleave", function () {
	        //     $('#environment-quicklook-content').css("display", "none");
	        // });

	        _.bindAll(this, "toggleDisplay", "__closeHandler");
	        $('#environment-quicklook').on("click", this.toggleDisplay);

	        // $(".environment-list-item-selected-wrapper").click(function() {
	        //     $('#environment-quicklook-content').css("display", "none");
	        // });

	        $(document).bind('keydown', 'q', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "quick_look_toggle");
	            view.toggleDisplay();
	            return false;
	        });

	        this.render();
	    },

	    render: function() {
	        var oldThis = this;
	        if(this.setEnvTimeout) {
	            clearTimeout(this.setEnvTimeout);
	        }
	        this.setEnvTimeout = setTimeout(function() {
	            var environment = oldThis.environments.get(oldThis.variableProcessor.get("selectedEnv"));

	            if (!environment) {
	                $('#environment-quicklook-environments h6').text("No environment");
	                $('#environment-quicklook-environments ul').text("");
	            }
	            else {
	                $('#environment-quicklook-environments h6').text(environment.get("name"));
	                $('#environment-quicklook-environments ul').text("");
	                $('#environment-quicklook-environments ul').append(Handlebars.templates.environment_quicklook({
	                    "items": environment.getEnabledValues()
	                }));
	            }

	            if (!oldThis.globals) {
	                return;
	            }

	            $('#environment-quicklook-globals ul').text("");
	            $('#environment-quicklook-globals ul').append(Handlebars.templates.environment_quicklook({
	                "items": oldThis.globals.getEnabledValues()
	            }));

	            $('#environment-quicklook-content').css("max-height", $(window).innerHeight()/2+"px");
	        },100);
	    },

	    toggleDisplay: function(e) {
	        if($('#environment-quicklook-content').css("display") == "block") {
	            this.hideDisplay();
	        }
	        else {
	            this.showDisplay();
	            $('#environment-quicklook').tooltip('hide');
	        }
	        // if(e) {
	        //     e.stopPropagation();
	        // }
	    },

	    hideDisplay: function() {
	        $('#environment-quicklook-content').css("display", "none");
	        this._removeCloseListeners();
	    },

	    showDisplay: function() {
	        $('#environment-quicklook-content').css("display", "block");
	        var that = this;
	        setTimeout(function(){
	            that._addCloseListeners();
	        },0);
	    },

	    _addCloseListeners: function() {
	        $("body").on("click", this.__closeHandler);
	        $('#environment-quicklook-content').on("click", this.__preventEventPropagation);
	    },

	    __closeHandler: function() {
	        this.hideDisplay();
	    },

	    __preventEventPropagation: function(e) {
	        e.stopPropagation();
	    },

	    _removeCloseListeners: function() {
	        $("body").off("click", this.__closeHandler);
	        $('#environment-quicklook-content').off("click", this.__preventEventPropagation);
	    }
	});

	module.exports = QuickLookPopOver;


/***/ },
/* 252 */
/***/ function(module, exports) {

	var AppState = Backbone.Model.extend({
	    defaults: function() {
	        return {
	        	variableProcessor:null,
	            isModalOpen:false,
	            activeModal: ""
	        };
	    }
	});

	module.exports = AppState;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var App = Backbone.View.extend({
	    initialize:function () {

	        //TODO: Enable editables later
	        //$.fn.editable.defaults.mode = 'inline';

	        if(typeof window.pmWindowsOpen === "undefined") {
	            window.pmWindowsOpen = 1;
	        }

	        if(typeof window.pmPrimaryWindowId === "undefined") {
	            var currWin = chrome.app.window.current();
	            window.pmPrimaryWindowId = currWin.id;
	            window.pmWindowsOpenList = [currWin.id];
	            pm.syncManager.initialize();
	        }

	        var variableProcessor = this.model.get("variableProcessor");
	        var globals = this.model.get("globals");

	        this.on("modalClose", this.onModalClose, this);
	        this.on("modalOpen", this.onModalOpen, this);

	        variableProcessor.on('change:selectedEnv', this.renderContextMenu, this);
	        globals.on('change', this.renderContextMenu, this);

	        var view = this;


	        view.menuIdPrefix = guid();
	        pm.contextMenuIds = {};

	        pm.currentMainView = "request-builder-view";

	        view.webkitMenus = null;

	        setTimeout(function() {
	            $('[rel="tooltip"]').tooltip({
	                delay: { "show": 500, "hide": 100 }
	            });
	        }, 500);

	        $('input[rel="popover"]').popover();
	        $(".html-source-pane").css('height', (window.innerHeight-300)+"px");

	        var resizeTimeout;

	        $(window).on("resize", function () {
	            clearTimeout(resizeTimeout);
	            resizeTimeout = setTimeout(function() {
	                view.setLayout();
	            }, 500);
	            var newHeight = window.innerHeight;
	            $("#sidebar-toggle").css('left', $("#outer-sidebar").css('width'));
	        });

	        $('body').on('keydown', 'textarea', function (event) {
	            if(view.isModalOpen()) {
	                return;
	            }

	            if (event.keyCode === 27) {
	                $(event.target).blur();
	            }
	        });

	        $('body').on('keydown', 'select', function (event) {
	            if (event.keyCode === 27) {
	                $(event.target).blur();
	            }
	        });

	        $('body').unload(function (event) {
	            //debugger;
	        });

	        /*For markdown links*/
	        $(document).on('click', '#collection-overview-description a, #overview-request-description a, #folder-overview-description a, #request-description a', function() {
	            window.open($(this).attr('href'));
	            return false;
	        });

	        $(document).bind('keydown', 'esc', function () {
	            if(view.isModalOpen()) {
	                pm.tracker.trackEvent("interaction", "shortcut", "hide_modal");
	                var activeModal = view.model.get("activeModal");
	                if(activeModal === "#modal-eula-notif") {
	                    //you cannot close the eula modal
	                    return;
	                }
	                if(activeModal !== "") {
	                    $(activeModal).modal("hide");
	                }
	            }
	        });

	        $(document).bind('keydown', 'shift+/', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "show_settings");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            $('#modal-settings').modal({
	                keyboard: true
	            });

	            $('#modal-settings').modal('show');
	            $('#modal-settings a[href="#settings-shortcuts"]').tab('show');
	        });

	        var donated = pm.settings.getSetting("haveDonated");

	        if(donated) {
	            $("#donate-link").css("display", "none");
	        }
	        else {
	            $("#donate-link").css("display", "inline");
	        }

	        var instantModals = pm.settings.getSetting("instantModals");
	        if(instantModals) {
	            $(".fade").removeClass("fade").addClass("fade_disable");
	        }

	        pm.mediator.on("donatedStatusChanged", function(donated) {
	            if(donated) {
	                $("#donate-link").css("display", "none");
	            }
	            else {
	                $("#donate-link").css("display", "inline");
	            }
	        });

	        pm.mediator.on("openModuleSection", this.openModuleSection, this);
	        pm.mediator.on("openModule", this.openModule, this);

	        pm.mediator.on("updateUIScale", function(newValue, oldValue) {

	            if(newValue === oldValue) {
	                pm.mediator.trigger("updatedUIScale"); //for the ace editors to update their font size
	                return;
	            }

	            var SCALE_STEP = 3;

	            var oldBaseFontSize = window.getComputedStyle(document.documentElement)["font-size"];
	            var oldBasePercent = (parseFloat(oldBaseFontSize)/16)*100;
	            var diffPercent = (newValue - oldValue)*SCALE_STEP;

	            var newBasePercent = oldBasePercent + diffPercent;

	            $("html").css("font-size", newBasePercent+"%");
	            pm.mediator.trigger("updatedUIScale");
	        });

	        pm.appWindow.trigger("registerInternalEvent", "openRunner", function() {
	            view.openModule("test_runner");
	        }, this);

	        /* this should happen after UI resize */
	        setTimeout(function(){
	            var sidebarWidth = $("#outer-sidebar").css('width');
	            if(sidebarWidth === 0) {
	                sidebarWidth = 350;
	            }
	            $("#sidebar-toggle").css('left', sidebarWidth);
	            $("#main-container").css('margin-left', rem(sidebarWidth));
	        }, 0);

	        this.renderContextMenu();
	        this.setLayout();

	        window.addEventListener('online', function() {
	            setTimeout(function() {
	                pm.mediator.trigger("appOnline");
	            }, 2000);
	        });
	        window.addEventListener('offline', function() {
	            if(!navigator.onLine) {
	                pm.mediator.trigger("appOffline");
	            }
	        });

	        //Hack-Fix for context menu items not appearing at all
	        setTimeout(function() {
	            pm.envManager.get("globals").trigger("change");
	        }, 1000);

	        this.sendNotification();

	        if(postman_electron) {
	            this.ipc = __webpack_require__(254);
	            $(".not-electron").remove();
	            pm.electronShell = __webpack_require__(255);

	            $("body").on("click", ".external-link", function(e) {
	                var href = $(this).attr('href');
	                pm.electronShell.openExternal(href);
	                e.preventDefault();
	                return false;
	            });
	        }
	    },

	    openWindow: function(url) {
	        if(postman_electron) {
	            pm.electronShell.openExternal(url);
	        }
	        else {
	            window.open(url);
	        }
	    },

	    getVersion: function() {
	        if(postman_electron) {
	            if(!this.remoteApp) {
	                this.remoteApp = __webpack_require__(256).require('app');
	            }
	            return this.remoteApp.getVersion();
	        }
	        else {
	            return chrome.runtime.getManifest().version;
	        }
	    },

	    sendNotification: function() {

	    },

	    createOrUpdateContextMenuItem: function(id, title, parentId) {
	        var view = this;

	        if(!title) {
	            return;
	        }

	        var contextMenuIds = pm.contextMenuIds;
	        var obj = {
	            title: title,
	            contexts: ['selection']
	        };

	        if (contextMenuIds[id]) {
	            id = chrome.contextMenus.update(id, obj);
	        }
	        else {
	            obj.id = id;
	            if (parentId) {
	                obj.parentId = parentId;
	            }
	            try {
	                id = chrome.contextMenus.create(obj, function() {
	                    if(chrome.runtime.lastError) {
	                        var errorString = chrome.runtime.lastError.message;
	                        if(errorString.indexOf("Cannot create item with duplicate") !== -1) {
	                            //nothing. the menu item already exists
	                        }
	                        else {
	                            throw errorString;
	                        }
	                    }
	                });
	            }
	            catch(e) {
	                console.log("Fatal error while creating context menu: " + e);
	            }
	            contextMenuIds[id] = true;
	        }
	    },

	    onAppResize: function() {

	    },

	    createEnvironmentContextMenu: function(environment) {
	        var view = this;
	        var i;
	        var count;
	        var targetId;
	        var value;
	        var values;

	        if (environment) {
	            targetId = view.menuIdPrefix + "/postman_current_environment";
	            values = environment.get("values");
	            if(!values) {
	                environment.set("values", []);
	                return;
	            }
	            count = values.length;

	            if(postman_webkit) {
	                var envSubMenu = new nw.Menu();
	                for (i = 0; i < count; i++) {
	                    value = values[i];
	                    envSubMenu.append(new nw.MenuItem({
	                        label: value.key,
	                        click: function() {
	                            return view.updateEnvironmentVariableFromContextMenu(value.key, view.getSelection_webkit());
	                        }
	                    }));
	                }

	                var envMenu = new nw.MenuItem({
	                    label: 'Set: ' + environment.get("name"),
	                    submenu: envSubMenu
	                });

	                view.webkitMenus.append(envMenu);
	            }
	            else if(postman_electron) {
	                $(".not-electron").remove();
	            }
	            else {
	                this.createOrUpdateContextMenuItem(targetId, "Set: " + environment.get("name"), false);
	                for (i = 0; i < count; i++) {
	                    value = values[i];
	                    targetId = view.menuIdPrefix + "/environment/" + value.key;
	                    this.createOrUpdateContextMenuItem(targetId, value.key, view.menuIdPrefix + "/postman_current_environment");
	                }
	            }
	        }
	    },

	    createGlobalsContextMenu: function(globals) {
	        var view = this;
	        var i;
	        var count;
	        var targetId;
	        var value;
	        var values;

	        if (globals) {
	            targetId = view.menuIdPrefix + "/postman_globals";
	            values = globals.get("globals");
	            if(!values) {
	                globals.set("globals", []);
	                return;
	            }
	            count = values.length;

	            if(postman_webkit) {
	                var glbSubMenu = new nw.Menu();
	                for (i = 0; i < count; i++) {
	                    value = values[i];
	                    glbSubMenu.append(new nw.MenuItem({
	                        label: value.key,
	                        click: function() {
	                            return view.updateGlobalVariableFromContextMenu(value.key, view.getSelection_webkit());
	                        }
	                    }));
	                }

	                var glbMenu = new nw.MenuItem({
	                    label: 'Set: Globals',
	                    submenu: glbSubMenu
	                });

	                view.webkitMenus.append(glbMenu);
	            }
	            else if(postman_brackets) {
	                console.log("Add menus for brackets");
	            }
	            else if(postman_electron) {
	                console.log("Add menus for electron");
	            }
	            else {
	                this.createOrUpdateContextMenuItem(targetId, "Set: Globals", false);

	                for (i = 0; i < count; i++) {
	                    value = values[i];
	                    targetId = view.menuIdPrefix + "/globals/" + value.key;
	                    this.createOrUpdateContextMenuItem(targetId, value.key, view.menuIdPrefix + "/postman_globals");
	                }
	            }
	        }
	    },

		createEncodingContextMenu: function() {
			var view = this;
	        if(postman_webkit) {
	            var encodeMenuItem = new nw.MenuItem({
	                label: 'EncodeURIComponent',
	                click: function() {
	                    view.userEncodeUri(null, null)
	                }
	            });

	            var decodeMenuItem = new nw.MenuItem({
	                label: 'DecodeURIComponent',
	                click: function() {
	                    view.userDecodeUri(null, null);
	                }
	            });

	            view.webkitMenus.append(encodeMenuItem);
	            view.webkitMenus.append(decodeMenuItem);
	        }
	        else if(postman_brackets) {
	            console.log("Add menus for brackets");
	        }
	        else if(postman_electron) {
	            console.log("Add menus for electron");
	        }
	        else {
	            var targetId = view.menuIdPrefix + "/encodeURI";
	            this.createOrUpdateContextMenuItem(targetId, "EncodeURIComponent", false);
	            targetId = view.menuIdPrefix + "/decodeURI";
	            this.createOrUpdateContextMenuItem(targetId, "DecodeURIComponent", false);
	        }
		},


		createContextMenu: function(environment, globals) {
			this.createEnvironmentContextMenu(environment);
			this.createGlobalsContextMenu(globals);
			this.createEncodingContextMenu();
		},

	    renderContextMenu: function() {
	        var variableProcessor = this.model.get("variableProcessor");
	        var globals = this.model.get("globals");
	        var environment = variableProcessor.get("selectedEnv");
	        var view = this;


	        if(postman_webkit) {
	            view.webkitMenus = new nw.Menu();
	            _.bind(view.createContextMenu, view)(environment, globals);
	            document.body.addEventListener('contextmenu', function(ev) {
	                ev.preventDefault();
	                view.webkitMenus.popup(ev.x, ev.y);
	                return false;
	            });
	        }
	        else if(postman_brackets) {
	            console.log("Add menus for brackets");
	        }
	        else if(postman_electron) {
	            console.log("Add menus for electron");
	        }
	        else {
	            chrome.contextMenus.removeAll(function () {
	                pm.contextMenuIds = {};
	                _.bind(view.createContextMenu, view)(environment, globals);
	            });


	            chrome.contextMenus.onClicked.addListener(function (info, tab) {
	                if (!document.hasFocus()) {
	                    // console.log('Ignoring context menu click that happened in another window');
	                    return;
	                }

	                var menuItemParts = info.menuItemId.split("/");
	                var category = menuItemParts[1];
	                var variable = menuItemParts[2];
	                if (category === "encodeURI") {
	                    _.bind(view.userEncodeUri, view)(info, tab);
	                }
	                else if (category === "decodeURI") {
	                    _.bind(view.userDecodeUri, view)(info, tab);
	                }
	                else {
	                    _.bind(view.updateVariableFromContextMenu, view)(category, variable, info.selectionText);
	                }
	            });
	        }
	    },

		userEncodeUri: function(info, tab) {
			var inputBox = document.activeElement;
			var selectionStart = inputBox.selectionStart;
			var selectionEnd = inputBox.selectionEnd;
	    if(!inputBox || !inputBox.value) {
	      return;
	    }
			var oldValue = inputBox.value;
			var newValue = oldValue.substring(0, selectionStart) + encodeURIComponent(oldValue.substring(selectionStart, selectionEnd)) + oldValue.substring(selectionEnd, oldValue.length);
			inputBox.value = newValue;
			return;
		},

		userDecodeUri: function(info, tab) {
	        var inputBox = document.activeElement;
	        var selectionStart = inputBox.selectionStart;
	        var selectionEnd = inputBox.selectionEnd;
	        if(!inputBox || !inputBox.value) {
	          return;
	        }
	        var oldValue = inputBox.value;
	        var newValue = oldValue.substring(0, selectionStart) + decodeURIComponent(oldValue.substring(selectionStart, selectionEnd)) + oldValue.substring(selectionEnd, oldValue.length);
	        inputBox.value = newValue;
	        return;
	    },

	    getSelection_webkit: function() {
	        var clipboard = nw.Clipboard.get();
	        var oldSelection = clipboard.get('text');
	        document.execCommand("copy");
	        var selectionText = clipboard.get('text');
	        clipboard.set(oldSelection);
	        return selectionText;
	    },

	    updateEnvironmentVariableFromContextMenu: function(variable, selectionText) {
	        var variableProcessor = this.model.get("variableProcessor");
	        var environments = this.model.get("environments");
	        var selectedEnv = variableProcessor.get("selectedEnv");

	        if(pm.cmp && pm.cmp.isFocused()) {
	            var responseCmSelection = pm.cmp.getSelectedText();
	            if(responseCmSelection !== "") {
	                selectionText = responseCmSelection + "";
	            }
	        }

	        if (selectedEnv) {
	            var values = _.clone(selectedEnv.get("values"));
	            var count = values.length;
	            for(var i = 0; i < count; i++) {
	                value = values[i];
	                if (value.key === variable) {
	                    value.value = selectionText;
	                    break;
	                }
	            }
	            var id = selectedEnv.get("id");
	            var name = selectedEnv.get("name");
	            environments.updateEnvironment(id, name, values);
	        }
	    },

	    updateGlobalVariableFromContextMenu: function(variable, selectionText) {
	        var variableProcessor = this.model.get("variableProcessor");
	        var globals = this.model.get("globals");
	        var globalValues = _.clone(globals.get("globals"));

	        var count = globalValues.length;
	        var value;

	        if(pm.cmp && pm.cmp.isFocused()) {
	            var responseCmSelection = pm.cmp.getSelectedText();
	            if(responseCmSelection !== "") {
	                selectionText = responseCmSelection + "";
	            }
	        }

	        for(var i = 0; i < count; i++) {
	            value = globalValues[i];
	            if (value.key === variable) {
	                value.value = selectionText;
	                break;
	            }
	        }

	        globals.saveGlobals(globalValues);
	        globals.trigger("change:globals");
	    },

	    updateVariableFromContextMenu: function(category, variable, selectionText) {
	        if (category === "globals") {
	            this.updateGlobalVariableFromContextMenu(variable, selectionText);
	        }
	        else if (category === "environment") {
	            this.updateEnvironmentVariableFromContextMenu(variable, selectionText);
	        }
	    },

	    onModalOpen:function (activeModal) {
	        this.model.set("activeModal", activeModal);
	        this.model.set("isModalOpen", true);
	    },

	    onModalClose:function () {
	        // Shift focus to disable last shown tooltip
	        $("#url").focus();
	        this.model.set("activeModal", null);
	        this.model.set("isModalOpen", false);

	        //explicity remove all tooltips. Weird issue - Fix for Github Issue 760
	        $(".tooltip").remove();
	    },

	    isModalOpen: function() {
	        return this.model.get("isModalOpen");
	    },

	    setLayout:function () {
	        this.refreshScrollPanes();
	    },

	    refreshScrollPanes:function () {
	        // var documentHeight = $(document).height();
	        // var newMainHeight = documentHeight - 55;
	        // $('.main-view').height(newMainHeight + "px");
	        // var newMainWidth = $('#container').width() - $('#sidebar').width() - 10;
	        //$('.main-view').width(newMainWidth + "px");

	        pm.mediator.trigger("refreshLayout");
	        pm.mediator.trigger("refreshPrscriptLayout");

	        // $('#directory-browser').height(newMainHeight + "px");
	    },

	    openModuleSection: function(section) {
	        if (section === "requester") {
	            $("#add-ons").css("display", "block");
	            $("#back-to-requester-container").css("display", "none");
	            $("#main-container").css("display", "block");
	            $("#directory-browser").css("display", "none");
	            $("#team-directory-browser").css("display", "none");
	            $("#directory-browser").css("display", "none");
	        }
	    },

	    openModule: function(module, collectionId, folderId, environmentId) {
	        if (module === "requester") {
	            this.openRequester();
	        }
	        else if (module === "directory") {
	            $("#add-ons").css("display", "none");
	            //$("#back-to-requester-container").css("display", "block");
	            $(".main-view").hide();
	            $("#directory-browser").css("display", "block");
	        }
	        else if (module === "test_runner") {
	            this.openTestRunner(collectionId, folderId, environmentId);
	            pm.tracker.trackEvent('test_runner', 'collection_runner', 'new_window');        
	        }
	        else if (module === "teamDirectory") {
	            $("#add-ons").css("display", "none");
	            //$("#back-to-requester-container").css("display", "block");
	            $(".main-view").hide();
	            $("#team-directory-browser").css("display", "flex");
	        }
	    },

	    startPurchase: function() {
	        pm.mediator.trigger("startPurchaseFlow");
	    },

	    openRequester: function() {
	        if(postman_electron) {
	            this.ipc.send('openNewWindow', 'ping');
	        }
	        else {
	            var newWindowId = guid();
	            pm.appWindow.trigger("sendMessageObject", "pmWindowOpened", newWindowId);
	            pm.appWindow.onPmWindowOpened(newWindowId);
	            if(window.pmWindowsOpenList.indexOf(newWindowId)==-1) {
	                window.pmWindowsOpenList.push(newWindowId);
	                window.pmWindowsOpen++;
	            }
	            console.log("Open called from this window. ")
	            chrome.app.window.create('requester.html', {
	                "id": newWindowId,
	                "bounds": {
	                  top: 60,
	                  left: 60,
	                  width: 1074,
	                  height: 800
	                }
	            }, function (win) {
	                console.log("Seting data in other window");
	                win.contentWindow.pmWindowsOpen = window.pmWindowsOpen;
	                win.contentWindow.pmPrimaryWindowId = window.pmPrimaryWindowId;
	                win.contentWindow.pmWindowsOpenList = window.pmWindowsOpenList;
	                win.contentWindow.pmThisWindowId = newWindowId;
	                win.contentWindow.console.log("Set data:  openList: ", window.pmWindowsOpenList);
	                win.contentWindow.console.log("Set data:  pmPrimaryWindowId: ", window.pmPrimaryWindowId);
	                win.onClosed.addListener(function () {
	                });
	            });
	        }

	        //send sync status to new window
	        setTimeout(function() {
	            pm.syncManager.updateStateToAllWindows();
	        }, 5000);
	    },

	    openTestRunner: function(collectionId, folderId, environmentId) {
	        //window.pmWindowsOpen++;
	        if(postman_electron) {
	            this.ipc.send('openTestRunner', JSON.stringify({
	                collectionId: collectionId,
	                folderId: folderId,
	                environmentId: environmentId
	            }));
	            return;
	        }
	        chrome.app.window.create('test_runner.html', {
	            "bounds": {
	                top: 130,
	                left: 130,
	                width: 1074,
	                height: 800
	            }
	        }, function(win) {
	            win.onClosed.addListener(function() {
	            });

	            win.contentWindow.collectionId = collectionId;
	            win.contentWindow.folderId = folderId;
	            win.contentWindow.environmentId = environmentId;
	        });
	    }
	});

	module.exports = App;


/***/ },
/* 254 */
/***/ function(module, exports) {

	module.exports = require("ipc");

/***/ },
/* 255 */
/***/ function(module, exports) {

	module.exports = require("shell");

/***/ },
/* 256 */
/***/ function(module, exports) {

	module.exports = require("remote");

/***/ },
/* 257 */
/***/ function(module, exports) {

	var HeaderPreset = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "",
	            "name": "",
	            "headers": [],
	            "timestamp": 0,
	            "synced": false
	        };
	    },

	    toSyncableJSON: function() {
	        var j = this.toJSON();
	        j.synced = true;
	        return j;
	    }
	});

	var HeaderPresets = Backbone.Collection.extend({
	    model: HeaderPreset,

	    isLoaded: false,
	    initializedSyncing: false,
	    syncFileType: "header_preset",

	    comparator: function(a, b) {
	        var counter;

	        var aName = a.get("name");
	        var bName = b.get("name");

	        if (aName.length > bName.length)
	            counter = bName.length;
	        else
	            counter = aName.length;

	        for (var i = 0; i < counter; i++) {
	            if (aName[i] == bName[i]) {
	                continue;
	            } else if (aName[i] > bName[i]) {
	                return 1;
	            } else {
	                return -1;
	            }
	        }
	        return 1;
	    },

	    presetsForAutoComplete:[],

	    initialize:function () {
	        this.on("change", this.refreshAutoCompleteList, this);
	        this.loadPresets();

	        //--Sync listeners---
	        pm.mediator.on("syncChangeReceived", this.onSyncChangeReceived, this);

	        pm.appWindow.trigger("registerInternalEvent", "addedHeaderPreset", this.onAddedPreset, this);
	        pm.appWindow.trigger("registerInternalEvent", "updatedHeaderPreset", this.onUpdatedPreset, this);
	        pm.appWindow.trigger("registerInternalEvent", "deletedHeaderPreset", this.onDeletedPreset, this);
	    },

	    // Initialize all models
	    loadPresets:function () {
	        var collection = this;

	        this.startListeningForFileSystemSyncEvents();

	        pm.indexedDB.headerPresets.getAllHeaderPresets(function (items) {
	            collection.add(items, {merge: true});
	            collection.refreshAutoCompleteList();

	            collection.isLoaded = true;
	            collection.trigger("startSync");
	        });
	    },

	    onAddedPreset: function(preset) {
	        this.add(preset, {merge: true});
	    },

	    onUpdatedPreset: function(preset) {
	        this.add(preset, {merge: true});
	    },

	    onDeletedPreset: function(id) {
	        this.remove(id);
	    },

	    startListeningForFileSystemSyncEvents: function() {
	        var collection = this;
	        var isLoaded = collection.isLoaded;
	        var initializedSyncing = collection.initializedSyncing;

	        pm.mediator.on("initializedSyncableFileSystem", function() {
	            collection.initializedSyncing = true;
	            collection.trigger("startSync");
	        });

	        this.on("startSync", this.startSyncing, this);
	    },

	    startSyncing: function() {
	        var i = 0;
	        var collection = this;
	        var headerPreset;
	        var synced;
	        var syncableFile;

	        if (this.isLoaded && this.initializedSyncing) {
	            pm.mediator.on("addSyncableFileFromRemote", function(type, data) {
	                if (type === collection.syncFileType) {
	                    collection.onReceivingSyncableFileData(data);
	                }
	            });

	            pm.mediator.on("updateSyncableFileFromRemote", function(type, data) {
	                if (type === collection.syncFileType) {
	                    collection.onReceivingSyncableFileData(data);
	                }
	            });

	            pm.mediator.on("deleteSyncableFileFromRemote", function(type, id) {
	                if (type === collection.syncFileType) {
	                    collection.onRemoveSyncableFile(id);
	                }
	            });

	            // And this
	            for(i = 0; i < this.models.length; i++) {
	                headerPreset = this.models[i];
	                synced = headerPreset.get("synced");

	                if (!synced) {
	                    this.addToSyncableFilesystem(headerPreset.get("id"));
	                }
	            }
	        }
	        else {
	        }
	    },

	    onReceivingSyncableFileData: function(data) {
	        this.mergeHeaderPreset(JSON.parse(data), true);
	    },

	    onRemoveSyncableFile: function(id) {
	        this.deleteHeaderPreset(id, true);
	    },

	    getAsSyncableFile: function(id) {
	        var collection = this;
	        var headerPreset = this.get(id);
	        var name = id + "." + collection.syncFileType;
	        var type = collection.syncFileType;
	        var data = JSON.stringify(headerPreset.toSyncableJSON());

	        return {
	            "name": name,
	            "type": type,
	            "data": data
	        };
	    },

	    addToSyncableFilesystem: function(id) {
	        var collection = this;

	        var syncableFile = this.getAsSyncableFile(id);
	        pm.mediator.trigger("addSyncableFile", syncableFile, function(result) {
	            if(result === "success") {
	                collection.updateHeaderPresetSyncStatus(id, true);
	            }
	        });
	    },

	    removeFromSyncableFilesystem: function(id) {
	        var collection = this;

	        var name = id + "." + collection.syncFileType;
	        pm.mediator.trigger("removeSyncableFile", name, function(result) {
	        });
	    },

	    // Iterate through models
	    getHeaderPreset:function (id) {
	        var presets = this.models;
	        var preset;
	        for (var i = 0, count = presets.length; i < count; i++) {
	            preset = presets[i];
	            if (preset.get("id") === id) {
	                break;
	            }
	        }

	        return preset;
	    },

	    // Add to models
	    addHeaderPreset:function (id, name, headers, doNotSync) {
	        this.addHeaderPresetWithOptSync(id, name, headers, doNotSync, true);
	    },

	    addHeaderPresetWithOptSync: function (id, name, headers, doNotSync, toSync) {
	        if(toSync) {
	            pm.tracker.trackEvent("request", "headers", "new_preset");
	        }
	        if(id===0) id = guid();

	        var headerPreset = {
	            "id":id,
	            "name":name,
	            "headers":headers,
	            "timestamp":new Date().getTime()
	        };

	        var headerPresets = this;

	        pm.indexedDB.headerPresets.addHeaderPreset(headerPreset, function () {
	            headerPresets.add(headerPreset, {merge: true});
	            pm.mediator.trigger("databaseOperationComplete");
	            if (!doNotSync) {
	                headerPresets.addToSyncableFilesystem(id);
	            }
	            if(toSync) {
	                pm.syncManager.addChangeset("headerpreset","create",headerPreset, null, true);
	                pm.appWindow.trigger("sendMessageObject", "addedHeaderPreset", headerPreset);
	            }
	        });
	    },

	    // Update local model
	    editHeaderPreset:function (id, name, headers, doNotSync) {
	       this.editHeaderPresetWithOptSync(id, name, headers, doNotSync, true);
	    },

	    editHeaderPresetWithOptSync:function (id, name, headers, doNotSync, toSync) {
	        var collection = this;

	        pm.indexedDB.headerPresets.getHeaderPreset(id, function (preset) {
	            var headerPreset = {
	                "id":id,
	                "name":name,
	                "headers":headers,
	                "timestamp":preset.timestamp
	            };

	            pm.indexedDB.headerPresets.updateHeaderPreset(headerPreset, function () {
	                collection.add(headerPreset, {merge: true});
	                pm.mediator.trigger("databaseOperationComplete");
	                if (!doNotSync) {
	                    collection.addToSyncableFilesystem(id);
	                }
	                if(toSync) {
	                    pm.syncManager.addChangeset("headerpreset","update",headerPreset, null, true);
	                    pm.appWindow.trigger("sendMessageObject", "updatedHeaderPreset", headerPreset);
	                }
	            });
	        });
	    },

	    updateHeaderPresetSyncStatus: function(id, status) {
	        var collection = this;

	        var headerPreset = this.get(id);
	        headerPreset.set("synced", status);
	        collection.add(headerPreset, {merge: true});

	        pm.indexedDB.headerPresets.updateHeaderPreset(headerPreset.toJSON(), function () {
	            pm.mediator.trigger("databaseOperationComplete");
	        });
	    },

	    // Remove from local model
	    deleteHeaderPreset:function (id, doNotSync) {
	        this.deleteHeaderPresetWithOptSync(id, doNotSync, true);
	    },

	    deleteHeaderPresetWithOptSync:function (id, doNotSync, toSync) {
	        var collection = this;

	        pm.indexedDB.headerPresets.deleteHeaderPreset(id, function () {
	            collection.remove(id);

	            if (!doNotSync) {
	                collection.removeFromSyncableFilesystem(id);
	            }

	            if(toSync) {
	                pm.syncManager.addChangeset("headerpreset","destroy",null, id, true);
	                pm.appWindow.trigger("sendMessageObject", "deletedHeaderPreset", id);
	            }
	        });
	    },

	    getPresetsForAutoComplete:function () {
	        var list = [];
	        var presets = this.toJSON();

	        for (var i = 0, count = presets.length; i < count; i++) {
	            var preset = presets[i];
	            var item = {
	                "id":preset.id,
	                "type":"preset",
	                "label":preset.name,
	                "category":"Header presets"
	            };

	            list.push(item);
	        }

	        list = _.union(list, allowedChromeHeaders);
	        list = _.union(list, restrictedChromeHeaders);

	        return list;
	    },

	    refreshAutoCompleteList:function () {
	        var presets = this.getPresetsForAutoComplete();
	        this.presetsForAutoComplete = presets;
	    },

	    mergeHeaderPreset: function(preset, doNotSync) {
	        var collection = this;

	        pm.indexedDB.headerPresets.addHeaderPreset(preset, function(headerPreset) {
	            collection.add(headerPreset, {merge: true});
	            pm.mediator.trigger("databaseOperationComplete");
	            pm.syncManager.addChangeset("headerpreset", "create", headerPreset, null, false);
	            if (!doNotSync) {
	                collection.addToSyncableFilesystem(headerPreset.id);
	            }
	        });

	    },

	    mergeHeaderPresets: function(hp) {
	        var size = hp.length;
	        var collection = this;
	        var headerPreset;

	        for(var i = 0; i < size; i++) {
	            headerPreset = hp[i];
	            collection.mergeHeaderPreset(headerPreset);
	        }
	    },

	    //---Sync----
	    onSyncChangeReceived: function(verb, message, callback) {
	        if(!message.model) message.model = message.type;

	        var allowedTypes = ["headerpreset"];
	        if(allowedTypes.indexOf(message.model) === -1) {
	            return;
	        }
	        try {
	            if (verb === "create") {
	                this.createRemoteEntity(message, callback);
	            }
	            else if (verb === "update") {
	                this.updateRemoteEntity(message, callback);
	            }
	            else if (verb === "destroy" || verb === "delete") {
	                this.deleteRemoteEntity(message, callback);
	            }
	            else {
	                pm.syncLogger.error("unknown headerPreset change: " + verb);
	                if(typeof callback === "function") callback();
	            }
	        }
	        catch(e) {
	            pm.syncLogger.error("Error in Saving headerPreset change: " + e.message);
	            if(typeof callback === "function") callback();
	        }
	        //else if()
	    },

	    createRemoteEntity: function(message, callback) {
	        if(message.model === "headerpreset") {
	            //pm.syncStatusManager.addNotification("HeaderPreset",message.data, "create");
	            var status = pm.headerPresets.addHeaderPresetWithOptSync(message.data.id, message.data.name, message.data.headers, true, false);
	            if(typeof callback === 'function') callback();
	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', 'Adding header preset failed');
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	            pm.syncLogger.log(new Error(),["HeaderPreset created: ",message.data]);
	        }
	    },

	    updateRemoteEntity: function(message, callback) {
	        if(message.model === "headerpreset") {
	            //pm.syncStatusManager.addNotification("environment",message.data, "update");
	            var status = pm.headerPresets.editHeaderPresetWithOptSync(message.data.id, message.data.name, message.data.headers, true, false);

	            //as nothing depends on header presets :P
	            if(typeof callback === 'function') callback();

	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Editing header preset failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	            pm.syncLogger.log(new Error(),["HeaderPreset updated: ", message.data]);
	        }
	    },

	    deleteRemoteEntity: function(message, callback) {
	        if(message.model === "headerpreset") {
	            pm.syncLogger.log(new Error(),["HeaderPreset destroyed: ",message.data]);
	            var status = pm.headerPresets.deleteHeaderPresetWithOptSync(message.data.id, true, false);

	            if(typeof callback === 'function') callback();

	            if(status==-1) {
	                pm.mediator.trigger('syncOperationFailed', "Deleting header preset failed");
	            }
	            else {
	                pm.syncManager.updateSinceFromMessage(message);
	            }
	        }
	    }
	});

	module.exports = HeaderPresets;


/***/ },
/* 258 */
/***/ function(module, exports) {

	var HeaderPresetsModal = Backbone.View.extend({
	    el: $("#modal-header-presets"),

	    initialize: function() {
	        this.model.on('add', this.render, this);
	        this.model.on('remove', this.render, this);
	        this.model.on('change', this.render, this);

	        var headerPresets = this.model;
	        var view = this;

	        $("#modal-header-presets").on("shown", function () {
	            $(".header-presets-actions-add").focus();
	            $("#headerpreset-modal-error").text("");
	            pm.app.trigger("modalOpen", "#modal-header-presets");
	        });

	        $("#modal-header-presets").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $(".header-presets-actions-add").on("click", function () {
	            view.showEditor();
	        });

	        $(".header-presets-actions-back").on("click", function () {
	            view.showList();
	        });

	        $(".header-presets-actions-submit").on("click", function () {
	            var id = $('#header-presets-editor-id').val();
	            var name = $("#header-presets-editor-name").val();
	            var headers = $("#header-presets-keyvaleditor").keyvalueeditor("getValues");

	            $("#headerpreset-modal-error").text("");
	            if(!name || name.trim()=="") {
	                $("#headerpreset-modal-error").text("You must enter a name");
	                return;
	            }

	            // TODO Hacky
	            if (id === "0") {
	                _.bind(headerPresets.addHeaderPreset, headerPresets)(0, name, headers);
	            }
	            else {
	                _.bind(headerPresets.editHeaderPreset, headerPresets)(id, name, headers);
	            }

	            view.showList();
	        });

	        $("#header-presets-list").on("click", ".header-preset-action-edit", function (event) {
	            var id = $(event.currentTarget).attr("data-id");
	            var preset = _.bind(headerPresets.getHeaderPreset, headerPresets)(id);
	            $('#header-presets-editor-name').val(preset.get("name"));
	            $('#header-presets-editor-id').val(preset.get("id"));
	            $('#header-presets-keyvaleditor').keyvalueeditor('reset', preset.get("headers"));
	            view.showEditor();
	        });

	        $("#header-presets-list").on("click", ".header-preset-action-delete", function (event) {
	            var id = $(event.currentTarget).attr("data-id");
	            headerPresets.deleteHeaderPreset(id);
	        });

	        var params = {
	            placeHolderKey:"Key",
	            placeHolderValue:"Value",
	            deleteButton:'<span class="icon-delete"/>',
	            sortable: false
	        };

	        $('#header-presets-keyvaleditor').keyvalueeditor('init', params);
	    },


	    showList:function () {
	        $("#header-presets-list-wrapper").css("display", "block");
	        $("#header-presets-editor").css("display", "none");
	        $("#header-presets-editor-name").attr("value", "");
	        $("#header-presets-editor-id").attr("value", 0);
	        $('#header-presets-keyvaleditor').keyvalueeditor('reset', []);
	        $("#modal-header-presets .modal-footer").css("display", "none");
	    },

	    showEditor:function () {
	        $("#modal-header-presets .modal-footer").css("display", "block");
	        $("#header-presets-list-wrapper").css("display", "none");
	        $("#header-presets-editor").css("display", "block");
	    },

	    render: function() {
	        $('#header-presets-list tbody').text("");
	        $('#header-presets-list tbody').append(Handlebars.templates.header_preset_list({"items":this.model.toJSON()}));
	    }
	});

	module.exports = HeaderPresetsModal;


/***/ },
/* 259 */
/***/ function(module, exports) {

	var HeaderPresetsRequestEditor = Backbone.View.extend({
	    initialize: function() {
	        var view = this;

	        this.model.on('add', this.render, this);
	        this.model.on('remove', this.render, this);

	        var model = this.model;

	        var params = {
	            placeHolderKey:"Key",
	            placeHolderValue:"Value",
	            deleteButton:'<span class="icon-delete"/>'
	        };

	        $("#header-presets-keyvaleditor").keyvalueeditor("init", params);

	        $("#headers-keyvaleditor-container").on("click", "#headers-keyvaleditor-actions-add-preset",function(){
	            view.render();
	        });

	        $("#headers-keyvaleditor-container").on("click", "#headers-keyvaleditor-actions-manage-presets", function() {
	            $("#modal-header-presets").modal("show");
	        });

	        $("#headers-keyvaleditor-container").on("click", ".header-preset-dropdown-item", function() {
	            pm.tracker.trackEvent("request", "headers", "add_preset");

	            var id = $(this).attr("data-id");
	            var preset = model.getHeaderPreset(id);
	            var headers = $('#headers-keyvaleditor').keyvalueeditor('getValues');

	            var newHeaders = _.union(headers, preset.get("headers"));
	            $('#headers-keyvaleditor').keyvalueeditor('reset', newHeaders);
	            view.setHeadersInTextarea(newHeaders);
	        });

	        this.render();
	    },

	    render: function() {
	        if(this.model.length>0) {
	            $('#headers-keyvaleditor-actions-add-preset ul').html(Handlebars.templates.header_preset_dropdown({"items":this.model.toJSON()}));
	        }
	        else {
	            $('#headers-keyvaleditor-actions-add-preset ul').html(Handlebars.templates.header_preset_empty_dropdown());
	        }
	    },

	    //is called when a new header is added in the form
	    setHeadersInTextarea: function(headers) {
	        var ta = $("textarea#headers-direct");
	        var numHeaders = headers.length;
	        var str="";
	        for(i=0;i<numHeaders;i++) {
	            str+=headers[i]["key"]+": "+headers[i]["value"]+"\n";
	        }
	        ta.val(str);
	        $("#headers-textarea-message").text("Enter headers in \"key\":\"value\" format.");
	        $("#headers-textarea-message").removeClass('wrong-header');
	        //#headers-textarea-message.wrong-header
	    }
	});

	module.exports = HeaderPresetsRequestEditor;


/***/ },
/* 260 */
/***/ function(module, exports) {

	var URLCache = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "urls": []
	        }
	    },

	    initialize: function() {
	        var model = this;

	        pm.mediator.on("addToURLCache", function(url) {
	            model.addUrl(url);
	        });
	    },

	    addUrl:function (url) {
	        var urls = this.get("urls");

	        if ($.inArray(url, urls) === -1) {
	            urls.push(url);
	        }
	    },

	    getUrls: function() {
	        return this.get("urls");
	    }
	});

	module.exports = URLCache;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var RequestMetaViewer = __webpack_require__(262);
	var RequestMethodEditor = __webpack_require__(264);
	var RequestHeaderEditor = __webpack_require__(265);
	var RequestURLPathVariablesEditor = __webpack_require__(266);
	var RequestURLEditor = __webpack_require__(267);
	var RequestBodyEditor = __webpack_require__(268);
	var RequestClipboard = __webpack_require__(277);
	var RequestPreviewer = __webpack_require__(278);
	var RequestTestsEditor = __webpack_require__(279);
	var RequestPrscriptEditor = __webpack_require__(282);
	if(postman_electron) {
	    var SandboxEditModal = __webpack_require__(285);
	}

	var RequestEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var responseModel = model.get("response");
	        var view = this;
	        var body = model.get("body");

	        this.isTestsEditor = false;
	        this.isPrScriptEditor=false;

	        this.requestMetaViewer = new RequestMetaViewer({model: this.model});
	        this.requestMethodEditor = new RequestMethodEditor({model: this.model});
	        this.requestHeaderEditor = new RequestHeaderEditor({model: this.model});
	        this.requestURLPathVariablesEditor = new RequestURLPathVariablesEditor({model: this.model});
	        this.requestURLEditor = new RequestURLEditor({model: this.model});
	        this.requestBodyEditor = new RequestBodyEditor({model: this.model});
	        this.requestClipboard = new RequestClipboard({model: this.model});
	        this.requestPreviewer = new RequestPreviewer({model: this.model});
	        this.requestTestEditor = new RequestTestsEditor({model: this.model});
	        this.requestPrscriptEditor = new RequestPrscriptEditor({model: this.model});
	        if(postman_electron) {
	            this.requestSandboxEditor = new SandboxEditModal({model: this.model});
	        }

	        if(postman_webkit || postman_brackets || postman_electron) {
	            //sandbox will be used
	        }
	        else {
	            //making a main template is too much work
	            $("#edit-sandbox").remove();
	            $("#request-send-method-div").remove();
	        }

	        model.on("loadRequest", this.onLoadRequest, this);
	        model.on("sentRequest", this.onSentRequest, this);
	        model.on("startNew", this.onStartNew, this);
	        model.on("updateModel", this.updateModel, this);

	        responseModel.on("failedRequest", this.onFailedRequest, this);
	        responseModel.on("finishedLoadResponse", this.onFinishedLoadResponse, this);

	        this.on("send", this.onSend, this);
	        this.on("preview", this.onPreview, this);

	        pm.mediator.on("updateRequestModel", this.onUpdateRequestModel, this);

	        this.attachURLHeaderAccordionEvents();

	        $("#prettySearchToggle").on("click", function() {
	            view.toggleSearchField();
	        });

	        $(".update-request-in-collection").on("click", function() {
	            if($(this).hasClass("disabled")) {
	                return;
	            }
	            view.updateCollectionRequest();
	        });

	        $("#cancel-request").on("click", function () {
	            model.trigger("cancelRequest", model);
	            view.showBigBuilderWindow();
	            $("section#request").removeClass("hover-feedback");
	            $(".scroll-to-response-button").hide();
	        });

	        $("#request-actions-reset").on("click", this.resetRequestEditor.bind(this));

	        $('.add-to-collection').on("click", function () {
	            view.updateModel(true);

	            var name = model.get("name");
	            var description = model.get("description");

	            pm.mediator.trigger("showAddCollectionModal", name, description);
	        });

	        $(".submit-request").on("click", function () {
	            view.trigger("send", "text");
	        });

	        $("#submit-request-download").on("click", function () {
	            view.trigger("send", "arraybuffer", "download");
	        });

	        $("#submit-sails").on("click", function () {
	            view.trigger("send", "sails");
	        });

	        $("#write-tests").on("click", function () {
	            view.toggleTestsEditor();
	        });

	        $("#edit-sandbox").on("click", function () {
	            pm.mediator.trigger("showEditSandboxModal");
	        });

	        $("#write-prscript").on("click", function () {
	            view.togglePrScriptEditor();
	        });

	        $(".preview-request").on("click", function () {
	            pm.mediator.trigger('dismissTooltip', 'code-gen');
	            _.bind(view.onPreviewRequestClick, view)();
	        });

	        $("body").on("click", ".small-request", function() {
	            view.showBigBuilderWindow();
	        });

	        $("#request-builder-view").click(function(){
	            pm.mediator.trigger("collectionMainViewClose");
	        });

	        $(document).bind('keydown', 'alt+s', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "save_folder");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            view.updateCollectionRequest();

	            return true;
	        });

	        $("#request-builder-tabs").on("click", "li", function(event) {
	            var isDisabled = $(this).hasClass("disabled");

	            if($(event.currentTarget).data('tab') === 'prscript') {
	              pm.mediator.trigger('dismissTooltip', 'pr-script');
	            }

	            setTimeout(function() {
	                if (view.requestPrscriptEditor.editor) {
	                    view.requestPrscriptEditor.editor.resize();
	                }

	                if (view.requestTestEditor.editor) {
	                    view.requestTestEditor.editor.resize();
	                }

	                if(pm.rawBodyEditor) {
	                    pm.rawBodyEditor.resize();
	                }
	            }, 25);

	            if (isDisabled) {
	                event.stopPropagation();
	                event.preventDefault();
	                return;
	            }

	            pm.request.get("uiState").activeRequestTab = $(this).data("tab");
	        });

	        // TODO
	        // Disabling this behavior
	        $("#request-builder-tabs").on("click", "li.active", function() {
	            // var oldThis = $(this);
	            // setTimeout(function() {
	            //     oldThis.removeClass("active");
	            //     $(oldThis.children("a").attr("href")).removeClass("active");

	            //     // Testing temporary fix for removing focus and the bottom border
	            //     $("#url").focus();
	            // }, 100);
	        });

	        $('body').on('keydown', 'input', function (event) {
	            var inputIdsToExclude = ['response-sample-name'];
	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            if($("#prettySearchToggle").hasClass("active")) {
	                return;
	            }

	            var targetId = event.target.id;

	            if (event.keyCode === 27) {
	                $(event.target).blur();
	            } else if (event.keyCode === 13) {
	                if(inputIdsToExclude.indexOf(targetId) === -1) {
	                    if (targetId !== "url") {
	                        view.triggerSend();
	                    } else {
	                        var cancelEnter = $("#url").attr("data-cancel-enter") === "true";

	                        if (!cancelEnter) {
	                            view.triggerSend();
	                        }

	                        $("#url").attr("data-cancel-enter", "false");
	                    }
	                } else {
	                    //the respective handler should be called
	                    if(targetId === "response-sample-name") {
	                        $("#response-sample-save").click();
	                    }
	                }
	            }

	            return true;
	        });

	        $('body').on('keydown', 'div#body-data-container-editor', function (event) {
	            if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                view.trigger("send", "text");
	                event.preventDefault();
	                return false;
	            }

	            return true;
	        });

	        $(document).bind('keydown', 'return', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "send_request");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            view.triggerSend();

	            return false;
	        });

	        var newRequestHandler = function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "new_request_reset");
	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            model.trigger("startNew", model);
	        };


	        $(document).bind('keydown', 'alt+p', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "build_preview_toggle");
	            _.bind(view.onPreviewRequestClick, view)();
	        });

	        $(document).bind('keydown', 'alt+n', newRequestHandler);

	        /*$(document).bind('keydown', 'ctrl+s', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "save_request");
	            view.updateCollectionRequest();
	        });*/

	        /*$(document).bind('keydown', 'meta+s', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "save_request");
	            view.updateCollectionRequest();
	        });*/

	        $(document).bind('keydown', function(e) {
	            if(e.which === 83 && (e.metaKey || e.ctrlKey)) {
	                pm.tracker.trackEvent("interaction", "shortcut", "save_request");
	                view.updateCollectionRequest();
	            }
	        });

	        $(document).bind('keydown', 'ctrl+f', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "toggle_search");
	            view.toggleSearchField();
	        });

	        $(document).bind('keydown', 'meta+f', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "toggle_search_meta");
	            view.toggleSearchField();
	        });

	        $(document).bind('keydown', 'meta+b', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "beautify");
	            pm.mediator.trigger("beautify");
	        });

	        $(document).bind('keydown', 'ctrl+g', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "next_search_result");
	            view.scrollToNextResult();
	        });

	        $(document).bind('keydown', 'ctrl+t', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "scroll_to_top");
	            view.scrollToTop();
	        });

	        $(document).bind('keydown', 'meta+g', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "next_search_result_meta");
	            view.scrollToNextResult();
	        });

	        this.loadLastSavedRequest();

	        this.setTooltips();
	    },

	    resetRequestEditor: function() {
	        this.requestBodyEditor.resetBody();
	        this.requestPrscriptEditor.clearTextarea();
	        $("#prscript-error").empty().hide();
	        $("#test-error").empty().hide();
	        $(".update-request-in-collection").removeClass("disabled");
	        $(".scroll-to-response-button").hide();
	        this.model.trigger("startNew", this.model);
	        pm.mediator.trigger("resetRequest");
	        pm.tracker.trackEvent("request", "reset");
	        pm.tabManager.resetCurrentTab();
	        pm.collections.trigger("selectedCollectionRequest", null);
	        pm.tabManager.turnOffDirtyCheck(pm.tabManager.getCurrentTab());
	    },

	    setTooltips: function() {
	        $(".preview-request, #request-actions-reset").tooltip({
	                    delay: { "show": 500, "hide": 100 }
	                });
	    },

	    attachURLHeaderAccordionEvents: function() {
	        $("#url-accordion").on("show", function(event) {
	            var indicator = $(this).find(".icon-open-indicator");
	            indicator.removeClass("icon-open-indicator-down");
	            indicator.addClass("icon-open-indicator-up");
	        });

	        $("#url-accordion").on("hide", function(event) {
	            var indicator = $(this).find(".icon-open-indicator");
	            indicator.removeClass("icon-open-indicator-up");
	            indicator.addClass("icon-open-indicator-down");
	        });

	        $("#header-accordion").on("show", function(event) {
	            var indicator = $(this).find(".icon-open-indicator");
	            indicator.removeClass("icon-open-indicator-down");
	            indicator.addClass("icon-open-indicator-up");
	        });

	        $("#header-accordion").on("hide", function(event) {
	            var indicator = $(this).find(".icon-open-indicator");
	            indicator.removeClass("icon-open-indicator-up");
	            indicator.addClass("icon-open-indicator-down");
	        });
	    },

	    showSmallBuilderWindow: function() {
	        $(".request-only-section").addClass("hide-builder");
	        $(".small-request-only-section").addClass("show-small");
	        $("#request-builder").addClass("small-request");
	    },

	    showBigBuilderWindow: function() {
	        $(".request-only-section").removeClass("hide-builder");
	        $(".small-request-only-section").removeClass("show-small");
	        $("#request-builder").removeClass("small-request");
	    },

	    triggerSend: function() {
	        if(pm.app.isModalOpen()) {
	            return;
	        }

	        //close URL autocomplete
	        $("#url").autocomplete("close");

	        this.trigger("send", "text");
	    },

	    toggleSearchField: function() {
	        var currentStatus = $("#prettySearchToggle").hasClass("active");
	        var currentMode = $("#currentPrettyMode").text();
	        if(currentStatus) {
	            $("#prettySearchToggle").removeClass("active");
	            pm.mediator.trigger("setResponseAceSearch", false);
	        } else {
	            $("#prettySearchToggle").addClass("active");
	            pm.mediator.trigger("setResponseAceSearch", true);
	        }
	        this.model.set("scrollToNextResult", 0);
	    },

	    scrollToTop: function() {
	        $(".main-view").scrollTop(0);
	    },

	    scrollToNextResult: function() {
	        var currentScrollValue = this.model.get("scrollToNextResult");
	        if (currentScrollValue === -1) {
	          return;
	        }
	        $("span.jv_searchFound").removeClass("jv_searching");
	        if($("span.jv_searchFound").length === currentScrollValue+1) {
	          currentScrollValue=-1;
	        }

	        if($("span.jv_searchFound").length>currentScrollValue+1) {
	            var cur_node = $("span.jv_searchFound")[currentScrollValue+1];
	            $(cur_node).addClass("jv_searching");
	            if ('scrollIntoViewIfNeeded' in cur_node) {
	              cur_node.scrollIntoViewIfNeeded();
	            } else {
	              cur_node.scrollIntoView();
	            }
	            this.model.set("scrollToNextResult", currentScrollValue+1);
	        }
	    },

	    updateCollectionRequest: function() {
	      pm.tracker.trackEvent("request", "save");

	      var model = this.model;

	      if(!model.get("collectionRequestId")) {
	          //if the request does not have a collection
	          $('.add-to-collection').click();
	          return;
	      }

	      var cid = model.get("collectionId");
	      if(!cid || !pm.collections.get(cid)) {
	          //the collection doesn't exist..save as
	          $('.add-to-collection').click();
	          return;
	      }

	      var view = this;

	      view.updateModel(true);
	      var current = model.getAsObject(saveHelperToRequest);
	      var saveHelperToRequest = $("#request-helper-"+current.currentHelper+"-saveHelper").is(":checked");

	      var collectionRequest = {
	        id: model.get("collectionRequestId"),
	        headers: current.headers,
	        url: current.url,
	        preRequestScript: model.get("preRequestScript"),
	        pathVariables: current.pathVariables,
	        method: current.method,
	        data: current.data,
	        dataMode: current.dataMode,
	        version: current.version,
	        tests: current.tests,
	        sandboxFiles: current.sandboxFiles,
	        currentHelper: current.currentHelper,
	        helperAttributes: current.helperAttributes,
	        time: new Date().getTime()
	        };

	        pm.collections.updateCollectionRequest(collectionRequest);
	        pm.mediator.trigger("saveRequest");
	    },

	    loadLastSavedRequest: function() {
	        var lastRequest = pm.settings.getSetting("lastRequest");

	        // TODO Have a generic function for falsy values
	        if (lastRequest && lastRequest !== "" && lastRequest !== undefined) {

	            var lastRequestParsed = JSON.parse(lastRequest);
	            // TODO Be able to set isFromCollection too
	            this.model.set("isFromCollection", false);
	            pm.mediator.trigger("loadRequest", lastRequestParsed, false, false);

	            setTimeout(function() {
	                if($("#request-builder-tab-body").hasClass("disabled")) {
	                    //make headers tab active
	                    $("#request-builder-tabs li[data-tab='auth'] a").tab("show");
	                    pm.request.get("uiState").activeRequestTab = "auth";
	                }
	            }, 2500);
	        }
	    },

	    onStartNew: function() {
	        // TODO Needs to be handled by the Sidebar
	        if (this.isTestsEditor) {
	            $("#write-tests").removeClass("active");
	            this.isTestsEditor = false;
	        }

	        if (this.isPrScriptEditor) {
	            this.isPrScriptEditor = false;
	            $("#write-prscript").removeClass("active");
	        }

	        $('.submit-request').removeClass("loading");
	        $('.submit-request').prop('disabled', false);
	        $('.sidebar-collection-request').removeClass('sidebar-collection-request-active');
	        $('.sidebar-history-request').removeClass('sidebar-history-request-active');
	    },


	    onUpdateRequestModel: function(callback) {
	        this.updateModel(true);
	        callback();
	    },

	    /*
	    Called before
	    1. Sending
	    2. Previewing
	    3. Saving to a collection
	    4. Adding to a collection
	    5. Processing OAuth and Digest params
	    */
	    updateModel: function(getDisabled) {
	        this.requestPrscriptEditor.updateModel();
	        this.requestHeaderEditor.updateModel();
	        if(postman_electron) {
	            this.requestSandboxEditor.updateModel();
	        }
	        this.requestURLPathVariablesEditor.updateModel();
	        this.requestURLEditor.updateModel();
	        this.requestBodyEditor.updateModel(getDisabled);
	        this.requestTestEditor.updateModel();
	    },

	    processHelpers: function() {
	        var activeHelperType = pm.helpers.getActiveHelperType();

	        if (activeHelperType === "oAuth1" && pm.helpers.getHelper("oAuth1").get("auto")) {
	            pm.helpers.getHelper("oAuth1").process();
	            pm.helpers.getHelper("oAuth1").generateHelper();
	        } else if (activeHelperType === "basicAuth") {
	            pm.helpers.getHelper("basicAuth").process();
	        } else if (activeHelperType === "digestAuth") {
	            pm.helpers.getHelper("digestAuth").process();
	        } else if (activeHelperType === "awsSigV4") {
	            pm.helpers.getHelper("awsSigV4").process();
	        } else if (activeHelperType === "hawkAuth") {
	            pm.helpers.getHelper("hawkAuth").process();
	        }
	    },

	    onSend: function(type, action) {
	        if (!type) {
	            type = "text";
	        }

	        if (!action) {
	            action = "display";
	        }

	        var oldThis = this;
	        oldThis.updateModel(false);
	        this.requestPrscriptEditor.updateModel();
	        if(postman_electron) {
	            this.requestSandboxEditor.updateModel();
	        }
	        this.model.get("prScripter").runPreRequestScript(this.model, {}, 1, function(data, result) {
	            oldThis.processHelpers();
	            oldThis.updateModel(false);
	            oldThis.model.trigger("send", type, action);
	        });
	    },

	    onPreview: function() {
	        this.updateModel(false);
	        pm.mediator.trigger("showPreview");
	    },

	    onSentRequest: function() {
	        $('#submit-request-big').addClass("loading");
	        $('#submit-request-big').prop('disabled', true);
	        //this.showSmallBuilderWindow();
	        //$(".request-only-shower").show();
	        $("section#request").addClass("hover-feedback");
	        if(this.response) {
	            this.response.trigger("sentRequest");
	        }
	    },

	    onFailedRequest: function() {
	        $('.submit-request').removeClass("loading");
	        $('.submit-request').prop('disabled', false);
	    },

	    onFinishedLoadResponse: function() {
	    	this.model.set("jsonIsCurrent", false);
	    	this.model.set("xmlIsCurrent", false);
	    	this.model.set("htmlIsCurrent", false);
	        $('.submit-request').removeClass("loading");
	        $('.submit-request').prop('disabled', false);
	    },

	    onLoadRequest: function(m) {
	        var model = this.model;
	        var body = model.get("body");

	        var method = model.get("method");
	        var isMethodWithBody = model.isMethodWithBody(method);
	        var url = model.get("url");
	        var pathVariables = model.get("pathVariables");
	        var headers = model.get("headers");
	        var data = model.get("data");
	        var name = model.get("name");
	        var description = model.get("description");
	        var responses = model.get("responses");
	        var isFromSample = model.get("isFromSample");
	        var isFromCollection = model.get("isFromCollection");
	        var uiState = model.get("uiState") || {};

	        if(uiState.waitingForResponse) {
	            this.onSentRequest();
	        } else {
	            this.onFinishedLoadResponse();
	        }

	        this.showRequestBuilder();

	        var showRequestSaveButton = isFromCollection || isFromSample;

	        if(model.get("write")===false) {
	            $("#response-sample-save-start").hide();
	            if(showRequestSaveButton) {
	                $(".update-request-in-collection").addClass("disabled");
	            }

	            //TODO: Make editable later
	            var oldRequestName = $("#request-name").text();
	            //$("#request-name").editable('destroy').text(oldRequestName);

	            var oldRequestDesc = $("#request-description").text();
	            //$("#request-description").editable('destroy').html(oldRequestDesc);
	        } else {
	            $(".update-request-in-collection").removeClass("disabled");
	            $("#response-sample-save-start").show();
	        }

	        $('.headers-count').text(headers.length);

	        $('#url').val(url);

	        var newUrlParams = getUrlVars(url, false);

	        //@todoSet params using keyvalueeditor function
	        $('#url-keyvaleditor').keyvalueeditor('reset', newUrlParams);

	        $('.url-params-count').text(newUrlParams.length);

	        $('#headers-keyvaleditor').keyvalueeditor('reset', headers);

	        $(".scroll-to-response-button").hide();

	        this.requestURLPathVariablesEditor.loadEditorParams(url, pathVariables);

	        //$('#request-method-selector').val(method);
	        this.requestMethodEditor.setRequestEditorMethod(method);

	        if (isMethodWithBody) {
	            $("#request-builder-tab-body").removeClass("disabled");
	        } else {
	            this.requestBodyEditor.resetBody();
	            $("#request-builder-tab-body").addClass("disabled");
	        }

	        this.requestTestEditor.loadTests();
	        this.requestPrscriptEditor.loadPrscript();

	        var activeRequestTab = this.model.get("uiState").activeRequestTab;
	        if(activeRequestTab) {
	          if(activeRequestTab === "body" && !isMethodWithBody) {
	              //dont show the body if this is a GET request
	          } else {
	            $("#request-builder-tabs li[data-tab='"+ activeRequestTab +"'] a").tab("show");
	          }
	        }
	        else {
	            //no active request tab. switch to auth for GET and body for everyhing else
	            if(isMethodWithBody) {
	                $("#request-builder-tabs li[data-tab='body'] a").tab("show");
	            }
	            else {
	                $("#request-builder-tabs li[data-tab='auth'] a").tab("show");
	            }
	        }
	    },


	    changeAttributeFromInline: function(elementId, newValue) {
	        var id = pm.request.id;

	        if(elementId === "request-name") {
	            var name = newValue;
	            pm.collections.updateCollectionRequestMeta(id, name, null);
	        } else if(elementId === "request-description") {
	            var description = newValue;
	            pm.collections.updateCollectionRequestMeta(id, null, description);
	        } else {
	            console.error("Unknown element ID");
	        }
	    },

	    showRequestBuilder: function() {
	        this.model.set("editorMode", 0);
	        $("#request-builder-view").css("display", "block");
	        $("#request-builder").css("display", "block");
	        this.showBigBuilderWindow();
	    },

	    onPreviewRequestClick: function(event) {
	        pm.tracker.trackEvent("request", "preview", "http_request");
	        pm.mediator.trigger("dismissTooltip", "code-gen");
	        this.trigger("preview", this);
	    },

	    toggleTestsEditor: function() {
	        if (pm.purchases.isUpgradeAvailable("collection-runner")) {
	            if (this.isTestsEditor === false) {
	                this.isTestsEditor = true;
	                $("#write-tests").addClass("active");
	                this.requestTestEditor.showTests();
	                this.requestTestEditor.loadTests();
	            } else {
	                $("#write-tests").removeClass("active");
	                this.isTestsEditor = false;
	                this.requestTestEditor.hideTests();
	                this.requestTestEditor.updateModel();
	            }
	        } else {
	            $("#modal-jetpacks-about").modal("show");
	        }

	    },

	    togglePrScriptEditor: function() {
	        if (pm.purchases.isUpgradeAvailable("collection-runner")) {
	            if (this.isPrScriptEditor === false) {
	                this.isPrScriptEditor = true;
	                $("#write-prscript").addClass("active");
	                this.requestPrscriptEditor.showPrscript();
	                this.requestPrscriptEditor.loadPrscript();
	            } else {
	                $("#write-prscript").removeClass("active");
	                this.isPrScriptEditor = false;
	                this.requestPrscriptEditor.hidePrscript();
	                this.requestTestEditor.updateModel();
	            }
	        } else {
	            $("#modal-jetpacks-about").modal("show");
	        }

	    }
	});

	module.exports = RequestEditor;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var RequestSampleResponseList = __webpack_require__(263);

	var RequestMetaViewer = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;
	        this.toggleDisabled = false;

	        model.on("loadRequest", this.render, this);
	        model.on("change:name", this.render, this);
	        model.on("change:description", this.render, this);
	        model.on("change:responses", this.render, this);

	        this.requestSampleResponseList = new RequestSampleResponseList({model: this.model});

	        $('body').on("click", '.request-meta-actions-togglesize', function () {
	            var action = $(this).attr('data-action');

	            if (action === "minimize") {
	                view.minimize(true);
	                view.model.get("uiState").areRequestMetaOpen = false;
	            }
	            else {
	                view.maximize(true);
	                view.model.get("uiState").areRequestMetaOpen = true;
	            }
	        });

	        $('#request-description-container').on("click", "a", function() {            
	            var url = $(this).attr("href");
	            pm.app.openWindow(url);
	            return false;
	        });

	        $('#request-meta').on("mouseenter", function () {
	            if(!this.toggleDisabled) {
	                $('.request-meta-actions').css("display", "block");
	            }
	        });

	        $('#request-meta').on("mouseleave", function () {
	            if(!this.toggleDisabled) {
	                $('.request-meta-actions').css("display", "none");
	            }
	        });
	    },

	    disableToggle: function() {
	        $('.request-meta-actions-togglesize').css("display", "none");
	        this.toggleDisabled = true;
	    },

	    enableToggle: function() {
	        $('.request-meta-actions-togglesize').css("display", "block");
	        this.toggleDisabled = false;
	    },

	    show: function() {
	        /*$("#request-description-container").css("display", "block");*/
	        $('#request-meta').css("display", "block");
	        $('#request-name').css("display", "block");
	        $('#request-description').css("display", "block");
	    },

	    hide: function() {
	        $('#request-meta').css("display", "none");
	    },

	    minimize: function(animate) {
	        $('.request-meta-actions-togglesize span').removeClass("icon-circle-minus");
	        $('.request-meta-actions-togglesize span').addClass("icon-circle-plus");
	        $('.request-meta-actions-togglesize').attr("data-action", "maximize");
	        if (animate) {
	            $("#request-description-container").velocity("slideUp", { duration: 200 });
	        } else {
	            $("#request-description-container").css("display", "none");
	        }
	    },

	    maximize: function(animate) {
	        $('.request-meta-actions-togglesize span').removeClass("icon-circle-plus");
	        $('.request-meta-actions-togglesize span').addClass("icon-circle-minus");
	        $('.request-meta-actions-togglesize').attr("data-action", "minimize");
	        if (animate) {
	            $("#request-description-container").velocity("slideDown", { duration: 100 })
	        } else {
	            $("#request-description-container").css("display", "block");
	        }
	    },

	    render: function() {
	        var request = this.model;
	        var isFromCollection = this.model.get("isFromCollection");

	        if (isFromCollection) {
	            this.show();

	            var name = request.get("name");
	            var description = _.clone(request.get("description"));

	            var descriptionFormat = request.get("descriptionFormat");

	            if(descriptionFormat === "markdown") {
	                if(!description) {
	                    description = "";
	                }
	                description = marked(description);
	            }

	            if (typeof name !== "undefined") {
	                $('#request-meta').css("display", "block");
	                $('#request-name').text(name);
	                $('#request-name').css("display", "inline-block");
	            }
	            else {
	                $('#request-meta').css("display", "none");
	                $('#request-name').css("display", "none");
	            }

	            if (typeof description !== "undefined" && description !== "") {
	                if(!description || description.length==0) {
	                    description = "";
	                }
	                $('#request-description').html(description);
	                $('#request-description').css("display", "block");
	            }
	            else {
	                $('#request-description').css("display", "none");
	            }

	            var responses = request.get("responses");
	            if((typeof description !== "undefined" && description !== "")
	                || (responses && responses.length > 0)) {
	                this.maximize();
	                this.enableToggle();
	            } else {
	                this.minimize();
	                this.disableToggle();
	            }

	            if(!this.toggleDisabled) {
	                if(request.get("uiState").areRequestMetaOpen === false) {
	                    this.minimize();
	                } else {
	                    this.maximize();
	                }
	            }
	        }
	        else {
	            this.hide();
	        }
	    }
	});

	module.exports = RequestMetaViewer;


/***/ },
/* 263 */
/***/ function(module, exports) {

	var RequestSampleResponseList = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        model.on("loadRequest", this.render, this);
	        model.on("change:responses", this.render, this);

	        $("#request-samples").on("mouseenter", ".sample-response-container", function() {
	        	var actionsEl = $('.sample-response-actions', this);
	        	actionsEl.css('display', 'block');
	        });

	        $("#request-samples").on("mouseleave", ".sample-response-container", function() {
	            var actionsEl = $('.sample-response-actions', this);
	            actionsEl.css('display', 'none');
	        });

	        $("#request-samples").on("click", ".sample-response-actions-load", function() {
	            var id = $(this).attr("data-id");
	            view.loadResponse(id);
	            pm.tracker.trackEvent("response", "view");
	        });

	        $("#request-samples").on("click", ".sample-response-actions-delete", function() {
	            var id = $(this).attr("data-id");
	            view.deleteResponse(id);
	            pm.tracker.trackEvent("response", "delete");
	        });

	        this.render();
	    },

	    loadResponse: function(id) {
	        pm.tabManager.loadSampleResponseById(id);
	    },

	    deleteResponse: function(id) {
	        this.model.deleteSampleResponseById(id);
	    },

	    render: function() {
	    	var responses = this.model.get("responses");
	        $("#request-samples-list").empty();


	        if (responses) {
	            if (responses.length > 0) {
	                //Remove duplicates :s
	                responses = _.uniq(responses, function (item) {
	                    return item.id;
	                });
	                $("#request-samples").css("display", "block");
	                $("#request-samples-list").append(Handlebars.templates.sample_responses({"items": responses}));
	            }
	            else {
	                $("#request-samples").css("display", "none");
	            }    
	        }
	        else {
	            $("#request-samples").css("display", "none");
	        }
	    	
	    }
	});

	module.exports = RequestSampleResponseList;


/***/ },
/* 264 */
/***/ function(module, exports) {

	var RequestMethodEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        // TODO Set select values using RequestMethods
	        // console.log("Initialized request methods editor");

	        model.on("startNew", this.onStartNew, this);

	        $('#request-method-selector').change(function () {            
	            var val = $(this).val();
	            _.bind(view.setMethod, view)(val);
	        });

	        $(".request-method-list-item").on("click", function () {
	            var node = $((event) ? event.currentTarget : this);
	            var val = node.text();
	            _.bind(view.setMethod, view)(val);
	            _.bind(view.setRequestEditorMethod, view)(val);
	        });
	    },

	    onStartNew: function() {
	        $('.request-method-list-item-selected').text("GET").css('text-indent', '17px');
	    },

	    /**
	     * Set method from request in form
	     * @param method
	     */
	    setRequestEditorMethod: function(method) {
	        if(!method) {
	            method = "GET";
	        }
	        method = method.toUpperCase();
	        var color, indent;
	        var elem = $(".request-method-list-item[data-value='"+method+"']");
	        if(!elem) {
	            return;
	        }
	        color = elem.attr('data-color');
	        indent = elem.attr('data-indent');

	        $(".request-method-list-item-selected").text(method);
	        //Not switching body tabs for no reason
	/*        if (this.model.isMethodWithBody(method)) {
	            $("#request-builder-tabs li[data-tab='body'] a").tab("show");
	        }*/
	    },

	    /**
	     * Set method from form in request
	     * @param method
	     */
	    setMethod:function (method) {
	        var body = this.model.get("body");

	        this.model.set("url", $('#url').val());
	        this.model.set("method", method);

	        // Change only for methods not with body to make sure
	        // current body type is not switched
	        if (!this.model.isMethodWithBody(method)) {
	            body.set("dataMode", "params");
	        }
	        else {
	            //swtich to body on manual method change
	            //Not switching body tabs for no reason
	            //$("#request-builder-tabs li[data-tab='body'] a").tab("show");
	        }
	    }
	})

	module.exports = RequestMethodEditor;


/***/ },
/* 265 */
/***/ function(module, exports) {

	var RequestHeaderEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;
	        model.on("change:headers", this.onChangeHeaders, this);
	        model.on("customHeaderUpdate", this.onCustomHeaderUpdate, this);
	        model.on("loadRequest", this.onLoadRequest,this);
	        model.on("startNew", this.startNew, this)
	        var contentTypes = [
	            "application/json"
	        ];

	        var params = {
	            placeHolderKey:"Header",
	            placeHolderValue:"Value",
	            deleteButton:'<span class="icon-delete"/>',
	            extraActions:'<span id="headers-keyvaleditor-actions-add-preset" class="btn-group"><a class="dropdown-toggle" data-toggle="dropdown" href="#">Presets<span class="icon-more"></span></a><ul class="dropdown-menu pull-right"><li><a>No presets added</a></li></ul></span>',
	            onInit:function () {
	            },

	            onAddedParam:function () {
	                $("#headers-keyvaleditor .keyvalueeditor-key").catcomplete({
	                    source:pm.headerPresets.getPresetsForAutoComplete(),
	                    delay:50,
	                    select:function (event, item) {
	                        view.onHeaderAutoCompleteItemSelect(item.item);
	                    }
	                });
	            },

	            onDeleteRow:function () {
	                var headers = view.getHeaderEditorParams();
	                view.setHeadersInTextarea(headers);
	                $('.headers-count').text(headers.length);
	                model.set("headers", headers);
	            },

	            onFocusElement:function (event) {
	                view.currentFocusedRow = $(event.currentTarget).parent()[0];

	                var thisInputIsAValue = $(event.currentTarget).attr("class").search("keyvalueeditor-value") >= 0;

	                if(thisInputIsAValue) {
	                    var parent = view.currentFocusedRow;
	                    var keyInput = $(parent).children(".keyvalueeditor-key")[0];
	                    var keyValue = $(keyInput).val().toLowerCase();
	                    if (keyValue === "content-type") {
	                        $(event.currentTarget).autocomplete({
	                            source: mediatypes,
	                            delay: 50
	                        });
	                    }
	                }

	                $("#headers-keyvaleditor .keyvalueeditor-key").catcomplete({
	                    source:pm.headerPresets.getPresetsForAutoComplete(),
	                    delay:50,
	                    select:function (event, item) {
	                        _.bind(view.onHeaderAutoCompleteItemSelect, view)(item.item);
	                    }
	                });
	            },

	            onChangeElement:function () {
	                _.debounce(function() {
	                var headers = view.getHeaderEditorParams();
	                view.setHeadersInTextarea(headers);
	                $('.headers-count').text(headers.length);
	                model.set("headers", headers);
	                    /*model.attributes.headers = headers;
	                    model.trigger("checkDirty")*/
	                }, 100)();
	            },

	            onBlurElement: function() {
	               
	            },

	            onReset:function () {
	                var headers = $('#headers-keyvaleditor').keyvalueeditor('getValues');
	                $('.headers-count').text(headers.length);
	                
	                //to prevent jqEditor from being called again
	                //model.set("headers", headers);
	            }
	        };

	        $('#headers-keyvaleditor').keyvalueeditor('init', params);

	        $('#headers-keyvaleditor-actions-close').on("click", function () {
	            $('#headers-keyvaleditor-actions-open').removeClass("active");
	            view.closeHeaderEditor();
	        });

	        $('#headers-keyvaleditor-actions-open').on("click", function () {
	            var isDisplayed = $('#headers-keyvaleditor-container').css("display") === "block";
	            if (isDisplayed) {
	                view.closeHeaderEditor();
	            }
	            else {
	                view.openHeaderEditor();
	            }
	        });

	        $("textarea#headers-direct").on("change",function() {
	           view.onDirectHeaderInput(this.value.trim());
	        });

	        // $("#header-collapser-anchor").click(function() {
	        //     if($(this).hasClass("collapsed")) {
	        //         view.openAccordion();
	        //     }
	        //     else {
	        //         view.closeAccordion();
	        //     }
	        // });


	        $(document).bind('keydown', 'h', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "open_header_kveditor");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            $("#request-builder-tabs li[data-tab='headers'] a").tab("show");
	            return false;
	        });
	    },

	    startNew: function() {
	        pm.helpers.showRequestHelper("normal");
	    },

	    onCustomHeaderUpdate: function() {
	        this.openHeaderEditor();
	    },

	    onChangeHeaders: function() {
	        var newHeaders = _.cloneDeep(this.model.get("headers"));
	        $('#headers-keyvaleditor').keyvalueeditor('reset', newHeaders);
	    },

	    openHeaderEditor:function () {
	        // $('#headers-keyvaleditor-actions-open').addClass("active");
	        // var containerId = "#headers-keyvaleditor-form, #headers-keyvaleditor-container";
	        // $(containerId).css("display", "block");
	    },

	    closeHeaderEditor:function () {
	        // $('#headers-keyvaleditor-actions-open').removeClass("active");
	        // var containerId = "#headers-keyvaleditor-form, #headers-keyvaleditor-container";
	        // $(containerId).css("display", "none");
	    },

	    onLoadRequest: function(m) {
	        var model = this.model;
	        var headers = model.get("headers");
	        this.setHeadersInTextarea(headers);

	        var uiState = model.get("uiState");
	        // if(uiState && uiState.hasOwnProperty("areHeadersOpen")) {
	        //     if(uiState.areHeadersOpen) {
	        //         this.openAccordion();
	        //     }
	        //     else {
	        //         this.closeAccordion();
	        //     }
	        // }
	    },

	    // openAccordion: function() {
	    //     // var model = this.model;
	    //     // var arrow = $("#header-collapser-anchor").removeClass("collapsed").find(".icon-open-indicator");
	    //     // setTimeout(function() {
	    //     //     arrow.removeClass("icon-open-indicator-down").addClass("icon-open-indicator-up");             
	    //     // }, 80);
	    //     // $("#header-collapser").addClass("in").css('height','auto');
	    //     // $('#header-collapser').addClass("expanded");
	    //     // model.get("uiState").areHeadersOpen = true;
	    // },

	    // closeAccordion: function() {
	    //     // var model = this.model;
	    //     // var arrow = $("#header-collapser-anchor").addClass("collapsed").find(".icon-open-indicator");
	    //     // setTimeout(function() {
	    //     //     arrow.addClass("icon-open-indicator-down").removeClass("icon-open-indicator-up");     
	    //     // }, 80);
	   
	    //     // $("#header-collapser").removeClass("in").css('height','0px');
	    //     // $('#header-collapser').removeClass("expanded");
	    //     // model.get("uiState").areHeadersOpen = false;
	    // },


	    setHeaderValue:function (key, value) {
	        var headers = this.model.get("headers");
	        var origKey = key;
	        key = key.toLowerCase();
	        var found = false;
	        for (var i = 0, count = headers.length; i < count; i++) {
	            var headerKey = headers[i].key.toLowerCase();

	            if (headerKey === key && value !== "text") {
	                headers[i].value = value;
	                found = true;
	            }
	        }

	        var editorId = "#headers-keyvaleditor";
	        if (!found && value !== "text") {
	            var header = {
	                "key":origKey,
	                "name":origKey,
	                "value":value
	            };
	            headers.push(header);
	        }

	        $(editorId).keyvalueeditor('reset', headers);
	    },

	    updateModel: function() {
	        this.model.set("headers", this.getHeaderEditorParams(), {silent: true});
	        var headers = this.model.get("headers");

	        $('.headers-count').text(headers.length);
	    },

		getHeaderEditorParams:function () {
			var hs = $('#headers-keyvaleditor').keyvalueeditor('getValues');
			var newHeaders = [];
			for (var i = 0; i < hs.length; i++) {
				var header = {
					key:hs[i].key,
					value:hs[i].value,
					name:hs[i].key,
					enabled: hs[i].enabled
				};

				newHeaders.push(header);
			}

			return newHeaders;
		},

	    onHeaderAutoCompleteItemSelect:function(item) {
	        if(item.type === "preset") {
	            $(this.currentFocusedRow).remove();

	            var preset = pm.headerPresets.getHeaderPreset(item.id);

	            var headers = $('#headers-keyvaleditor').keyvalueeditor('getValues');
	            var newHeaders = _.union(headers, preset.get("headers"));
	            $('#headers-keyvaleditor').keyvalueeditor('reset', newHeaders);

	            //Ensures that the key gets focus
	            var element = $('#headers-keyvaleditor .keyvalueeditor-last input:first-child')[0];
	            $('#headers-keyvaleditor .keyvalueeditor-last input:first-child')[0].focus();
	            setTimeout(function() {
	                element.focus();
	            }, 10);

	        }
	    },

	    //should be called when the textarea is updated
	    onDirectHeaderInput:function(text) {
	        //attempt to split text
	        $("#headers-textarea-message").text("Enter headers in \"key\":\"value\" format.");
	        $("#headers-textarea-message").removeClass('wrong-header');
	        var lines = text.split("\n");
	        var numLines = lines.length;
	        var newHeaders=[];
	        var kvpair = $('#headers-keyvaleditor');

	        for(i=0;i<numLines;i++) {
	            var newHeader={};
	            var thisPair = lines[i].split(":");
	            if(thisPair.length<2) {
	                $("#headers-textarea-message").html('<span id="wrong-headers-format">Incorrect format for headers in line [  '+lines[i]+'  ]. Use \"key\":\"value\"</span>');
	                $("#headers-textarea-message").addClass('wrong-header');
	                continue;
	            }
	            newHeader["key"]=newHeader["name"]=thisPair.shift();
	            newHeader["type"]="text";
	            newHeader["value"]=thisPair.join(":").trim();
	            newHeaders.push(newHeader);
	        }

	        kvpair.keyvalueeditor('reset', newHeaders);
	    },

	    //is called when a new header is added in the form
	    setHeadersInTextarea: function(headers) {
	        var ta = $("textarea#headers-direct");
	        var numHeaders = headers.length;
	        var str="";
	        for(i=0;i<numHeaders;i++) {
	            str+=headers[i]["key"]+": "+headers[i]["value"]+"\n";
	        }
	        ta.val(str);
	        $("#headers-textarea-message").text("Enter headers in \"key\":\"value\" format.");
	        $("#headers-textarea-message").removeClass('wrong-header');
	        //#headers-textarea-message.wrong-header
	    }
	});

	module.exports = RequestHeaderEditor;


/***/ },
/* 266 */
/***/ function(module, exports) {

	var RequestURLPathVariablesEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        var editorId = "#pathvariables-keyvaleditor";
	        this.editorId = editorId;

	        model.on("change:url", this.onChangeUrl, this);
	        model.on("startNew", this.onStartNew, this);

	        var params = {
	            placeHolderKey:"Path variable key",
	            placeHolderValue:"Value",
	            deleteButton:'<span class="icon-delete"/>',
	            editableKeys: false,
	            onDeleteRow:function () {
	                view.setUrl();
	            },

	            onBlurElement:function () {
	                view.setUrl();
	            }
	        };

	        $('#url').keyup(function () {
	            var url = $(this).val();
	            view.setEditorParams(url);
	        });

	        $(editorId).keyvalueeditor('init', params);
	        this.setEditorParams($("#url").val());
	    },

	    setUrl: function() {
	        var params = this.getEditorParams();

	        // TODO Simplify this
	        this.model.set("url", $("#url").val());
	        this.model.setPathVariables(params);
	    },

	    loadEditorParams: function(url, params) {
	        var rows = [];
	        var row;

	        var oldKeys = getURLPathVariables(url);
	        var hasExtraKeys = false;

	        for (var key in params) {
	            if (params.hasOwnProperty(key)) {
	                row = {
	                    "key": key,
	                    "value": params[key]
	                }

	                var oldIndex = oldKeys.indexOf(key);
	                if(oldIndex !== -1) {
	                    oldKeys.splice(oldIndex, 1);
	                }

	                rows.push(row);
	            }
	        }

	        _.each(oldKeys, function(oldKey) {
	            rows.push({
	                "key": oldKey,
	                "value": ""
	            });
	            hasExtraKeys = true; //if there are path vars in the URL that aren't there in the path variables property
	        });

	        $(this.editorId).keyvalueeditor('reset', rows);

	        if(hasExtraKeys) {
	            this.setUrl();
	        }
	    },

	    setEditorParams: function(url) {
	        var newKeys = getURLPathVariables(url);
	        var currentParams = $(this.editorId).keyvalueeditor('getValues');
	        var param;
	        var keyExists;
	        var newParams = [];
	        var newParam;

	        for (var i = 0; i < currentParams.length; i++) {
	            param = currentParams[i];
	            keyIndex = _.indexOf(newKeys, param.key);

	            if (keyIndex >= 0) {
	                newParams.push(param);
	                newKeys.splice(keyIndex, 1);
	            }
	        }

	        for (i = 0; i < newKeys.length; i++) {
	            newParam = {
	                "key": newKeys[i],
	                "value": ""
	            };

	            newParams.push(newParam);
	        }

	        $(this.editorId).keyvalueeditor('reset', newParams);
	    },

	    onChangeUrl: function() {
	        // Generate keyvaleditor rows
	        this.setEditorParams(this.model.get("url"));
	    },

	    onStartNew: function() {
	        var newRows = [];
	        $(this.editorId).keyvalueeditor('reset', newRows);
	    },

	    updateModel: function() {
	        this.setUrl();
	    },

	    getEditorParams: function() {
	        var params = $(this.editorId).keyvalueeditor('getValues');
	        var assocParams = {};

	        for (var i = 0; i < params.length; i++) {
	            assocParams[params[i].key] = params[i].value;
	        }

	        return assocParams;
	    },

	    openEditor:function () {
	        // var containerId = "#pathvariables-keyvaleditor, #pathvariables-keyvaleditor-container";
	        // $(containerId).css("display", "block");
	        var val = $("#url").val();
	        this.setEditorParams(val);
	    },

	    closeEditor:function () {
	        // var containerId = "#pathvariables-keyvaleditor, #pathvariables-keyvaleditor-container";
	        // $(containerId).css("display", "none");
	        this.updateModel();
	    }
	});

	module.exports = RequestURLPathVariablesEditor;


/***/ },
/* 267 */
/***/ function(module, exports) {

	var RequestURLEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;
	        view.isStickyInitialized = false;
	        view.isSticking = false;

	        var editorId;
	        editorId = "#url-keyvaleditor";

	        this.editorId = editorId;

	        model.on("change:url", this.onChangeUrl, this);
	        model.on("updateURLInputText", this.onUpdateURLInputText, this);
	        model.on("startNew", this.onStartNew, this);
	        model.on("customURLParamUpdate", this.onCustomUrlParamUpdate, this);
	        model.on("loadRequest", this.onLoadRequest,this);

	        pm.mediator.on("responseRendered", function(){
	            if(!view.isSticking) {
	                $(".scroll-to-response-button").css("display", "block");
	            }
	        });

			var params = {
				placeHolderKey:"URL Parameter Key",
				placeHolderValue:"Value",
				deleteButton:'<span class="icon-delete"/>',
				encodeValues: false,
				disableOption: false,
				onDeleteRow:_.debounce(function () {
					var params = view.getUrlEditorParams();
					var url = $("#url").val();
					model.setUrlParams(params);
					model.setUrlParamString(params, true, url);
					pm.request.trigger("change", pm.request);
				}, 300),

				onChangeElement:_.debounce(function () {
					var params = view.getUrlEditorParams();
					var url = $("#url").val();
					model.setUrlParams(params);
					model.setUrlParamString(params, true, url);
					pm.request.trigger("change", pm.request);
				}, 300),
				onReset: function() {
				}
			};

	        $(editorId).keyvalueeditor('init', params);

	        $('#url').keyup(function () {
	            // var newRows = getUrlVars($('#url').val(), false);
	            model.set("url", $("#url").val());
	            // $(".url-params-count").text(newRows.length);
	            // $('#url-keyvaleditor').keyvalueeditor('reset', newRows);
	        });

	        $("#url-keyvaleditor .icon-bulk-edit").on("click", function() {
	            pm.tracker.trackEvent("request", "bulk_edit", "url_params");
	        });

	        var urlFocusHandler = function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "url_input_focus");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            $('#url').focus();
	            return false;
	        };

	        try {
	            $("#url").autocomplete({
	                source: pm.urlCache.getUrls(),
	                delay: 50,
	                select: function(event, ui) {
	                    $("#url").attr("data-cancel-enter", "true");
	                    model.set("url", ui.item.value);
	                    return true;
	                }
	            });
	        }
	        catch(e) {

	        }

	        pm.mediator.on("refreshLayout", function(event) {
	        });

	        pm.mediator.on("switchCodeMirrorTheme", function(event) {
	            if (!view.isStickyInitialized) {
	                view.isStickyInitialized = true;
	                view.initializeSticky();
	            }
	        });

	        $(document).bind('keydown', 'backspace', urlFocusHandler);

	        _.bindAll(this, "toggleURLParams");
	        $("#urlparams-button").on("click", this.toggleURLParams);

	    },

	    initializeSticky: function() {
	        var view = this;

	        $("#request-builder-view").on("scrollstart", function() {
	            var isMetaVisible = $("#request-meta").css("display") === "block" ? true : false;

	            var distanceFromTop = 0;

	            if (isMetaVisible) {
	                distanceFromTop = $("#request-meta").outerHeight(true);
	            }

	            view.requestUrlYDistance = distanceFromTop;

	            view.absoluteTopPosition = $(".postman-navbar").outerHeight(true)
	                                    + $("#request-context").outerHeight(true);

	            view.stickyWidth = $("#request-builder").width();

	            $(".scroll-to-response-button").css("display", "none");

	        });

	        $(window).resize(function(){
	            view.stickyWidth = $("#request-builder").width();
	            if(view.isSticking) {
	                $("#request-url-flexer").css({
	                    width: view.stickyWidth
	                });
	            }
	        });

	        $("#request-builder-view").on("scroll", function(event) {
	            var scrollTop = event.target.scrollTop;

	            if (scrollTop > view.requestUrlYDistance) {
	                if(!view.isSticking) {
	                    view.isSticking = true;
	                    $("#request-url-filler").css("display", "block");
	                    $("#request-url").addClass("request-url-shadow");
	                    $("#request-url-flexer").css({
	                        top: view.absoluteTopPosition,
	                        position: "fixed",
	                        "z-index": 50,
	                        width: view.stickyWidth
	                    });
	                }
	            }
	            else {
	                if(view.isSticking) {
	                    view.isSticking = false;
	                    $("#request-url-filler").css("display", "none");
	                    $("#request-url").removeClass("request-url-shadow");
	                    $("#request-url-flexer").css({
	                        position: "relative",
	                        top: 0,
	                        "z-index": 10,
	                        width: "100%"
	                    });
	                }
	            }
	        })
	    },

	    onCustomUrlParamUpdate: function() {
	        this.openURLParams();
	    },

	    onUpdateURLInputText: function() {
	        var url = this.model.get("url");
	        $("#url").val(url);
	    },

	    onChangeUrl: function() {
	        var url = this.model.get("url");
	        if(url !== $("#url").val()) {
	            $("#url").val(url);
	        }

	        var newRows = getUrlVars(url, false);
	        $(".url-params-count").text(newRows.length);
	        $('#url-keyvaleditor').keyvalueeditor('reset', newRows);
	    },

	    onStartNew: function(model) {
	        $("#url").val("");
	        var newRows = [];
	        $(this.editorId).keyvalueeditor('reset', newRows);
	        $('#url').focus();
	    },

	    updateModel: function() {
	        this.model.set("url", $("#url").val());
	        this.model.setUrlParamString(this.getUrlEditorParams(), true);
	    },

	    openAndInitUrlEditor: function() {
	        var newRows = getUrlVars($('#url').val(), false);
	        $("#url-keyvaleditor").keyvalueeditor('reset', newRows);
	        this.openURLParams();
	    },

	    onLoadRequest: function() {
	        var uiState = this.model.get("uiState");
	        if(uiState && uiState.hasOwnProperty("areUrlParamsOpen")) {
	            if(uiState.areUrlParamsOpen) {
	                this.openURLParams();
	            }
	            else {
	                this.closeURLParams();
	            }
	        }
	    },

	    getUrlEditorParams:function () {
	        var editorId = "#url-keyvaleditor";
	        var params = $(editorId).keyvalueeditor('getValues');
	        var newParams = [];
	        for (var i = 0; i < params.length; i++) {
	            var param = {
	                //key:encodeURIComponent(params[i].key).replace(/%7B%7B/,"{{").replace(/%7D%7D/,"}}"),
	                //value:encodeURIComponent(params[i].value).replace(/%7B%7B/,"{{").replace(/%7D%7D/,"}}").replace(/%3B/,";")
	                key:params[i].key,
	                value:params[i].value
	            };

	            newParams.push(param);
	        }

	        return newParams;
	    },

	    toggleURLParams: function(e) {
	        if($("#urlparams-container").css("display") == "block") {
	            this.closeURLParams();
	        }
	        else {
	            this.openURLParams();
	        }
	        e.stopPropagation();
	    },

	    closeURLParams: function() {
	        $("#urlparams-container").css("display", "none");
	        $("#urlparams-button").removeClass("open");
	        this.model.get("uiState").areUrlParamsOpen = false;
	    },

	    openURLParams: function() {
	        $("#urlparams-container").css("display", "block");
	        $("#urlparams-button").addClass("open");
	        this.model.get("uiState").areUrlParamsOpen = true;
	    },
	});

	module.exports = RequestURLEditor;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var RequestBodyFormDataEditor = __webpack_require__(269);
	var RequestBodyURLEncodedEditor = __webpack_require__(270);
	var RequestBodyRawEditor = __webpack_require__(271);
	var RequestBodyBinaryEditor = __webpack_require__(276);

	var RequestBodyEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;
	        var body = model.get("body");

	        model.on("change:method", this.onChangeMethod, this);

	        body.on("change:dataMode", this.onChangeDataMode, this);
	        body.on("change:data", this.onChangeData, this);

	        this.bodyFormDataEditor = new RequestBodyFormDataEditor({model: this.model});
	        this.bodyURLEncodedEditor = new RequestBodyURLEncodedEditor({model: this.model});
	        this.bodyRawEditor = new RequestBodyRawEditor({model: this.model});
	        this.bodyBinaryEditor = new RequestBodyBinaryEditor({model: this.model});

	        this.bodyFormDataEditor.on("dataChanged", this.checkForDirtyTab, this);
	        this.bodyURLEncodedEditor.on("dataChanged", this.checkForDirtyTab, this);
	        this.bodyRawEditor.on("dataChanged", this.checkForDirtyTab, this);
	        this.bodyBinaryEditor.on("dataChanged", this.checkForDirtyTab, this);


	        // TODO Change this to use a radio button
	        $('#data-mode-selector input').on("click", function (event) {
	            pm.tracker.trackEvent("request", "body", "data_modes");            
	            var mode = $(event.target).attr("value");
	            view.setDataMode(mode);
	            pm.request.trigger("change", pm.request);
	        });

	        $('#body-editor-mode-selector .dropdown-menu').on("click", "a", function (event) {
	            var editorMode = $(event.target).attr("data-editor-mode");
	            var language = $(event.target).attr("data-language");
	            view.bodyRawEditor.setEditorMode(editorMode, language, true);
	        });

	        // 'Format code' button listener.
	        $('#body-editor-mode-selector-format').on('click.postman', function(evt) {
	            var editorMode = $(event.target).attr("data-editor-mode");

	            if ($(evt.currentTarget).hasClass('disabled')) {
	                return;
	            }
	        });

	        var type = pm.settings.getSetting("requestBodyEditorContainerType");
	        $('#request-body-editor-container-type a').removeClass('active');
	        $('#request-body-editor-container-type a[data-container-type="' + type + '"]').addClass('active');

	        $('#request-body-editor-container-type').on('click', 'a', function(evt) {
	            var type = $(this).attr('data-container-type');
	            pm.settings.setSetting("requestBodyEditorContainerType", type);
	        });


	        $(document).bind('keydown', 'p', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "add_formdata_row");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            if (model.isMethodWithBody(model.get("method"))) {
	                $('#formdata-keyvaleditor div:first-child input:first-child').focus();
	                return false;
	            }
	        });

	        this.setDataMode("params");
	    },

	    checkForDirtyTab: function(getDisabled, silent) {
	        this.updateModel(getDisabled, silent);
	        pm.request.trigger("change", pm.request);
	    },

	    onChangeData: function(e) {
	        var body = this.model.get("body");
	        var data = (body)?body.get("data"):"";
	        if(!body || data=="" || data==[] || $.isEmptyObject(data)) {
	            $(".request-body-indicator").removeClass("active");
	        }
	        else {
	            $(".request-body-indicator").addClass("active");
	        }
	    },

	    resetBody: function() {
	        this.bodyRawEditor.resetBody();
	    },

	    getRequestBodyPreview: function() {
	        var body = this.model.get("body");
	        var dataMode = body.get("dataMode");

	        if (dataMode === 'raw') {
	            var rawBodyData = body.get("data");
	            rawBodyData = htmlEncode(rawBodyData);
	            rawBodyData = pm.envManager.getCurrentValue(rawBodyData);
	            return rawBodyData;
	        }
	        else if (dataMode === 'params') {
	            var formDataBody = this.bodyFormDataEditor.getFormDataPreview(false);
	            if(formDataBody !== false) {
	                return formDataBody;
	            }
	            else {
	                return false;
	            }
	        }
	        else if (dataMode === 'urlencoded') {
	            var urlEncodedBodyData = this.bodyURLEncodedEditor.getUrlEncodedBody(false);
	            if(urlEncodedBodyData !== false) {
	                return urlEncodedBodyData;
	            }
	            else {
	                return false;
	            }
	        }
	    },

	    // TODO
	    // Set transformedData here?
	    getRequestBodyToBeSent: function(getDisabled) {
	        var model = this.model;
	        var body = model.get("body");

	        var dataMode = body.get("dataMode");

	        if (dataMode === 'raw') {
	            var rawBodyData = _.clone(this.getData(true));
	            rawBodyData = pm.envManager.getCurrentValue(rawBodyData);

	            body.set("transformedData", rawBodyData);

	            return rawBodyData;
	        }
	        else if (dataMode === 'params') {
	            var formDataBody = this.bodyFormDataEditor.getFormDataBody(getDisabled);

	            if(formDataBody !== false) {
	                return formDataBody;
	            }
	            else {
	                return false;
	            }
	        }
	        else if (dataMode === 'urlencoded') {
	            var urlEncodedBodyData = this.bodyURLEncodedEditor.getUrlEncodedBody(getDisabled);
	            if(urlEncodedBodyData !== false) {
	                return urlEncodedBodyData;
	            }
	            else {
	                return false;
	            }
	        }
	        else if (dataMode === 'binary') {
	            var binaryBody = this.bodyBinaryEditor.getBinaryBody();
	            return binaryBody;
	        }
	    },

	    // TODO
	    // URGENT
	    // Refactor this. Figure out why it's needed when the value
	    // is being obtained from editors in another place
	    // Gets data from the key value editors
	    getData:function (asObjects, getDisabled) {
	        var model = this.model;
	        var body = this.model.get("body");
	        var mode = body.get("dataMode");

	        var data;
	        var params;
	        var newParams;
	        var param;
	        var i;

	        if (mode === "params") {
	            params = $('#formdata-keyvaleditor').keyvalueeditor('getValues');
	            newParams = [];
	            for (i = 0; i < params.length; i++) {
	                if(getDisabled==false && params[i].enabled==false) {
	                    continue;
	                }
	                param = {
	                    key:params[i].key,
	                    value:params[i].value,
	                    type:params[i].type,
	                    enabled: params[i].enabled
	                };

	                newParams.push(param);
	            }

	            if(asObjects === true) {
	                return newParams;
	            }
	            else {
	                data = model.getBodyParamString(newParams);
	            }
	        }
	        else if (mode === "raw") {
	            data = this.bodyRawEditor.getRawData();
	        }
	        else if (mode === "urlencoded") {
	            params = $('#urlencoded-keyvaleditor').keyvalueeditor('getValues');
	            newParams = [];
	            for (i = 0; i < params.length; i++) {
	                if(getDisabled==false && params[i].enabled==false) {
	                    continue;
	                }
	                param = {
	                    key:params[i].key,
	                    value:params[i].value,
	                    type:params[i].type,
	                    enabled: params[i].enabled
	                };

	                newParams.push(param);
	            }

	            if(asObjects === true) {
	                return newParams;
	            }
	            else {
	                data = model.getBodyParamString(newParams);
	            }
	        }

	        return data;
	    },

	    // TODO Needs to be in this order for updating the data property
	    updateModel: function(getDisabled, silent) {
	        var body = this.model.get("body");
	        var dataMode = body.get("dataMode");
	        var data = this.getRequestBodyToBeSent(getDisabled);
	        silent = silent || false;

	        body.set("data", this.getData(true, getDisabled), {'silent': silent});

	        // TODO
	        // Transform data first and then set dataToBeSent
	        body.set("dataToBeSent", this.getRequestBodyToBeSent(getDisabled), {'silent': silent});

	        if (dataMode === "urlencoded") {
	            body.set("transformedData", getBodyVars(body.get("dataToBeSent")), {'silent': silent});
	        }

	        var dataAsObjects = this.getData(true, getDisabled);

	        // TODO
	        // Triggers change in dataAsObjects which causes form-data to refresh and lose files
	        body.set("dataAsObjects", dataAsObjects, { silent: true }, {'silent': silent});

	        var dataAsPreview = this.getRequestBodyPreview();
	        body.set("dataAsPreview", dataAsPreview), {'silent': silent};

	        // TODO
	        // Only needed for form-data. What about params?
	        var useInterceptor = pm.settings.getSetting("useInterceptor");

	        if (useInterceptor) {
	            if (dataMode === "params") {
	                var serializedFormData = this.bodyFormDataEditor.getSerializedFormDataBody();
	                body.set("serializedData", serializedFormData, {'silent': silent});
	            }
	        }
	    },

	    openFormDataEditor:function () {
	        var containerId = "#formdata-keyvaleditor-container";
	        $(containerId).css("display", "block");

	        var editorId = "#formdata-keyvaleditor";
	        var params = $(editorId).keyvalueeditor('getValues');
	        var newParams = [];
	        for (var i = 0; i < params.length; i++) {
	            var param = {
	                key:params[i].key,
	                value:params[i].value
	            };

	            newParams.push(param);
	        }
	    },

	    closeFormDataEditor:function () {
	        var containerId = "#formdata-keyvaleditor-container";
	        $(containerId).css("display", "none");
	    },

	    openUrlEncodedEditor:function () {
	        var containerId = "#urlencoded-keyvaleditor-container";
	        $(containerId).css("display", "block");

	        var editorId = "#urlencoded-keyvaleditor";
	        var params = $(editorId).keyvalueeditor('getValues');
	        var newParams = [];
	        for (var i = 0; i < params.length; i++) {
	            var param = {
	                key:params[i].key,
	                value:params[i].value
	            };

	            newParams.push(param);
	        }
	    },

	    closeUrlEncodedEditor:function () {
	        var containerId = "#urlencoded-keyvaleditor-container";
	        $(containerId).css("display", "none");
	    },

	    onChangeMethod: function(event) {
	        var method = this.model.get("method");

	        //if body was selected, move to headers
	        if (!this.model.isMethodWithBody(method)) {
	            if($("#request-builder-tab-body").hasClass("active")) {
	                $("#request-builder-tabs li[data-tab='auth'] a").tab("show");
	            }
	            $("#request-builder-tab-body").addClass("disabled");
	        }
	        else {
	            if($("#request-builder-tab-body").hasClass("active")) {
	                $("#request-builder-tabs li[data-tab='body'] a").tab("show");
	            }
	            $("#request-builder-tab-body").removeClass("disabled");
	        }
	    },

	    onChangeDataMode: function(event) {
	        var body = this.model.get("body");
	        var dataMode = body.get("dataMode");
	        this.setDataMode(dataMode);
	    },

	    setDataMode:function (mode) {
	        if(_.isEmpty(mode)) {
	            return; //blank mode
	        }
	        var model = this.model;
	        var view = this;
	        var body = this.model.get("body");

	        body.set("dataMode", mode);

	        $('#data-mode-selector input').prop("checked", false);
	        $('#data-mode-selector input[value=' + mode + ']').prop("checked", true);

	        $("#body-editor-mode-selector").css("display", "none");
	        if (mode === "params") {
	            view.openFormDataEditor();
	            view.closeUrlEncodedEditor();
	            $('#body-data-container').css("display", "none");
	            $('#body-data-binary-container').css("display", "none");
	        }
	        else if (mode === "raw") {
	            view.closeUrlEncodedEditor();
	            view.closeFormDataEditor();
	            $('#body-data-container').css("display", "block");

	            var isEditorInitialized = body.get("isEditorInitialized");
	            var codeMirror = body.get("codeMirror");
	            if (isEditorInitialized === false) {
	                view.bodyRawEditor.initCodeMirrorEditor();
	            }
	            else {
	                view.bodyRawEditor.refreshCodeMirrorEditor();
	            }

	            $("#body-editor-mode-selector").css("display", "block");
	            $('#body-data-binary-container').css("display", "none");
	        }
	        else if (mode === "urlencoded") {
	            view.closeFormDataEditor();
	            view.openUrlEncodedEditor();
	            $('#body-data-container').css("display", "none");
	            $('#body-data-binary-container').css("display", "none");
	        }
	        else if (mode === "binary") {
	            view.closeFormDataEditor();
	            view.closeUrlEncodedEditor();
	            $('#body-data-container').css("display", "none");
	            $('#body-data-binary-container').css("display", "block");
	        }
	    },
	});

	module.exports = RequestBodyEditor;


/***/ },
/* 269 */
/***/ function(module, exports) {

	var RequestBodyFormDataEditor = Backbone.View.extend({
	    initialize: function() {
	        var view = this;

	        this.model.on("startNew", this.onStartNew, this);
	        this.files = {};

	        var body = this.model.get("body");
	        body.on("change:dataAsObjects", this.onChangeBodyData, this);

	        var editorId = "#formdata-keyvaleditor";
			var editor = $(editorId);
	        var params = {
	            placeHolderKey:"Key",
	            placeHolderValue:"Value",
	            valueTypes:["text", "file"],
	            deleteButton:'<span class="icon-delete"/>',
	            onDeleteRow:function () {
	                view.trigger("dataChanged", true);
	            },

	            onChangeElement:function () {
	                setTimeout(function() {
	                    view.trigger("dataChanged", true);
	                }, 0);
	            }
	        };

		    editor.on("change", "input[type='file']", function(event) {
	            view.onHandleFileChange(event);
	        });

		    editor.keyvalueeditor('init', params);
	    },

	    clearFilenamesFromInput: function(element) {
	        $(element).attr("data-filenames", "");
	    },


	    appendFilenameToInput: function(element, name) {
		    element = $(element);
	        var filenames = element.attr("data-filenames");
	        if (filenames === "") {
	            filenames = name;
	        }
	        else {
	            filenames += "," + name;
	        }

	        element.attr("data-filenames", filenames);
	    },

	    // TODO Only handles single files right now
	    onHandleFileChange: function(event) {
	        var view = this;
	        var files = this.files;

	        view.clearFilenamesFromInput(event.currentTarget);

	        if (event.target.files.length > 0) {
	            for(var i = 0; i < event.target.files.length; i++) {
	                var reader = new FileReader();
	                reader.onload = (function (theFile) {
	                    return function (e) {
	                        if(pm.settings.getSetting("useInterceptor")) {
	                        	//slower
	                        	var binaryData = e.currentTarget.result;
	                            var encodedData = ArrayBufferEncoderDecoder.encode(binaryData);
	                        }
	                        
	                        var name = encodeURIComponent(theFile.name);

	                        view.appendFilenameToInput(event.currentTarget, name);

	                        var parent = $(event.currentTarget).parent();
	                        var key = $($(parent).children(".keyvalueeditor-key")[0]).val();

	                        files[name] = {};
	                        if(postman_webkit) {
	                            files[name]["wholePath"] = event.currentTarget.value;
	                        }
	                        else {
	                            if(pm.settings.getSetting("useInterceptor")) {
	                                files[name]["file"] = encodedData;
	                            }
	                            else {
	                                files[name]["file"] = theFile;
	                            }
	                        }
	                    };
	                })(event.target.files[i]);
	                reader.readAsArrayBuffer(event.target.files[i]);
	            }
	        }
	    },

	    onStartNew: function() {
	        this.files = {};
	        $('#formdata-keyvaleditor').keyvalueeditor('reset');
	    },

	    // Sets the data variable
	    onChangeBodyData: function() {
	        var body = this.model.get("body");
	        var mode = body.get("dataMode");
	        var asObjects = body.get("asObjects");
	        var data = body.get("dataAsObjects");

	        if (mode === "params") {
	            if (data) {
	                try {
	                    this.files = {};
	                    $('#formdata-keyvaleditor').keyvalueeditor('reset', data);
	                    body.set("dataToBeSent", this.getFormDataBody());
	                }
	                catch(e) {
	                }
	            }
	        }
	    },

	    getFormDataBody: function(getDisabled) {
	        var rows, count, j;
	        var i;
	        var row, key, value;
	        var paramsBodyData = new FormData();
	        var transformedData = [];
	        var body = this.model.get("body");

	        rows = $('#formdata-keyvaleditor').keyvalueeditor('getElements');
	        count = rows.length;

	        if (count > 0) {
	            for (j = 0; j < count; j++) {
	                row = rows[j];
	                key = row.keyElement.val();
	                var valueType = row.valueType;
	                var valueElement = row.valueElement;
	                var enabled = row.enabled;
	                if(row.enabled==false && getDisabled==false) continue;

	                if (pm.settings.getSetting("trimKeysAndValues")) {
	                    key = $.trim(key);
	                }

	                key = pm.envManager.getCurrentValue(key);

	                if (valueType === "file") {
	                    var domEl = valueElement.get(0);
	                    var len = (domEl)?domEl.files.length:0;
	                    if(len>0) {
	                        var filenames = valueElement.attr('data-filenames').split(",");
	                        for (i = 0; i < len; i++) {
	                            paramsBodyData.append(key, domEl.files[i], filenames[i]);
	                        }
	                        if(domEl.files[0]) {
	                            transformedData.push({
	                                "key": key,
	                                "value": value,
	                                "enabled": enabled,
	                                "type": "file",
	                                "mimeType": domEl.files[0].type
	                            });
	                        }
	                    }
	                }
	                else {
	                    value = valueElement.val();
	                    value = pm.envManager.getCurrentValue(value);

	                    if (pm.settings.getSetting("trimKeysAndValues")) {
	                        value = $.trim(value);
	                    }

	                    paramsBodyData.append(key, value);

	                    transformedData.push({
	                        "key": key,
	                        "value": value,
	                        "enabled": enabled
	                    });
	                }
	            }

	            body.set("transformedData", transformedData);

	            return paramsBodyData;
	        }
	        else {
	            return false;
	        }
	    },

	    // Fixed
	    getDummyFormDataBoundary: function() {
	        var boundary = "----WebKitFormBoundary7MA4YWxkTrZu0gW";
	        return boundary;
	    },

	    getSerializedFormDataBody: function(getDisabled) {
	        var rows, count, j;
	        var i;
	        var row, key, value;
	        var paramsBodyData = [];
	        var transformedData = [];

	        var body = this.model.get("body");

	        rows = $('#formdata-keyvaleditor').keyvalueeditor('getElements');
	        count = rows.length;
	        var files = this.files;

	        if (count > 0) {
	            for (j = 0; j < count; j++) {
	                row = rows[j];
	                key = row.keyElement.val();
	                var valueType = row.valueType;
	                var valueElement = row.valueElement;
	                var enabled = row.enabled;
	                if(row.enabled==false && getDisabled==false) continue;

	                if (pm.settings.getSetting("trimKeysAndValues")) {
	                    key = $.trim(key);
	                }

	                key = pm.envManager.getCurrentValue(key);

	                if (valueType === "file") {
	                    // console.log($(valueElement[0]));
	                    var filenameAttribute = $(valueElement[0]).attr("data-filenames");

	                    if (filenameAttribute) {
	                        var filenames = filenameAttribute.split(",")
	                        // console.log(valueElement, filenames);
	                        var param = {
	                            "name": key,
	                            "value": [],
	                            "fileName": filenames[0],
	                            "type": valueType
	                        };

	                        for(var k = 0; k < filenames.length; k++) {
	                            // console.log(filenames[k]);
	                            if(postman_webkit) {
	                                console.log("Whole path: " + files[filenames[k]]["wholePath"]);
	                                param["value"] = files[filenames[k]]["wholePath"];
	                            }
	                            else {
	                                param["value"].push(files[filenames[k]]["file"]);
	                            }
	                        }

	                        var allFiles = $(valueElement[0]).get(0).files;
	                        if(allFiles && allFiles.length>0) {
	                            transformedData.push({
	                                "key": key,
	                                "value": value,
	                                "enabled": enabled,
	                                "type": "file",
	                                "mimeType": allFiles[0].type
	                            });
	                        }

	                        paramsBodyData.push(param);
	                    }
	                }
	                else {
	                    value = valueElement.val();
	                    value = pm.envManager.getCurrentValue(value);

	                    if (pm.settings.getSetting("trimKeysAndValues")) {
	                        value = $.trim(value);
	                    }

	                    var param = {
	                        "name": key,
	                        "value": value,
	                        "type": valueType,
	                        "enabled": enabled
	                    };

	                    paramsBodyData.push(param);

	                    transformedData.push({
	                        "key": key,
	                        "value": value,
	                        "enabled": enabled
	                    });
	                }
	            }

	            //body.set("transformedData", transformedData);

	            return paramsBodyData;
	        }
	        else {
	            return false;
	        }
	    },

	    getFormDataPreview: function(getDisabled) {
	        var rows, count, j;
	        var row, key, value;
	        var i;
	        rows = $('#formdata-keyvaleditor').keyvalueeditor('getElements');
	        count = rows.length;
	        var params = [];

	        if (count > 0) {
	            for (j = 0; j < count; j++) {
	                row = rows[j];
	                key = row.keyElement.val();
	                var valueType = row.valueType;
	                var valueElement = row.valueElement;
	                var enabled = row.enabled;
	                if(row.enabled==false && getDisabled==false) continue;

	                if (pm.settings.getSetting("trimKeysAndValues")) {
	                    key = $.trim(key);
	                }

	                if (valueType === "file") {
	                    var domEl = valueElement.get(0);
	                    var len = domEl.files.length;

	                    for (i = 0; i < len; i++) {
	                        var fileObj = {
	                            key: key,
	                            value: domEl.files[i],
	                            type: "file",
	                        }
	                        params.push(fileObj);
	                    }
	                }
	                else {
	                    value = valueElement.val();
	                    value = pm.envManager.getCurrentValue(value);

	                    if (pm.settings.getSetting("trimKeysAndValues")) {
	                        value = $.trim(value);
	                    }

	                    var textObj = {
	                        key: key,
	                        value: value,
	                        type: "text",
	                        enabled: enabled
	                    }
	                    params.push(textObj);
	                }
	            }

	            var paramsCount = params.length;
	            var body = "";
	            for(i = 0; i < paramsCount; i++) {
	                var param = params[i];
	                body += this.getDummyFormDataBoundary();
	                if(param.type === "text") {
	                    body += "\nContent-Disposition: form-data; name=\"" + param.key + "\"\n\n";
	                    body += param.value;
	                    body += "\n";
	                }
	                else if(param.type === "file") {
	                    body += "\nContent-Disposition: form-data; name=\"" + param.key + "\"; filename=";
	                    body += "\"" + param.value.name + "\"\n";
	                    body += "Content-Type: " + param.value.type;
	                    body += "\n\n\n"
	                }
	            }

	            body += this.getDummyFormDataBoundary();

	            return body;
	        }
	        else {
	            return false;
	        }
	    }
	});

	module.exports = RequestBodyFormDataEditor;


/***/ },
/* 270 */
/***/ function(module, exports) {

	var RequestBodyURLEncodedEditor = Backbone.View.extend({
	    initialize: function() {
	        var view = this;
	        this.model.on("startNew", this.onStartNew, this);

	        var body = this.model.get("body");
	        body.on("change:dataAsObjects", this.onChangeBodyData, this);

	        var editorId = "#urlencoded-keyvaleditor";

	        var params = {
	            placeHolderKey:"Key",
	            placeHolderValue:"Value",
	            valueTypes:["text"],
	            deleteButton:'<span class="icon-delete"/>',
	            onDeleteRow:function () {
	                setTimeout(function() {
	                    view.trigger("dataChanged", true, true);
	                }, 0);
	            },

	            onChangeElement:function () {
	                setTimeout(function() {
	                    view.trigger("dataChanged", true, true);
	                }, 0);
	            }
	        };

	        $(editorId).keyvalueeditor('init', params);
	    },

	    onStartNew: function() {
	        $('#urlencoded-keyvaleditor').keyvalueeditor('reset');
	    },

	    onChangeBodyData: function() {
	        var body = this.model.get("body");
	        var mode = body.get("dataMode");
	        var asObjects = body.get("asObjects");
	        var data = body.get("dataAsObjects");

	        if (mode === "urlencoded") {
	            if (data) {
	                try {
	                    $('#urlencoded-keyvaleditor').keyvalueeditor('reset', data);
	                }
	                catch(e) {
	                    console.log(e);
	                }
	            }

	        }
	    },

	    getUrlEncodedBody: function(getDisabled) {
	        var rows, count, j;
	        var row, key, value;
	        var urlEncodedBodyData = "";
	        rows = $('#urlencoded-keyvaleditor').keyvalueeditor('getElements');
	        count = rows.length;

	        if (count > 0) {
	            for (j = 0; j < count; j++) {
	                row = rows[j];
	                value = row.valueElement.val();
	                if(row.enabled==false && getDisabled==false) {
	                    continue;
	                }
	                if (pm.settings.getSetting("trimKeysAndValues")) {
	                    // console.log("Trim value", value);
	                    value = $.trim(value);
	                }

	                value = pm.envManager.getCurrentValue(value);
	                value = encodeURIComponent(value);
	                value = value.replace(/%20/g, '+');

	                key = pm.envManager.getCurrentValue(row.keyElement.val());
	                key = encodeURIComponent(key);
	                key = key.replace(/%20/g, '+');

	                if (pm.settings.getSetting("trimKeysAndValues")) {
	                    key = $.trim(key);
	                }

	                urlEncodedBodyData += key + "=" + value + "&";
	            }

	            urlEncodedBodyData = urlEncodedBodyData.substr(0, urlEncodedBodyData.length - 1);

	            return urlEncodedBodyData;
	        }
	        else {
	            return false;
	        }
	    }
	});

	module.exports = RequestBodyURLEncodedEditor;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var jsBeautify = __webpack_require__(272);

	var RequestBodyRawEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;
	        var body = this.model.get("body");

	        body.on("change:data", this.onChangeBodyData, this);
	        model.on("change:headers", this.onChangeHeaders, this);

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        pm.mediator.on("beautify", function() {
	            if($("#body").is(":visible") && view.editor) {
	                view.beautify();
	            }
	        }, this);

	        //pm.mediator.on("updateResponseFontSize", this.updateRequestBodyFontSize, this);
	        //pm.mediator.on("updatedUIScale", this.updateRequestBodyFontSize, this);
	    },

	    beautify: function() {
	        var view = this;
	        var editorMode = view.model.get("body").get("editorMode");
	        if(editorMode === "javascript") {
	            var oldText = view.editor.getValue();
	            var newText = oldText;
	            try {
	                newText = JSON.stringify(JSON.parse(oldText), null, 2);
	            }
	            catch(e) {
	                newText = jsBeautify(oldText);
	            }
	            view.editor.setValue(newText, -1);
	        }
	        else if(editorMode === "xml") {
	            var oldText = view.editor.getValue();
	            var newText = vkbeautify.xml(oldText);
	            view.editor.setValue(newText, -1);
	        }
	    },

	    updateRequestBodyFontSize: function(newSize) {
	        var codeMirror = this.model.get("body").get("codeMirror");

	        if (codeMirror) {
	            codeMirror.setFontSize(rem(newSize));
	        }
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = this.model.get("body").get("codeMirror");

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    onChangeHeaders: function() {
	        var body = this.model.get("body");

	        //Set raw body editor value if Content-Type is present
	        var contentType = this.model.getHeaderValue("Content-Type");
	        var editorMode = "text";
	        var language = "text";

	        if (contentType) {
	            if (contentType.search(/json/i) !== -1 || contentType.search(/javascript/i) !== -1) {
	                editorMode = 'javascript';
	                language = contentType;
	            }
	            else if (contentType.search(/xml/i) !== -1) {
	                editorMode = 'xml';
	                language = contentType;
	            }
	            else if (contentType.search(/html/i) !== -1) {
	                editorMode = 'xml';
	                language = contentType;
	            }
	            else {
	                editorMode = 'text';
	                language = 'text';
	            }
	        }

	        //handles "application/json; encoding='utf-8'"
	        var semicolonPosition = language.indexOf(";")
	        if(semicolonPosition!==-1) {
	            language = language.substring(0, semicolonPosition);
	        }


	        body.set("editorMode", editorMode);
	        body.set("language", language);

	        this.setEditorMode(editorMode, language, false);
	    },

	    resetBody: function() {
	        this.loadRawData("");
	    },

	    onChangeBodyData: function() {
	        var body = this.model.get("body");
	        var mode = body.get("dataMode");
	        var asObjects = body.get("asObjects");
	        var data = body.get("data");

	        // console.log("onChangeBodyData", body, data);

	        var language = body.get("language");
	        var editorMode = body.get("editorMode");

	        if (mode === "raw") {
	            if (typeof data === "string") {
	                this.loadRawData(data);
	            }
	            else {
	                this.loadRawData("");
	            }
	        }
	        else {
	            //why change the raw editor to empty if you select form-data?
	            //this.loadRawData("");
	        }
	    },

	    refreshCodeMirrorEditor: function() {
	        var codemirror = this.editor;
	        if(codemirror) {
	            codemirror.resize(true);
	        }
	    },

	    initCodeMirrorEditor:function () {
	        var model = this.model;
	        var view = this;
	        var body = this.model.get("body");
	        var editorMode = body.get("editorMode");

	        body.set("isEditorInitialized", true);

	        var bodyTextarea = document.getElementById("body");
	        this.editor = ace.edit(bodyTextarea);
	        pm.rawBodyEditor = this.editor;

	        pm.rawBodyEditor.on("change", _.debounce(function() {
	            view.trigger("dataChanged", true, true);
	        }, 100));

	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);

	        body.set("codeMirror", this.editor);

	        var codemirror = this.editor;
	        $("#body-data-container .aceeditor-div").resizable({
	            stop: function() {
	                codemirror.resize(true);
	            }
	        });

	        if (editorMode) {
	            if (editorMode === "javascript") {
	               // codeMirror.setOption("mode", {"name":"javascript", "json":true});
	                this.editor.getSession().setMode('ace/mode/javascript');
	            }
	            else if(editorMode === "text") {
	                //codeMirror.setOption("mode", editorMode);
	                this.editor.getSession().setMode('ace/mode/plain_text');
	            }
	            else if(editorMode === "xml") {
	                //codeMirror.setOption("mode", editorMode);
	                this.editor.getSession().setMode('ace/mode/xml');
	            }

	            if (editorMode === "text") {
	                $('#body-editor-mode-selector-format').addClass('disabled');
	            } else {
	                $('#body-editor-mode-selector-format').removeClass('disabled');
	            }
	        }

	        $("#body-data-container .CodeMirror-scroll").css("height", "200px");
	    },

	    setEditorMode:function (mode, language, toSetHeader) {
	        var model = this.model;
	        var body = model.get("body");
	        var codeMirror = body.get("codeMirror");
	        var isEditorInitialized = body.get("isEditorInitialized");

	        var displayMode = $("#body-editor-mode-selector a[data-language='" + language + "']").text();

	        $('#body-editor-mode-item-selected').text(displayMode);

	        if (isEditorInitialized) {
	            if (mode === "javascript") {
	                codeMirror.getSession().setMode('ace/mode/javascript');
	            }
	            else if(mode === "text") {
	                //codeMirror.setOption("mode", editorMode);
	                codeMirror.getSession().setMode('ace/mode/plain_text');
	            }
	            else if(mode==="xml") {
	                codeMirror.getSession().setMode('ace/mode/xml');
	            }

	            if (mode === "text") {
	                $('#body-editor-mode-selector-format').addClass('disabled');
	            } else {
	                $('#body-editor-mode-selector-format').removeClass('disabled');
	            }

	            if (toSetHeader) {
	                model.setHeader("Content-Type", language);
	            }

	            //codeMirror.refresh();
	        }
	    },

	    autoFormatEditor:function (mode) {
	        var model = this.model;
	        var view = this;
	        var body = model.get("body");
	        var isEditorInitialized = body.get("isEditorInitialized");
	        var codeMirror = body.get("codeMirror");

	        var content = codeMirror.getValue(),
	        validated = null, result = null;

	        $('#body-editor-mode-selector-format-result').empty().hide();

	        console.error("Auto format not currently supported for ace editor");
	        return;

	        if (isEditorInitialized) {
	            // In case its a JSON then just properly stringify it.
	            // CodeMirror does not work well with pure JSON format.
	            if (mode === 'javascript') {

	                // Validate code first.
	                try {
	                    validated = pm.jsonlint.instance.parse(content);
	                    if (validated) {
	                        content = JSON.parse(codeMirror.getValue());
	                        codeMirror.setValue(JSON.stringify(content, null, 4), -1);
	                    }
	                } catch(e) {
	                    result = e.message;
	                    // Show jslint result.
	                    // We could also highlight the line with error here.
	                    $('#body-editor-mode-selector-format-result').text(result).show();
	                }
	            } else { // Otherwise use internal CodeMirror.autoFormatRage method for a specific mode.
	                var totalLines = codeMirror.lineCount(),
	                totalChars = codeMirror.getValue().length;

	                codeMirror.autoFormatRange(
	                    {line: 0, ch: 0},
	                    {line: totalLines - 1, ch: codeMirror.getLine(totalLines - 1).length}
	                );
	            }
	        }
	    },

	    loadRawData:function (data) {
	        // console.log("loadRawData: data", data);
	        var body = this.model.get("body");
	        var isEditorInitialized = body.get("isEditorInitialized");
	        var codeMirror = body.get("codeMirror");

	        if (isEditorInitialized === true) {
	            if (data) {
	                codeMirror.setValue(data, -1);
	            }
	            else {
	                codeMirror.setValue("", -1);
	            }

	            codeMirror.resize();
	        }
	    },

	    getRawData:function () {
	        var model = this.model;
	        var body = model.get("body");
	        var isEditorInitialized = body.get("isEditorInitialized");
	        var codeMirror = body.get("codeMirror");

	        if (isEditorInitialized) {
	            var data = codeMirror.getValue();

	            if (pm.settings.getSetting("forceWindowsLineEndings") === true) {
	                data = data.replace(/\r/g, '');
	                data = data.replace(/\n/g, "\r\n");
	            }

	            return data;
	        }
	        else {
	            return "";
	        }
	    }
	});

	module.exports = RequestBodyRawEditor;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	The following batches are equivalent:

	var beautify_js = require('js-beautify');
	var beautify_js = require('js-beautify').js;
	var beautify_js = require('js-beautify').js_beautify;

	var beautify_css = require('js-beautify').css;
	var beautify_css = require('js-beautify').css_beautify;

	var beautify_html = require('js-beautify').html;
	var beautify_html = require('js-beautify').html_beautify;

	All methods returned accept two arguments, the source string and an options object.
	**/

	function get_beautify(js_beautify, css_beautify, html_beautify) {
	    // the default is js
	    var beautify = function (src, config) {
	        return js_beautify.js_beautify(src, config);
	    };

	    // short aliases
	    beautify.js   = js_beautify.js_beautify;
	    beautify.css  = css_beautify.css_beautify;
	    beautify.html = html_beautify.html_beautify;

	    // legacy aliases
	    beautify.js_beautify   = js_beautify.js_beautify;
	    beautify.css_beautify  = css_beautify.css_beautify;
	    beautify.html_beautify = html_beautify.html_beautify;

	    return beautify;
	}

	if (true) {
	    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(273),
	        __webpack_require__(274),
	        __webpack_require__(275)
	    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(js_beautify, css_beautify, html_beautify) {
	        return get_beautify(js_beautify, css_beautify, html_beautify);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
	    (function(mod) {
	        var js_beautify = require('./lib/beautify');
	        var css_beautify = require('./lib/beautify-css');
	        var html_beautify = require('./lib/beautify-html');

	        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);

	    })(module);
	}



/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*

	  The MIT License (MIT)

	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.

	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:

	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.

	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.

	 JS Beautifier
	---------------


	  Written by Einar Lielmanis, <einar@jsbeautifier.org>
	      http://jsbeautifier.org/

	  Originally converted to javascript by Vital, <vital76@gmail.com>
	  "End braces on own line" added by Chris J. Shull, <chrisjshull@gmail.com>
	  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>


	  Usage:
	    js_beautify(js_source_text);
	    js_beautify(js_source_text, options);

	  The options are:
	    indent_size (default 4)          - indentation size,
	    indent_char (default space)      - character to indent with,
	    preserve_newlines (default true) - whether existing line breaks should be preserved,
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,

	    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.

	            jslint_happy        !jslint_happy
	            ---------------------------------
	            function ()         function()

	            switch () {         switch() {
	            case 1:               case 1:
	              break;                break;
	            }                   }

	    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, "function()" vs "function ()",
	          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)

	    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.

	    space_before_conditional (default true) - should the space before conditional statement be added, "if(true)" vs "if (true)",

	    unescape_strings (default false) - should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"

	    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.
	          NOTE: This is not a hard limit. Lines will continue until a point where a newline would
	                be preserved if it were present.

	    end_with_newline (default false)  - end output with a newline


	    e.g

	    js_beautify(js_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t'
	    });

	*/

	(function() {

	    var acorn = {};
	    (function (exports) {
	      // This section of code is taken from acorn.
	      //
	      // Acorn was written by Marijn Haverbeke and released under an MIT
	      // license. The Unicode regexps (for identifiers and whitespace) were
	      // taken from [Esprima](http://esprima.org) by Ariya Hidayat.
	      //
	      // Git repositories for Acorn are available at
	      //
	      //     http://marijnhaverbeke.nl/git/acorn
	      //     https://github.com/marijnh/acorn.git

	      // ## Character categories

	      // Big ugly regular expressions that match characters in the
	      // whitespace, identifier, and identifier-start categories. These
	      // are only applied when a character is found to actually have a
	      // code point above 128.

	      var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	      var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	      var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
	      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	      // Whether a single character denotes a newline.

	      var newline = exports.newline = /[\n\r\u2028\u2029]/;

	      // Matches a whole line break (where CRLF is considered a single
	      // line break). Used to count lines.

	      var lineBreak = exports.lineBreak = /\r\n|[\n\r\u2028\u2029]/g;

	      // Test whether a given character code starts an identifier.

	      var isIdentifierStart = exports.isIdentifierStart = function(code) {
	        if (code < 65) return code === 36;
	        if (code < 91) return true;
	        if (code < 97) return code === 95;
	        if (code < 123)return true;
	        return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	      };

	      // Test whether a given character is part of an identifier.

	      var isIdentifierChar = exports.isIdentifierChar = function(code) {
	        if (code < 48) return code === 36;
	        if (code < 58) return true;
	        if (code < 65) return false;
	        if (code < 91) return true;
	        if (code < 97) return code === 95;
	        if (code < 123)return true;
	        return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	      };
	    })(acorn);

	    function in_array(what, arr) {
	        for (var i = 0; i < arr.length; i += 1) {
	            if (arr[i] === what) {
	                return true;
	            }
	        }
	        return false;
	    }

	    function trim(s) {
	        return s.replace(/^\s+|\s+$/g, '');
	    }

	    function ltrim(s) {
	        return s.replace(/^\s+/g, '');
	    }

	    function rtrim(s) {
	        return s.replace(/\s+$/g, '');
	    }

	    function js_beautify(js_source_text, options) {
	        "use strict";
	        var beautifier = new Beautifier(js_source_text, options);
	        return beautifier.beautify();
	    }

	    var MODE = {
	            BlockStatement: 'BlockStatement', // 'BLOCK'
	            Statement: 'Statement', // 'STATEMENT'
	            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
	            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
	            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
	            Conditional: 'Conditional', //'(COND-EXPRESSION)',
	            Expression: 'Expression' //'(EXPRESSION)'
	        };

	    function Beautifier(js_source_text, options) {
	        "use strict";
	        var output
	        var tokens = [], token_pos;
	        var Tokenizer;
	        var current_token;
	        var last_type, last_last_text, indent_string;
	        var flags, previous_flags, flag_store;
	        var prefix;

	        var handlers, opt;
	        var baseIndentString = '';

	        handlers = {
	            'TK_START_EXPR': handle_start_expr,
	            'TK_END_EXPR': handle_end_expr,
	            'TK_START_BLOCK': handle_start_block,
	            'TK_END_BLOCK': handle_end_block,
	            'TK_WORD': handle_word,
	            'TK_RESERVED': handle_word,
	            'TK_SEMICOLON': handle_semicolon,
	            'TK_STRING': handle_string,
	            'TK_EQUALS': handle_equals,
	            'TK_OPERATOR': handle_operator,
	            'TK_COMMA': handle_comma,
	            'TK_BLOCK_COMMENT': handle_block_comment,
	            'TK_COMMENT': handle_comment,
	            'TK_DOT': handle_dot,
	            'TK_UNKNOWN': handle_unknown,
	            'TK_EOF': handle_eof
	        };

	        function create_flags(flags_base, mode) {
	            var next_indent_level = 0;
	            if (flags_base) {
	                next_indent_level = flags_base.indentation_level;
	                if (!output.just_added_newline() &&
	                    flags_base.line_indent_level > next_indent_level) {
	                    next_indent_level = flags_base.line_indent_level;
	                }
	            }

	            var next_flags = {
	                mode: mode,
	                parent: flags_base,
	                last_text: flags_base ? flags_base.last_text : '', // last token text
	                last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed
	                declaration_statement: false,
	                declaration_assignment: false,
	                multiline_frame: false,
	                if_block: false,
	                else_block: false,
	                do_block: false,
	                do_while: false,
	                in_case_statement: false, // switch(..){ INSIDE HERE }
	                in_case: false, // we're on the exact line with "case 0:"
	                case_body: false, // the indented case-action block
	                indentation_level: next_indent_level,
	                line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
	                start_line_index: output.get_line_number(),
	                ternary_depth: 0
	            };
	            return next_flags;
	        }

	        // Some interpreters have unexpected results with foo = baz || bar;
	        options = options ? options : {};
	        opt = {};

	        // compatibility
	        if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
	            opt.brace_style = options.braces_on_own_line ? "expand" : "collapse";
	        }
	        opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : "collapse");

	        // graceful handling of deprecated option
	        if (opt.brace_style === "expand-strict") {
	            opt.brace_style = "expand";
	        }


	        opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;
	        opt.indent_char = options.indent_char ? options.indent_char : ' ';
	        opt.eol = options.eol ? options.eol : '\n';
	        opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
	        opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;
	        opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);
	        opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;
	        opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;
	        opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;
	        opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;
	        opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;
	        opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;
	        opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;
	        opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);
	        opt.e4x = (options.e4x === undefined) ? false : options.e4x;
	        opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	        opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;

	        // For testing of beautify ignore:start directive
	        opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;

	        // force opt.space_after_anon_function to true if opt.jslint_happy
	        if(opt.jslint_happy) {
	            opt.space_after_anon_function = true;
	        }

	        if(options.indent_with_tabs){
	            opt.indent_char = '\t';
	            opt.indent_size = 1;
	        }

	        opt.eol = opt.eol.replace(/\\r/, '\r').replace(/\\n/, '\n')

	        //----------------------------------
	        indent_string = '';
	        while (opt.indent_size > 0) {
	            indent_string += opt.indent_char;
	            opt.indent_size -= 1;
	        }

	        var preindent_index = 0;
	        if(js_source_text && js_source_text.length) {
	            while ( (js_source_text.charAt(preindent_index) === ' ' ||
	                    js_source_text.charAt(preindent_index) === '\t')) {
	                baseIndentString += js_source_text.charAt(preindent_index);
	                preindent_index += 1;
	            }
	            js_source_text = js_source_text.substring(preindent_index);
	        }

	        last_type = 'TK_START_BLOCK'; // last token type
	        last_last_text = ''; // pre-last token text
	        output = new Output(indent_string, baseIndentString);

	        // If testing the ignore directive, start with output disable set to true
	        output.raw = opt.test_output_raw;


	        // Stack of parsing/formatting states, including MODE.
	        // We tokenize, parse, and output in an almost purely a forward-only stream of token input
	        // and formatted output.  This makes the beautifier less accurate than full parsers
	        // but also far more tolerant of syntax errors.
	        //
	        // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
	        // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
	        // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
	        // most full parsers would die, but the beautifier gracefully falls back to
	        // MODE.BlockStatement and continues on.
	        flag_store = [];
	        set_mode(MODE.BlockStatement);

	        this.beautify = function() {

	            /*jshint onevar:true */
	            var local_token, sweet_code;
	            Tokenizer = new tokenizer(js_source_text, opt, indent_string);
	            tokens = Tokenizer.tokenize();
	            token_pos = 0;

	            while (local_token = get_token()) {
	                for(var i = 0; i < local_token.comments_before.length; i++) {
	                    // The cleanest handling of inline comments is to treat them as though they aren't there.
	                    // Just continue formatting and the behavior should be logical.
	                    // Also ignore unknown tokens.  Again, this should result in better behavior.
	                    handle_token(local_token.comments_before[i]);
	                }
	                handle_token(local_token);

	                last_last_text = flags.last_text;
	                last_type = local_token.type;
	                flags.last_text = local_token.text;

	                token_pos += 1;
	            }

	            sweet_code = output.get_code();
	            if (opt.end_with_newline) {
	                sweet_code += '\n';
	            }

	            if (opt.eol != '\n') {
	                sweet_code = sweet_code.replace(/[\n]/g, opt.eol);
	            }

	            return sweet_code;
	        };

	        function handle_token(local_token) {
	            var newlines = local_token.newlines;
	            var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);

	            if (keep_whitespace) {
	                for (i = 0; i < newlines; i += 1) {
	                    print_newline(i > 0);
	                }
	            } else {
	                if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {
	                    newlines = opt.max_preserve_newlines;
	                }

	                if (opt.preserve_newlines) {
	                    if (local_token.newlines > 1) {
	                        print_newline();
	                        for (var i = 1; i < newlines; i += 1) {
	                            print_newline(true);
	                        }
	                    }
	                }
	            }

	            current_token = local_token;
	            handlers[current_token.type]();
	        }

	        // we could use just string.split, but
	        // IE doesn't like returning empty strings
	        function split_newlines(s) {
	            //return s.split(/\x0d\x0a|\x0a/);

	            s = s.replace(/\x0d/g, '');
	            var out = [],
	                idx = s.indexOf("\n");
	            while (idx !== -1) {
	                out.push(s.substring(0, idx));
	                s = s.substring(idx + 1);
	                idx = s.indexOf("\n");
	            }
	            if (s.length) {
	                out.push(s);
	            }
	            return out;
	        }

	        function allow_wrap_or_preserved_newline(force_linewrap) {
	            force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;

	            // Never wrap the first token on a line
	            if (output.just_added_newline()) {
	                return
	            }

	            if ((opt.preserve_newlines && current_token.wanted_newline) || force_linewrap) {
	                print_newline(false, true);
	            } else if (opt.wrap_line_length) {
	                var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +
	                    (output.space_before_token ? 1 : 0);
	                if (proposed_line_length >= opt.wrap_line_length) {
	                    print_newline(false, true);
	                }
	            }
	        }

	        function print_newline(force_newline, preserve_statement_flags) {
	            if (!preserve_statement_flags) {
	                if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {
	                    while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
	                        restore_mode();
	                    }
	                }
	            }

	            if (output.add_new_line(force_newline)) {
	                flags.multiline_frame = true;
	            }
	        }

	        function print_token_line_indentation() {
	            if (output.just_added_newline()) {
	                if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {
	                    output.current_line.push(current_token.whitespace_before);
	                    output.space_before_token = false;
	                } else if (output.set_indent(flags.indentation_level)) {
	                    flags.line_indent_level = flags.indentation_level;
	                }
	            }
	        }

	        function print_token(printable_token) {
	            if (output.raw) {
	                output.add_raw_token(current_token)
	                return;
	            }

	            if (opt.comma_first && last_type === 'TK_COMMA'
	                && output.just_added_newline()) {
	                if(output.previous_line.last() === ',') {
	                    output.previous_line.pop();
	                    print_token_line_indentation();
	                    output.add_token(',');
	                    output.space_before_token = true;
	                }
	            }

	            printable_token = printable_token || current_token.text;
	            print_token_line_indentation();
	            output.add_token(printable_token);
	        }

	        function indent() {
	            flags.indentation_level += 1;
	        }

	        function deindent() {
	            if (flags.indentation_level > 0 &&
	                ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level))
	                flags.indentation_level -= 1;
	        }

	        function set_mode(mode) {
	            if (flags) {
	                flag_store.push(flags);
	                previous_flags = flags;
	            } else {
	                previous_flags = create_flags(null, mode);
	            }

	            flags = create_flags(previous_flags, mode);
	        }

	        function is_array(mode) {
	            return mode === MODE.ArrayLiteral;
	        }

	        function is_expression(mode) {
	            return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
	        }

	        function restore_mode() {
	            if (flag_store.length > 0) {
	                previous_flags = flags;
	                flags = flag_store.pop();
	                if (previous_flags.mode === MODE.Statement) {
	                    output.remove_redundant_indentation(previous_flags);
	                }
	            }
	        }

	        function start_of_object_property() {
	            return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (
	                (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));
	        }

	        function start_of_statement() {
	            if (
	                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||
	                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||
	                    (last_type === 'TK_RESERVED' && flags.last_text === 'return' && !current_token.wanted_newline) ||
	                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' && !(current_token.type === 'TK_RESERVED' && current_token.text === 'if')) ||
	                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||
	                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement
	                        && !flags.in_case
	                        && !(current_token.text === '--' || current_token.text === '++')
	                        && last_last_text !== 'function'
	                        && current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||
	                    (flags.mode === MODE.ObjectLiteral && (
	                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))
	                ) {

	                set_mode(MODE.Statement);
	                indent();

	                if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {
	                    flags.declaration_statement = true;
	                }

	                // Issue #276:
	                // If starting a new statement with [if, for, while, do], push to a new line.
	                // if (a) if (b) if(c) d(); else e(); else f();
	                if (!start_of_object_property()) {
	                    allow_wrap_or_preserved_newline(
	                        current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));
	                }

	                return true;
	            }
	            return false;
	        }

	        function all_lines_start_with(lines, c) {
	            for (var i = 0; i < lines.length; i++) {
	                var line = trim(lines[i]);
	                if (line.charAt(0) !== c) {
	                    return false;
	                }
	            }
	            return true;
	        }

	        function each_line_matches_indent(lines, indent) {
	            var i = 0,
	                len = lines.length,
	                line;
	            for (; i < len; i++) {
	                line = lines[i];
	                // allow empty lines to pass through
	                if (line && line.indexOf(indent) !== 0) {
	                    return false;
	                }
	            }
	            return true;
	        }

	        function is_special_word(word) {
	            return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);
	        }

	        function get_token(offset) {
	            var index = token_pos + (offset || 0);
	            return (index < 0 || index >= tokens.length) ? null : tokens[index];
	        }

	        function handle_start_expr() {
	            if (start_of_statement()) {
	                // The conditional starts the statement if appropriate.
	            }

	            var next_mode = MODE.Expression;
	            if (current_token.text === '[') {

	                if (last_type === 'TK_WORD' || flags.last_text === ')') {
	                    // this is array index specifier, break immediately
	                    // a[x], fn()[x]
	                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {
	                        output.space_before_token = true;
	                    }
	                    set_mode(next_mode);
	                    print_token();
	                    indent();
	                    if (opt.space_in_paren) {
	                        output.space_before_token = true;
	                    }
	                    return;
	                }

	                next_mode = MODE.ArrayLiteral;
	                if (is_array(flags.mode)) {
	                    if (flags.last_text === '[' ||
	                        (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {
	                        // ], [ goes to new line
	                        // }, [ goes to new line
	                        if (!opt.keep_array_indentation) {
	                            print_newline();
	                        }
	                    }
	                }

	            } else {
	                if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {
	                    next_mode = MODE.ForInitializer;
	                } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {
	                    next_mode = MODE.Conditional;
	                } else {
	                    // next_mode = MODE.Expression;
	                }
	            }

	            if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {
	                print_newline();
	            } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {
	                // TODO: Consider whether forcing this is required.  Review failing tests when removed.
	                allow_wrap_or_preserved_newline(current_token.wanted_newline);
	                // do nothing on (( and )( and ][ and ]( and .(
	            } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {
	                output.space_before_token = true;
	            } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||
	                (flags.last_text === '*' && last_last_text === 'function')) {
	                // function() vs function ()
	                if (opt.space_after_anon_function) {
	                    output.space_before_token = true;
	                }
	            } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {
	                if (opt.space_before_conditional) {
	                    output.space_before_token = true;
	                }
	            }

	            // Should be a space between await and an IIFE
	            if(current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await'){
	                output.space_before_token = true;
	            }

	            // Support of this kind of newline preservation.
	            // a = (b &&
	            //     (c || d));
	            if (current_token.text === '(') {
	                if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                    if (!start_of_object_property()) {
	                        allow_wrap_or_preserved_newline();
	                    }
	                }
	            }

	            set_mode(next_mode);
	            print_token();
	            if (opt.space_in_paren) {
	                output.space_before_token = true;
	            }

	            // In all cases, if we newline while inside an expression it should be indented.
	            indent();
	        }

	        function handle_end_expr() {
	            // statements inside expressions are not valid syntax, but...
	            // statements must all be closed when their container closes
	            while (flags.mode === MODE.Statement) {
	                restore_mode();
	            }

	            if (flags.multiline_frame) {
	                allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);
	            }

	            if (opt.space_in_paren) {
	                if (last_type === 'TK_START_EXPR' && ! opt.space_in_empty_paren) {
	                    // () [] no inner space in empty parens like these, ever, ref #320
	                    output.trim();
	                    output.space_before_token = false;
	                } else {
	                    output.space_before_token = true;
	                }
	            }
	            if (current_token.text === ']' && opt.keep_array_indentation) {
	                print_token();
	                restore_mode();
	            } else {
	                restore_mode();
	                print_token();
	            }
	            output.remove_redundant_indentation(previous_flags);

	            // do {} while () // no statement required after
	            if (flags.do_while && previous_flags.mode === MODE.Conditional) {
	                previous_flags.mode = MODE.Expression;
	                flags.do_block = false;
	                flags.do_while = false;

	            }
	        }

	        function handle_start_block() {
	            // Check if this is should be treated as a ObjectLiteral
	            var next_token = get_token(1)
	            var second_token = get_token(2)
	            if (second_token && (
	                    (second_token.text === ':' && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED']))
	                    || (in_array(next_token.text, ['get', 'set']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))
	                )) {
	                // We don't support TypeScript,but we didn't break it for a very long time.
	                // We'll try to keep not breaking it.
	                if (!in_array(last_last_text, ['class','interface'])) {
	                    set_mode(MODE.ObjectLiteral);
	                } else {
	                    set_mode(MODE.BlockStatement);
	                }
	            } else {
	                set_mode(MODE.BlockStatement);
	            }

	            var empty_braces = !next_token.comments_before.length &&  next_token.text === '}';
	            var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&
	                last_type === 'TK_END_EXPR';

	            if (opt.brace_style === "expand" ||
	                (opt.brace_style === "none" && current_token.wanted_newline)) {
	                if (last_type !== 'TK_OPERATOR' &&
	                    (empty_anonymous_function ||
	                        last_type === 'TK_EQUALS' ||
	                        (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {
	                    output.space_before_token = true;
	                } else {
	                    print_newline(false, true);
	                }
	            } else { // collapse
	                if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {
	                    if (last_type === 'TK_START_BLOCK') {
	                        print_newline();
	                    } else {
	                        output.space_before_token = true;
	                    }
	                } else {
	                    // if TK_OPERATOR or TK_START_EXPR
	                    if (is_array(previous_flags.mode) && flags.last_text === ',') {
	                        if (last_last_text === '}') {
	                            // }, { in array context
	                            output.space_before_token = true;
	                        } else {
	                            print_newline(); // [a, b, c, {
	                        }
	                    }
	                }
	            }
	            print_token();
	            indent();
	        }

	        function handle_end_block() {
	            // statements must all be closed when their container closes
	            while (flags.mode === MODE.Statement) {
	                restore_mode();
	            }
	            var empty_braces = last_type === 'TK_START_BLOCK';

	            if (opt.brace_style === "expand") {
	                if (!empty_braces) {
	                    print_newline();
	                }
	            } else {
	                // skip {}
	                if (!empty_braces) {
	                    if (is_array(flags.mode) && opt.keep_array_indentation) {
	                        // we REALLY need a newline here, but newliner would skip that
	                        opt.keep_array_indentation = false;
	                        print_newline();
	                        opt.keep_array_indentation = true;

	                    } else {
	                        print_newline();
	                    }
	                }
	            }
	            restore_mode();
	            print_token();
	        }

	        function handle_word() {
	            if (current_token.type === 'TK_RESERVED' && flags.mode !== MODE.ObjectLiteral &&
	                in_array(current_token.text, ['set', 'get'])) {
	                current_token.type = 'TK_WORD';
	            }

	            if (current_token.type === 'TK_RESERVED' && flags.mode === MODE.ObjectLiteral) {
	                var next_token = get_token(1);
	                if (next_token.text == ':') {
	                    current_token.type = 'TK_WORD';
	                }
	            }

	            if (start_of_statement()) {
	                // The conditional starts the statement if appropriate.
	            } else if (current_token.wanted_newline && !is_expression(flags.mode) &&
	                (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&
	                last_type !== 'TK_EQUALS' &&
	                (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {

	                print_newline();
	            }

	            if (flags.do_block && !flags.do_while) {
	                if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {
	                    // do {} ## while ()
	                    output.space_before_token = true;
	                    print_token();
	                    output.space_before_token = true;
	                    flags.do_while = true;
	                    return;
	                } else {
	                    // do {} should always have while as the next word.
	                    // if we don't see the expected while, recover
	                    print_newline();
	                    flags.do_block = false;
	                }
	            }

	            // if may be followed by else, or not
	            // Bare/inline ifs are tricky
	            // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
	            if (flags.if_block) {
	                if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {
	                    flags.else_block = true;
	                } else {
	                    while (flags.mode === MODE.Statement) {
	                        restore_mode();
	                    }
	                    flags.if_block = false;
	                    flags.else_block = false;
	                }
	            }

	            if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {
	                print_newline();
	                if (flags.case_body || opt.jslint_happy) {
	                    // switch cases following one another
	                    deindent();
	                    flags.case_body = false;
	                }
	                print_token();
	                flags.in_case = true;
	                flags.in_case_statement = true;
	                return;
	            }

	            if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {
	                if (in_array(flags.last_text, ['}', ';']) || (output.just_added_newline() && ! in_array(flags.last_text, ['[', '{', ':', '=', ',']))) {
	                    // make sure there is a nice clean space of at least one blank line
	                    // before a new function definition
	                    if ( !output.just_added_blankline() && !current_token.comments_before.length) {
	                        print_newline();
	                        print_newline(true);
	                    }
	                }
	                if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
	                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {
	                        output.space_before_token = true;
	                    } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {
	                        output.space_before_token = true;
	                    } else {
	                        print_newline();
	                    }
	                } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {
	                    // foo = function
	                    output.space_before_token = true;
	                } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {
	                    // (function
	                } else {
	                    print_newline();
	                }
	            }

	            if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                if (!start_of_object_property()) {
	                    allow_wrap_or_preserved_newline();
	                }
	            }

	            if (current_token.type === 'TK_RESERVED' &&  in_array(current_token.text, ['function', 'get', 'set'])) {
	                print_token();
	                flags.last_word = current_token.text;
	                return;
	            }

	            prefix = 'NONE';

	            if (last_type === 'TK_END_BLOCK') {
	                if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally']))) {
	                    prefix = 'NEWLINE';
	                } else {
	                    if (opt.brace_style === "expand" ||
	                        opt.brace_style === "end-expand" ||
	                        (opt.brace_style === "none" && current_token.wanted_newline)) {
	                        prefix = 'NEWLINE';
	                    } else {
	                        prefix = 'SPACE';
	                        output.space_before_token = true;
	                    }
	                }
	            } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {
	                // TODO: Should this be for STATEMENT as well?
	                prefix = 'NEWLINE';
	            } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {
	                prefix = 'SPACE';
	            } else if (last_type === 'TK_STRING') {
	                prefix = 'NEWLINE';
	            } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||
	                (flags.last_text === '*' && last_last_text === 'function')) {
	                prefix = 'SPACE';
	            } else if (last_type === 'TK_START_BLOCK') {
	                prefix = 'NEWLINE';
	            } else if (last_type === 'TK_END_EXPR') {
	                output.space_before_token = true;
	                prefix = 'NEWLINE';
	            }

	            if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
	                if (flags.last_text === 'else' || flags.last_text === 'export') {
	                    prefix = 'SPACE';
	                } else {
	                    prefix = 'NEWLINE';
	                }

	            }

	            if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {
	                if (last_type !== 'TK_END_BLOCK' ||
	                    opt.brace_style === "expand" ||
	                    opt.brace_style === "end-expand" ||
	                    (opt.brace_style === "none" && current_token.wanted_newline)) {
	                    print_newline();
	                } else {
	                    output.trim(true);
	                    var line = output.current_line;
	                    // If we trimmed and there's something other than a close block before us
	                    // put a newline back in.  Handles '} // comment' scenario.
	                    if (line.last() !== '}') {
	                        print_newline();
	                    }
	                    output.space_before_token = true;
	                }
	            } else if (prefix === 'NEWLINE') {
	                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                    // no newline between 'return nnn'
	                    output.space_before_token = true;
	                } else if (last_type !== 'TK_END_EXPR') {
	                    if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {
	                        // no need to force newline on 'var': for (var x = 0...)
	                        if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {
	                            // no newline for } else if {
	                            output.space_before_token = true;
	                        } else {
	                            print_newline();
	                        }
	                    }
	                } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
	                    print_newline();
	                }
	            } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {
	                print_newline(); // }, in lists get a newline treatment
	            } else if (prefix === 'SPACE') {
	                output.space_before_token = true;
	            }
	            print_token();
	            flags.last_word = current_token.text;

	            if (current_token.type === 'TK_RESERVED' && current_token.text === 'do') {
	                flags.do_block = true;
	            }

	            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if') {
	                flags.if_block = true;
	            }
	        }

	        function handle_semicolon() {
	            if (start_of_statement()) {
	                // The conditional starts the statement if appropriate.
	                // Semicolon can be the start (and end) of a statement
	                output.space_before_token = false;
	            }
	            while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
	                restore_mode();
	            }
	            print_token();
	        }

	        function handle_string() {
	            if (start_of_statement()) {
	                // The conditional starts the statement if appropriate.
	                // One difference - strings want at least a space before
	                output.space_before_token = true;
	            } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
	                output.space_before_token = true;
	            } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                if (!start_of_object_property()) {
	                    allow_wrap_or_preserved_newline();
	                }
	            } else {
	                print_newline();
	            }
	            print_token();
	        }

	        function handle_equals() {
	            if (start_of_statement()) {
	                // The conditional starts the statement if appropriate.
	            }

	            if (flags.declaration_statement) {
	                // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
	                flags.declaration_assignment = true;
	            }
	            output.space_before_token = true;
	            print_token();
	            output.space_before_token = true;
	        }

	        function handle_comma() {
	            if (flags.declaration_statement) {
	                if (is_expression(flags.parent.mode)) {
	                    // do not break on comma, for(var a = 1, b = 2)
	                    flags.declaration_assignment = false;
	                }

	                print_token();

	                if (flags.declaration_assignment) {
	                    flags.declaration_assignment = false;
	                    print_newline(false, true);
	                } else {
	                    output.space_before_token = true;
	                    // for comma-first, we want to allow a newline before the comma
	                    // to turn into a newline after the comma, which we will fixup later
	                    if (opt.comma_first) {
	                        allow_wrap_or_preserved_newline();
	                    }
	                }
	                return;
	            }

	            print_token();
	            if (flags.mode === MODE.ObjectLiteral ||
	                (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {
	                if (flags.mode === MODE.Statement) {
	                    restore_mode();
	                }
	                print_newline();
	            } else {
	                // EXPR or DO_BLOCK
	                output.space_before_token = true;
	                // for comma-first, we want to allow a newline before the comma
	                // to turn into a newline after the comma, which we will fixup later
	                if (opt.comma_first) {
	                    allow_wrap_or_preserved_newline();
	                }
	            }

	        }

	        function handle_operator() {
	            if (start_of_statement()) {
	                // The conditional starts the statement if appropriate.
	            }

	            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                // "return" had a special handling in TK_WORD. Now we need to return the favor
	                output.space_before_token = true;
	                print_token();
	                return;
	            }

	            // hack for actionscript's import .*;
	            if (current_token.text === '*' && last_type === 'TK_DOT') {
	                print_token();
	                return;
	            }

	            if (current_token.text === ':' && flags.in_case) {
	                flags.case_body = true;
	                indent();
	                print_token();
	                print_newline();
	                flags.in_case = false;
	                return;
	            }

	            if (current_token.text === '::') {
	                // no spaces around exotic namespacing syntax operator
	                print_token();
	                return;
	            }

	            // Allow line wrapping between operators
	            if (last_type === 'TK_OPERATOR') {
	                allow_wrap_or_preserved_newline();
	            }

	            var space_before = true;
	            var space_after = true;

	            if (in_array(current_token.text, ['--', '++', '!', '~']) || (in_array(current_token.text, ['-', '+']) && (in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) || in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === ','))) {
	                // unary operators (and binary +/- pretending to be unary) special cases

	                space_before = false;
	                space_after = false;

	                // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
	                // if there is a newline between -- or ++ and anything else we should preserve it.
	                if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {
	                    print_newline(false, true);
	                }

	                if (flags.last_text === ';' && is_expression(flags.mode)) {
	                    // for (;; ++i)
	                    //        ^^^
	                    space_before = true;
	                }

	                if (last_type === 'TK_RESERVED') {
	                    space_before = true;
	                } else if (last_type === 'TK_END_EXPR') {
	                    space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));
	                } else if (last_type === 'TK_OPERATOR') {
	                    // a++ + ++b;
	                    // a - -b
	                    space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);
	                    // + and - are not unary when preceeded by -- or ++ operator
	                    // a-- + b
	                    // a * +b
	                    // a - -b
	                    if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {
	                        space_after = true;
	                    }
	                }

	                if ((flags.mode === MODE.BlockStatement || flags.mode === MODE.Statement) && (flags.last_text === '{' || flags.last_text === ';')) {
	                    // { foo; --i }
	                    // foo(); --bar;
	                    print_newline();
	                }
	            } else if (current_token.text === ':') {
	                if (flags.ternary_depth === 0) {
	                    // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
	                    space_before = false;
	                } else {
	                    flags.ternary_depth -= 1;
	                }
	            } else if (current_token.text === '?') {
	                flags.ternary_depth += 1;
	            } else if (current_token.text === '*' && last_type === 'TK_RESERVED' && flags.last_text === 'function') {
	                space_before = false;
	                space_after = false;
	            }
	            output.space_before_token = output.space_before_token || space_before;
	            print_token();
	            output.space_before_token = space_after;
	        }

	        function handle_block_comment() {
	            if (output.raw) {
	                output.add_raw_token(current_token)
	                if (current_token.directives && current_token.directives['preserve'] === 'end') {
	                    // If we're testing the raw output behavior, do not allow a directive to turn it off.
	                    if (!opt.test_output_raw) {
	                        output.raw = false;
	                    }
	                }
	                return;
	            }

	            if (current_token.directives) {
	                print_newline(false, true);
	                print_token();
	                if (current_token.directives['preserve'] === 'start') {
	                    output.raw = true;
	                }
	                print_newline(false, true);
	                return;
	            }

	            // inline block
	            if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {
	                output.space_before_token = true;
	                print_token();
	                output.space_before_token = true;
	                return;
	            }

	            var lines = split_newlines(current_token.text);
	            var j; // iterator for this case
	            var javadoc = false;
	            var starless = false;
	            var lastIndent = current_token.whitespace_before;
	            var lastIndentLength = lastIndent.length;

	            // block comment starts with a new line
	            print_newline(false, true);
	            if (lines.length > 1) {
	                if (all_lines_start_with(lines.slice(1), '*')) {
	                    javadoc = true;
	                }
	                else if (each_line_matches_indent(lines.slice(1), lastIndent)) {
	                    starless = true;
	                }
	            }

	            // first line always indented
	            print_token(lines[0]);
	            for (j = 1; j < lines.length; j++) {
	                print_newline(false, true);
	                if (javadoc) {
	                    // javadoc: reformat and re-indent
	                    print_token(' ' + ltrim(lines[j]));
	                } else if (starless && lines[j].length > lastIndentLength) {
	                    // starless: re-indent non-empty content, avoiding trim
	                    print_token(lines[j].substring(lastIndentLength));
	                } else {
	                    // normal comments output raw
	                    output.add_token(lines[j]);
	                }
	            }

	            // for comments of more than one line, make sure there's a new line after
	            print_newline(false, true);
	        }

	        function handle_comment() {
	            if (current_token.wanted_newline) {
	                print_newline(false, true);
	            } else {
	                output.trim(true);
	            }

	            output.space_before_token = true;
	            print_token();
	            print_newline(false, true);
	        }

	        function handle_dot() {
	            if (start_of_statement()) {
	                // The conditional starts the statement if appropriate.
	            }

	            if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                output.space_before_token = true;
	            } else {
	                // allow preserved newlines before dots in general
	                // force newlines on dots after close paren when break_chained - for bar().baz()
	                allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);
	            }

	            print_token();
	        }

	        function handle_unknown() {
	            print_token();

	            if (current_token.text[current_token.text.length - 1] === '\n') {
	                print_newline();
	            }
	        }

	        function handle_eof() {
	            // Unwind any open statements
	            while (flags.mode === MODE.Statement) {
	                restore_mode();
	            }
	        }
	    }


	    function OutputLine(parent) {
	        var _character_count = 0;
	        // use indent_count as a marker for lines that have preserved indentation
	        var _indent_count = -1;

	        var _items = [];
	        var _empty = true;

	        this.set_indent = function(level) {
	            _character_count = parent.baseIndentLength + level * parent.indent_length
	            _indent_count = level;
	        }

	        this.get_character_count = function() {
	            return _character_count;
	        }

	        this.is_empty = function() {
	            return _empty;
	        }

	        this.last = function() {
	            if (!this._empty) {
	              return _items[_items.length - 1];
	            } else {
	              return null;
	            }
	        }

	        this.push = function(input) {
	            _items.push(input);
	            _character_count += input.length;
	            _empty = false;
	        }

	        this.pop = function() {
	            var item = null;
	            if (!_empty) {
	                item = _items.pop();
	                _character_count -= item.length;
	                _empty = _items.length === 0;
	            }
	            return item;
	        }

	        this.remove_indent = function() {
	            if (_indent_count > 0) {
	                _indent_count -= 1;
	                _character_count -= parent.indent_length
	            }
	        }

	        this.trim = function() {
	            while (this.last() === ' ') {
	                var item = _items.pop();
	                _character_count -= 1;
	            }
	            _empty = _items.length === 0;
	        }

	        this.toString = function() {
	            var result = '';
	            if (!this._empty) {
	                if (_indent_count >= 0) {
	                    result = parent.indent_cache[_indent_count];
	                }
	                result += _items.join('')
	            }
	            return result;
	        }
	    }

	    function Output(indent_string, baseIndentString) {
	        baseIndentString = baseIndentString || '';
	        this.indent_cache = [ baseIndentString ];
	        this.baseIndentLength = baseIndentString.length;
	        this.indent_length = indent_string.length;
	        this.raw = false;

	        var lines =[];
	        this.baseIndentString = baseIndentString;
	        this.indent_string = indent_string;
	        this.previous_line = null;
	        this.current_line = null;
	        this.space_before_token = false;

	        this.add_outputline = function() {
	            this.previous_line = this.current_line;
	            this.current_line = new OutputLine(this);
	            lines.push(this.current_line);
	        }

	        // initialize
	        this.add_outputline();


	        this.get_line_number = function() {
	            return lines.length;
	        }

	        // Using object instead of string to allow for later expansion of info about each line
	        this.add_new_line = function(force_newline) {
	            if (this.get_line_number() === 1 && this.just_added_newline()) {
	                return false; // no newline on start of file
	            }

	            if (force_newline || !this.just_added_newline()) {
	                if (!this.raw) {
	                    this.add_outputline();
	                }
	                return true;
	            }

	            return false;
	        }

	        this.get_code = function() {
	            var sweet_code = lines.join('\n').replace(/[\r\n\t ]+$/, '');
	            return sweet_code;
	        }

	        this.set_indent = function(level) {
	            // Never indent your first output indent at the start of the file
	            if (lines.length > 1) {
	                while(level >= this.indent_cache.length) {
	                    this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);
	                }

	                this.current_line.set_indent(level);
	                return true;
	            }
	            this.current_line.set_indent(0);
	            return false;
	        }

	        this.add_raw_token = function(token) {
	            for (var x = 0; x < token.newlines; x++) {
	                this.add_outputline();
	            }
	            this.current_line.push(token.whitespace_before);
	            this.current_line.push(token.text);
	            this.space_before_token = false;
	        }

	        this.add_token = function(printable_token) {
	            this.add_space_before_token();
	            this.current_line.push(printable_token);
	        }

	        this.add_space_before_token = function() {
	            if (this.space_before_token && !this.just_added_newline()) {
	                this.current_line.push(' ');
	            }
	            this.space_before_token = false;
	        }

	        this.remove_redundant_indentation = function (frame) {
	            // This implementation is effective but has some issues:
	            //     - can cause line wrap to happen too soon due to indent removal
	            //           after wrap points are calculated
	            // These issues are minor compared to ugly indentation.

	            if (frame.multiline_frame ||
	                frame.mode === MODE.ForInitializer ||
	                frame.mode === MODE.Conditional) {
	                return;
	            }

	            // remove one indent from each line inside this section
	            var index = frame.start_line_index;
	            var line;

	            var output_length = lines.length;
	            while (index < output_length) {
	                lines[index].remove_indent();
	                index++;
	            }
	        }

	        this.trim = function(eat_newlines) {
	            eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

	            this.current_line.trim(indent_string, baseIndentString);

	            while (eat_newlines && lines.length > 1 &&
	                this.current_line.is_empty()) {
	                lines.pop();
	                this.current_line = lines[lines.length - 1]
	                this.current_line.trim();
	            }

	            this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;
	        }

	        this.just_added_newline = function() {
	            return this.current_line.is_empty();
	        }

	        this.just_added_blankline = function() {
	            if (this.just_added_newline()) {
	                if (lines.length === 1) {
	                    return true; // start of the file and newline = blank
	                }

	                var line = lines[lines.length - 2];
	                return line.is_empty();
	            }
	            return false;
	        }
	    }


	    var Token = function(type, text, newlines, whitespace_before, mode, parent) {
	        this.type = type;
	        this.text = text;
	        this.comments_before = [];
	        this.newlines = newlines || 0;
	        this.wanted_newline = newlines > 0;
	        this.whitespace_before = whitespace_before || '';
	        this.parent = null;
	        this.directives = null;
	    }

	    function tokenizer(input, opts, indent_string) {

	        var whitespace = "\n\r\t ".split('');
	        var digit = /[0-9]/;
	        var digit_hex = /[0123456789abcdefABCDEF]/;

	        var punct = ('+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! ~ , : ? ^ ^= |= :: =>'
	                +' <%= <% %> <?= <? ?>').split(' '); // try to be a good boy and try not to break the markup language identifiers

	        // words which should always start on new line.
	        this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
	        var reserved_words = this.line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await']);

	        //  /* ... */ comment ends with nearest */ or end of file
	        var block_comment_pattern = /([\s\S]*?)((?:\*\/)|$)/g;

	        // comment ends just before nearest linefeed or end of file
	        var comment_pattern = /([^\n\r\u2028\u2029]*)/g;

	        var directives_block_pattern = /\/\* beautify( \w+[:]\w+)+ \*\//g;
	        var directive_pattern = / (\w+)[:](\w+)/g;
	        var directives_end_ignore_pattern = /([\s\S]*?)((?:\/\*\sbeautify\signore:end\s\*\/)|$)/g;

	        var template_pattern = /((<\?php|<\?=)[\s\S]*?\?>)|(<%[\s\S]*?%>)/g

	        var n_newlines, whitespace_before_token, in_html_comment, tokens, parser_pos;
	        var input_length;

	        this.tokenize = function() {
	            // cache the source's length.
	            input_length = input.length
	            parser_pos = 0;
	            in_html_comment = false
	            tokens = [];

	            var next, last;
	            var token_values;
	            var open = null;
	            var open_stack = [];
	            var comments = [];

	            while (!(last && last.type === 'TK_EOF')) {
	                token_values = tokenize_next();
	                next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
	                while(next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {
	                    if (next.type === 'TK_BLOCK_COMMENT') {
	                        next.directives = token_values[2];
	                    }
	                    comments.push(next);
	                    token_values = tokenize_next();
	                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
	                }

	                if (comments.length) {
	                    next.comments_before = comments;
	                    comments = [];
	                }

	                if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {
	                    next.parent = last;
	                    open_stack.push(open);
	                    open = next;
	                }  else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&
	                    (open && (
	                        (next.text === ']' && open.text === '[') ||
	                        (next.text === ')' && open.text === '(') ||
	                        (next.text === '}' && open.text === '{')))) {
	                    next.parent = open.parent;
	                    open = open_stack.pop();
	                }

	                tokens.push(next);
	                last = next;
	            }

	            return tokens;
	        }

	        function get_directives (text) {
	            if (!text.match(directives_block_pattern)) {
	                return null;
	            }

	            var directives = {};
	            directive_pattern.lastIndex = 0;
	            var directive_match = directive_pattern.exec(text);

	            while (directive_match) {
	                directives[directive_match[1]] = directive_match[2];
	                directive_match = directive_pattern.exec(text);
	            }

	            return directives;
	        }

	        function tokenize_next() {
	            var i, resulting_string;
	            var whitespace_on_this_line = [];

	            n_newlines = 0;
	            whitespace_before_token = '';

	            if (parser_pos >= input_length) {
	                return ['', 'TK_EOF'];
	            }

	            var last_token;
	            if (tokens.length) {
	                last_token = tokens[tokens.length-1];
	            } else {
	                // For the sake of tokenizing we can pretend that there was on open brace to start
	                last_token = new Token('TK_START_BLOCK', '{');
	            }


	            var c = input.charAt(parser_pos);
	            parser_pos += 1;

	            while (in_array(c, whitespace)) {

	                if (acorn.newline.test(c)) {
	                    if (!(c === '\n' && input.charAt(parser_pos-2) === '\r')) {
	                        n_newlines += 1;
	                        whitespace_on_this_line = [];
	                    }
	                } else {
	                    whitespace_on_this_line.push(c);
	                }

	                if (parser_pos >= input_length) {
	                    return ['', 'TK_EOF'];
	                }

	                c = input.charAt(parser_pos);
	                parser_pos += 1;
	            }

	            if(whitespace_on_this_line.length) {
	                whitespace_before_token = whitespace_on_this_line.join('');
	            }

	            if (digit.test(c)) {
	                var allow_decimal = true;
	                var allow_e = true;
	                var local_digit = digit;

	                if (c === '0' && parser_pos < input_length && /[Xx]/.test(input.charAt(parser_pos))) {
	                    // switch to hex number, no decimal or e, just hex digits
	                    allow_decimal = false;
	                    allow_e = false;
	                    c += input.charAt(parser_pos);
	                    parser_pos += 1;
	                    local_digit = digit_hex
	                } else {
	                    // we know this first loop will run.  It keeps the logic simpler.
	                    c = '';
	                    parser_pos -= 1
	                }

	                // Add the digits
	                while (parser_pos < input_length && local_digit.test(input.charAt(parser_pos))) {
	                    c += input.charAt(parser_pos);
	                    parser_pos += 1;

	                    if (allow_decimal && parser_pos < input_length && input.charAt(parser_pos) === '.') {
	                        c += input.charAt(parser_pos);
	                        parser_pos += 1;
	                        allow_decimal = false;
	                    }

	                    if (allow_e && parser_pos < input_length && /[Ee]/.test(input.charAt(parser_pos))) {
	                        c += input.charAt(parser_pos);
	                        parser_pos += 1;

	                        if (parser_pos < input_length && /[+-]/.test(input.charAt(parser_pos))) {
	                            c += input.charAt(parser_pos);
	                            parser_pos += 1;
	                        }

	                        allow_e = false;
	                        allow_decimal = false;
	                    }
	                }

	                return [c, 'TK_WORD'];
	            }

	            if (acorn.isIdentifierStart(input.charCodeAt(parser_pos-1))) {
	                if (parser_pos < input_length) {
	                    while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {
	                        c += input.charAt(parser_pos);
	                        parser_pos += 1;
	                        if (parser_pos === input_length) {
	                            break;
	                        }
	                    }
	                }

	                if (!(last_token.type === 'TK_DOT' ||
	                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get'])))
	                    && in_array(c, reserved_words)) {
	                    if (c === 'in') { // hack for 'in' operator
	                        return [c, 'TK_OPERATOR'];
	                    }
	                    return [c, 'TK_RESERVED'];
	                }

	                return [c, 'TK_WORD'];
	            }

	            if (c === '(' || c === '[') {
	                return [c, 'TK_START_EXPR'];
	            }

	            if (c === ')' || c === ']') {
	                return [c, 'TK_END_EXPR'];
	            }

	            if (c === '{') {
	                return [c, 'TK_START_BLOCK'];
	            }

	            if (c === '}') {
	                return [c, 'TK_END_BLOCK'];
	            }

	            if (c === ';') {
	                return [c, 'TK_SEMICOLON'];
	            }

	            if (c === '/') {
	                var comment = '';
	                // peek for comment /* ... */
	                if (input.charAt(parser_pos) === '*') {
	                    parser_pos += 1;
	                    block_comment_pattern.lastIndex = parser_pos;
	                    var comment_match = block_comment_pattern.exec(input);
	                    comment = '/*' + comment_match[0];
	                    parser_pos += comment_match[0].length;
	                    var directives = get_directives(comment);
	                    if (directives && directives['ignore'] === 'start') {
	                        directives_end_ignore_pattern.lastIndex = parser_pos;
	                        comment_match = directives_end_ignore_pattern.exec(input)
	                        comment += comment_match[0];
	                        parser_pos += comment_match[0].length;
	                    }
	                    comment = comment.replace(acorn.lineBreak, '\n');
	                    return [comment, 'TK_BLOCK_COMMENT', directives];
	                }
	                // peek for comment // ...
	                if (input.charAt(parser_pos) === '/') {
	                    parser_pos += 1;
	                    comment_pattern.lastIndex = parser_pos;
	                    var comment_match = comment_pattern.exec(input);
	                    comment = '//' + comment_match[0];
	                    parser_pos += comment_match[0].length;
	                    return [comment, 'TK_COMMENT'];
	                }

	            }

	            if (c === '`' || c === "'" || c === '"' || // string
	                (
	                    (c === '/') || // regexp
	                    (opts.e4x && c === "<" && input.slice(parser_pos - 1).match(/^<([-a-zA-Z:0-9_.]+|{[^{}]*}|!\[CDATA\[[\s\S]*?\]\])(\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{.*?}))*\s*(\/?)\s*>/)) // xml
	                ) && ( // regex and xml can only appear in specific locations during parsing
	                    (last_token.type === 'TK_RESERVED' && in_array(last_token.text , ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
	                    (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&
	                        last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||
	                    (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',
	                        'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'
	                    ]))
	                )) {

	                var sep = c,
	                    esc = false,
	                    has_char_escapes = false;

	                resulting_string = c;

	                if (sep === '/') {
	                    //
	                    // handle regexp
	                    //
	                    var in_char_class = false;
	                    while (parser_pos < input_length &&
	                            ((esc || in_char_class || input.charAt(parser_pos) !== sep) &&
	                            !acorn.newline.test(input.charAt(parser_pos)))) {
	                        resulting_string += input.charAt(parser_pos);
	                        if (!esc) {
	                            esc = input.charAt(parser_pos) === '\\';
	                            if (input.charAt(parser_pos) === '[') {
	                                in_char_class = true;
	                            } else if (input.charAt(parser_pos) === ']') {
	                                in_char_class = false;
	                            }
	                        } else {
	                            esc = false;
	                        }
	                        parser_pos += 1;
	                    }
	                } else if (opts.e4x && sep === '<') {
	                    //
	                    // handle e4x xml literals
	                    //
	                    var xmlRegExp = /<(\/?)([-a-zA-Z:0-9_.]+|{[^{}]*}|!\[CDATA\[[\s\S]*?\]\])(\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{.*?}))*\s*(\/?)\s*>/g;
	                    var xmlStr = input.slice(parser_pos - 1);
	                    var match = xmlRegExp.exec(xmlStr);
	                    if (match && match.index === 0) {
	                        var rootTag = match[2];
	                        var depth = 0;
	                        while (match) {
	                            var isEndTag = !! match[1];
	                            var tagName = match[2];
	                            var isSingletonTag = ( !! match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
	                            if (tagName === rootTag && !isSingletonTag) {
	                                if (isEndTag) {
	                                    --depth;
	                                } else {
	                                    ++depth;
	                                }
	                            }
	                            if (depth <= 0) {
	                                break;
	                            }
	                            match = xmlRegExp.exec(xmlStr);
	                        }
	                        var xmlLength = match ? match.index + match[0].length : xmlStr.length;
	                        xmlStr = xmlStr.slice(0, xmlLength);
	                        parser_pos += xmlLength - 1;
	                        xmlStr = xmlStr.replace(acorn.lineBreak, '\n');
	                        return [xmlStr, "TK_STRING"];
	                    }
	                } else {
	                    //
	                    // handle string
	                    //
	                    // Template strings can travers lines without escape characters.
	                    // Other strings cannot
	                    while (parser_pos < input_length &&
	                            (esc || (input.charAt(parser_pos) !== sep &&
	                            (sep === '`' || !acorn.newline.test(input.charAt(parser_pos)))))) {
	                        // Handle \r\n linebreaks after escapes or in template strings
	                        if ((esc || sep === '`') && acorn.newline.test(input.charAt(parser_pos))) {
	                            if (input.charAt(parser_pos) === '\r' && input.charAt(parser_pos + 1) === '\n') {
	                                parser_pos += 1;
	                            }
	                            resulting_string += '\n';
	                        } else {
	                            resulting_string += input.charAt(parser_pos);
	                        }
	                        if (esc) {
	                            if (input.charAt(parser_pos) === 'x' || input.charAt(parser_pos) === 'u') {
	                                has_char_escapes = true;
	                            }
	                            esc = false;
	                        } else {
	                            esc = input.charAt(parser_pos) === '\\';
	                        }
	                        parser_pos += 1;
	                    }

	                }

	                if (has_char_escapes && opts.unescape_strings) {
	                    resulting_string = unescape_string(resulting_string);
	                }

	                if (parser_pos < input_length && input.charAt(parser_pos) === sep) {
	                    resulting_string += sep;
	                    parser_pos += 1;

	                    if (sep === '/') {
	                        // regexps may have modifiers /regexp/MOD , so fetch those, too
	                        // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
	                        while (parser_pos < input_length && acorn.isIdentifierStart(input.charCodeAt(parser_pos))) {
	                            resulting_string += input.charAt(parser_pos);
	                            parser_pos += 1;
	                        }
	                    }
	                }
	                return [resulting_string, 'TK_STRING'];
	            }

	            if (c === '#') {

	                if (tokens.length === 0 && input.charAt(parser_pos) === '!') {
	                    // shebang
	                    resulting_string = c;
	                    while (parser_pos < input_length && c !== '\n') {
	                        c = input.charAt(parser_pos);
	                        resulting_string += c;
	                        parser_pos += 1;
	                    }
	                    return [trim(resulting_string) + '\n', 'TK_UNKNOWN'];
	                }



	                // Spidermonkey-specific sharp variables for circular references
	                // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript
	                // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935
	                var sharp = '#';
	                if (parser_pos < input_length && digit.test(input.charAt(parser_pos))) {
	                    do {
	                        c = input.charAt(parser_pos);
	                        sharp += c;
	                        parser_pos += 1;
	                    } while (parser_pos < input_length && c !== '#' && c !== '=');
	                    if (c === '#') {
	                        //
	                    } else if (input.charAt(parser_pos) === '[' && input.charAt(parser_pos + 1) === ']') {
	                        sharp += '[]';
	                        parser_pos += 2;
	                    } else if (input.charAt(parser_pos) === '{' && input.charAt(parser_pos + 1) === '}') {
	                        sharp += '{}';
	                        parser_pos += 2;
	                    }
	                    return [sharp, 'TK_WORD'];
	                }
	            }

	            if (c === '<' && (input.charAt(parser_pos) === '?' || input.charAt(parser_pos) === '%')) {
	                template_pattern.lastIndex = parser_pos - 1;
	                var template_match = template_pattern.exec(input);
	                if(template_match) {
	                    c = template_match[0];
	                    parser_pos += c.length - 1;
	                    c = c.replace(acorn.lineBreak, '\n');
	                    return [c, 'TK_STRING'];
	                }
	            }

	            if (c === '<' && input.substring(parser_pos - 1, parser_pos + 3) === '<!--') {
	                parser_pos += 3;
	                c = '<!--';
	                while (!acorn.newline.test(input.charAt(parser_pos)) && parser_pos < input_length) {
	                    c += input.charAt(parser_pos);
	                    parser_pos++;
	                }
	                in_html_comment = true;
	                return [c, 'TK_COMMENT'];
	            }

	            if (c === '-' && in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === '-->') {
	                in_html_comment = false;
	                parser_pos += 2;
	                return ['-->', 'TK_COMMENT'];
	            }

	            if (c === '.') {
	                return [c, 'TK_DOT'];
	            }

	            if (in_array(c, punct)) {
	                while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {
	                    c += input.charAt(parser_pos);
	                    parser_pos += 1;
	                    if (parser_pos >= input_length) {
	                        break;
	                    }
	                }

	                if (c === ',') {
	                    return [c, 'TK_COMMA'];
	                } else if (c === '=') {
	                    return [c, 'TK_EQUALS'];
	                } else {
	                    return [c, 'TK_OPERATOR'];
	                }
	            }

	            return [c, 'TK_UNKNOWN'];
	        }


	        function unescape_string(s) {
	            var esc = false,
	                out = '',
	                pos = 0,
	                s_hex = '',
	                escaped = 0,
	                c;

	            while (esc || pos < s.length) {

	                c = s.charAt(pos);
	                pos++;

	                if (esc) {
	                    esc = false;
	                    if (c === 'x') {
	                        // simple hex-escape \x24
	                        s_hex = s.substr(pos, 2);
	                        pos += 2;
	                    } else if (c === 'u') {
	                        // unicode-escape, \u2134
	                        s_hex = s.substr(pos, 4);
	                        pos += 4;
	                    } else {
	                        // some common escape, e.g \n
	                        out += '\\' + c;
	                        continue;
	                    }
	                    if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {
	                        // some weird escaping, bail out,
	                        // leaving whole string intact
	                        return s;
	                    }

	                    escaped = parseInt(s_hex, 16);

	                    if (escaped >= 0x00 && escaped < 0x20) {
	                        // leave 0x00...0x1f escaped
	                        if (c === 'x') {
	                            out += '\\x' + s_hex;
	                        } else {
	                            out += '\\u' + s_hex;
	                        }
	                        continue;
	                    } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
	                        // single-quote, apostrophe, backslash - escape these
	                        out += '\\' + String.fromCharCode(escaped);
	                    } else if (c === 'x' && escaped > 0x7e && escaped <= 0xff) {
	                        // we bail out on \x7f..\xff,
	                        // leaving whole string escaped,
	                        // as it's probably completely binary
	                        return s;
	                    } else {
	                        out += String.fromCharCode(escaped);
	                    }
	                } else if (c === '\\') {
	                    esc = true;
	                } else {
	                    out += c;
	                }
	            }
	            return out;
	        }

	    }


	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return { js_beautify: js_beautify };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var js_beautify = require("beautify").js_beautify`.
	        exports.js_beautify = js_beautify;
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.js_beautify = js_beautify;
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.js_beautify = js_beautify;
	    }

	}());


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*

	  The MIT License (MIT)

	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.

	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:

	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.

	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.


	 CSS Beautifier
	---------------

	    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)

	    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	        http://jsbeautifier.org/

	    Usage:
	        css_beautify(source_text);
	        css_beautify(source_text, options);

	    The options are (default in brackets):
	        indent_size (4)                   — indentation size,
	        indent_char (space)               — character to indent with,
	        selector_separator_newline (true) - separate selectors with newline or
	                                            not (e.g. "a,\nbr" or "a, br")
	        end_with_newline (false)          - end with a newline
	        newline_between_rules (true)      - add a new line after every css rule

	    e.g

	    css_beautify(css_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t',
	      'selector_separator': ' ',
	      'end_with_newline': false,
	      'newline_between_rules': true
	    });
	*/

	// http://www.w3.org/TR/CSS21/syndata.html#tokenization
	// http://www.w3.org/TR/css3-syntax/

	(function() {
	    function css_beautify(source_text, options) {
	        options = options || {};
	        source_text = source_text || '';
	        // HACK: newline parsing inconsistent. This brute force normalizes the input.
	        source_text = source_text.replace(/\r\n|[\r\u2028\u2029]/g, '\n')

	        var indentSize = options.indent_size || 4;
	        var indentCharacter = options.indent_char || ' ';
	        var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;
	        var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	        var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;
	        var eol = options.eol ? options.eol : '\n';

	        // compatibility
	        if (typeof indentSize === "string") {
	            indentSize = parseInt(indentSize, 10);
	        }

	        if(options.indent_with_tabs){
	            indentCharacter = '\t';
	            indentSize = 1;
	        }

	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n')


	        // tokenizer
	        var whiteRe = /^\s+$/;
	        var wordRe = /[\w$\-_]/;

	        var pos = -1,
	            ch;
	        var parenLevel = 0;

	        function next() {
	            ch = source_text.charAt(++pos);
	            return ch || '';
	        }

	        function peek(skipWhitespace) {
	            var result = '';
	            var prev_pos = pos;
	            if (skipWhitespace) {
	                eatWhitespace();
	            }
	            result = source_text.charAt(pos + 1) || '';
	            pos = prev_pos - 1;
	            next();
	            return result;
	        }

	        function eatString(endChars) {
	            var start = pos;
	            while (next()) {
	                if (ch === "\\") {
	                    next();
	                } else if (endChars.indexOf(ch) !== -1) {
	                    break;
	                } else if (ch === "\n") {
	                    break;
	                }
	            }
	            return source_text.substring(start, pos + 1);
	        }

	        function peekString(endChar) {
	            var prev_pos = pos;
	            var str = eatString(endChar);
	            pos = prev_pos - 1;
	            next();
	            return str;
	        }

	        function eatWhitespace() {
	            var result = '';
	            while (whiteRe.test(peek())) {
	                next();
	                result += ch;
	            }
	            return result;
	        }

	        function skipWhitespace() {
	            var result = '';
	            if (ch && whiteRe.test(ch)) {
	                result = ch;
	            }
	            while (whiteRe.test(next())) {
	                result += ch;
	            }
	            return result;
	        }

	        function eatComment(singleLine) {
	            var start = pos;
	            singleLine = peek() === "/";
	            next();
	            while (next()) {
	                if (!singleLine && ch === "*" && peek() === "/") {
	                    next();
	                    break;
	                } else if (singleLine && ch === "\n") {
	                    return source_text.substring(start, pos);
	                }
	            }

	            return source_text.substring(start, pos) + ch;
	        }


	        function lookBack(str) {
	            return source_text.substring(pos - str.length, pos).toLowerCase() ===
	                str;
	        }

	        // Nested pseudo-class if we are insideRule
	        // and the next special character found opens
	        // a new block
	        function foundNestedPseudoClass() {
	            var openParen = 0;
	            for (var i = pos + 1; i < source_text.length; i++) {
	                var ch = source_text.charAt(i);
	                if (ch === "{") {
	                    return true;
	                } else if (ch === '(') {
	                    // pseudoclasses can contain ()
	                    openParen += 1;
	                } else if (ch === ')') {
	                    if (openParen == 0) {
	                        return false;
	                    }
	                    openParen -= 1;
	                } else if (ch === ";" || ch === "}") {
	                    return false;
	                }
	            }
	            return false;
	        }

	        // printer
	        var basebaseIndentString = source_text.match(/^[\t ]*/)[0];
	        var singleIndent = new Array(indentSize + 1).join(indentCharacter);
	        var indentLevel = 0;
	        var nestedLevel = 0;

	        function indent() {
	            indentLevel++;
	            basebaseIndentString += singleIndent;
	        }

	        function outdent() {
	            indentLevel--;
	            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);
	        }

	        var print = {};
	        print["{"] = function(ch) {
	            print.singleSpace();
	            output.push(ch);
	            print.newLine();
	        };
	        print["}"] = function(ch) {
	            print.newLine();
	            output.push(ch);
	            print.newLine();
	        };

	        print._lastCharWhitespace = function() {
	            return whiteRe.test(output[output.length - 1]);
	        };

	        print.newLine = function(keepWhitespace) {
	            if (output.length) {
	                if (!keepWhitespace && output[output.length - 1] !== '\n') {
	                    print.trim();
	                }

	                output.push('\n');

	                if (basebaseIndentString) {
	                    output.push(basebaseIndentString);
	                }
	            }
	        };
	        print.singleSpace = function() {
	            if (output.length && !print._lastCharWhitespace()) {
	                output.push(' ');
	            }
	        };

	        print.preserveSingleSpace = function() {
	            if (isAfterSpace) {
	                print.singleSpace();
	            }
	        };

	        print.trim = function() {
	            while (print._lastCharWhitespace()) {
	                output.pop();
	            }
	        };


	        var output = [];
	        /*_____________________--------------------_____________________*/

	        var insideRule = false;
	        var insidePropertyValue = false;
	        var enteringConditionalGroup = false;
	        var top_ch = '';
	        var last_top_ch = '';

	        while (true) {
	            var whitespace = skipWhitespace();
	            var isAfterSpace = whitespace !== '';
	            var isAfterNewline = whitespace.indexOf('\n') !== -1;
	            last_top_ch = top_ch;
	            top_ch = ch;

	            if (!ch) {
	                break;
	            } else if (ch === '/' && peek() === '*') { /* css comment */
	                var header = indentLevel === 0;

	                if (isAfterNewline || header) {
	                    print.newLine();
	                }

	                output.push(eatComment());
	                print.newLine();
	                if (header) {
	                    print.newLine(true);
	                }
	            } else if (ch === '/' && peek() === '/') { // single line comment
	                if (!isAfterNewline && last_top_ch !== '{' ) {
	                    print.trim();
	                }
	                print.singleSpace();
	                output.push(eatComment());
	                print.newLine();
	            } else if (ch === '@') {
	                print.preserveSingleSpace();
	                output.push(ch);

	                // strip trailing space, if present, for hash property checks
	                var variableOrRule = peekString(": ,;{}()[]/='\"");

	                if (variableOrRule.match(/[ :]$/)) {
	                    // we have a variable or pseudo-class, add it and insert one space before continuing
	                    next();
	                    variableOrRule = eatString(": ").replace(/\s$/, '');
	                    output.push(variableOrRule);
	                    print.singleSpace();
	                }

	                variableOrRule = variableOrRule.replace(/\s$/, '')

	                // might be a nesting at-rule
	                if (variableOrRule in css_beautify.NESTED_AT_RULE) {
	                    nestedLevel += 1;
	                    if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {
	                        enteringConditionalGroup = true;
	                    }
	                }
	            } else if (ch === '#' && peek() === '{') {
	              print.preserveSingleSpace();
	              output.push(eatString('}'));
	            } else if (ch === '{') {
	                if (peek(true) === '}') {
	                    eatWhitespace();
	                    next();
	                    print.singleSpace();
	                    output.push("{}");
	                    print.newLine();
	                    if (newline_between_rules && indentLevel === 0) {
	                        print.newLine(true);
	                    }
	                } else {
	                    indent();
	                    print["{"](ch);
	                    // when entering conditional groups, only rulesets are allowed
	                    if (enteringConditionalGroup) {
	                        enteringConditionalGroup = false;
	                        insideRule = (indentLevel > nestedLevel);
	                    } else {
	                        // otherwise, declarations are also allowed
	                        insideRule = (indentLevel >= nestedLevel);
	                    }
	                }
	            } else if (ch === '}') {
	                outdent();
	                print["}"](ch);
	                insideRule = false;
	                insidePropertyValue = false;
	                if (nestedLevel) {
	                    nestedLevel--;
	                }
	                if (newline_between_rules && indentLevel === 0) {
	                    print.newLine(true);
	                }
	            } else if (ch === ":") {
	                eatWhitespace();
	                if ((insideRule || enteringConditionalGroup) &&
	                    !(lookBack("&") || foundNestedPseudoClass())) {
	                    // 'property: value' delimiter
	                    // which could be in a conditional group query
	                    insidePropertyValue = true;
	                    output.push(':');
	                    print.singleSpace();
	                } else {
	                    // sass/less parent reference don't use a space
	                    // sass nested pseudo-class don't use a space
	                    if (peek() === ":") {
	                        // pseudo-element
	                        next();
	                        output.push("::");
	                    } else {
	                        // pseudo-class
	                        output.push(':');
	                    }
	                }
	            } else if (ch === '"' || ch === '\'') {
	                print.preserveSingleSpace();
	                output.push(eatString(ch));
	            } else if (ch === ';') {
	                insidePropertyValue = false;
	                output.push(ch);
	                print.newLine();
	            } else if (ch === '(') { // may be a url
	                if (lookBack("url")) {
	                    output.push(ch);
	                    eatWhitespace();
	                    if (next()) {
	                        if (ch !== ')' && ch !== '"' && ch !== '\'') {
	                            output.push(eatString(')'));
	                        } else {
	                            pos--;
	                        }
	                    }
	                } else {
	                    parenLevel++;
	                    print.preserveSingleSpace();
	                    output.push(ch);
	                    eatWhitespace();
	                }
	            } else if (ch === ')') {
	                output.push(ch);
	                parenLevel--;
	            } else if (ch === ',') {
	                output.push(ch);
	                eatWhitespace();
	                if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {
	                    print.newLine();
	                } else {
	                    print.singleSpace();
	                }
	            } else if (ch === ']') {
	                output.push(ch);
	            } else if (ch === '[') {
	                print.preserveSingleSpace();
	                output.push(ch);
	            } else if (ch === '=') { // no whitespace before or after
	                eatWhitespace()
	                ch = '=';
	                output.push(ch);
	            } else {
	                print.preserveSingleSpace();
	                output.push(ch);
	            }
	        }


	        var sweetCode = '';
	        if (basebaseIndentString) {
	            sweetCode += basebaseIndentString;
	        }

	        sweetCode += output.join('').replace(/[\r\n\t ]+$/, '');

	        // establish end_with_newline
	        if (end_with_newline) {
	            sweetCode += '\n';
	        }

	        if (eol != '\n') {
	            sweetCode = sweetCode.replace(/[\n]/g, eol);
	        }

	        return sweetCode;
	    }

	    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
	    css_beautify.NESTED_AT_RULE = {
	        "@page": true,
	        "@font-face": true,
	        "@keyframes": true,
	        // also in CONDITIONAL_GROUP_RULE below
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };
	    css_beautify.CONDITIONAL_GROUP_RULE = {
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };

	    /*global define */
	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return {
	                css_beautify: css_beautify
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        exports.css_beautify = css_beautify;
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.css_beautify = css_beautify;
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.css_beautify = css_beautify;
	    }

	}());


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*

	  The MIT License (MIT)

	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.

	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:

	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.

	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.


	 Style HTML
	---------------

	  Written by Nochum Sossonko, (nsossonko@hotmail.com)

	  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	    http://jsbeautifier.org/

	  Usage:
	    style_html(html_source);

	    style_html(html_source, options);

	  The options are:
	    indent_inner_html (default false)  — indent <head> and <body> sections,
	    indent_size (default 4)          — indentation size,
	    indent_char (default space)      — character to indent with,
	    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)
	    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
	    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted
	    indent_scripts (default normal)  - "keep"|"separate"|"normal"
	    preserve_newlines (default true) - whether existing line breaks before elements should be preserved
	                                        Only works before elements, not inside tags or for text.
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk
	    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}
	    end_with_newline (false)          - end with a newline
	    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.

	    e.g.

	    style_html(html_source, {
	      'indent_inner_html': false,
	      'indent_size': 2,
	      'indent_char': ' ',
	      'wrap_line_length': 78,
	      'brace_style': 'expand',
	      'unformatted': ['a', 'sub', 'sup', 'b', 'i', 'u'],
	      'preserve_newlines': true,
	      'max_preserve_newlines': 5,
	      'indent_handlebars': false,
	      'extra_liners': ['/html']
	    });
	*/

	(function() {

	    function trim(s) {
	        return s.replace(/^\s+|\s+$/g, '');
	    }

	    function ltrim(s) {
	        return s.replace(/^\s+/g, '');
	    }

	    function rtrim(s) {
	        return s.replace(/\s+$/g,'');
	    }

	    function style_html(html_source, options, js_beautify, css_beautify) {
	        //Wrapper function to invoke all the necessary constructors and deal with the output.

	        var multi_parser,
	            indent_inner_html,
	            indent_size,
	            indent_character,
	            wrap_line_length,
	            brace_style,
	            unformatted,
	            preserve_newlines,
	            max_preserve_newlines,
	            indent_handlebars,
	            wrap_attributes,
	            wrap_attributes_indent_size,
	            end_with_newline,
	            extra_liners,
	            eol;

	        options = options || {};

	        // backwards compatibility to 1.3.4
	        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&
	                (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {
	            options.wrap_line_length = options.max_char;
	        }

	        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;
	        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);
	        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;
	        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;
	        wrap_line_length =  parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);
	        unformatted = options.unformatted || ['a', 'span', 'img', 'bdo', 'em', 'strong', 'dfn', 'code', 'samp', 'kbd',
	            'var', 'cite', 'abbr', 'acronym', 'q', 'sub', 'sup', 'tt', 'i', 'b', 'big', 'small', 'u', 's', 'strike',
	            'font', 'ins', 'del', 'pre', 'address', 'dt', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
	        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
	        max_preserve_newlines = preserve_newlines ?
	            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10))
	            : 0;
	        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;
	        wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;
	        wrap_attributes_indent_size = (options.wrap_attributes_indent_size === undefined) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10) || indent_size;
	        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	        extra_liners = (typeof options.extra_liners == 'object') && options.extra_liners ?
	            options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?
	            options.extra_liners.split(',') : 'head,body,/html'.split(',');
	        eol = options.eol ? options.eol : '\n';

	        if(options.indent_with_tabs){
	            indent_character = '\t';
	            indent_size = 1;
	        }

	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n')

	        function Parser() {

	            this.pos = 0; //Parser position
	            this.token = '';
	            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT
	            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values
	                parent: 'parent1',
	                parentcount: 1,
	                parent1: ''
	            };
	            this.tag_type = '';
	            this.token_text = this.last_token = this.last_text = this.token_type = '';
	            this.newlines = 0;
	            this.indent_content = indent_inner_html;

	            this.Utils = { //Uilities made available to the various functions
	                whitespace: "\n\r\t ".split(''),
	                single_token: 'br,input,link,meta,source,!doctype,basefont,base,area,hr,wbr,param,img,isindex,embed'.split(','), //all the single tags for HTML
	                extra_liners: extra_liners, //for tags that need a line of whitespace before them
	                in_array: function(what, arr) {
	                    for (var i = 0; i < arr.length; i++) {
	                        if (what === arr[i]) {
	                            return true;
	                        }
	                    }
	                    return false;
	                }
	            };

	            // Return true if the given text is composed entirely of whitespace.
	            this.is_whitespace = function(text) {
	                for (var n = 0; n < text.length; text++) {
	                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {
	                        return false;
	                    }
	                }
	                return true;
	            };

	            this.traverse_whitespace = function() {
	                var input_char = '';

	                input_char = this.input.charAt(this.pos);
	                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                    this.newlines = 0;
	                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (preserve_newlines && input_char === '\n' && this.newlines <= max_preserve_newlines) {
	                            this.newlines += 1;
	                        }

	                        this.pos++;
	                        input_char = this.input.charAt(this.pos);
	                    }
	                    return true;
	                }
	                return false;
	            };

	            // Append a space to the given content (string array) or, if we are
	            // at the wrap_line_length, append a newline/indentation.
	            this.space_or_wrap = function(content) {
	                if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached
	                    this.print_newline(false, content);
	                    this.print_indentation(content);
	                } else {
	                    this.line_char_count++;
	                    content.push(' ');
	                }
	            };

	            this.get_content = function() { //function to capture regular content between tags
	                var input_char = '',
	                    content = [],
	                    space = false; //if a space is needed

	                while (this.input.charAt(this.pos) !== '<') {
	                    if (this.pos >= this.input.length) {
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }

	                    if (this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                        continue;
	                    }

	                    if (indent_handlebars) {
	                        // Handlebars parsing is complicated.
	                        // {{#foo}} and {{/foo}} are formatted tags.
	                        // {{something}} should get treated as content, except:
	                        // {{else}} specifically behaves like {{#if}} and {{/if}}
	                        var peek3 = this.input.substr(this.pos, 3);
	                        if (peek3 === '{{#' || peek3 === '{{/') {
	                            // These are tags and not content.
	                            break;
	                        } else if (peek3 === '{{!') {
	                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];
	                        } else if (this.input.substr(this.pos, 2) === '{{') {
	                            if (this.get_tag(true) === '{{else}}') {
	                                break;
	                            }
	                        }
	                    }

	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	                    this.line_char_count++;
	                    content.push(input_char); //letter at-a-time (or string) inserted to an array
	                }
	                return content.length ? content.join('') : '';
	            };

	            this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify
	                if (this.pos === this.input.length) {
	                    return ['', 'TK_EOF'];
	                }
	                var input_char = '';
	                var content = '';
	                var reg_match = new RegExp('</' + name + '\\s*>', 'igm');
	                reg_match.lastIndex = this.pos;
	                var reg_array = reg_match.exec(this.input);
	                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script
	                if (this.pos < end_script) { //get everything in between the script tags
	                    content = this.input.substring(this.pos, end_script);
	                    this.pos = end_script;
	                }
	                return content;
	            };

	            this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object
	                if (this.tags[tag + 'count']) { //check for the existence of this tag type
	                    this.tags[tag + 'count']++;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                } else { //otherwise initialize this tag type
	                    this.tags[tag + 'count'] = 1;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                }
	                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)
	                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')
	            };

	            this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer
	                if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it
	                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.
	                    while (temp_parent) { //till we reach '' (the initial value);
	                        if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it
	                            break;
	                        }
	                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree
	                    }
	                    if (temp_parent) { //if we caught something
	                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly
	                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent
	                    }
	                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...
	                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself
	                    if (this.tags[tag + 'count'] === 1) {
	                        delete this.tags[tag + 'count'];
	                    } else {
	                        this.tags[tag + 'count']--;
	                    }
	                }
	            };

	            this.indent_to_tag = function(tag) {
	                // Match the indentation level to the last use of this tag, but don't remove it.
	                if (!this.tags[tag + 'count']) {
	                    return;
	                }
	                var temp_parent = this.tags.parent;
	                while (temp_parent) {
	                    if (tag + this.tags[tag + 'count'] === temp_parent) {
	                        break;
	                    }
	                    temp_parent = this.tags[temp_parent + 'parent'];
	                }
	                if (temp_parent) {
	                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];
	                }
	            };

	            this.get_tag = function(peek) { //function to get a full tag and parse its type
	                var input_char = '',
	                    content = [],
	                    comment = '',
	                    space = false,
	                    first_attr = true,
	                    tag_start, tag_end,
	                    tag_start_char,
	                    orig_pos = this.pos,
	                    orig_line_char_count = this.line_char_count;

	                peek = peek !== undefined ? peek : false;

	                do {
	                    if (this.pos >= this.input.length) {
	                        if (peek) {
	                            this.pos = orig_pos;
	                            this.line_char_count = orig_line_char_count;
	                        }
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }

	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;

	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space
	                        space = true;
	                        continue;
	                    }

	                    if (input_char === "'" || input_char === '"') {
	                        input_char += this.get_unformatted(input_char);
	                        space = true;

	                    }

	                    if (input_char === '=') { //no space before =
	                        space = false;
	                    }

	                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {
	                        //no space after = or before >
	                        this.space_or_wrap(content);
	                        space = false;
	                        if (!first_attr && wrap_attributes === 'force' &&  input_char !== '/') {
	                            this.print_newline(true, content);
	                            this.print_indentation(content);
	                            for (var count = 0; count < wrap_attributes_indent_size; count++) {
	                                content.push(indent_character);
	                            }
	                        }
	                        for (var i = 0; i < content.length; i++) {
	                          if (content[i] === ' ') {
	                            first_attr = false;
	                            break;
	                          }
	                        }
	                    }

	                    if (indent_handlebars && tag_start_char === '<') {
	                        // When inside an angle-bracket tag, put spaces around
	                        // handlebars not inside of strings.
	                        if ((input_char + this.input.charAt(this.pos)) === '{{') {
	                            input_char += this.get_unformatted('}}');
	                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {
	                                input_char = ' ' + input_char;
	                            }
	                            space = true;
	                        }
	                    }

	                    if (input_char === '<' && !tag_start_char) {
	                        tag_start = this.pos - 1;
	                        tag_start_char = '<';
	                    }

	                    if (indent_handlebars && !tag_start_char) {
	                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {
	                            if (input_char === '#' || input_char === '/' || input_char === '!') {
	                                tag_start = this.pos - 3;
	                            } else {
	                                tag_start = this.pos - 2;
	                            }
	                            tag_start_char = '{';
	                        }
	                    }

	                    this.line_char_count++;
	                    content.push(input_char); //inserts character at-a-time (or string)

	                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) { //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }

	                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') { //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }

	                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {
	                        break;
	                    }
	                } while (input_char !== '>');

	                var tag_complete = content.join('');
	                var tag_index;
	                var tag_offset;

	                if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends
	                    tag_index = tag_complete.indexOf(' ');
	                } else if (tag_complete.charAt(0) === '{') {
	                    tag_index = tag_complete.indexOf('}');
	                } else { //otherwise go with the tag ending
	                    tag_index = tag_complete.indexOf('>');
	                }
	                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {
	                    tag_offset = 1;
	                } else {
	                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;
	                }
	                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();
	                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||
	                    this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                    }
	                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {
	                    if (!peek) {
	                        this.indent_to_tag('if');
	                        this.tag_type = 'HANDLEBARS_ELSE';
	                        this.indent_content = true;
	                        this.traverse_whitespace();
	                    }
	                } else if (this.is_unformatted(tag_check, unformatted)) { // do not reformat the "unformatted" tags
	                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function
	                    content.push(comment);
	                    tag_end = this.pos - 1;
	                    this.tag_type = 'SINGLE';
	                } else if (tag_check === 'script' &&
	                    (tag_complete.search('type') === -1 ||
	                    (tag_complete.search('type') > -1 &&
	                    tag_complete.search(/\b(text|application)\/(x-)?(javascript|ecmascript|jscript|livescript)/) > -1))) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'SCRIPT';
	                    }
	                } else if (tag_check === 'style' &&
	                    (tag_complete.search('type') === -1 ||
	                    (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'STYLE';
	                    }
	                } else if (tag_check.charAt(0) === '!') { //peek for <! comment
	                    // for comments content is already correct.
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                        this.traverse_whitespace();
	                    }
	                } else if (!peek) {
	                    if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending
	                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors
	                        this.tag_type = 'END';
	                    } else { //otherwise it's a start-tag
	                        this.record_tag(tag_check); //push it on the tag stack
	                        if (tag_check.toLowerCase() !== 'html') {
	                            this.indent_content = true;
	                        }
	                        this.tag_type = 'START';
	                    }

	                    // Allow preserving of newlines after a start or end tag
	                    if (this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                    }

	                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line
	                        this.print_newline(false, this.output);
	                        if (this.output.length && this.output[this.output.length - 2] !== '\n') {
	                            this.print_newline(true, this.output);
	                        }
	                    }
	                }

	                if (peek) {
	                    this.pos = orig_pos;
	                    this.line_char_count = orig_line_char_count;
	                }

	                return content.join(''); //returns fully formatted tag
	            };

	            this.get_comment = function(start_pos) { //function to return comment content in its entirety
	                // this is will have very poor perf, but will work for now.
	                var comment = '',
	                    delimiter = '>',
	                    matched = false;

	                this.pos = start_pos;
	                input_char = this.input.charAt(this.pos);
	                this.pos++;

	                while (this.pos <= this.input.length) {
	                    comment += input_char;

	                    // only need to check for the delimiter if the last chars match
	                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&
	                        comment.indexOf(delimiter) !== -1) {
	                        break;
	                    }

	                    // only need to search for custom delimiter for the first few characters
	                    if (!matched && comment.length < 10) {
	                        if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment
	                            delimiter = '<![endif]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...
	                            delimiter = ']]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...
	                            delimiter = ']>';
	                            matched = true;
	                        } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...
	                            delimiter = '-->';
	                            matched = true;
	                        } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment
	                            delimiter = '}}';
	                            matched = true;
	                        } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment
	                            delimiter = '?>';
	                            matched = true;
	                        } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment
	                            delimiter = '%>';
	                            matched = true;
	                        }
	                    }

	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	                }

	                return comment;
	            };

	            this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety

	                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {
	                    return '';
	                }
	                var input_char = '';
	                var content = '';
	                var min_index = 0;
	                var space = true;
	                do {

	                    if (this.pos >= this.input.length) {
	                        return content;
	                    }

	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;

	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (!space) {
	                            this.line_char_count--;
	                            continue;
	                        }
	                        if (input_char === '\n' || input_char === '\r') {
	                            content += '\n';
	                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'
	                for (var i=0; i<this.indent_level; i++) {
	                  content += this.indent_string;
	                }
	                space = false; //...and make sure other indentation is erased
	                */
	                            this.line_char_count = 0;
	                            continue;
	                        }
	                    }
	                    content += input_char;
	                    this.line_char_count++;
	                    space = true;

	                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {
	                        // Handlebars expressions in strings should also be unformatted.
	                        content += this.get_unformatted('}}');
	                        // These expressions are opaque.  Ignore delimiters found in them.
	                        min_index = content.length;
	                    }
	                } while (content.toLowerCase().indexOf(delimiter, min_index) === -1);
	                return content;
	            };

	            this.get_token = function() { //initial handler for token-retrieval
	                var token;

	                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript
	                    var type = this.last_token.substr(7);
	                    token = this.get_contents_to(type);
	                    if (typeof token !== 'string') {
	                        return token;
	                    }
	                    return [token, 'TK_' + type];
	                }
	                if (this.current_mode === 'CONTENT') {
	                    token = this.get_content();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        return [token, 'TK_CONTENT'];
	                    }
	                }

	                if (this.current_mode === 'TAG') {
	                    token = this.get_tag();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        var tag_name_type = 'TK_TAG_' + this.tag_type;
	                        return [token, tag_name_type];
	                    }
	                }
	            };

	            this.get_full_indent = function(level) {
	                level = this.indent_level + level || 0;
	                if (level < 1) {
	                    return '';
	                }

	                return Array(level + 1).join(this.indent_string);
	            };

	            this.is_unformatted = function(tag_check, unformatted) {
	                //is this an HTML5 block-level link?
	                if (!this.Utils.in_array(tag_check, unformatted)) {
	                    return false;
	                }

	                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {
	                    return true;
	                }

	                //at this point we have an  tag; is its first child something we want to remain
	                //unformatted?
	                var next_tag = this.get_tag(true /* peek. */ );

	                // test next_tag to see if it is just html tag (no external content)
	                var tag = (next_tag || "").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);

	                // if next_tag comes back but is not an isolated tag, then
	                // let's treat the 'a' tag as having content
	                // and respect the unformatted option
	                if (!tag || this.Utils.in_array(tag, unformatted)) {
	                    return true;
	                } else {
	                    return false;
	                }
	            };

	            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions

	                this.input = js_source || ''; //gets the input for the Parser

	                // HACK: newline parsing inconsistent. This brute force normalizes the input.
	                this.input = this.input.replace(/\r\n|[\r\u2028\u2029]/g, '\n')

	                this.output = [];
	                this.indent_character = indent_character;
	                this.indent_string = '';
	                this.indent_size = indent_size;
	                this.brace_style = brace_style;
	                this.indent_level = 0;
	                this.wrap_line_length = wrap_line_length;
	                this.line_char_count = 0; //count to see if wrap_line_length was exceeded

	                for (var i = 0; i < this.indent_size; i++) {
	                    this.indent_string += this.indent_character;
	                }

	                this.print_newline = function(force, arr) {
	                    this.line_char_count = 0;
	                    if (!arr || !arr.length) {
	                        return;
	                    }
	                    if (force || (arr[arr.length - 1] !== '\n')) { //we might want the extra line
	                        if ((arr[arr.length - 1] !== '\n')) {
	                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);
	                        }
	                        arr.push('\n');
	                    }
	                };

	                this.print_indentation = function(arr) {
	                    for (var i = 0; i < this.indent_level; i++) {
	                        arr.push(this.indent_string);
	                        this.line_char_count += this.indent_string.length;
	                    }
	                };

	                this.print_token = function(text) {
	                    // Avoid printing initial whitespace.
	                    if (this.is_whitespace(text) && !this.output.length) {
	                        return;
	                    }
	                    if (text || text !== '') {
	                        if (this.output.length && this.output[this.output.length - 1] === '\n') {
	                            this.print_indentation(this.output);
	                            text = ltrim(text);
	                        }
	                    }
	                    this.print_token_raw(text);
	                };

	                this.print_token_raw = function(text) {
	                    // If we are going to print newlines, truncate trailing
	                    // whitespace, as the newlines will represent the space.
	                    if (this.newlines > 0) {
	                        text = rtrim(text);
	                    }

	                    if (text && text !== '') {
	                        if (text.length > 1 && text.charAt(text.length - 1) === '\n') {
	                            // unformatted tags can grab newlines as their last character
	                            this.output.push(text.slice(0, -1));
	                            this.print_newline(false, this.output);
	                        } else {
	                            this.output.push(text);
	                        }
	                    }

	                    for (var n = 0; n < this.newlines; n++) {
	                        this.print_newline(n > 0, this.output);
	                    }
	                    this.newlines = 0;
	                };

	                this.indent = function() {
	                    this.indent_level++;
	                };

	                this.unindent = function() {
	                    if (this.indent_level > 0) {
	                        this.indent_level--;
	                    }
	                };
	            };
	            return this;
	        }

	        /*_____________________--------------------_____________________*/

	        multi_parser = new Parser(); //wrapping functions Parser
	        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values

	        while (true) {
	            var t = multi_parser.get_token();
	            multi_parser.token_text = t[0];
	            multi_parser.token_type = t[1];

	            if (multi_parser.token_type === 'TK_EOF') {
	                break;
	            }

	            switch (multi_parser.token_type) {
	                case 'TK_TAG_START':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        multi_parser.indent();
	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_STYLE':
	                case 'TK_TAG_SCRIPT':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_END':
	                    //Print new line only if the tag has no content and has child
	                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {
	                        var tag_name = multi_parser.token_text.match(/\w+/)[0];
	                        var tag_extracted_from_last_output = null;
	                        if (multi_parser.output.length) {
	                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\s*(\w+)/);
	                        }
	                        if (tag_extracted_from_last_output === null ||
	                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {
	                            multi_parser.print_newline(false, multi_parser.output);
	                        }
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_SINGLE':
	                    // Don't add a newline before elements that should remain unformatted.
	                    var tag_check = multi_parser.token_text.match(/^\s*<([a-z-]+)/i);
	                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_ELSE':
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        multi_parser.indent();
	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_COMMENT':
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_CONTENT':
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_STYLE':
	                case 'TK_SCRIPT':
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_newline(false, multi_parser.output);
	                        var text = multi_parser.token_text,
	                            _beautifier,
	                            script_indent_level = 1;
	                        if (multi_parser.token_type === 'TK_SCRIPT') {
	                            _beautifier = typeof js_beautify === 'function' && js_beautify;
	                        } else if (multi_parser.token_type === 'TK_STYLE') {
	                            _beautifier = typeof css_beautify === 'function' && css_beautify;
	                        }

	                        if (options.indent_scripts === "keep") {
	                            script_indent_level = 0;
	                        } else if (options.indent_scripts === "separate") {
	                            script_indent_level = -multi_parser.indent_level;
	                        }

	                        var indentation = multi_parser.get_full_indent(script_indent_level);
	                        if (_beautifier) {

	                            // call the Beautifier if avaliable
	                            var Child_options = function() {
	                                this.eol = '\n';
	                            };
	                            Child_options.prototype = options;
	                            var child_options = new Child_options();
	                            text = _beautifier(text.replace(/^\s*/, indentation), child_options);
	                        } else {
	                            // simply indent the string otherwise
	                            var white = text.match(/^\s*/)[0];
	                            var _level = white.match(/[^\n\r]*$/)[0].split(multi_parser.indent_string).length - 1;
	                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);
	                            text = text.replace(/^\s*/, indentation)
	                                .replace(/\r\n|\r|\n/g, '\n' + reindent)
	                                .replace(/\s+$/, '');
	                        }
	                        if (text) {
	                            multi_parser.print_token_raw(text);
	                            multi_parser.print_newline(true, multi_parser.output);
	                        }
	                    }
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                default:
	                    // We should not be getting here but we don't want to drop input on the floor
	                    // Just output the text and move on
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_token(multi_parser.token_text);
	                    }
	                    break;
	            }
	            multi_parser.last_token = multi_parser.token_type;
	            multi_parser.last_text = multi_parser.token_text;
	        }
	        var sweet_code = multi_parser.output.join('').replace(/[\r\n\t ]+$/, '');

	        // establish end_with_newline
	        if (end_with_newline) {
	            sweet_code += '\n';
	        }

	        if (eol != '\n') {
	            sweet_code = sweet_code.replace(/[\n]/g, eol);
	        }

	        return sweet_code;
	    }

	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, __webpack_require__(273), __webpack_require__(274)], __WEBPACK_AMD_DEFINE_RESULT__ = function(requireamd) {
	            var js_beautify =  __webpack_require__(273);
	            var css_beautify =  __webpack_require__(274);

	            return {
	              html_beautify: function(html_source, options) {
	                return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	              }
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        var js_beautify = require('./beautify.js');
	        var css_beautify = require('./beautify-css.js');

	        exports.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	        };
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, window.js_beautify, window.css_beautify);
	        };
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, global.js_beautify, global.css_beautify);
	        };
	    }

	}());


/***/ },
/* 276 */
/***/ function(module, exports) {

	var RequestBodyBinaryEditor = Backbone.View.extend({
	    initialize: function() {
	        this.model.on("startNew", this.onStartNew, this);
	        var body = this.model.get("body");        
	        var model = this.model;
	        var view = this;

	        $('#body-data-binary').on('change', function (event) {
	            var files = event.target.files;            
	            _.bind(view.readFile, view)(files[0]);
	        });
	    },

	    onStartNew: function() {
	    },

	    readFile: function(f) {
	        var model = this.model;        
	        var reader = new FileReader();
	        var view = this;

	        // Closure to capture the file information.
	        reader.onload = (function (theFile) {
	            return function (e) {
	                view.binaryData = e.currentTarget.result;
	            };
	        })(f);

	        // Read in the image file as a data URL.
	        reader.readAsArrayBuffer(f);
	    },

	    getBinaryBody: function() {
	        // console.log(this.binaryData);
	        return this.binaryData;
	    }
	});

	module.exports = RequestBodyBinaryEditor;


/***/ },
/* 277 */
/***/ function(module, exports) {

	var RequestClipboard = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var response = model.get("response");

	        $("#response-copy-button").on("click", function() {
	            var scrollTop = $(window).scrollTop();
	            if($("#currentPrettyMode").text()=="JSON") {
	                //Anti-xssiefied JSON is shown in the Aceeditor. Use its value directly instead of re anti-xssing
	                //var possiblyUncleanJSON=response.get("text");
	                var cleanJSON = pm.cmp.getValue();
	                try {
	                    cleanJSON = vkbeautify.json(cleanJSON);
	                }
	                catch(e) {
	                }
	                copyToClipboard(cleanJSON);
	            }
	            else if($("#currentPrettyMode").text()=="XML") {
	                var cleanJSON = pm.cmp.getValue();
	                copyToClipboard(cleanJSON);
	            }
	            else {
	                copyToClipboard(response.get("text"));
	            }
	            $(document).scrollTop(scrollTop);
	        });
	    }
	})

	module.exports = RequestClipboard;


/***/ },
/* 278 */
/***/ function(module, exports) {

	var RequestPreviewer = Backbone.View.extend({
	    initialize: function() {
	    	var model = this.model;
	    	var view = this;

	        $(".request-preview-header-limitations").dropdown();

	        pm.mediator.on("showPreview", this.showPreview, this);
	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        $("#request-preview-header .request-helper-tabs li").on("click", function () {
	            $("#request-preview-header .request-helper-tabs li").removeClass("active");
	            $(event.currentTarget).addClass("active");
	            var type = $(event.currentTarget).attr('data-id');
	            view.showPreviewType(type);
	            pm.tracker.trackEvent("request", "preview", type);
	        });

	        $(".request-preview-header-limitations").click(function() {
	            pm.tracker.trackEvent("request", "preview", "limitations");
	        });

	        $("#request-preview-language-selector li[data-snippetname]").click(function() {
	            var $this = $(this);
	            var snippetname = $this.attr('data-snippetname');
	            $(".selected-preview").removeClass("selected-preview");
	            $this.addClass("selected-preview");
	            model.set("selectedSnippet", snippetname);
	            var dataMode = $this.attr('data-acemode');
	            $("#selected-preview-language").text($this.attr('data-snippetlabel'));
	            if(snippetname) {
	                view.runSnippet(snippetname, dataMode);
	            }
	        });

	        $(".copy-preview-code").click(function() {
	            var code = $("#request-preview-snippet-shadow").val();
	            copyToClipboard(code);
	        });



	        window.addEventListener('message', function(event) {
	            var type = event.data.type;

	            if (event.data.type === "snippet_generated") {
	                //$("#request-preview-snippet").val(event.data.result);
	                view.editor && view.editor.setValue(event.data.result, -1) && view.editor.getSession().setMode('ace/mode/'+event.data.dataMode);
	                $("#request-preview-snippet-shadow").val(event.data.result);
	            }
	        });

	        this.initAceTextarea();
	    },

	    initAceTextarea: function() {
	        var bodyTextarea = document.getElementById("request-preview-snippet");
	        this.editor = ace.edit(bodyTextarea);
	        var theme = (pm.settings.getSetting("postmanTheme")==="light")?"clouds":"monokai";
	        this.editor.setTheme("ace/theme/"+theme);
	        this.editor.setValue("HEELLO");
	        this.editor.resize();
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var ace = this.editor;

	        if (ace) {
	            ace.setTheme("ace/theme/"+theme);
	        }
	    },

	    runSnippet: function(snippetname, dataMode) {
	        var model = this.model;
	        model.trimUrl();
	        if(snippetname === "curl") {
	            model.generatePreview();
	            //$("#request-preview-snippet").val(model.get("curlHtml").unescapeHTML());
	            this.editor && this.editor.setValue(model.get("curlHtml").unescapeHTML(), -1) && this.editor.resize() && this.editor.getSession().setMode('ace/mode/'+dataMode);
	            $("#request-preview-snippet-shadow").val(model.get("curlHtml").unescapeHTML());
	        }
	        else if(snippetname === "rawHttp") {
	            model.generatePreview();
	            //$("#request-preview-snippet").val(model.get("previewHtml").unescapeHTML());
	            this.editor && this.editor.setValue(model.get("previewHtml").unescapeHTML(), -1) && this.editor.resize() && this.editor.getSession().setMode('ace/mode/'+dataMode);
	            $("#request-preview-snippet-shadow").val(model.get("previewHtml").unescapeHTML());
	        }
	        else {
	            var request = model.getRequestAfterResolution();
	            //Set rawModeData
	            if(request.dataMode === "raw") {
	                request["rawModeData"] = request.data;
	            }

	            var message = {
	                command: "getSnippet",
	                request: request,
	                snippetName: snippetname,
	                dataMode: dataMode
	            };
	            var sandbox = document.getElementById("tester_sandbox");
	            sandbox.contentWindow.postMessage(message, '*');
	        }
	    },

	    showPreview: function() {
	    	this.model.generatePreview();
	    	this.render();
	    },

	    showPreviewType: function(type) {
	    	$("#request-preview-content div").css("display", "none");
	    	$("#request-preview-content-" + type).css("display", "block");
	    },

	    render: function() {
	        this.model.set("editorMode", 1);

	        //var previewHtml = this.model.get("previewHtml");
	        //var curlHtml = this.model.get("curlHtml");
	        //
	        //$("#request-preview-content-http-request").html(previewHtml);
	        //$("#request-preview-content-curl").html(curlHtml);
	        $("#modal-request-preview").modal('show');

	        var selectedSnippet = $(".selected-preview").attr('data-snippetname');
	        if(selectedSnippet) {
	            this.runSnippet(selectedSnippet);
	        }
	    }
	});

	module.exports = RequestPreviewer;


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var Snippets = __webpack_require__(280);
	var RequestTestsEditorSnippets = __webpack_require__(281);
	var jsBeautify = __webpack_require__(272);

	var RequestTestsEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        pm.mediator.on("refreshLayout", this.onRefreshLayout, this);
	        pm.mediator.on("addSnippetToEditor", this.addSnippetToEditor, this);

	        var snippets = new Snippets();
	        this.snippetsList = new RequestTestsEditorSnippets({ model: snippets });

	        this.model.on("startNew", this.onStartNew, this);

	        pm.mediator.on("onHideSnippets", function() {
	            view.setLayout();
	        });

	        //jetpacks is enabled by default
	        view.hidePurchaseMessage();
	        $("#request-tests .try-jetpacks").remove();

	        pm.mediator.on("beautify", function() {
	            if($("#tests-aceeditor").is(":visible") && view.editor) {
	                var oldText = view.editor.getValue();
	                var newText = jsBeautify(oldText);
	                view.editor.setValue(newText, -1);
	            }
	        }, this);

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        $("#request-tests-editor-snippets-maximize").on("click", function() {
	            pm.settings.setSetting("hideSnippets", false);
	            pm.mediator.trigger("onShowSnippets");
	            view.setLayout();
	        });

	        $("#request-tests-help-button").click(function() {
	            pm.tracker.trackEvent("request","tests","help");
	        });

	        $("#request-tests").on("click", ".know-more-collection-runner", function() {
	            pm.tracker.trackEvent('test_runner', 'know_more', 'test_editor');
	            pm.mediator.trigger("startPurchaseFlow", "test_runner");
	        });

	        $("#request-builder-tab-test").click(function() {
	            if(view.editor) {
	                view.editor.focus();
	            }
	        });

	        setTimeout(function() {
	            view.setLayout();
	        }, 1000);

	        if (!this.editor) {
	            this.initializeEditor();
	        }

	        //pm.mediator.on("updateResponseFontSize", this.updateScriptFontSize, this);
	        //pm.mediator.on("updatedUIScale", this.updateScriptFontSize, this);
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = this.editor;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    updateScriptFontSize: function(newSize) {
	        var codeMirror = this.editor;

	        if (codeMirror) {
	            codeMirror.setFontSize(rem(newSize));
	        }
	    },

	    hidePurchaseMessage: function() {
	        var view = this;

	        $(".request-tests-purchase-message").css("display", "none");
	        $(".request-tests-wrapper").css("display", "block");
	        setTimeout(function() {
	            view.setLayout();
	            view.loadTests();
	        }, 1000);
	    },

	    showPurchaseMessage: function() {
	        $(".request-tests-purchase-message").css("display", "block");
	        $(".request-tests-wrapper").css("display", "none");
	    },

	    addSnippetToEditor: function(snippet) {
	        if (this.editor) {
	            var code = this.editor.getValue();

	            if(code !== "") {
	                code += "\n\n";
	            }

	            code += snippet.get("code");
	            this.editor.setValue(code,1);
	        }
	    },

	    setLayout: function() {
	        // var areSnippetsHidden = pm.settings.getSetting("hideSnippets");

	        // // TODO Change these to fluid layouts later
	        // var containerWidth = $(document).width() - 405;
	        // var testEditorWidth;

	        // if (!areSnippetsHidden) {
	        //     testEditorWidth = containerWidth - 220;
	        //     $("#request-tests-editor-snippets-maximize").css("display", "none");
	        //     $(".request-tests-editor-snippets").css("display", "block");
	        // }
	        // else {
	        //     testEditorWidth = containerWidth;
	        //     $("#request-tests-editor-snippets-maximize").css("display", "block");
	        //     $(".request-tests-editor-snippets").css("display", "none");
	        // }

	        // $(".request-tests-editor-codemirror").css("width", testEditorWidth + "px");

	        // // Reenable resizing
	        // // $(".request-tests-editor-codemirror").css("height", "300px");
	        // // $(".request-tests-editor-snippets").css("height", "300px");
	        // $(".request-tests-editor-snippets").css("width", "197px");
	    },

	    onRefreshLayout: function() {
	        this.setLayout();
	    },

	    onStartNew: function() {
	        this.hideTests();
	    },

	    initializeEditor: function() {
	        var view = this;

	        if (this.editor) {
	            return;
	        }

	        view.setLayout();

	        var theme = pm.settings.getSetting("postmanCodeMirrorTheme");

	        this.editor = ace.edit(document.getElementById("tests-aceeditor"));
	        this.editor.getSession().setMode('ace/mode/javascript');

	        this.editor.on('change', _.debounce(function(view) {
	            return function() {
	                view.updateModel();
	                if(view.editor.getValue()=="") {
	                    $(".request-tests-indicator").removeClass("active");
	                }
	                else {
	                    $(".request-tests-indicator").addClass("active");
	                }
	            }
	        }(view), 100));

	        var codeMirror = this.editor;

	        $(".request-tests-editor-codemirror").resizable({
	            stop: function() {
	                codeMirror.resize(true);
	            }
	        });

	        this.editor.resize();

	        setTimeout(function() {
	            view.setLayout();
	            pm.mediator.trigger("refreshLayout");
	        }, 750);
	    },

	    showTests: function() {
	        //$("#request-tests").css("display", "block");
	    },

	    hideTests: function() {        
	        //$("#request-tests").css("display", "none");
	    },

	    loadTests: function() {
	        var model = this.model;
	        var view = this;

	        // TODO Should only be called if the textarea is visible        
	        if (!this.editor) {
	            this.initializeEditor();
	        }

	       /* setTimeout(function(view, model) {
	            return function() {*/
	                view.editor.resize();
	                view.editor.setValue("",-1);
	                $("#test-error").empty().hide(); //hide the error message
	                var tests = model.get("tests");

	                if (tests) {
	                    view.editor.setValue(tests, -1);
	                    if(tests=="") {
	                        $(".request-tests-indicator").removeClass("active");
	                    }
	                    else {
	                        $(".request-tests-indicator").addClass("active");
	                    }
	                }
	                else {
	                    view.editor.setValue("", -1);
	                    $(".request-tests-indicator").removeClass("active");
	                }
	                view.editor.gotoLine(0,0,false);
	            /*}
	        }(view, model), 0);*/
	    },

	    updateModel: function() {        
	        if (this.editor) {            
	            this.model.set("tests", this.editor.getValue());    
	        }        
	    }

	});

	module.exports = RequestTestsEditor;


/***/ },
/* 280 */
/***/ function(module, exports) {

	var Snippet = Backbone.Model.extend({
		default: function() {
			return {
				"id": "",
				"name": "",
				"description": "",
				"version": "",
				"code": ""
			};
		},

		initialize: function() {		
		}
	});

	var Snippets = Backbone.Collection.extend({
		model: Snippet,

		comparator: function(a, b) {
		    var counter;

		    var aName = a.get("name");
		    var bName = b.get("name");

		    if (aName.length > bName.length)
		        counter = bName.length;
		    else
		        counter = aName.length;

		    for (var i = 0; i < counter; i++) {
		        if (aName[i] == bName[i]) {
		            continue;
		        } else if (aName[i] > bName[i]) {
		            return 1;
		        } else {
		            return -1;
		        }
		    }
		    return 1;
		},

		initialize: function() {
			this.add(postmanTestSnippets, { merge: true });
		},

		addSnippet: function(id) {
			var snippet = this.get(id);
			pm.mediator.trigger("addSnippetToEditor", snippet);
		}
	})

	module.exports = Snippets;


/***/ },
/* 281 */
/***/ function(module, exports) {

	var RequestTestsEditorSnippets = Backbone.View.extend({
		initialize: function() {
			var model = this.model;
			var view = this;

			this.render();

			pm.mediator.on("onShowSnippets", function() {
				view.showSnippets();
			});

			$("#request-tests-editor-snippets-minimize").on("click", function() {
				view.hideSnippets();
			});

			$("#request-tests-editor-snippets-list").on("click", ".test-snippet a", function() {
				// console.log("Add snippet");
				pm.tracker.trackEvent("request","tests","snippets");
				var id = $(this).attr("data-id");
				model.addSnippet(id);
			});
		},

		hideSnippets: function() {				
			pm.settings.setSetting("hideSnippets", true);		
			$(".request-tests-editor-snippets").css("display", "none");

			pm.mediator.trigger("onHideSnippets");
		},

		showSnippets: function() {		
			$(".request-tests-editor-snippets").css("display", "block");
		},

		render: function() {		
			$("#request-tests-editor-snippets-list").empty();
			$("#request-tests-editor-snippets-list").append(Handlebars.templates.test_snippets_list({"items": this.model.toJSON()}));
		}
	});

	module.exports = RequestTestsEditorSnippets;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var PrscriptSnippets = __webpack_require__(283);
	var RequestPrscriptEditorSnippets = __webpack_require__(284);
	var jsBeautify = __webpack_require__(272);
	//this has html + js options :)

	var RequestPrscriptEditor = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        pm.mediator.on("refreshPrscriptLayout", this.onRefreshLayout, this);
	        pm.mediator.on("addPrscriptSnippetToEditor", this.addPrscriptSnippetToEditor, this);

	        var snippets = new PrscriptSnippets();
	        this.snippetsList = new RequestPrscriptEditorSnippets({ model: snippets });

	        this.model.on("startNew", this.onStartNew, this);

	        pm.mediator.on("onHidePrscriptSnippets", function() {
	            view.setLayout();
	        });

	        view.hidePurchaseMessage();
	        $("#request-helper-prscript .try-jetpacks").remove();

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

	        pm.mediator.on("beautify", function() {
	            if($("#prscript-aceeditor").is(":visible") && view.editor) {
	                var oldText = view.editor.getValue();
	                var newText = jsBeautify(oldText);
	                view.editor.setValue(newText, -1);
	            }
	        }, this);

	        $("#request-prscript-editor-snippets-maximize").on("click", function() {
	            pm.settings.setSetting("hidePrscriptSnippets", false);
	            pm.mediator.trigger("onShowPrscriptSnippets");
	            view.setLayout();
	        });

	        $("#request-helper-prscript").on("click", ".know-more-collection-runner", function() {
	            pm.tracker.trackEvent('test_runner', 'know_more', 'test_editor');
	            pm.mediator.trigger("startPurchaseFlow", "test_runner");
	        });

	        $("#request-prscript-help-button").click(function() {
	            pm.tracker.trackEvent("request","pre_request_script","help");
	        });

	         $("#request-builder-tab-prscript").click(function() {
	            if(view.editor) {
	                view.editor.focus();
	            }
	        });

	        //Hack - codemirror rendering issues
	        $('li[data-id="prscript"]').on("click",function() {
	            var oldWidth = window.innerWidth;
	            window.resizeTo(window.innerWidth-1);
	            window.resizeTo(oldWidth);
	        });

	        setTimeout(function() {
	            view.setLayout();
	        }, 1000);

	        if (!this.editor) {
	            this.initializeEditor();
	        }
	        //pm.mediator.on("updateResponseFontSize", this.updateScriptFontSize, this);
	        //pm.mediator.on("updatedUIScale", this.updateScriptFontSize, this);
	    },

	    onSwitchCodeMirrorTheme: function(theme) {        
	        var codeMirror = this.editor;

	        if (codeMirror) {
	            //codeMirror.setOption("theme", theme);
	            codeMirror.setTheme("ace/theme/"+theme);
	        }        
	    },

	    updateScriptFontSize: function(newSize) {
	        var codeMirror = this.editor;

	        if (codeMirror) {
	            codeMirror.setFontSize(rem(newSize));
	        }
	    },

	    clearTextarea: function() {
	        if (this.editor) {
	            this.editor.setValue("",1);
	        }
	    },

	    hidePurchaseMessage: function() {
	        var view = this;

	        $(".request-prscript-purchase-message").css("display", "none");
	        $(".request-prscript-wrapper").css("display", "block");
	        setTimeout(function() {
	            view.setLayout();
	            view.loadPrscript();
	        }, 1000);
	    },

	    showPurchaseMessage: function() {
	        $(".request-prscript-purchase-message").css("display", "block");
	        $(".request-prscript-wrapper").css("display", "none");
	    },

	    addPrscriptSnippetToEditor: function(snippet) {
	        if (this.editor) {
	            var code = this.editor.getValue();

	            if(code !== "") {
	                code += "\n\n";
	            }

	            code += snippet.get("code");
	            this.editor.setValue(code,1);
	        }
	    },

	    setLayout: function() {
	        // var areSnippetsHidden = pm.settings.getSetting("hidePrscriptSnippets");

	        // // TODO Change these to fluid layouts later
	        // var containerWidth = $(document).width() - 405;
	        // var testEditorWidth

	        // if (!areSnippetsHidden) {
	        //     testEditorWidth = containerWidth - 220;
	        //     $("#request-prscript-editor-snippets-maximize").css("display", "none");
	        //     $(".request-prscript-editor-snippets").css("display", "block");
	        // }
	        // else {
	        //     testEditorWidth = containerWidth;
	        //     $("#request-prscript-editor-snippets-maximize").css("display", "block");
	        //     $(".request-prscript-editor-snippets").css("display", "none");
	        // }

	        // $(".request-prscript-editor-codemirror").css("width", testEditorWidth + "px");

	        // // Reenable resizing
	        // // $(".request-prscript-editor-codemirror").css("height", "300px");
	        // // $(".request-prscript-editor-snippets").css("height", "300px");
	        // $(".request-prscript-editor-snippets").css("width", "197px");
	    },

	    onRefreshLayout: function() {
	        this.setLayout();
	    },

	    onStartNew: function() {
	        this.hidePrscript();
	    },

	    initializeEditor: function() {
	        var view = this;

	        if (this.editor) {
	            return;
	        }

	        view.setLayout();

	        var theme = pm.settings.getSetting("postmanCodeMirrorTheme");

	        this.editor = ace.edit(document.getElementById("prscript-aceeditor"));        

	        this.editor.on('change', 
	            _.debounce(function() {
	                view.updateModel();
	                if(view.editor.getValue()=="") {
	                    $(".request-prscript-indicator").removeClass("active");
	                }
	                else {
	                    $(".request-prscript-indicator").addClass("active");
	                }
	            }, 100));

	        this.editor.getSession().setMode('ace/mode/javascript');

	        var codeMirror = this.editor;

	        $(".request-prscript-editor-codemirror").resizable({
	            stop: function() {
	                codeMirror.resize(true);
	            }
	        });

	        this.editor.resize();

	        setTimeout(function() {
	            view.setLayout();
	            pm.mediator.trigger("refreshPrscriptLayout");
	        }, 750);
	    },

	    showPrscript: function() {
	        //$("#request-helper-prscript").css("display", "block");
	    },

	    hidePrscript: function() {
	        //$("#request-helper-prscript").css("display", "none");
	    },

	    loadPrscript: function() {
	        var model = this.model;
	        var view = this;

	        // TODO Should only be called if the textarea is visible        
	        if (!this.editor) {
	            this.initializeEditor();
	        }

	        //setTimeout(function() {
	            view.editor.setValue("", 0);
	            $("#prscript-error").empty().hide(); //hide the error message
	            var prscript = model.get("preRequestScript");
	            if (prscript) {
	                view.editor.resize();
	                view.editor.setValue(prscript,-1);        
	                if(prscript=="") {
	                    $(".request-prscript-indicator").removeClass("active");
	                }
	                else {
	                    $(".request-prscript-indicator").addClass("active");
	                }        
	            }
	            else {
	                view.editor.setValue("", -1);
	                $(".request-prscript-indicator").removeClass("active");
	            }
	            //CodeMirror.commands["goDocStart"](view.editor);
	            view.editor.gotoLine(0, 0, false);
	        //}, 0);
	    },

	    updateModel: function() {
	        if (this.editor) {
	            this.model.set("preRequestScript", this.editor.getValue());
	        }
	    }

	});

	module.exports = RequestPrscriptEditor;


/***/ },
/* 283 */
/***/ function(module, exports) {

	var PrscriptSnippet = Backbone.Model.extend({
		default: function() {
			return {
				"id": "",
				"name": "",
				"description": "",
				"version": "",
				"code": ""
			};
		},

		initialize: function() {		
		}
	});

	var PrscriptSnippets = Backbone.Collection.extend({
		model: PrscriptSnippet,

		comparator: function(a, b) {
		    var counter;

		    var aName = a.get("name");
		    var bName = b.get("name");

		    if (aName.length > bName.length)
		        counter = bName.length;
		    else
		        counter = aName.length;

		    for (var i = 0; i < counter; i++) {
		        if (aName[i] == bName[i]) {
		            continue;
		        } else if (aName[i] > bName[i]) {
		            return 1;
		        } else {
		            return -1;
		        }
		    }
		    return 1;
		},

		initialize: function() {
			this.add(postmanPrscriptSnippets, { merge: true });
		},

		addPrscriptSnippet: function(id) {
			var snippet = this.get(id);
			pm.mediator.trigger("addPrscriptSnippetToEditor", snippet);
		}
	})

	module.exports = PrscriptSnippets;


/***/ },
/* 284 */
/***/ function(module, exports) {

	var RequestPrscriptEditorSnippets = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        this.render();

	        pm.mediator.on("onShowPrscriptSnippets", function() {
	            view.showPrscriptSnippets();
	        });

	        $("#request-prscript-editor-snippets-minimize").on("click", function() {
	            view.hidePrscriptSnippets();
	        });

	        $("#request-prscript-editor-snippets-list").on("click", ".prscript-snippet a", function() {
	            // console.log("Add snippet");
	            pm.tracker.trackEvent("request","pre_request_script","snippets");
	            var id = $(this).attr("data-id");
	            model.addPrscriptSnippet(id);
	        });
	    },

	    hidePrscriptSnippets: function() {
	        pm.settings.setSetting("hidePrscriptSnippets", true);
	        $(".request-prscript-editor-snippets").css("display", "none");

	        pm.mediator.trigger("onHidePrscriptSnippets");
	    },

	    showPrscriptSnippets: function() {
	        $(".request-prscript-editor-snippets").css("display", "block");
	    },

	    render: function() {
	        $("#request-prscript-editor-snippets-list").empty();
	        $("#request-prscript-editor-snippets-list").append(Handlebars.templates.prscript_snippets_list({"items": this.model.toJSON()}));
	    }
	});

	module.exports = RequestPrscriptEditorSnippets;


/***/ },
/* 285 */
/***/ function(module, exports) {

	var SandboxEditModal = Backbone.View.extend({
	    fileList: "",

	    initialize: function() {
	        var request = this.model;
	        var view = this;
	        if(!postman_electron) {
	            //only load for electron
	            return;
	        }
	        request.on("loadRequest", this.onLoadRequest,this);

	        pm.mediator.on("showEditSandboxModal", this.render, this);
	        var editorId = "#sandbox-file-list-editor";
	        var params = {
	            placeHolderKey:"File path",
	            placeHolderValue:"Value",
	            valueTypes:["file"],
	            deleteButton:'<span class="icon-delete"/>',
	            onBlurElement: this._updateFilenames
	        };

	        $(editorId).keyvalueeditor('init', params);

	        $("#modal-edit-sandbox .btn-primary").click(function() {
	            var fileList = _.map($("#sandbox-file-list-editor").keyvalueeditor('getValues'), function(obj) {
	               if(obj.key) {
	                   return obj.key;
	               }
	            });
	            fileList=fileList.join("\n"); //this is a string of newline-separated files
	            view.fileList = fileList;
	        });

	    },

	    _updateFilenames: function() {
	        var fileinputs = $("#sandbox-file-list-editor .keyvalueeditor-value-file");
	        _.map(fileinputs, function(fileinput) {
	            var filename = $(fileinput)[0].value;
	            if(filename && filename.length>0) {
	                $(fileinput).prev().val(filename);
	            }
	            fileinput.value="";
	        });
	    },

	    updateModel: function() {
	        this.model.set("sandboxFiles", this.fileList);
	    },

	    onLoadRequest: function() {
	        if(!this.model.get("sandboxFiles")) {
	            $("#sandbox-file-list-editor").keyvalueeditor('reset', []);
	            return;
	        }
	        var fileList = this.model.get("sandboxFiles").split("\n");
	        var fileListObj = _.map(fileList, function(fileName) {
	            return {
	                key: fileName,
	                value: "",
	                type: 'file'
	            };
	        });
	        $("#sandbox-file-list-editor").keyvalueeditor('reset', fileListObj);
	    },

	    render: function() {
	        $("#modal-edit-sandbox").modal("show");
	    }
	});
	module.exports = SandboxEditModal;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	var ResponseBodyViewer = __webpack_require__(287);
	var ResponseHeaderViewer = __webpack_require__(293);
	var ResponseCookieViewer = __webpack_require__(294);
	var ResponseMetaViewer = __webpack_require__(295);
	var ResponseSaver = __webpack_require__(296);
	var TestResultViewer = __webpack_require__(297);

	var ResponseViewer = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var responseModel = model.get("response");
	        var view = this;

	        this.defaultSection = "body";

	        this.responseBodyViewer = new ResponseBodyViewer({model: this.model});
	        this.responseHeaderViewer = new ResponseHeaderViewer({model: this.model});
	        this.responseCookieViewer = new ResponseCookieViewer({model: this.model});
	        this.responseMetaViewer = new ResponseMetaViewer({model: this.model});
	        this.responseSaver = new ResponseSaver({model: this.model});

	        this.testResultViewer = new TestResultViewer({model: this.model});

	        responseModel.on("failedRequest", this.onFailedRequest, this);
	        responseModel.on("clearResponse", this.clear, this);
	        responseModel.on("sentRequest", this.onSentRequest, this);
	        responseModel.on("loadResponse", this.load, this);
	        responseModel.on("responseRendered", this.onResponseRendered, this);

	        $(window).on("resize", function(){
	            setTimeout(function(){
	                view.resizeResponseContainer();
	                view.responseBodyViewer.refreshLayout();
	            }, 200);
	        });

	        $('#response-body-toggle').on("click", function () {
	            view.responseBodyViewer.toggleBodySize();
	        });

	        $('#response-body-line-wrapping').on("click", function () {
	            view.responseBodyViewer.toggleLineWrapping();
	            return true;
	        });

	        $('#response-formatting').on("click", "a", function () {
	            var previewType = $(this).attr('data-type');
	            pm.tabManager.getCurrentTab().get("uiState").response.activeResponseView = previewType;
	            view.responseBodyViewer.changePreviewType(previewType);
	        });

	        $('#response-language').on("click", "a", function () {
	            var language = $(this).attr("data-mode");
	            view.responseBodyViewer.setMode(language);
	        });

	        $('.response-tabs').on("click", "li a", function () {
	            var section = $(this).attr('data-section');
	            pm.tabManager.getCurrentTab().get("uiState").response.activeResponseTab = section
	            pm.settings.setSetting("responsePreviewDataSection", section);

	            if (section === "body") {
	                view.showBody();
	            }
	            else if (section === "headers") {
	                view.showHeaders();
	            }
	            else if (section === "cookies") {
	                view.showCookies();
	            }
	            else if (section === "tests") {
	                view.showTests();
	            }
	        });

	        $(".scroll-to-response-button").on("click", function(){
	            setTimeout(function() {
	               $('#response').velocity("scroll", {
	                   duration: 700,
	                   easing: "easeInOutCubic",
	                   container: $("#request-builder-view"),
	                   offset: rem(-170)
	               });
	           }, 0);
	        });


	        $(document).bind('keydown', 'f', function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "toggle_response_fullscreen");

	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            view.responseBodyViewer.toggleBodySize();
	        });

	        //Helper funcs for detecting links in the response header - POSTman pull request 795
	        var linkRegex = /(\s*<\s*)([^>]*)(\s*>[^,]*,?)/g;

	        var linkFunc = function (all, pre_uri, uri, post_uri) {
	            return Handlebars.Utils.escapeExpression(pre_uri)
	                + "<span class=\"cm-link\">"
	                + uri
	                + "</span>"
	                + Handlebars.Utils.escapeExpression(post_uri);
	        };

	        Handlebars.registerHelper('link_to_hyperlink', function(linkValue) {
	            var output = linkValue.replace(linkRegex, linkFunc);
	            return new Handlebars.SafeString(output);
	        });

	        /* promo banners */
	        pm.mediator.on('banner:show:beta_sync_launched', function(payload) {
	          // dont show if any response is currently rendered or message is already active
	          if (postman_env !== "sync_stage" ||
	              pm.settings.getSetting('syncLaunchedNewBannerDismissed') ||
	              this.getActiveScreen() !== null) {
	            return;
	          }

	          // show banner
	          var link = '<a href="'+payload.link+'" target="_blank">Learn more</a>';
	          if(payload.isAdmin) {
	            link = '<a href="'+payload.link+'" target="_blank">Migrate to Postman Cloud.</a>';
	          }

	          pm.alerts.warning('The Team Sync Beta (free) will expire on 7th December 2015. ' + link, {
	            persist: true,
	            dedupeId: 'beta-expiry-warning',
	            layout: 'topCenterAuto',
	            afterClose: function() {
	                pm.settings.setSetting('syncLaunchedNewBannerDismissed', true);
	            }
	          });
	        }.bind(this));

	        /*Shows banner for jetpacks teams*/
	        pm.mediator.on('banner:show:jp_cloud_trial_launched', function(payload) {
	            // dont show if any response is currently rendered or message is already active
	            if (pm.settings.getSetting('jpCloudTrialBannerDismissed') || this.getActiveScreen() !== null) {
	                return;
	            }

	            // show banner
	            var link = 'You can now share collections in a team library with Postman Cloud. <a href="'+payload.link+'" target="_blank">Learn more.</a>';
	            if(payload.isAdmin) {
	                link = 'You can now share collections in a team library with Postman Cloud. Your Jetpacks team gets a <a href="'+payload.link+'" target="_blank">free 90 day trial</a>';
	            }

	            pm.alerts.info(link, {
	                persist: true,
	                showAsHtml: true,
	                dedupeId: 'jp-cloud-banner',
	                layout: 'topCenterAuto',
	                afterClose: function() {
	                    pm.settings.setSetting('jpCloudTrialBannerDismissed', true);
	                }
	            });
	        }.bind(this));
	    },

	    dismissBanner: function() {
	      $('#sync-launched-banner').css('display', 'none');
	    },

	    resizeResponseContainer: function() {
	        var stickyRequestHeight = $(".postman-navbar").outerHeight(true)
	                                + $("#request-context").outerHeight(true)
	                                + $("#request-url-flexer").outerHeight(true);
	        var responseHeight = window.innerHeight - stickyRequestHeight - 20;
	        $("#response").css("height", responseHeight+"px");
	        $("#response .ace_editor").css("height", (responseHeight-110)+"px");
	        $("#code-data-raw").css("height", (responseHeight-110)+"px");
	    },

	    onResponseRendered: function() {


	        //scroll to response after load
	        var response = this.model.get("response");
	        var request = this.model;
	        // var scrollSetting = pm.settings.getSetting("scrollToResponse");

	        // $(".scroll-to-response-button").css("display", "block");

	        //NEVER SCROLL TO RESPONSE :(
	        /*if(scrollSetting && (response.get("isSample") !== true || response.get("scrollToResult")==true)) {
	            //$("#request-builder-view")[0].scrollTop = $("#request-builder-view")[0].scrollHeight;
	            setTimeout(function() {
	                 $('#response').velocity("scroll", {
	                     duration: 700,
	                     easing: "easeInOutCubic",
	                     container: $("#request-builder-view"),
	                     offset: -170
	                 });
	             }, 100);
	        }*/

	        var uiState = request.get("uiState");
	        if(uiState.hasOwnProperty("builderScroll")) {
	            document.getElementById("request-builder-view").scrollTop = uiState.builderScroll;
	        }

	        pm.mediator.trigger("responseRendered");
	    },

	    onScrollToResponse: function() {
	        setTimeout(function() {
	             $('#response').velocity("scroll", {
	                 duration: 700,
	                 easing: "easeInOutCubic",
	                 container: $("#request-builder-view"),
	                 offset: -170
	             });
	         }, 100);
	    },

	    onSentRequest: function() {
	        this.showScreen("waiting");
	    },

	    onFailedRequest: function(errorUrl) {
	        errorUrl = encodeURI(errorUrl);
	        $('#connection-error-url').html("<a href='" + errorUrl + "' target='_blank'>" + errorUrl + "</a>");
	        this.showScreen("failed");
	    },

	    clear: function() {
	        $('#response').css("display", "none");
	    },

	    load:function () {
	        var model = this.model;
	        var request = model;
	        var response = model.get("response");
	        var headers = response.get("headers");
	        var time = response.get("time");
	        var failed = response.get("failed");

	        if(!failed) {
	            var previewType = response.get("previewType");
	            var language = response.get("language");
	            var responseRawDataType = response.get("rawDataType");
	            var responseData = response.get("responseData");
	            var text = response.get("text");
	            var method = request.get("method");
	            var action = model.get("action");
	            var presetPreviewType = pm.settings.getSetting("previewType");

	            var currentTab = pm.tabManager.getCurrentTab();
	            var activeSection;
	            if(currentTab.get("uiState").response && currentTab.get("uiState").response.activeResponseTab) {
	                activeSection = currentTab.get("uiState").response.activeResponseTab;
	            }
	            else {
	                activeSection = pm.settings.getSetting("responsePreviewDataSection");
	            }

	            //console.log("loading response tab to state",activeSection);

	            var runTests = response.get("runTests");
	            if(typeof runTests === "undefined" || runTests == null) {
	                runTests = true;
	            }

	            this.showScreen("success");

	            $('#response').css("display", "block");
	            $("#response-data").css("display", "block");

	            if (action === "download") {
	                this.showHeaders();
	            }
	            else {
	                if (method === "HEAD") {
	                    this.showHeaders();
	                }
	                else {
	                    if (activeSection === "body") {
	                        this.showBody();
	                    }
	                    else if (activeSection === "headers") {
	                        this.showHeaders();
	                    }
	                    else if (activeSection === "tests") {
	                        this.showTests();
	                    }
	                    else if (activeSection === "cookies") {
	                        this.showCookies();
	                    }
	                    else {
	                        this.showBody();
	                    }
	                }
	            }

	            if (request.get("isFromCollection") === true) {
	                $("#response-collection-request-actions").css("display", "block");
	            }
	            else {
	                $("#response-collection-request-actions").css("display", "none");
	            }
	        }
	        else {
	            this.showScreen("failed");
	        }

	        response.trigger("finishedLoadResponse", runTests);
	        response.set("runTests", true); //so that tests are run when the HTTP response is loaded

	        $("#response-as-code, #response-as-code .CodeMirror, textarea#code-data-raw").css("font-size", rem(pm.settings.getSetting("responseFontSize")));

	        this.resizeResponseContainer();
	    },

	    showHeaders:function () {
	        $('.response-tabs li a').removeClass("active");
	        $('.response-tabs li a[data-section="headers"]').addClass("active");
	        $('#response-data-container').css("display", "none");
	        $('#response-headers-container').css("display", "block");
	        $('#response-cookies-container').css("display", "none");
	        $('#response-tests-container').css("display", "none");
	    },

	    showBody:function () {
	        $('.response-tabs li a').removeClass("active");
	        $('.response-tabs li a[data-section="body"]').addClass("active");
	        $('#response-data-container').css("display", "block");
	        $('#response-headers-container').css("display", "none");
	        $('#response-cookies-container').css("display", "none");
	        $('#response-tests-container').css("display", "none");

	        //reset Aceditor
	        var codeDataArea = document.getElementById("response-code-aceeditor");
	        var codeMirror = ace.edit(codeDataArea);
	        codeMirror.resize();
	    },

	    showCookies:function () {
	        $('.response-tabs li a').removeClass("active");
	        $('.response-tabs li a[data-section="cookies"]').addClass("active");
	        $('#response-data-container').css("display", "none");
	        $('#response-headers-container').css("display", "none");
	        $('#response-cookies-container').css("display", "block");
	        $('#response-tests-container').css("display", "none");
	    },

	    showTests:function () {
	        $('.response-tabs li a').removeClass("active");
	        $('.response-tabs li a[data-section="tests"]').addClass("active");
	        $('#response-data-container').css("display", "none");
	        $('#response-headers-container').css("display", "none");
	        $('#response-cookies-container').css("display", "none");
	        $('#response-tests-container').css("display", "block");
	    },

	    getActiveScreen: function() {
	      if($("#response").css("display") !== "block") {
	        return null;
	      }

	      var screens = [
	        { screen: "waiting", id: "#response-waiting-container" },
	        { screen: "failed", id: "#response-failed-container" },
	        { screen: "success", id: "#response-success-container" },
	        { screen: "message", id: "#response-message-container" }
	      ];

	      for (var i = 0; i < screens.length; i++) {
	        if($(screens[i].id).css("display") === "block") {
	          return screens[i].screen;
	        }
	      }

	      return null;
	    },

	    showScreen:function (screen) {
	        $("#response").css("display", "block");
	        var active_id = "#response-" + screen + "-container";
	        var all_ids = [
	          "#response-waiting-container",
	          "#response-failed-container",
	          "#response-success-container",
	          "#response-message-container"
	        ];
	        for (var i = 0; i < all_ids.length; i++) {
	            $(all_ids[i]).css("display", "none");
	        }

	        $(active_id).css("display", "block");

	        return active_id;
	    }
	});

	module.exports = ResponseViewer;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	var ResponseBodyPrettyViewer = __webpack_require__(288);
	var ResponseBodyRawViewer = __webpack_require__(289);
	var ResponseBodyIFrameViewer = __webpack_require__(290);
	var ResponseBodyImageViewer = __webpack_require__(291);
	var ResponseBodyPDFViewer = __webpack_require__(292);

	var ResponseBodyViewer = Backbone.View.extend({
	    initialize: function() {
	        var view = this;
	        var model = this.model;
	        var response = model.get("response");
	        response.on("finishedLoadResponse", this.load, this);

	        this.responseBodyPrettyViewer = new ResponseBodyPrettyViewer({model: this.model});
	        this.responseBodyRawViewer = new ResponseBodyRawViewer({model: this.model});
	        this.responseBodyIFrameViewer = new ResponseBodyIFrameViewer({model: this.model});

	        this.responseBodyImageViewer = new ResponseBodyImageViewer({model: this.model});
	        this.responseBodyPDFViewer = new ResponseBodyPDFViewer({model: this.model});

	        $(document).bind('keydown', 'ctrl+f', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "search_response");
	            view.searchResponse();
	        });

	        $(document).bind('keydown', 'meta+f', function() {
	            pm.tracker.trackEvent("interaction", "shortcut", "search_response_meta");
	            view.searchResponse();
	        });

	        // REFACTOR: This needs to be refactored more and put in a different function
	        // Need to ensure that function sizes are as small as possible

	        //Bind search events for JSON/XML/HTML pretty modes
	        $(".jv-search-field").keyup(function(e) {
	            if(e.keyCode==27) {
	                $("span.jv_searchFound").contents().unwrap();
	                view.model.set("jsonSearchString","");
	                $(".search-panel").hide();
	                $("#prettySearchToggle").removeClass("active");
	                $(this).val("");
	            }
	            if(e.keyCode==13) {
	                e.preventDefault();

	                jv_processJSON(view.model.get("jsonPreParse"));
	                $("span.jv_searchFound").contents().unwrap();
	                view.model.set("jsonSearchString",this.value);
	                var searchString = view.model.get("jsonSearchString");
	                if(searchString == "") {
	                    $(".jv-search-panel>.sidebar-search-cancel").hide();
	                    return;
	                }

	                var regExSpecial = "+?^[]()$*|.";
	                var ns="";
	                for(i=0;i<searchString.length;i++) {
	                    if(regExSpecial.indexOf(searchString[i])==-1) {
	                        ns+=searchString[i]
	                    }
	                    else ns+="\\"+searchString[i]
	                }
	                var searchStringReg=ns;


	                $(".jv-search-panel>.sidebar-search-cancel").show();
	                $("span.jv.string , span.jv.num , span.jv.prop , span.jv.bool , a.jv.link").each(function() {
	                    if(this.innerHTML.toLowerCase().indexOf(searchString.toLowerCase())!=-1) {
	                        var ih = this.innerHTML;
	                        var regex = new RegExp( '(' + searchStringReg + ')', 'gi' );
	                        ih = ih.replace(regex,'<span class="jv_searchFound">$1</span>');
	                        this.innerHTML = ih;
	                    }
	                });
	                if($("span.jv_searchFound").length>0) {
	                    var cur_node = $("span.jv_searchFound")[0];
	                    if ('scrollIntoViewIfNeeded' in cur_node)
	                        cur_node.scrollIntoViewIfNeeded();
	                    else
	                        cur_node.scrollIntoView();
	                    view.model.set("scrollToNextResult",0);
	                }

	                $(".jv-search-field").blur();

	                //$(".search-panel").hide();
	                $(this).val("");
	            }
	        });

	        // REFACTOR: This needs to be refactored more and put in a different function
	        // Need to ensure that function sizes are as small as possible
	        $(".html-search-field").keyup(function(e) {
	            e.stopPropagation();

	            $("span.jv_searchFound").contents().unwrap();

	            view.model.set("htmlSearchString",this.value);
	            var searchString = view.model.get("htmlSearchString");
	            if(searchString == "") {
	                $(".html-search-panel>.sidebar-search-cancel").hide();
	                return;
	            }
	            var regExSpecial = "+?^[]()$*|.";
	            var ns="";
	            for(i=0;i<searchString.length;i++) {
	                if(regExSpecial.indexOf(searchString[i])==-1) {
	                    ns+=searchString[i];
	                }
	                else ns+="\\"+searchString[i]
	            }
	            var searchStringReg=ns;

	            $(".html-search-panel>.sidebar-search-cancel").show();

	            $("span.rainbow.support.tag-name , span.rainbow.comment.html , span.rainbow.support.attribute , span.rainbow.string.value , span.rainbow.plainText , span.rainbow.entity.tag.script , span.rainbow.entity.tag.style").each(function() {
	                if($(this).hasClass("plainText") && $(this).children().length!=0) {
	                    return true;
	                }
	                if(this.innerHTML.toLowerCase().indexOf(searchString.toLowerCase())!=-1) {
	                    var ih = this.innerHTML;
	                    var regex = new RegExp( '(' + searchStringReg + ')', 'gi' );
	                    ih = ih.replace(regex,'<span class="jv_searchFound">$1</span>');
	                    this.innerHTML = ih;
	                }
	            });

	            if($("span.jv_searchFound").length>0) {
	                var cur_node = $("span.jv_searchFound")[0];
	                if ('scrollIntoViewIfNeeded' in cur_node)
	                    cur_node.scrollIntoViewIfNeeded();
	                else
	                    cur_node.scrollIntoView();
	                view.model.set("scrollToNextResult",0);
	            }
	        });

	        // $(".sidebar-search-cancel").click(function() {
	        // 	var t=$(this);
	        // 	t.parent().children(".search-field").val("");
	        // 	t.hide();
	        // 	$("span.jv_searchFound").contents().unwrap();
	        //     $(".search-panel").hide();
	        //     $("#prettySearchToggle").removeClass("active");
	        //     view.model.set("jsonSearchString","");
	        //     view.model.set("xmlSearchString","");
	        //     view.model.set("htmlSearchString","");
	        // });

	    },

	    searchResponse: function() {
	        //this.changePreviewType("parsed");
	        //CodeMirror.commands.find(this.responseBodyPrettyViewer.codeMirror);
	    },

	    refreshLayout: function() {
	        this.responseBodyPrettyViewer.refreshLayout();
	    },

	    downloadBody: function(response) {
	        var previewType = response.get("previewType");
	        var responseRawDataType = response.get("rawDataType");
	        var filedata;
	        var type = previewType;
	        var filename = "response" + "." + previewType;

	        var useInterceptor = pm.settings.getSetting("useInterceptor");
	        if (responseRawDataType === "arraybuffer") {
	            filedata = response.get("responseData");

	            if (useInterceptor) {
	                filedata = ArrayBufferEncoderDecoder.decode(filedata);
	            }
	        }
	        else {
	            filedata = response.get("text");
	        }

	        pm.filesystem.saveAndOpenFile(filename, filedata, type, function () {
	          pm.alerts.success('Saved');
	        });
	    },

	    load: function() {
	        var model = this.model;
	        var request = model;
	        var response = model.get("response");
	        var previewType = response.get("previewType");
	        var responseRawDataType = response.get("rawDataType");
	        var language = response.get("language");
	        var text = response.get("text");
	        if(response.get("empty")) {
	            $("#response").hide();
	            return;
	        }

	        var presetPreviewType;
	        var currentTab  = pm.tabManager.getCurrentTab();
	        if(currentTab.get("uiState").response && currentTab.get("uiState").response.activeResponseView) {
	            presetPreviewType = currentTab.get("uiState").response.activeResponseView;
	        }
	        else {
	            presetPreviewType = pm.settings.getSetting("previewType");
	        }

	        var activeDataSection;
	        if(currentTab.get("uiState").response && currentTab.get("uiState").response.activeResponseTab) {
	            activeDataSection = currentTab.get("uiState").response.activeResponseTab;
	        }
	        else {
	            activeDataSection = pm.settings.getSetting("responsePreviewDataSection");
	        }

	        var action = model.get("action");
	        var forceNoPretty = response.get("forceNoPretty");

	        if (action === "download") {
	            $('#response-data-container').css("display", "none");
	            this.downloadBody(response);
	        }
	        else {
	            if (model.get("method") !== "HEAD") {
	                $('#response-data-container').css("display", "block");
	            }

	            if (previewType === "image") {
	                $('#response-as-code').css("display", "none");
	                $('#response-as-text').css("display", "none");
	                $('#response-as-image').css("display", "block");

	                $('#response-formatting').css("display", "none");
	                $('#response-actions').css("display", "none");
	                $("#response-language").css("display", "none");
	                $("#response-as-preview").css("display", "none");
	                $("#response-copy-container").css("display", "none");
	                $("#response-pretty-modifiers").css("display", "none");
	            }
	            else if (previewType === "pdf" && responseRawDataType === "arraybuffer") {
	                // Hide everything else
	                $('#response-as-code').css("display", "none");
	                $('#response-as-text').css("display", "none");
	                $('#response-as-image').css("display", "none");

	                $('#response-formatting').css("display", "none");
	                $('#response-actions').css("display", "none");
	                $("#response-language").css("display", "none");
	                $("#response-copy-container").css("display", "none");
	                $("#response-pretty-modifiers").css("display", "none");
	            }
	            else if (previewType === "pdf" && responseRawDataType === "text") {
	            }
	            else if(["preview","parsed","raw"].indexOf(previewType)!==-1 && responseRawDataType==="text") {
	                this.displayTextResponse(language, text, previewType, true, forceNoPretty);
	            }
	            else {
	                this.displayTextResponse(language, text, presetPreviewType, true, forceNoPretty);
	            }

	            if (activeDataSection !== "body") {
	                $("#response-data-container").css("display", "none");
	            }
	        }
	    },

	    displayTextResponse:function (language, response, format, forceCreate, forceNoPretty) {

	        //Keep CodeMirror div visible otherwise the response gets cut off
	        $("#response-copy-container").css("display", "block");

	        $('#response-as-code').css("display", "block");
	        $('#response-as-text').css("display", "none");
	        $('#response-as-image').css("display", "none");

	        $('#response-formatting').css("display", "block");
	        $('#response-actions').css("display", "block");

	        $('#response-formatting a').removeClass('active');
	        $('#response-formatting a[data-type="' + format + '"]').addClass('active');

	        $('#code-data').css("display", "none");
	        $('#code-data').attr("data-mime", language);

	        $('#response-language').css("display", "block");
	        //$('#response-language a').removeClass("active");
	        $("span#currentPrettyMode").text("Default");
	        this.model.set("inHtmlMode",false);
	        $("div.treeView").hide();

	        $("div#response-as-code>div.CodeMirror").show();
	        $(".search-panel").hide();
	        $("#prettySearchToggle").removeClass("active");
	        $(".CodeMirror-dialog.CodeMirror-dialog-top").remove();

	        //Pretty views
	        if(format === "parsed") {
	            if (language === 'javascript') {
	                this.responseBodyPrettyViewer.showJSONPretty_new(response, forceNoPretty, 0);
	            }
	            else if(language === 'xml') {
	                console.log("Render XML response");
	                this.responseBodyPrettyViewer.showXMLPretty_new(response, forceNoPretty);
	            }
	            else if(language === "html") {
	                this.responseBodyPrettyViewer.showHTMLPretty_new(response, forceNoPretty);
	            }
	            else if(language === "plainText") {
	                this.responseBodyPrettyViewer.showTextPretty_new(response, forceNoPretty);
	            }
	        }
	        ///---Pretty views

	        // var documentHeight = $(document).height();
	        //$("#response-as-code").css('height',(documentHeight-495)+"px");
	        //plaint-text-pretty

	        if (format === "parsed") {
	            $('#code-data-raw').val(response);
	            $('#response-as-code').css("display", "block");
	            $('#response-as-text').css("display", "none");
	            $('#response-as-preview').css("display", "none");
	            $('#response-pretty-modifiers').css("display", "block");
	        }
	        else if (format === "raw") {
	            $('#code-data-raw').val(response);
	            // $('#code-data-raw').css("height", "400px");
	            $('#response-as-code').css("display", "none");
	            $('#response-as-text').css("display", "block");
	            $('#response-pretty-modifiers').css("display", "none");
	            this.model.get("response").trigger("responseRendered");
	        }
	        else if (format === "preview") {
	            $('#response-as-code').css("display", "none");
	            $('#response-as-text').css("display", "none");
	            $('#response-as-preview').css("display", "block");
	            $('#response-pretty-modifiers').css("display", "none");
	        }
	    },

	    loadImage: function(url) {
	        var remoteImage = new RAL.RemoteImage({
	            priority: 0,
	            src: imgLink,
	            headers: this.model.getXhrHeaders()
	        });

	        remoteImage.addEventListener('loaded', function(remoteImage) {
	        });

	        $("#response-as-image").empty();
	        var container = document.querySelector('#response-as-image');
	        container.appendChild(remoteImage.element);

	        RAL.Queue.add(remoteImage);
	        RAL.Queue.setMaxConnections(4);
	        RAL.Queue.start();
	    },

	    changePreviewType:function (newType) {
	        var request = this.model;
	        var response = request.get("response");
	        var previewType = response.get("previewType");
	        var text = response.get("text");

	        if (previewType === newType) {
	            return;
	        }

	        var language = this.model.get("response").get("language");

	        previewType = newType;
	        response.set("previewType", newType);
	        pm.settings.setSetting("previewType", newType);

	        $('#response-formatting a').removeClass('active');
	        $('#response-formatting a[data-type="' + previewType + '"]').addClass('active');

	        if (previewType === 'raw') {
	            $('#response-as-text').css("display", "block");
	            $('#response-as-code').css("display", "none");
	            $('#response-as-preview').css("display", "none");
	            $('#code-data-raw').val(text);

	            // $('#code-data-raw').css("height", "600px");
	            $('#response-pretty-modifiers').css("display", "none");
	        }
	        else if (previewType === 'parsed') {
	            if(language==="javascript" && !this.model.get("jsonIsCurrent")) {
	                this.responseBodyPrettyViewer.showJSONPretty_new(text);
	            }
	            else if(language==="xml" && !this.model.get("xmlIsCurrent")) {
	                this.responseBodyPrettyViewer.showXMLPretty_new(text);
	            }
	            else if(language==="html" && !this.model.get("htmlIsCurrent")) {
	                this.responseBodyPrettyViewer.showHTMLPretty_new(text);
	            }

	            $('#response-as-text').css("display", "none");
	            $('#response-as-code').css("display", "block");
	            $('#response-as-preview').css("display", "none");
	            $('#code-data').css("display", "none");
	            $('#response-pretty-modifiers').css("display", "block");
	            // TODO Throwing an error
	            // this.responseBodyPrettyViewer.codeMirror.refresh();
	        }
	        else if (previewType === 'preview') {
	            response.trigger("changeResponseViewMethod");

	            $('#response-as-text').css("display", "none");
	            $('#response-as-code').css("display", "none");
	            $('#code-data').css("display", "none");
	            $('#response-as-preview').css("display", "block");
	            $('#response-pretty-modifiers').css("display", "none");
	        }
	    },

	    toggleBodySize:function () {
	        var request = this.model;
	        var response = request.get("response");
	        var state = response.get("state");

	        if ($('#response').css("display") === "none") {
	            return false;
	        }

	        // $('a[rel="tooltip"]').tooltip('hide');

	        if (state.size === "normal") {
	            state.size = "maximized";
	            $('#response-body-toggle span').removeClass("icon-size-toggle-maximize");
	            $('#response-body-toggle span').addClass("icon-size-toggle-minimize");
	            state.width = $('#response-data').width();
	            state.height = $('#response-data').height();
	            state.display = $('#response-data').css("display");
	            state.overflow = $('#response-data').css("overflow");
	            state.position = $('#response-data').css("position");

	            $('#response-data').css("position", "absolute");
	            $('#response-data').css("overflow", "scroll");
	            $('#response-data').css("left", 0);
	            $('#response-data').css("top", "-15px");
	            $('#response-data').css("width", $(document).width() - 20);
	            $('#response-data').css("height", $(document).height());
	            $('#response-data').css("z-index", 100);
	            $('#response-data').css("padding", "10px");
	        }
	        else {
	            state.size = "normal";
	            $('#response-body-toggle span').removeClass("icon-size-toggle-minimize");
	            $('#response-body-toggle span').addClass("icon-size-toggle-maximize");
	            $('#response-data').css("position", state.position);
	            $('#response-data').css("overflow", state.overflow);
	            $('#response-data').css("left", 0);
	            $('#response-data').css("top", 0);
	            $('#response-data').css("width", state.width);
	            $('#response-data').css("height", state.height);
	            $('#response-data').css("z-index", 10);
	            $('#response-data').css("padding", "0px");
	        }

	        $('#response-body-toggle').focus();

	        response.set("state", state);
	    },

	    toggleLineWrapping: function() {
	        this.responseBodyPrettyViewer.toggleLineWrapping();
	    },

	    setMode:function (mode) {
	        var model = this.model;
	        var request = model;
	        var response = model.get("response");
	        var forceNoPretty = response.get("forceNoPretty");
	        var responseBody = response.get("body");

	        var text = response.get("text");

	        // TODO Make sure this is being stored properly
	        var previewType = pm.settings.getSetting("previewType");
	        this.displayTextResponse(mode, text, previewType, true, forceNoPretty);
	    }
	});

	module.exports = ResponseBodyViewer;


/***/ },
/* 288 */
/***/ function(module, exports) {

	var ResponseBodyPrettyViewer = Backbone.View.extend({
		defineCodeMirrorLinksMode:function () {
	        if(this.codeMirror) {
	            var editor = this.codeMirror
	            var view = this;
	            editor.hoverLink = new HoverLink(editor);
	            editor.hoverLink.on("open", function(link) {
	               view.updateUrlFromResponse(link.value);
	            })
	        }
		},

		toggleLineWrapping:function () {
	        var codeMirror = this.codeMirror;
	        if(!codeMirror) return;

	        var lineWrapping = codeMirror.getSession().getUseWrapMode();
	        if (lineWrapping === true) {
	            $('#response-body-line-wrapping').removeClass("active");
	            lineWrapping = false;
	            codeMirror.setOption('wrap','none');
	        }
	        else {
	            $('#response-body-line-wrapping').addClass("active");
	            lineWrapping = true;
	            codeMirror.setOption('wrap','free')
	        }

	        pm.settings.setSetting("lineWrapping", lineWrapping);
		},

		initialize: function() {
			this.codeMirror = null;
			this.mode = "text";
			this.defineCodeMirrorLinksMode();

			pm.cmp = this.codeMirror;

	        pm.mediator.on("switchCodeMirrorTheme", this.onSwitchCodeMirrorTheme, this);

			pm.mediator.on("focusPrettyViewer", this.onFocusPrettyViewer, this);

	        pm.mediator.on("updateResponseFontSize", this.updateResponseFontSize, this);
	        pm.mediator.on("updatedUIScale", this.updateResponseFontSize, this);

	        pm.mediator.on("refreshLayout", this.refreshLayout, this);

	        pm.mediator.on("setResponseAceSearch", this.setSearchBox, this);

	        pm.mediator.on("searchBarClosed", this.onSearchBoxClosed, this);
	        pm.mediator.on("searchBarOpened", this.onSearchBoxOpened, this);

	        _.bindAll(this, "updateUrlFromResponse");
	    },

	    /**
	     * The search box was closed from within aceeditor.
	     */
	    onSearchBoxClosed: function() {
	        $("#prettySearchToggle").removeClass("active");
	    },

	    onSearchBoxOpened: function() {
	        $("#prettySearchToggle").addClass("active");
	    },

	    setSearchBox: function(show) {
	        var codeMirror = this.codeMirror;
	        if (codeMirror) {
	            if(show) {
	                codeMirror.execCommand("find");
	                $("#prettySearchToggle").addClass("active");
	            }
	            else if(codeMirror.searchBox) {
	                codeMirror.searchBox.hide();
	                $("#prettySearchToggle").removeClass("active");
	            }
	        }
	    },

	    refreshLayout: function() {
	        var codeMirror = this.codeMirror;

	        if (codeMirror) {
	            codeMirror.resize();
	        }
	    },

	    updateResponseFontSize: function(newSize) {
	        var codeMirror = this.codeMirror;

	        if (codeMirror) {
	            codeMirror.setFontSize(rem(newSize));
	        }
	    },

	    onSwitchCodeMirrorTheme: function(theme) {
	        var codeMirror = this.codeMirror;

	        if (codeMirror) {
	            codeMirror.setTheme("ace/theme/"+theme);
	        }
	    },

	    showJSONPretty_new: function(response, forceNoPretty, errorCount) {
	        if(typeof errorCount === "undefined") {
	            errorCount = 0;
	        }
	        errorCount++;
	        $("span#currentPrettyMode").text("JSON");
	        this.model.set("jsonIsCurrent",true);

	        if(!response || response.trim()=="") {
	            this.showResponseInAceEditor("json", "No response received");
	            this.model.get("response").trigger("responseRendered");
	            return;
	        }

	        try {
	            this.showResponseInAceEditor("json", "Rendering...");
	            var str = "";
	            if(forceNoPretty) {
	                //do not attempt to prettify
	                str = response;
	            }
	            else {
	                var hasBigNum = false;
	                str = JSON.stringify(JSONbig.parse(response), function (key, value) {
	                    if(value && !!value.toFixed) {
	                        //for decimals
	                        var strVal = value.toString();
	                        var fixedVal = null;
	                        if(!(typeof value === "object") && strVal.indexOf(".")!==-1) {
	                            //if it has a decimal, get the number of decimal places to show
	                            fixedVal = value.toFixed(Math.min(20,strVal.length-(strVal.indexOf(".")+1)));
	                        }
	                        else {
	                            fixedVal = value.toFixed();
	                        }
	                        value = "<<BIG_NUM_DELIMIT_2432>>"+fixedVal+"<</BIG_NUM_DELIMIT_2432>>"
	                        hasBigNum = true;
	                    }
	                    else if(typeof value==="string") {
	                        value=value.replace(/\\"/g, '"');
	                    }
	                    return value;
	                }, 2);

	                if(hasBigNum) {
	                    str = str.replace(/\"\<\<BIG_NUM_DELIMIT_2432\>\>/g, "").replace(/\<\<\/BIG_NUM_DELIMIT_2432\>\>\"/g, "");
	                }
	            }

	            str = str.replace(/\\\\/g,"\\"); 
	            this.showResponseInAceEditor("json", str);
	        }
	        catch(e) {

	            //USE jsonView.js from older app
	            response = jv_processJSON(response)
	            if(response==null) {
	                this.showResponseInAceEditor("json", "Malformed JSON: " + e.message);
	            }
	            else if(errorCount == 2) {
	                this.showResponseInAceEditor("json", "Something went wrong while parsing the JSON: " + e.message);
	            }
	            else {
	                this.showJSONPretty_new(response, forceNoPretty, errorCount++);    
	            }
	            
	        }
	        this.model.get("response").trigger("responseRendered");
	    },


	    showXMLPretty_new: function(response, forceNoPretty) {
	        $("span#currentPrettyMode").text("XML");
	        if(!forceNoPretty) {
	            response = vkbeautify.xml(response);
	        }
	        this.showResponseInAceEditor("xml", response);
	        this.model.set("xmlIsCurrent",true);
	        this.model.get("response").trigger("responseRendered");
	    },

	    showHTMLPretty_new: function(response, forceNoPretty) {
	        $("span#currentPrettyMode").text("HTML");
	        if(!forceNoPretty) {
	            response = vkbeautify.xml(response);
	        }
	        this.showResponseInAceEditor("html", response);
	        this.model.set("xmlIsCurrent",true);
	        this.model.get("response").trigger("responseRendered");
	    },

	    showTextPretty_new: function(response, forceNoPretty) {
	        $("span#currentPrettyMode").text("Text");
	        this.showResponseInAceEditor("plain_text", response);
	        this.model.get("response").trigger("responseRendered");
	    },

	    /**
	     * language: json/xml/html/text
	     * response: actual text to render
	     * lineWrapping
	     * @param language
	     */
	    showResponseInAceEditor: function(language, response) {
	        var lineWrapping;
	        var view = this;
	        if (pm.settings.getSetting("lineWrapping") === true) {
	            $('#response-body-line-wrapping').addClass("active");
	            lineWrapping = true;
	        }
	        else {
	            $('#response-body-line-wrapping').removeClass("active");
	            lineWrapping = false;
	        }

	        var mode = "plain_text";
	        var codeDataArea = document.getElementById("response-code-aceeditor");
	        switch(language) {
	            case 'json':
	                mode = 'json';
	                break;
	            case  'xml':
	                mode = 'xml';
	                break;
	            case 'html':
	                mode = 'html';
	                break;
	            default:
	                mode = 'plain_text';
	        }

	        this.mode = mode;
	        this.defineCodeMirrorLinksMode();

	        var codeMirror = this.codeMirror;

	        var theme = pm.settings.getSetting("postmanCodeMirrorTheme");
	        if (!codeMirror) {
	            $('#response .CodeMirror').remove();

	            $("#response-as-code").resizable({
	                stop: function() {
	                    view.codeMirror.resize(true);
	                }
	            });

	            codeMirror = ace.edit(codeDataArea);
	            this.codeMirror = codeMirror;
	            this.defineCodeMirrorLinksMode();
	            pm.cmp = codeMirror;

	            this.detachAceEditorEventListeners();
	            codeMirror.setReadOnly(true);
	            codeMirror.setValue(response, -1);

	            var theme = (pm.settings.getSetting("postmanTheme")==="light")?"eclipse":"monokai";

	            codeMirror.setTheme("ace/theme/"+theme);

	            codeMirror.getSession().on('tokenizerUpdate', function() {
	            });
	            this.restoreEditorUIState();
	            this.attachAceEditorEventListeners();
	        }
	        else {
	            this.detachAceEditorEventListeners();
	            codeMirror.setReadOnly(true);
	            codeMirror.setValue(response, -1);
	            this.restoreEditorUIState();
	            this.attachAceEditorEventListeners();
	        }

	        codeMirror.setFontSize(rem(pm.settings.getSetting("responseFontSize")));

	        codeMirror.getSession().setMode('ace/mode/' + mode);
	        setTimeout(function(){
	            codeMirror.resize();
	        },0);

	        if(language==="html") {
	            $("span#currentPrettyMode").text("HTML");

	            setTimeout(function() {
	                var hrefs = $(".ace_entity.ace_other.ace_attribute-name");
	                hrefs.each(function(index) {
	                    var href = $(this);
	                    if(href.text().toLowerCase()==="href") {
	                        var next = href.next();
	                        if(next) {
	                            var url = next.next();
	                            url.addClass("ace-editor-link");
	                        }
	                    }
	                });
	            },1000);
	        }
	        else if(language==="text"){
	            $("span#currentPrettyMode").text("Text");
	        }
	    },

	    restoreEditorUIState: function() {
	        var currentTab = pm.tabManager.getCurrentTab();
	        var session = this.codeMirror.getSession();
	        if (!currentTab)
	            debugger;

	        var scrollTopPosition = currentTab.get("uiState").response.editorScroll.top;
	        var scrollLeftPosition = currentTab.get("uiState").response.editorScroll.left;

	        session.setScrollTop(scrollTopPosition);
	        session.setScrollLeft(scrollLeftPosition);

	        var lineWrapping = pm.settings.getSetting("lineWrapping");
	        if (lineWrapping === false) {
	            $('#response-body-line-wrapping').removeClass("active");
	            this.codeMirror.setOption('wrap','none');
	        }
	        else {
	            $('#response-body-line-wrapping').addClass("active");
	            this.codeMirror.setOption('wrap','free')
	        }
	    },

	    detachAceEditorEventListeners: function() {
	        var session = this.codeMirror.getSession();
	        session.removeListener("changeScrollTop", this._onEditorScrollTopChange);
	        session.removeListener("changeScrollLeft", this._onEditorScrollLeftChange);
	    },

	    attachAceEditorEventListeners: function() {
	        var session = this.codeMirror.getSession();
	        session.on("changeScrollTop", this._onEditorScrollTopChange);
	        session.on("changeScrollLeft", this._onEditorScrollLeftChange);
	    },

	    _onEditorScrollTopChange: function(scrollTopPosition) {
	        pm.tabManager.getCurrentTab().get("uiState").response.editorScroll.top = scrollTopPosition;
	    },

	    _onEditorScrollLeftChange: function(scrollLeftPosition) {
	        pm.tabManager.getCurrentTab().get("uiState").response.editorScroll.left = scrollLeftPosition;
	    },

	    updateUrlFromResponse: function(link) {
	        if(link[0]=='/') {
	            var currentUrl = this.model.get("url");
	            //get the first part of the URL (after http:// and before the first /)
	            function getFirstPart(url) {
	                var indexOfTS = url.indexOf("//");
	                if(indexOfTS==-1) {
	                    return url.split("/")[0];
	                }
	                else {
	                    var fp = url.substring(indexOfTS+2);
	                    return url.substring(0,indexOfTS)+"//"+fp.split("/")[0];
	                }

	            }
	            link = getFirstPart(currentUrl) + link;
	        }
	        var headers = $('#headers-keyvaleditor').keyvalueeditor('getValues');
	        this.model.loadRequestFromLink(link, headers);
	    }
	});

	module.exports = ResponseBodyPrettyViewer;


/***/ },
/* 289 */
/***/ function(module, exports) {

	var ResponseBodyRawViewer = Backbone.View.extend({
	    initialize: function() {

	    }
	});

	module.exports = ResponseBodyRawViewer;


/***/ },
/* 290 */
/***/ function(module, exports) {

	var ResponseBodyIFrameViewer = Backbone.View.extend({
	    initialize: function() {
	    	var model = this.model;
	    	var response = model.get("response");
	    	response.on("finishedLoadResponse", this.render, this);
		    response.on("changeResponseViewMethod", this.render, this);
	    },

	    render: function() {
	    	var model = this.model;
	    	var request = model;
	    	var response = model.get("response");
	    	var previewType = response.get("previewType");
	    	var text = response.get("text");

	    	if (previewType === "html" || previewType === "preview") {
	    	    $("#response-as-preview").empty();
	    	    var cleanResponseText = model.stripScriptTag(text);
	    	    pm.filesystem.renderResponsePreview("response.html", cleanResponseText, "html", function (response_url) {
	    	        $("#response-as-preview").html("<iframe scrolling='yes' id='previewIframe'></iframe>");
	    	        $("#response-as-preview iframe").attr("src", response_url);
	                $('#previewIframe').removeAttr('sandbox');
	    	        $('#previewIframe').load(function() {
	                    var stickyRequestHeight = $(".postman-navbar").outerHeight(true)
	                                            + $("#request-context").outerHeight(true)
	                                            + $("#request-url-flexer").outerHeight(true);
	                    var responseHeight = window.innerHeight - stickyRequestHeight - 20;
	                    var iframe = document.getElementById('previewIframe');
						iframe.height = responseHeight - 120;
	                    iframe.contentWindow.document.body.style["-webkit-user-select"] = "initial";
	                    //iframe.contentWindow.document.body.style["word-break"] = "break-word";
	                    iframe.contentWindow.document.body.style["-webkit-user-select"] = "text";

						/*if(pm.settings.getSetting("postmanTheme")==="dark" && response.get("language")!=="html") {
							//iframe.contentWindow.document.body.style["color"] = "rgb(202,202,202)";

						}
						else {
							//iframe.contentWindow.document.body.style["color"] = "rgb(20,20,20)";
						}*/
	                    $('#previewIframe').attr('sandbox','');
	                });
	    	    });
			    response.trigger("responseRendered");
	    	    
	    	}
	    }
	});

	module.exports = ResponseBodyIFrameViewer;


/***/ },
/* 291 */
/***/ function(module, exports) {

	var ResponseBodyImageViewer = Backbone.View.extend({
	    initialize: function() {
	    	var model = this.model;
	    	var response = model.get("response");
	    	response.on("finishedLoadResponse", this.render, this);
	    },

	    // Source: http://stackoverflow.com/questions/8022425/getting-blob-data-from-xhr-request
	    renderAsImage: function(responseData) {
	        var uInt8Array = new Uint8Array(responseData);
	        var i = uInt8Array.length;
	        var binaryString = new Array(i);
	        while (i--)
	        {
	          binaryString[i] = String.fromCharCode(uInt8Array[i]);
	        }
	        var data = binaryString.join('');

	        var base64 = window.btoa(data);
	        this.createBase64Image(base64);
	    },

	    createBase64Image: function(base64) {
	        $("#response-as-image").html("<img id='response-as-image-inline'/>");
	        document.getElementById("response-as-image-inline").src="data:image/png;base64,"+base64;
	    },

	    render: function() {
	    	var model = this.model;
	    	var request = model;
	    	var response = model.get("response");
	    	var previewType = response.get("previewType");
	        var responseRawDataType = response.get("rawDataType");

	        var useInterceptor = pm.settings.getSetting("useInterceptor");

	    	if (previewType === "image" && responseRawDataType === "text") {
	    		$('#response-as-image').css("display", "block");
	            if (!useInterceptor) {
	                model.trigger("send", "arraybuffer");
	            }            
	        }
	        else if (previewType === "image" && responseRawDataType === "arraybuffer") {
	            if (!useInterceptor) {
	                var responseData = response.get("responseData");
	                this.renderAsImage(responseData);    
	            }
	            else {                
	                var base64 = response.get("responseData");
	                this.createBase64Image(base64);
	            }            
	        }    	
	    }
	});

	module.exports = ResponseBodyImageViewer;


/***/ },
/* 292 */
/***/ function(module, exports) {

	var ResponseBodyPDFViewer = Backbone.View.extend({
	    initialize: function() {
	    	var model = this.model;
	    	var response = model.get("response");
	    	response.on("finishedLoadResponse", this.render, this);
	    },

	    render: function() {
	    	var model = this.model;
	    	var response = model.get("response");
	    	var previewType = response.get("previewType");
	    	var responseRawDataType = response.get("rawDataType");

	    	if (previewType === "pdf" && responseRawDataType === "arraybuffer") {
	            // console.log("Render the PDF");

		    	var responseData = response.get("responseData");
		    	$("#response-as-preview").empty();
		    	$("#response-as-preview").css("display", "block");

	            var filename = "response.pdf";
	            var type = "pdf";

	            pm.filesystem.saveAndOpenFile(filename, responseData, type, function () {
	              pm.alerts.success('Saved');
	            });
	    	}
	    	else if (previewType === "pdf" && responseRawDataType === "text") {
	    	 	// Trigger an arraybuffer request with the same parameters
	            model.trigger("send", "arraybuffer");
	    	}
	    }
	});

	module.exports = ResponseBodyPDFViewer;


/***/ },
/* 293 */
/***/ function(module, exports) {

	var ResponseHeaderViewer = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var response = model.get("response");
	        response.on("finishedLoadResponse", this.load, this);

	        $("#response-headers").on('click','.cm-link', function() {
	            var link = $(this).text();
	            if(link[0]=='/') {
	                var currentUrl = model.get("url");
	                //get the first part of the URL (after http:// and before the first /)
	                function getFirstPart(url) {
	                    var indexOfTS = url.indexOf("//");
	                    if(indexOfTS==-1) {
	                        return url.split("/")[0];
	                    }
	                    else {
	                        var fp = url.substring(indexOfTS+2);
	                        return url.substring(0,indexOfTS)+"//"+fp.split("/")[0];
	                    }

	                }
	                link = getFirstPart(currentUrl) + link;
	            }
	            var headers = $('#headers-keyvaleditor').keyvalueeditor('getValues');
	            model.loadRequestFromLink(link, headers);
	        });
	    },

	    load:function (data) {
	        var model = this.model;
	        var request = model;
	        var response = model.get("response");
	        var headers = response.get("headers");        

	        $('.response-tabs li a[data-section="headers"]').text("Headers (" + headers.length + ")");
	        $('#response-headers').empty();
	        $("#response-headers").append(Handlebars.templates.response_headers({"items":headers}));
	        $('.response-header-name').popover({
	            trigger: "hover"
	        });
	    },
	});

	module.exports = ResponseHeaderViewer;


/***/ },
/* 294 */
/***/ function(module, exports) {

	var ResponseCookieViewer = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var response = model.get("response");
	        response.on("finishedLoadResponse", this.load, this);
	        response.on("finishedLoadCookies", this.load, this);
	        this.addInstallInterceptorHelperCard();
	    },

	    addInstallInterceptorHelperCard: function() {
	        $("#response-cookies-not-found-message").html(Handlebars.templates.message_helper_card_install_interceptor({
	            "interceptor_id": postman_interceptor_id
	        }));
	    },

	    load: function() {
	        var model = this.model;
	        var response = model.get("response");
	        var cookies = _.cloneDeep(response.get("cookies"));

	        if (cookies) {
	            var count = 0;
	            if (!cookies) {
	                count = 0;
	            }
	            else {
	                count = cookies.length;
	            }

	            if (count === 0) {
	                if(!pm.settings.getSetting("useInterceptor") && !postman_electron) {
	                    $("#response-tabs-cookies").text("Cookies");
	                    $('#response-tabs-cookies').css("display", "block");

	                    $('#response-cookies').css("display", "none");
	                    $('#response-cookies-not-found-message').css("display", "block");
	                    $('#zero-response-cookies-found').hide();
	                }
	                else {
	                    //interceptor is enabled, but cookiess
	                    $("#response-tabs-cookies").text("Cookies");
	                    $('#response-tabs-cookies').css("display", "block");
	                    $('#zero-response-cookies-found').show();
	                    $('#response-cookies').css("display", "none");
	                    $('#response-cookies-not-found-message').css("display", "none");
	                }
	            }
	            else {
	                $("#response-tabs-cookies").text("Cookies (" + count + ")");
	                $('#response-tabs-cookies').css("display", "block");

	                $('#response-cookies').css("display", "table");
	                $('#response-cookies-not-found-message').css("display", "none");
	                $('#zero-response-cookies-found').hide();

	                cookies = _.sortBy(cookies, function (cookie) {
	                    return cookie.name;
	                });

	                for (var i = 0; i < count; i++) {
	                    var cookie = cookies[i];
	                    cookie.name = limitStringLineWidth(cookie.name, 20);
	                    cookie.value = limitStringLineWidth(cookie.value, 20);
	                    cookie.path = limitStringLineWidth(cookie.path, 20);
	                    if ("expirationDate" in cookie) {
	                      if(cookie.expirationDate == "0") {
	                        cookies[i].expires = "Never";
	                      }
	                      else {
	                        var date = new Date(cookie.expirationDate * 1000);
	                        cookies[i].expires = date.toLocaleString();
	                      }
	                    }
	                }

	                $('#response-cookies-items').html(Handlebars.templates.response_cookies({"items":cookies}));
	            }
	        }

	    }
	});

	module.exports = ResponseCookieViewer;


/***/ },
/* 295 */
/***/ function(module, exports) {

	var ResponseMetaViewer = Backbone.View.extend({
	    initialize: function() {
	    	var model = this.model;
	    	var response = model.get("response");
	    	response.on("finishedLoadResponse", this.render, this);
	    },

	    render: function() {
	    	var model = this.model;
	    	var request = model;
	    	var response = model.get("response");
	    	var time = response.get("time");

	    	$('#response-status').css("display", "block");

	    	$('#response-status').html(Handlebars.templates.item_response_code(response.get("responseCode")));
	    	$('.response-code').popover({
	    	    trigger: "hover"
	    	});

	    	$('#response-time .data').text(time + " ms");
	    }
	});

	module.exports = ResponseMetaViewer;


/***/ },
/* 296 */
/***/ function(module, exports) {

	var ResponseSaver = Backbone.View.extend({
	    initialize: function() {
	    	var model = this.model;
	    	var view = this;

	    	$("#response-sample-save-start").on("click", function() {
	        pm.mediator.trigger("dismissTooltip", "save-response");
	    		view.showSaveForm();
	    	});

		    $("#response-sample-save").on("click", function() {
		    	view.saveResponse();
	            pm.tracker.trackEvent("response", "add");
		    });

		    $("#response-sample-cancel").on("click", function() {
		    	view.cancelSaveResponse();
		    });
	    },

	    showSaveForm: function() {
			$("#response-sample-save-start").css("display", "none");
			$("#response-sample-save-form").css("display", "block");
	        $("#response-sample-name").focus();
	    },

	    hideSaveForm: function() {
	    	$("#response-sample-save-start").css("display", "block");
	    	$("#response-sample-save-form").css("display", "none");
	    },

	    // This needs the request model to be up to date
	    saveResponse: function() {
	        var view = this;

	        pm.mediator.trigger("updateRequestModel", function() {
	            view.hideSaveForm();

	            var name = $("#response-sample-name").val();

	            var response = view.model.get("response");
	            $("#response-sample-name").val("");
	            response.saveAsSample(name);
	        });
	    },

	    cancelSaveResponse: function() {
	        $("#response-sample-name").val("");
	    	this.hideSaveForm();
	    }
	});

	module.exports = ResponseSaver;


/***/ },
/* 297 */
/***/ function(module, exports) {

	var TestResultViewer = Backbone.View.extend({
		initialize: function() {
			var model = this.model;

			model.on("change:testResults", this.renderResults, this);
			model.on("change:testErrors", this.renderErrors, this);

			$("#response-tests").on("click", ".know-more-collection-runner", function() {
				pm.tracker.trackEvent('test_runner', 'know_more', 'test_result_viewer');
				pm.mediator.trigger("startPurchaseFlow", "test_runner");
			});
		},

		renderErrors: function(request) {
			// console.log("Render errors", request);
			if (pm.purchases.isUpgradeAvailable("collection-runner")) {
				if (request.get("testErrors")) {
					$('#response-tests').html("<h4>Test script execution failed</h4><h5>Error message:</h5>");
					$('#response-tests').append("<span class='test-error'>" + request.get("testErrors") + "</span>");	
				}	
			}
			else {
				this.renderPurchaseMessage();
			}		
		},

		renderPurchaseMessage: function() {
			$('#response-tests').html(Handlebars.templates.message_helper_card_jetpacks_small({}));;

			// Deactivate trial button if trial completed
			$("#response-tests .try-jetpacks").remove();
		},

		renderResults: function() {
			if (pm.purchases.isUpgradeAvailable("collection-runner")) {
				var testResults = this.model.get("testResults");		

				if (testResults === null) {
					$('.response-tabs li a[data-section="tests"]').text("Tests (0/0)");
					$('#response-tests').empty();
					return;
				}

				var d = "";
				var success = 0;
				var failure = 0;
				var total = 0;

				var results = [];
				var r;
				for (var key in testResults) {
				  if (testResults.hasOwnProperty(key)) {

				  	if (!!testResults[key]) {
				  		r = "pass";
				  	}
				  	else {
				  		r = "fail";
				  	}

				    results.push({
				    	key: key,
				    	value: r
				    });

				    if (!!testResults[key]) {
				    	success += 1;
				    }
				    else {
				    	failure += 1;
				    }

				    total += 1;
				  }
				}

				$('.response-tabs li a[data-section="tests"]').css("display", "block");
				$('.response-tabs li a[data-section="tests"]').text("Tests (" + success + "/" + total + ")");
				$('#response-tests').html(Handlebars.templates.response_tests({items: results}));
			}
			else {
				this.renderPurchaseMessage();
			}		
		}

	});

	module.exports = TestResultViewer;


/***/ },
/* 298 */
/***/ function(module, exports) {

	var BasicAuthProcessor = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "username": null,
	            "password": null,
	            "request": null,
	            "saveToRequest": false
	        };
	    },

	    initialize: function() {
	        this.on("change", this.updateDB, this);

	        var model = this;

	        pm.indexedDB.helpers.getHelper("basic", function(helper) {
	            if (helper) {
	                model.set(helper);
	            }
	        });
	    },

	    process: function() {
	        this.processCustomRequest(this.get("request"));
	    },

		processCustomRequest: function(request) {
			request.trigger("updateModel");

			var headers = request.get("headers");
			var authHeaderKey = "Authorization";
			var pos = findPosition(headers, "key", authHeaderKey);

			var username = this.get("username");
			var password = this.get("password");

			username = pm.envManager.getCurrentValue(username);
			password = pm.envManager.getCurrentValue(password);

			var rawString = username + ":" + password;
			var encodedString = "Basic " + window.btoa(unescape(encodeURIComponent(rawString)));

			request.setHeader(authHeaderKey, encodedString);
			request.trigger("customHeaderUpdate");
		},

	    updateDB: function() {
	        var helper = {
	            id: "basic",
	            username: this.get("username"),
	            password: this.get("password"),
	            timestamp: new Date().getTime(),
	            saveToRequest: this.get("saveToRequest")
	        };

	        pm.indexedDB.helpers.addHelper(helper, function(helper) {
	        });
	    }
	});

	module.exports = BasicAuthProcessor;


/***/ },
/* 299 */
/***/ function(module, exports) {

	var HawkAuthProcessor = Backbone.Model.extend({
	    defaults: function () {
	        return {
	            "hawk_id": null,
	            "hawk_key": null,
	            "algorithm": 'sha256',
	            "user": null,
	            "saveToRequest": false,
	            "nonce": null,
	            "ext": null,
	            "app": null,
	            "dlg": null,
	            "timestamp": null
	        };
	    },

	    initialize: function () {
	        this.on("change", this.updateDB, this);

	        var model = this;

	        pm.indexedDB.helpers.getHelper("hawk", function (helper) {
	            if (helper) {
	                model.set(helper);
	            }
	        });
	    },

	    generateHelper: function () {
	        this.set("nonce", hawk.utils.randomString(6));
	    },

	    process: function () {
	        this.processCustomRequest(this.get("request"));
	        this.generateHelper();
	    },

	    processCustomRequest: function (request) {
	        request.trigger("updateModel");

	        var credentials = {};

	        var headers = request.get("headers");
	        var authHeaderKey = "Authorization";

	        var user = this.get("user");
	        var hawk_id = this.get("hawk_id");
	        var hawk_key = this.get("hawk_key");
	        var algorithm = this.get("algorithm");
	        var nonce = this.get("nonce");
	        var ext = this.get("ext");
	        var app = this.get("app");
	        var dlg = this.get("dlg");
	        var timestamp = this.get("timestamp");

	        user = pm.envManager.getCurrentValue(user);
	        hawk_id = pm.envManager.getCurrentValue(hawk_id);
	        hawk_key = pm.envManager.getCurrentValue(hawk_key);
	        algorithm = pm.envManager.getCurrentValue(algorithm);
	        nonce = pm.envManager.getCurrentValue(nonce);
	        ext = pm.envManager.getCurrentValue(ext);
	        app = pm.envManager.getCurrentValue(app);
	        dlg = pm.envManager.getCurrentValue(dlg);

	        credentials.id = hawk_id;
	        credentials.key = hawk_key;
	        credentials.algorithm = algorithm;

	        var url = pm.envManager.getCurrentValue(request.attributes.url);
	        var options = {
	            credentials: credentials,
	            nonce: nonce,
	            ext: ext,
	            app: app,
	            dlg: dlg,
	            timestamp: timestamp
	        };


	        var res = hawk.client.header(url, request.attributes.method, options);

	        if (res.err) {
	            pm.alerts.error('Hawk auth error: ' + res.err);
	            return;
	        }

	        request.setHeader(authHeaderKey, res.field);
	        request.trigger("customHeaderUpdate");
	    },

	    updateDB: function () {
	        var helper = {
	            id: "hawk",
	            user: this.get("user"),
	            hawk_id: this.get("hawk_id"),
	            hawk_key: this.get("hawk_key"),
	            algorithm: this.get("algorithm"),
	            nonce: this.get("nonce"),
	            ext: this.get("ext"),
	            app: this.get("app"),
	            dlg: this.get("dlg"),
	            timestamp: this.get("timestamp"),
	            saveToRequest: this.get("saveToRequest")
	        };

	        pm.indexedDB.helpers.addHelper(helper, function (helper) {
	        });
	    }
	});

	module.exports = HawkAuthProcessor;


/***/ },
/* 300 */
/***/ function(module, exports) {

	var DigestAuthProcessor = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "",
	            "time": 0,
	            "algorithm": "",
	            "username": "",
	            "realm": "",
	            "password": "",
	            "nonce": "",
	            "nonceCount": "",
	            "clientNonce": "",
	            "opaque": "",
	            "qop": "",
	            "request": null,
	            "saveToRequest": false
	        };
	    },

	    initialize: function() {
	        this.on("change", this.updateDB, this);

	        var model = this;

	        pm.indexedDB.helpers.getHelper("digest", function(helper) {
	            if (helper) {
	                model.set(helper);
	            }
	        });
	    },

	    getHeader: function (request) {
	        //var request = this.get("request");
	        request.trigger("updateModel");
	        
	        var algorithm = pm.envManager.getCurrentValue(this.get("algorithm"));

	        var username = pm.envManager.getCurrentValue(this.get("username"));
	        var realm = pm.envManager.getCurrentValue(this.get("realm"));
	        var password = pm.envManager.getCurrentValue(this.get("password"));

	        var method = request.get("method");

	        var nonce = pm.envManager.getCurrentValue(this.get("nonce"));
	        var nonceCount = pm.envManager.getCurrentValue(this.get("nonceCount"));
	        var clientNonce = pm.envManager.getCurrentValue(this.get("clientNonce"));

	        var opaque = pm.envManager.getCurrentValue(this.get("opaque"));
	        var qop = pm.envManager.getCurrentValue(this.get("qop"));
	        var body = request.getRequestBodyPreview();        
	        var url = request.processUrl(request.get("url"));

	        var urlParts = request.splitUrlIntoHostAndPath(url);

	        var digestUri = urlParts.path;

	        var a1;

	        if(algorithm === "MD5-sess") {
	            var a0 = CryptoJS.MD5(username + ":" + realm + ":" + password);
	            a1 = a0 + ":" + nonce + ":" + clientNonce;
	        }
	        else {
	            a1 = username + ":" + realm + ":" + password;
	        }

	        var a2;

	        if(qop === "auth-int") {
	            a2 = method + ":" + digestUri + ":" + body;
	        }
	        else {
	            a2 = method + ":" + digestUri;
	        }


	        var ha1 = CryptoJS.MD5(a1);
	        var ha2 = CryptoJS.MD5(a2);

	        var response;

	        if(qop === "auth-int" || qop === "auth") {
	            response = CryptoJS.MD5(ha1 + ":"
	                + nonce + ":"
	                + nonceCount + ":"
	                + clientNonce + ":"
	                + qop + ":"
	                + ha2);
	        }
	        else {
	            response = CryptoJS.MD5(ha1 + ":" + nonce + ":" + ha2);
	        }

	        var headerVal = " ";
	        headerVal += "username=\"" + username + "\", ";
	        headerVal += "realm=\"" + realm + "\", ";
	        headerVal += "nonce=\"" + nonce + "\", ";
	        headerVal += "uri=\"" + digestUri + "\", ";

	        if(qop === "auth" || qop === "auth-int") {
	            headerVal += "qop=" + qop + ", ";
	        }

	        if(qop === "auth" || qop === "auth-int" || algorithm === "MD5-sess") {
	            headerVal += "nc=" + nonceCount + ", ";
	            headerVal += "cnonce=\"" + clientNonce + "\", ";
	        }

	        headerVal += "response=\"" + response + "\", ";
	        headerVal += "opaque=\"" + opaque + "\"";

	        return headerVal;
	    },

		process: function() {
			var request = this.get("request");
			this.processCustomRequest(request);
		},

	    processCustomRequest: function (request) {
	        var headers = request.get("headers");
	        var authHeaderKey = "Authorization";

	        //Generate digest header here
	        var algorithm = $("#request-helper-digestAuth-realm").val();
	        var headerVal = this.getHeader(request);
	        headerVal = "Digest" + headerVal;

	        request.setHeader(authHeaderKey, headerVal);
	        request.trigger("customHeaderUpdate");
	    },

	    updateDB: function() {
	        var h = {
	            id: "digest",
	            time: new Date().getTime(),
	            realm: this.get("realm"),
	            username: this.get("username"),
	            password: this.get("password"),
	            nonce: this.get("nonce"),
	            algorithm: this.get("algorithm"),
	            nonceCount: this.get("nonceCount"),
	            clientNonce: this.get("clientNonce"),
	            opaque: this.get("opaque"),
	            qop: this.get("qop"),
	            saveToRequest: this.get("saveToRequest")
	        };

	        pm.indexedDB.helpers.addHelper(h, function(h) {
	        });
	    }
	});

	module.exports = DigestAuthProcessor;


/***/ },
/* 301 */
/***/ function(module, exports) {

	var OAuth1Processor = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "oAuth1",
	            "time": 0,
	            "consumerKey": "",
	            "consumerSecret": "",
	            "token": "",
	            "tokenSecret": "",
	            "signatureMethod": "HMAC-SHA1",
	            "timestamp": "",
	            "nonce": "",
	            "version": "",
	            "realm": "",
	            "header": "",
	            "auto": "",
	            "encodeSignature": false,
	            "includeEmpty": false,
	            "request": null,
	            "saveToRequest": false
	        };
	    },

	    initialize: function() {
	        var model = this;

	        this.on("change", this.updateDB, this);

	        pm.indexedDB.helpers.getHelper("oAuth1", function(helper) {
	            if (helper) {
	                model.set(helper);
	                model.generateHelper()
	            }
	        });
	    },

	    updateDB: function() {
	        var helper = {
	            id: "oAuth1",
	            time: new Date().getTime(),
	            consumerKey: this.get("consumerKey"),
	            consumerSecret: this.get("consumerSecret"),
	            token: this.get("token"),
	            tokenSecret: this.get("tokenSecret"),
	            signatureMethod: this.get("signatureMethod"),
	            timestamp: this.get("timestamp"),
	            nonce: this.get("nonce"),
	            version: this.get("version"),
	            realm: this.get("realm"),
	            header: this.get("header"),
	            auto: this.get("auto"),
	            encodeSignature: this.get("encodeSignature"),
	            includeEmpty: this.get("includeEmpty"),
	            saveToRequest: this.get("saveToRequest"),
	        };

	        pm.indexedDB.helpers.addHelper(helper, function(helper) {
	        });
	    },

	    generateHelper: function () {
	        if(this.get("version") === "") {
	            this.set("version", "1.0");
	        }

	        if(this.get("signatureMethod" === "")) {
	            this.set("signatureMethod", "HMAC-SHA1");
	        }

	        this.set("timestamp", OAuth.timestamp() + "");
	        this.set("nonce", OAuth.nonce(6));
	    },

	    generateSignature: function (request) {
	        //Make sure the URL is urlencoded properly
	        //Set the URL keyval editor as well. Other get params disappear when you click on URL params again
	        //var request = this.get("request");
	        var i;
	        var url = request.get("url");
	        if (url === '') {
	          pm.alerts.warning('Please enter a URL first');
	            return null;
	        }

	        var processedUrl;

	        var realm = this.get("realm");
	        var method = request.get("method");
	        var requestBody = request.get("body");

	        processedUrl = pm.envManager.getCurrentValue(url).trim();
	        processedUrl = ensureProperUrl(processedUrl);

	        if (processedUrl.indexOf('?') > 0) {
	            processedUrl = processedUrl.split("?")[0];
	        }

	        var message = {
	            action: processedUrl,
	            method: method,
	            parameters: []
	        };

	        var signatureParams = [
	            {key: "oauth_consumer_key", value: this.get("consumerKey")},
	            {key: "oauth_token", value: this.get("token")},
	            {key: "oauth_signature_method", value: this.get("signatureMethod")},
	            {key: "oauth_timestamp", value: this.get("timestamp")},
	            {key: "oauth_nonce", value: this.get("nonce")},
	            {key: "oauth_version", value: this.get("version")}
	        ];

	        for(i = 0; i < signatureParams.length; i++) {
	            var param = signatureParams[i];
	            param.value = pm.envManager.getCurrentValue(param.value);
	            if(param.value!="" || this.get("includeEmpty")===true) {
	                message.parameters.push([param.key, param.value]);
	            }
	        }

	        //Get parameters
	        var urlParams = request.getUrlParams();

	        var bodyParams;

	        if (pm.methods.isMethodWithBody(method)) {
	            bodyParams = requestBody.get("dataAsObjects");

	            if (typeof bodyParams === "undefined") {
	                bodyParams = [];
	            }
	        }
	        else {
	            bodyParams = [];
	        }

	        var params = _.union(urlParams, bodyParams);
	        var param;
	        var existingOAuthParams = _.union(signatureParams, [{key: "oauth_signature", value: ""}]);
	        var pos;

	        for (i = 0; i < params.length; i++) {
	            param = params[i];
	            if (param.key) {
	                pos = findPosition(existingOAuthParams, "key", param.key);
	                if (pos < 0) {
	                    param.value = pm.envManager.getCurrentValue(param.value);
	                    if(param.value != "" || this.get("includeEmpty")===true) {
	                        message.parameters.push([param.key, param.value]);
	                    }
	                }
	            }
	        }

	        var accessor = {};
	        if (this.get("consumerSecret") !=='') {
	            accessor.consumerSecret = this.get("consumerSecret");
	            accessor.consumerSecret = pm.envManager.getCurrentValue(accessor.consumerSecret);
	        }
	        if (this.get("tokenSecret") !=='') {
	            accessor.tokenSecret = this.get("tokenSecret");
	            accessor.tokenSecret = pm.envManager.getCurrentValue(accessor.tokenSecret);
	        }

	        return OAuth.SignatureMethod.sign(message, accessor);
	    },

	    removeOAuthKeys: function (params) {
	        var i, count;
	        var oauthParams = [
	            "oauth_consumer_key",
	            "oauth_token",
	            "oauth_signature_method",
	            "oauth_timestamp",
	            "oauth_nonce",
	            "oauth_version",
	            "oauth_signature"
	        ];

	        var newParams = [];
	        var oauthIndexes = [];

	        for (i = 0, count = params.length; i < count; i++) {
	            var index = _.indexOf(oauthParams, params[i].key);
	            if (index < 0) {
	                newParams.push(params[i]);
	            }
	        }

	        return newParams;
	    },

		process: function() {
			var request = this.get("request");
			this.processCustomRequest(request);
	        this.generateHelper();
		},

		processCustomRequest: function (request) {
	        request.trigger("updateModel");

	        var i, j, count, length;
	        var params = [];

	        var urlParams = request.getUrlParams();
	        var bodyParams = [];

	        var url = request.get("url");
	        var body = request.get("body");
	        var dataMode = body.get("dataMode");
	        var method = request.get("method");

	        var bodyParams = body.get("dataAsObjects");

	        params = params.concat(urlParams);

	        if (typeof bodyParams !== "undefined") {
	            params = params.concat(bodyParams);
	        }

	        params = this.removeOAuthKeys(params);

	        var signatureKey = "oauth_signature";

	        var oAuthParams = [];

	        var signatureParams = [
	            {key: "oauth_consumer_key", value: this.get("consumerKey")},
	            {key: "oauth_token", value: this.get("token")},
	            {key: "oauth_signature_method", value: this.get("signatureMethod")},
	            {key: "oauth_timestamp", value: this.get("timestamp")},
	            {key: "oauth_nonce", value: this.get("nonce")},
	            {key: "oauth_version", value: this.get("version")}
	        ];

	        for(i = 0; i < signatureParams.length; i++) {
	            var param = signatureParams[i];
	            param.value = pm.envManager.getCurrentValue(param.value);
	            oAuthParams.push(param);
	        }

	        //Convert environment values
	        for (i = 0, length = params.length; i < length; i++) {
	            params[i].value = pm.envManager.getCurrentValue(params[i].value);
	        }

	        var signature = this.generateSignature(request);

	        if (signature === null) {
	            return;
	        }

	        if(this.get("encodeSignature") === true) {
	            signature = encodeURIComponent(signature);
	        }

	        oAuthParams.push({key: signatureKey, value: signature});

	        var addToHeader = this.get("header");

	        if (addToHeader) {
	            var realm = this.get("realm");
	            var authHeaderKey = "Authorization";
	            var rawString = "OAuth ";
		        if(realm!=null && realm.trim()!=="") {
			        rawString += "realm=\"" + encodeURIComponent(realm) + "\",";
		        }
	            var len = oAuthParams.length;

	            for (i = 0; i < len; i++) {
		            if(oAuthParams[i].value==null || oAuthParams[i].value.trim()=="") {
			            continue;
		            }
	                rawString += encodeURIComponent(oAuthParams[i].key) + "=\"" + encodeURIComponent(oAuthParams[i].value) + "\",";
	            }

	            rawString = rawString.substring(0, rawString.length - 1);
	            request.setHeader(authHeaderKey, rawString);
	            request.trigger("customHeaderUpdate");
	        } else {
	            params = params.concat(oAuthParams);

	            if (!request.isMethodWithBody(method)) {
	                // console.log("Setting URL params", params);

	                request.setUrlParamStringWithOptBlankValRemoval(params, null, true);
	                request.trigger("customURLParamUpdate");
	            } else {
	                if (dataMode === 'urlencoded') {
	                    body.loadData("urlencoded", params, true);
	                }
	                else if (dataMode === 'params') {
	                    body.loadData("params", params, true);
	                }
	                else if (dataMode === 'raw') {
	                    request.setUrlParamString(params);
	                    request.trigger("customURLParamUpdate");
	                }
	            }
	        }
	    }
	});

	module.exports = OAuth1Processor;


/***/ },
/* 302 */
/***/ function(module, exports) {

	var OAuth2TokenFetcher = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "oAuth2",
	            "authorization_url": "",
	            "access_token_url": "",
	            "client_id": "",
	            "client_secret": "",
	            "scope": ""
	        };
	    },

	    initialize: function() {
	        var model = this;

	        this.on("startAuthorization", this.startAuthorization);

	        this.on("change", this.updateDB, this);

	        pm.indexedDB.helpers.getHelper("oAuth2", function(helper) {
	            if (helper) {
	                model.set(helper);
	            }
	        });
	    },

	    updateDB: function() {
	        var helper = {
	            "id": this.get("id"),
	            "authorization_url": this.get("authorization_url"),
	            "access_token_url": this.get("access_token_url"),
	            "client_id": this.get("client_id"),
	            "client_secret": this.get("client_secret"),
	            "scope": this.get("scope"),
	            "timestamp": new Date().getTime()
	        };

	        pm.indexedDB.helpers.addHelper(helper, function(h) {
	        });
	    },

	    startAuthorization: function(params) {
	        var oldThis = this;
	        var authParams = {
	            "authorization_url": pm.envManager.getCurrentValue(_.clone(params["authorization_url"])),
	            "access_token_url": pm.envManager.getCurrentValue(_.clone(params["access_token_url"])),
	            "client_id": pm.envManager.getCurrentValue(_.clone(params["client_id"])),
	            "client_secret": pm.envManager.getCurrentValue(_.clone(params["client_secret"])),
	            "scope": pm.envManager.getCurrentValue(_.clone(params["scope"])),
	            "local_access_token": params["local_access_token"],
	        };

	        this.set(params);

	        var postmanAuthUrl = pm.webUrl + "/oauth2/start";
	        postmanAuthUrl += "?authorization_url=" + encodeURIComponent(authParams["authorization_url"]);
	        postmanAuthUrl += "&access_token_url=" + encodeURIComponent(authParams["access_token_url"]);
	        postmanAuthUrl += "&client_id=" + encodeURIComponent(authParams["client_id"]);
	        postmanAuthUrl += "&client_secret=" + encodeURIComponent(authParams["client_secret"]);
	        postmanAuthUrl += "&scope=" + encodeURIComponent(authParams["scope"]);
	        postmanAuthUrl += "&local_access_token=" + encodeURIComponent(authParams["local_access_token"]);

	        postmanAuthUrl += "&app_id=" + getAppId();
	        // console.log(postmanAuthUrl);

	        pm.browserLogin.openLoginFlow(postmanAuthUrl, function(redirect_url) {
	          if (!postman_electron && chrome.runtime.error) {
	            pm.alerts.error("Could not initiate OAuth 2 flow. Check debug URL.");
	            $("#oauth2-debug-url-group .controls").html('<a class="selectable" target="_blank" href="'+postmanAuthUrl+'">'+postmanAuthUrl+'</a>');
	            $("#oauth2-debug-url-group").show();
	          }
	          else if(!redirect_url) {
	              pm.alerts.error("Could not complete OAuth2.0 login");
	          }
	          else {
	            var params = getUrlVars(redirect_url);
	            var paramsObject = {};
	            _.each(params, function(param) {
	              if(param.key) {
	                paramsObject[param.key] = param.value;
	              }
	            });
	            if(paramsObject["getTokenFromPostman"]==="true") {
	              //postman needs to request the access token
	              try {
	                var dataObject = JSON.parse(decodeURI(paramsObject.data));
	                var url = paramsObject.access_token_url;
	                oldThis.requestToken(url, dataObject);
	              }
	              catch(e) {
	                console.log("Error while requesting access token locally:");
	                console.log(e);
	                pm.alerts.error("Error requesting access token locally: " + e);
	              }
	            }
	            else {
	              //access token received from godserver
	              //console.log("Show form", params);
	              pm.mediator.trigger("addOAuth2Token", params);
	            }
	          }
	        }
	      );
	    },

	    requestToken: function(url, dataObject) {
	        $.post(url, dataObject, function(data) {
	            console.log("Access token through Postman");
	            console.log(data);
	            var params = data;
	            if(typeof data === "string") {
	                params = getUrlVars("?"+data);
	            }
	            pm.mediator.trigger("addOAuth2Token", params);
	        });
	    }
	});

	module.exports = OAuth2TokenFetcher;


/***/ },
/* 303 */
/***/ function(module, exports) {

	var AWSAuthProcessor = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "",
	            "time": 0,
	            "accessKey": "",
	            "secretKey": "",
	            "region": "",
	            "service": "",
	            "auto": false,
	            "saveHelper": false,
	        };
	    },

	    initialize: function() {
	        this.on("change", this.updateDB, this);

	        var model = this;

	        this.signer = window.postmanConverters.awsSigner;

	        pm.indexedDB.helpers.getHelper("awsSigV4", function(helper) {
	            if (helper) {
	                model.set(helper);
	            }
	        });
	    },

	    getSignature: function (request) {
	        //var request = this.get("request");
	        request.trigger("updateModel");
	        
	        var accessKey = pm.envManager.getCurrentValue(this.get("accessKey"));
	        var secretKey = pm.envManager.getCurrentValue(this.get("secretKey"));
	        var region = pm.envManager.getCurrentValue(this.get("region"));
	        var serviceName = pm.envManager.getCurrentValue(this.get("service"));

	        var method = request.get("method");
	        var body = request.getRequestBodyPreview();        
	        var url = request.processUrl(request.get("url"));


	        var headers = request.get("headers");

	        //we need method, pathname, query, headers, payload
	        var urlParts = URI(url);
	        var queryObject = urlParts.query(true);
	        var path = urlParts.path();
	        var headerObject = {};
	        var timestamp = null;

	        _.each(headers, function(header) {
	            if(header.key.toLowerCase()!=='authorization' && header.key.toLowerCase()!=='x-amz-date') {
	                headerObject[header.key] = pm.envManager.getCurrentValue(header.value);
	            }
	            if(header.key.toLowerCase()=="x-amz-date" || header.key.toLowerCase()=="date") {
	                timestamp = Date.create(headerObject[header.key]).getTime();
	            }
	        });

	        var headersAws = {};

	        _.each(headers, function(header) {  headersAws[header["key"]]=header["value"] });

	        var hostname = urlParts.hostname();
	        var credentials = {
	            accessKeyId: accessKey,
	            secretAccessKey: secretKey
	        };

	        var signedParams = this.signer.sign({
	            host: hostname,
	            path: path,
	            service: serviceName || 'execute-api',
	            region: region,
	            method: method,
	            body: body,
	            headers: headersAws
	        }, credentials);

	        var retVal = {
	            'Authorization': signedParams.headers["Authorization"],
	            'X-Amz-Date': signedParams.headers["X-Amz-Date"],
	            'Content-Type': signedParams.headers["Content-Type"]
	        };
	        return retVal;
	    },

		process: function() {
			var request = this.get("request");
	        this.trigger("updateAwsHelper");
			this.processCustomRequest(request);
		},

	    processCustomRequest: function (request) {
	        var headers = request.get("headers");
	        var cTypeHeader = _.find(headers, function(header) { return (header.key.toLowerCase()=="content-type") });
	        if(!cTypeHeader) {
	            request.setHeader("Content-Type", "application/x-www-form-urlencoded");
	        }

	        var headerVal = this.getSignature(request);

	        request.setHeader("Authorization", headerVal['Authorization']);
	        request.setHeader("X-Amz-Date", headerVal['X-Amz-Date']);
	        request.trigger("customHeaderUpdate");
	    },

	    updateDB: function() {
	        var h = {
	            id: "awsSigV4",
	            time: new Date().getTime(),
	            accessKey: this.get("accessKey"),
	            secretKey: this.get("secretKey"),
	            region: this.get("region"),
	            service: this.get("service"),
	            auto: this.get("auto"),
	            saveHelper: this.get("saveHelper"),
	        };

	        pm.indexedDB.helpers.addHelper(h, function(h) {
	        });
	    }
	});

	module.exports = AWSAuthProcessor;



/***/ },
/* 304 */
/***/ function(module, exports) {

	var Helpers = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "activeHelper": "normal",
	            "basicAuth": null,
	            "digestAuth": null,
	            "oAuth1": null,
	            "oAuth2": null,
	            "hawkAuth": null
	        };
	    }
	});

	module.exports = Helpers;


/***/ },
/* 305 */
/***/ function(module, exports) {

	var OAuth2Token = Backbone.Model.extend({
		defaults: function() {
			return {
			    "id": "",
			    "name": "OAuth2 Token",
			    "access_token": "",
			    "expires_in": 0,
			    "timestamp": 0
			};
		}

	});

	var OAuth2Tokens = Backbone.Collection.extend({
		model: OAuth2Token,

		comparator: function(a, b) {
		    var counter;

		    var at = a.get("timestamp");
		    var bt = b.get("timestamp");

		    return at > bt;
		},

		initialize: function() {
			pm.mediator.on("addOAuth2Token", this.addAccessToken, this);
			pm.mediator.on("updateOAuth2Token", this.updateAccessToken, this);
			this.loadAllAccessTokens();
		},

		loadAllAccessTokens: function() {
			var collection = this;

			pm.indexedDB.oAuth2AccessTokens.getAllAccessTokens(function(accessTokens) {
				collection.add(accessTokens, {merge: true});
				collection.trigger("change");
			});
		},

		addAccessToken: function(tokenData) {
			var collection = this;

			var id = guid();
			var accessToken = {
				"id": guid(),
				"timestamp": new Date().getTime(),
				"data": tokenData
			};

			if (tokenData.hasOwnProperty("access_token")) {
				accessToken.access_token = tokenData.access_token;
				accessToken.data = [
					{key: "result", value: "success"},
					{key: "access_token", value: tokenData.access_token}
				];
			}

			pm.indexedDB.oAuth2AccessTokens.addAccessToken(accessToken, function(a) {
				var at = new OAuth2Token(accessToken);
				collection.add(at, {merge: true});
				// console.log("OAuth2Tokens, Calling addedOAuth2Token");
				pm.mediator.trigger("addedOAuth2Token", a);
			});
		},

		updateAccessToken: function(params) {
			var token = this.get(params.id);
			token.set("name", params.name);
			pm.indexedDB.oAuth2AccessTokens.updateAccessToken(token.toJSON(), function(a) {
				// console.log("Updated access token");
				pm.mediator.trigger("updatedOAuth2Token", a.id);
			});
		},

		deleteAccessToken: function(id) {
			// console.log("Removing access token");
			this.remove(id);
			pm.indexedDB.oAuth2AccessTokens.deleteAccessToken(id, function() {
				// console.log("Deleted token");
			});
		},

		addAccessTokenToRequest: function(id, type) {
			var token = this.get(id);
			var data = token.get("data");
			var index = arrayObjectIndexOf(data, "access_token", "key");

			if (type === "url") {
				var accessTokenParam = {
					key: "access_token",
					value: data[index].value
				};
				pm.mediator.trigger("addRequestURLParam", accessTokenParam);
			}
			else if (type === "header") {
				var accessTokenHeader = {
					key: "Authorization",
					value: "Bearer " + data[index].value
				};
				pm.mediator.trigger("addRequestHeader", accessTokenHeader);
				// TODO Not implemented yet
			}

		}
	});

	module.exports = OAuth2Tokens;


/***/ },
/* 306 */
/***/ function(module, exports) {

	var OAuth2TokenList = Backbone.View.extend({
		initialize: function() {
			var model = this.model;

			model.on("add", this.render, this);
			model.on("remove", this.render, this);
			model.on("change", this.render, this);

			// Click event to load access_token
			// Delete event

			$("#request-helper-oAuth2-access-tokens").on("mouseenter", ".oauth2-access-token-container", function() {
				var actionsEl = $('.oauth2-access-token-actions', this);
				actionsEl.css('display', 'block');
			});

			$("#request-helper-oAuth2-access-tokens").on("mouseleave", ".oauth2-access-token-container", function() {
			    var actionsEl = $('.oauth2-access-token-actions', this);
			    actionsEl.css('display', 'none');
			});

			$("#request-helper-oAuth2-access-tokens").on("click", ".oauth2-access-token-actions-load", function() {
			    var id = $(this).attr("data-id");
			    var location = $("#request-helper-oAuth2-options input[name='oAuth2-token-location']:checked").val();
			    model.addAccessTokenToRequest(id, location);
			});

			$("#request-helper-oAuth2-access-tokens").on("click", ".oauth2-access-token-actions-delete", function() {
			    var id = $(this).attr("data-id");
			    model.deleteAccessToken(id);
			});
		},

		render: function() {
			var tokens = this.model.toJSON();
			$("#request-helper-oAuth2-access-tokens").text("");
			$("#request-helper-oAuth2-access-tokens").append(Handlebars.templates.oauth2_access_tokens({"items": tokens}));
		}

	});

	module.exports = OAuth2TokenList;


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	var BasicAuthForm = __webpack_require__(308);
	var HawkAuthForm = __webpack_require__(309);
	var DigestAuthForm = __webpack_require__(310);
	var OAuth1Form = __webpack_require__(311);
	var OAuth2Manager = __webpack_require__(312);
	var AWSAuthForm = __webpack_require__(314);

	var HelperManager = Backbone.View.extend({
		initialize: function() {
			var model = this.model;

			var basicAuthForm = new BasicAuthForm({model: model.get("basicAuth")});
			var digestAuthForm = new DigestAuthForm({model: model.get("digestAuth")});
			var oAuth1Form = new OAuth1Form({model: model.get("oAuth1")});
			var oAuth2Manager = new OAuth2Manager({model: model.get("oAuth2")});
			var hawkAuthForm = new HawkAuthForm({ model: model.get("hawkAuth") });
			var awsAuthForm = new AWSAuthForm({model: model.get("awsSigV4")});


			this.model.on("change:activeHelper", this.render, this);

			var request = model.get("request");

			request.on("loadRequest", this.onLoadRequest, this);

			var view = this;

	        $("#request-helper-selector-wrapper .request-helper-list-item").on("click", function () {
	            var node = $((event)?event.currentTarget:this);
	            $("#request-types .request-helper-list-item-selected").text("active");
	            var type = node.attr('data-id');
	            pm.tracker.trackEvent("request", "auth_helper", type);
	            view.showRequestHelper(type);
	            view.render();
			});

			$(".show-password-checkbox").click(function() {
				var fieldId = $(this).find('input').attr("data-password-id");
				var field = $("#"+fieldId)[0];
				if($(this).find('input').is(":checked")) field.type = "text";
				else field.type = "password";
			});

			//set a different URL for different envs
			$("#callback-url-text").text(postman_oauth2_callback_url);
		},

		getAuthTypes: function() {
			return ["normal","basicAuth","digestAuth","oAuth1","oAuth2", "hawkAuth", "awsSigV4"];
		},

		onLoadRequest: function(req) {
			var currentHelper = req.get("currentHelper");
			var helperAttributes = req.get("helperAttributes");
			if(typeof helperAttributes === "string") {
				//came from sync
				try {
					helperAttributes = JSON.parse(helperAttributes);
				}
				catch(e) {
					console.log("Helper attributes are not valid JSON :(");
					this.showRequestHelper("normal");
					return;
				}
			}
			if(this.getAuthTypes().indexOf(currentHelper)!==-1) {
				if(currentHelper!=="normal") {
					var helperModel = this.model.get(currentHelper);
					for (var property in helperAttributes) {
						if (helperAttributes.hasOwnProperty(property)) {
							helperModel.set(property,helperAttributes[property]);
						}
					}
				}
				this.showRequestHelper(currentHelper);
			}
			else {
				this.showRequestHelper("normal");
			}
		},

		getActiveHelperType: function() {
			return this.model.get("activeHelper");
		},

		getHelper: function(type) {
			return this.model.get(type);
		},

		showRequestHelper: function (type) {
			this.model.set("activeHelper", type);
			this.model.trigger('change:activeHelper');
			if(type=="normal") {
				$(".request-auth-indicator").removeClass("active");
			}
			else {
				$(".request-auth-indicator").addClass("active");
			}
			return false;
		},

		clearHelpers: function() {
			("#request-types ul li").removeClass("active");
			$('#request-helper-selector-wrapper .request-helper-list-item-selected').text("No Auth");
			$('#request-helpers').css("display", "none");
		},

		render: function() {
			var type = this.model.get("activeHelper");

			$("#request-helper-selector-wrapper .request-helper-list-item-selected").text(
	            $(".request-helper-list-item[data-id=" + type + "]").text()
	        );
			//$('#request-types ul li[data-id=' + type + ']').addClass('active');
			if (type !== "normal") {
				$('#request-helpers').css("display", "block");
			}
			else {
				$('#request-helpers').css("display", "none");
			}

			if (type.toLowerCase() === 'oauth1') {
				this.model.get("oAuth1").generateHelper();
			}

			$('#request-helpers>.request-helpers').css("display", "none");
			$('#request-helper-' + type).css("display", "block");

			//for the oauth2 debug url
			$("#oauth2-debug-url-group").hide();
		}
	});

	module.exports = HelperManager;


/***/ },
/* 308 */
/***/ function(module, exports) {

	var BasicAuthForm = Backbone.View.extend({
	    initialize: function() {
	        this.model.on("change", this.render, this);

	        var view = this;
	        var model = this.model;

	        $('#request-helper-basicAuth .request-helper-submit').on("click", function () {
	            $('#request-helpers').css("display", "none");
	            var username = $('#request-helper-basicAuth-username').val();
	            var password = $('#request-helper-basicAuth-password').val();
	            var saveToRequest = $('#request-helper-basicAuth-saveHelper').prop('checked');
	            model.set({"username": username, "password": password, saveToRequest: saveToRequest});
	            model.process();
	        });

	        $('#request-helper-basicAuth input').on("blur", function () {            
	            view.save();
	        });

	        $('#request-helper-basicAuth .request-helper-clear').on("click", function () {
	            view.clearFields();
	        });

	        $('#request-helper-basicAuth-saveHelper').change(function () {
	            var saveToRequest = $('#request-helper-basicAuth-saveHelper').prop('checked') ? true : false;
	            model.set("saveToRequest", saveToRequest);
	        });
	    },

	    clearFields: function() {
	        this.model.set({"username": "", "password": ""});
	        $('#request-helper-basicAuth-username').val("");
	        $('#request-helper-basicAuth-password').val("");
	        $('#request-helper-basicAuth-saveHelper').prop('checked', false);
	    },

	    save: function() {
	        var username = $('#request-helper-basicAuth-username').val();
	        var password = $('#request-helper-basicAuth-password').val();
	        var saveToRequest = $('#request-helper-basicAuth-saveHelper').prop('checked');

	        this.model.set({"username": username, "password": password, saveToRequest: saveToRequest});
	    },

	    render: function() {
	        $('#request-helper-basicAuth-username').val(this.model.get("username"));
	        $('#request-helper-basicAuth-password').val(this.model.get("password"));
	        $('#request-helper-basicAuth-saveHelper').prop('checked', this.model.get("saveToRequest"));
	    }
	});

	module.exports = BasicAuthForm;


/***/ },
/* 309 */
/***/ function(module, exports) {

	var HawkAuthForm = Backbone.View.extend({
	    initialize: function () {
	        this.model.on("change", this.render, this);

	        var view = this;
	        var model = this.model;

	        $('#request-helper-hawkAuth .request-helper-submit').on("click", function () {
	            $('#request-helpers').css("display", "none");
	            var algorithm = $('#request-helper-hawkAuth-algorithm').val();
	            var hawk_id = $('#request-helper-hawkAuth-hawk_id').val();
	            var hawk_key = $('#request-helper-hawkAuth-hawk_key').val();
	            var user = $('#request-helper-hawkAuth-user').val();
	            var nonce = $('#request-helper-hawkAuth-nonce').val();
	            var ext = $('#request-helper-hawkAuth-ext').val();
	            var app = $('#request-helper-hawkAuth-app').val();
	            var dlg = $('#request-helper-hawkAuth-dlg').val();
	            var timestamp = $('#request-helper-hawkAuth-timestamp').val();
	            var saveToRequest = $('#request-helper-hawkAuth-saveHelper').prop('checked');

	            model.set({
	                algorithm: algorithm,
	                hawk_id: hawk_id,
	                hawk_key: hawk_key,
	                user: user,
	                nonce: nonce,
	                ext: ext,
	                app: app,
	                dlg: dlg,
	                timestamp: timestamp,
	                saveToRequest: saveToRequest
	            });
	            model.process();
	        });

	        $('#request-helper-hawkAuth input').on("blur", function () {
	            view.save();
	        });

	        $('#request-helper-hawkAuth .request-helper-clear').on("click", function () {
	            view.clearFields();
	        });

	        $('#request-helper-hawkAuth-saveHelper').change(function () {
	            var saveToRequest = $('#request-helper-hawkAuth-saveHelper').prop('checked') ? true : false;
	            model.set("saveToRequest", saveToRequest);
	        });
	    },

	    clearFields: function () {
	        this.model.set({ "hawk_id": "", "hawk_key": "", "algorithm": "", "user": "",
	            "nonce": "", "ext": "", "app": "", "dlg": "", "timestamp": ""});
	        $('#request-helper-hawkAuth-algorithm').val("");
	        $('#request-helper-hawkAuth-hawk_id').val("");
	        $('#request-helper-hawkAuth-hawk_key').val("");
	        $('#request-helper-hawkAuth-user').val("");
	        $('#request-helper-hawkAuth-nonce').val("");
	        $('#request-helper-hawkAuth-ext').val("");
	        $('#request-helper-hawkAuth-app').val("");
	        $('#request-helper-hawkAuth-dlg').val("");
	        $('#request-helper-hawkAuth-timestamp').val("");
	        $('#request-helper-hawkAuth-saveHelper').prop('checked', false);
	    },

	    save: function () {
	        var algorithm = $('#request-helper-hawkAuth-algorithm').val();
	        var hawk_id = $('#request-helper-hawkAuth-hawk_id').val();
	        var hawk_key = $('#request-helper-hawkAuth-hawk_key').val();
	        var user = $('#request-helper-hawkAuth-user').val();
	        var nonce = $('#request-helper-hawkAuth-nonce').val();
	        var ext = $('#request-helper-hawkAuth-ext').val();
	        var app = $('#request-helper-hawkAuth-app').val();
	        var dlg = $('#request-helper-hawkAuth-dlg').val();
	        var timestamp = $('#request-helper-hawkAuth-timestamp').val();
	        var saveToRequest = $('#request-helper-hawkAuth-saveHelper').prop('checked');

	        this.model.set({
	            algorithm: algorithm,
	            hawk_id: hawk_id,
	            hawk_key: hawk_key,
	            user: user,
	            nonce: nonce,
	            ext: ext,
	            app: app,
	            dlg: dlg,
	            timestamp: timestamp,
	            saveToRequest: saveToRequest
	        });
	    },

	    render: function () {
	        $('#request-helper-hawkAuth-algorithm').val(this.model.get("algorithm"));
	        $('#request-helper-hawkAuth-hawk_id').val(this.model.get("hawk_id"));
	        $('#request-helper-hawkAuth-hawk_key').val(this.model.get("hawk_key"));
	        $('#request-helper-hawkAuth-user').val(this.model.get("user"));
	        $('#request-helper-hawkAuth-nonce').val(this.model.get("nonce"));
	        $('#request-helper-hawkAuth-ext').val(this.model.get("ext"));
	        $('#request-helper-hawkAuth-app').val(this.model.get("app"));
	        $('#request-helper-hawkAuth-dlg').val(this.model.get("dlg"));
	        $('#request-helper-hawkAuth-timestamp').val(this.model.get("timestamp"));
	        $('#request-helper-hawkAuth-saveHelper').prop('checked', this.model.get("saveToRequest"));
	    }
	});

	module.exports = HawkAuthForm;


/***/ },
/* 310 */
/***/ function(module, exports) {

	var DigestAuthForm = Backbone.View.extend({
	    initialize: function() {
	        this.model.on("change", this.render, this);

	        var view = this;
	        var model = this.model;

	        $('#request-helper-digestAuth .request-helper-submit').on("click", function () {
	            $('#request-helpers').css("display", "none");
	            var helper = {
	                id: "digest",
	                time: new Date().getTime(),
	                realm: $("#request-helper-digestAuth-realm").val(),
	                username: $("#request-helper-digestAuth-username").val(),
	                password: $("#request-helper-digestAuth-password").val(),
	                nonce: $("#request-helper-digestAuth-nonce").val(),
	                algorithm: $("#request-helper-digestAuth-algorithm").val(),
	                nonceCount: $("#request-helper-digestAuth-nonceCount").val(),
	                clientNonce: $("#request-helper-digestAuth-clientNonce").val(),
	                opaque: $("#request-helper-digestAuth-opaque").val(),
	                qop: $("#request-helper-digestAuth-qop").val(),
	                saveToRequest: $("#request-helper-digestAuth-saveHelper").prop('checked')
	            };

	            model.set(helper);
	            model.process();
	        });

	        $('#request-helper-digestAuth .request-helper-clear').on("click", function () {
	            view.clearFields();
	        });

	        $('#request-helper-digestAuth input').on("blur", function () {            
	            view.save();
	        });
	    },

	    clearFields: function () {
	        $("#request-helper-digestAuth-realm").val("");
	        $("#request-helper-digestAuth-username").val("");
	        $("#request-helper-digestAuth-password").val("");
	        $("#request-helper-digestAuth-nonce").val("");
	        $("#request-helper-digestAuth-algorithm").val("");
	        $("#request-helper-digestAuth-nonceCount").val("");
	        $("#request-helper-digestAuth-clientNonce").val("");
	        $("#request-helper-digestAuth-opaque").val("");
	        $("#request-helper-digestAuth-qop").val("");
	        $("#request-helper-digestAuth-saveHelper").prop('checked', false);

	        //set values in the model
	        var helper = {
	            id: "digest",
	            time: new Date().getTime(),
	            realm: "",
	            username: "",
	            password: "",
	            nonce: "",
	            algorithm: "",
	            nonceCount: "",
	            clientNonce: "",
	            opaque: "",
	            qop: "",
	            saveToRequest: false
	        };

	        this.model.set(helper);
	    },

	    save: function() {
	        var helper = {
	            id: "digest",
	            time: new Date().getTime(),
	            realm: $("#request-helper-digestAuth-realm").val(),
	            username: $("#request-helper-digestAuth-username").val(),
	            password: $("#request-helper-digestAuth-password").val(),
	            nonce: $("#request-helper-digestAuth-nonce").val(),
	            algorithm: $("#request-helper-digestAuth-algorithm").val(),
	            nonceCount: $("#request-helper-digestAuth-nonceCount").val(),
	            clientNonce: $("#request-helper-digestAuth-clientNonce").val(),
	            opaque: $("#request-helper-digestAuth-opaque").val(),
	            qop: $("#request-helper-digestAuth-qop").val(),
	            saveToRequest: $("#request-helper-digestAuth-saveHelper").prop('checked')
	        };

	        //Replace this with the call to the model
	        this.model.set(helper);
	    },

	    render: function() {
	        $("#request-helper-digestAuth-realm").val(this.model.get("realm"));
	        $("#request-helper-digestAuth-username").val(this.model.get("username"));
	        $("#request-helper-digestAuth-algorithm").val(this.model.get("algorithm"));
	        $("#request-helper-digestAuth-password").val(this.model.get("password"));
	        $("#request-helper-digestAuth-nonce").val(this.model.get("nonce"));
	        $("#request-helper-digestAuth-nonceCount").val(this.model.get("nonceCount"));
	        $("#request-helper-digestAuth-clientNonce").val(this.model.get("clientNonce"));
	        $("#request-helper-digestAuth-opaque").val(this.model.get("opaque"));
	        $("#request-helper-digestAuth-qop").val(this.model.get("qop"));
	        $("#request-helper-digestAuth-saveHelper").prop('checked', this.model.get("saveToRequest"));
	    }
	});

	module.exports = DigestAuthForm;


/***/ },
/* 311 */
/***/ function(module, exports) {

	var OAuth1Form = Backbone.View.extend({
	    initialize: function() {
	        this.model.on("change", this.render, this);

	        var view = this;
	        var model = this.model;

	        $('#request-helper-oAuth1 .request-helper-submit').on("click", function () {
	            $('#request-helpers').css("display", "none");
	            view.save();
	            model.process();
	        });

	        $('#request-helper-oAuth1 input').on("blur", function () {
	            // console.log("Save helper");
	            view.save();
	        });

	        $('#request-helper-oAuth1 .request-helper-clear').on("click", function () {
	            view.clearFields();
	        });

	        $('#request-helper-oauth1-auto').change(function () {
	            var isAutoEnabled = $('#request-helper-oauth1-auto').prop('checked') ? true : false;
	            view.save();
	            model.set("auto", isAutoEnabled);

	            if (!isAutoEnabled) {
	                $('#request-helper-oAuth1 .request-helper-submit').css("display", "inline-block");
	            }
	            else {
	                $('#request-helper-oAuth1 .request-helper-submit').css("display", "none");
	            }
	        });

	        $('#request-helper-oAuth1-saveHelper').change(function () {
	            var saveToRequest = $('#request-helper-oAuth1-saveHelper').prop('checked') ? true : false;
	            view.save();
	            model.set("saveToRequest", saveToRequest);
	        });

	        $('#request-helper-oauth1-header').click(function () {
	            view.save();
	        });
	    },

	    clearFields: function() {
	        $("#request-helper-oauth1-consumerKey").val("");
	        $("#request-helper-oauth1-consumerSecret").val("");
	        $("#request-helper-oauth1-token").val("");
	        $("#request-helper-oauth1-tokenSecret").val("");
	        $("#request-helper-oauth1-signatureMethod").val("HMAC-SHA1");
	        $("#request-helper-oauth1-timestamp").val("");
	        $("#request-helper-oauth1-nonce").val("");
	        $("#request-helper-oauth1-version").val("");
	        $("#request-helper-oauth1-realm").val("");
	        $("#request-helper-oauth1-header").prop("checked", false);
	        $("#request-helper-oauth1-auto").prop("checked", false);
	        $("#request-helper-oauth1-empty-params").prop("checked", false);
	        $("#request-helper-oauth1-encode-signature").prop("checked", false);
	        $("#request-helper-oAuth1-saveHelper").prop("checked", false);

	        var helper = {
	            id: "oAuth1",
	            time: new Date().getTime(),
	            consumerKey: "",
	            consumerSecret: "",
	            token: "",
	            tokenSecret: "",
	            signatureMethod: "HMAC-SHA1",
	            timestamp: "",
	            nonce: "",
	            version: "",
	            realm: "",
	            header: false,
	            auto: false,
	            encodeSignature: false,
	            includeEmpty: false,
	            saveToRequest: false
	        };

	        this.model.set(helper);
	    },

	    save: function() {
	        var helper = {
	            id: "oAuth1",
	            time: new Date().getTime(),
	            consumerKey: $("#request-helper-oauth1-consumerKey").val(),
	            consumerSecret: $("#request-helper-oauth1-consumerSecret").val(),
	            token: $("#request-helper-oauth1-token").val(),
	            tokenSecret: $("#request-helper-oauth1-tokenSecret").val(),
	            signatureMethod: $("#request-helper-oauth1-signatureMethod").val(),
	            timestamp: $("#request-helper-oauth1-timestamp").val(),
	            nonce: $("#request-helper-oauth1-nonce").val(),
	            version: $("#request-helper-oauth1-version").val(),
	            realm: $("#request-helper-oauth1-realm").val(),
	            header: $("#request-helper-oauth1-header").prop("checked"),
	            auto: $("#request-helper-oauth1-auto").prop("checked"),
	            encodeSignature: $("#request-helper-oauth1-encode-signature").prop("checked"),
	            includeEmpty: $("#request-helper-oauth1-empty-params").prop("checked"),
	            saveToRequest: $("#request-helper-oAuth1-saveHelper").prop("checked"),
	        };

	        this.model.set(helper);
	    },

	    render: function() {
	        $("#request-helper-oauth1-consumerKey").val(this.model.get("consumerKey"));
	        $("#request-helper-oauth1-consumerSecret").val(this.model.get("consumerSecret"));
	        $("#request-helper-oauth1-token").val(this.model.get("token"));
	        $("#request-helper-oauth1-tokenSecret").val(this.model.get("tokenSecret"));
	        $("#request-helper-oauth1-signatureMethod").val(this.model.get("signatureMethod"));
	        $("#request-helper-oauth1-timestamp").val(this.model.get("timestamp"));
	        $("#request-helper-oauth1-nonce").val(this.model.get("nonce"));
	        $("#request-helper-oauth1-version").val(this.model.get("version"));
	        $("#request-helper-oauth1-realm").val(this.model.get("realm"));

	        $("#request-helper-oauth1-header").prop("checked", this.model.get("header"));
	        $("#request-helper-oauth1-auto").prop("checked", this.model.get("auto"));
	        $("#request-helper-oauth1-encode-signature").prop("checked", this.model.get("encodeSignature"));
	        $("#request-helper-oauth1-empty-params").prop("checked", this.model.get("includeEmpty"));
	        $("#request-helper-oAuth1-saveHelper").prop("checked", this.model.get("saveToRequest"));

	        if (this.model.get("auto")) {
	            $('#request-helper-oAuth1 .request-helper-submit').css("display", "none");
	        }
	        else {
	            $('#request-helper-oAuth1 .request-helper-submit').css("display", "inline-block");
	        }
	    }
	});

	module.exports = OAuth1Form;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var OAuth2Form = __webpack_require__(313);

	var OAuth2Manager = Backbone.View.extend({
		initialize: function() {
			var model = this;
			var view = this;

			var oAuth2Form = new OAuth2Form({model: this.model});

			pm.mediator.on("showAccessTokens", this.showAccessTokens, this);
			pm.mediator.on("updatedOAuth2Token", this.showAccessTokens, this);

			// Click event to load access_token
			// Delete event
			$("#request-helper-oAuth2-access-token-get").on("click", function () {
			    view.showAccessTokenForm();
			});
		},

		showAccessTokenForm: function() {
		    $("#request-helper-oAuth2-access-tokens-container").css("display", "none");
		    $("#request-helper-oAuth2-access-token-save-form").css("display", "none");
		    $("#request-helper-oAuth2-access-token-form").css("display", "block");
		},

		showAccessTokens: function() {
		    $("#request-helper-oAuth2-access-tokens-container").css("display", "block");
		    $("#request-helper-oAuth2-access-token-save-form").css("display", "none");
		    $("#request-helper-oAuth2-access-token-form").css("display", "none");
		},

		render: function() {
			// Render list event
		}

	});

	module.exports = OAuth2Manager;


/***/ },
/* 313 */
/***/ function(module, exports) {

	var OAuth2Form = Backbone.View.extend({
	    initialize: function() {
	        this.model.on("change", this.render, this);

	        var view = this;
	        var model = this.model;

	        $("#request-helper-oauth2-authorization-url").autocomplete({
	            source: oAuth2AuthorizationUrls,
	            delay: 50
	        });

	        $("#request-helper-oauth2-access-token-url").autocomplete({
	            source: oAuth2TokenUrls,
	            delay: 50
	        });

	        $("#request-helper-oAuth2 .request-helper-back").on("click", function () {
	            view.save();
	            view.showAccessTokens();
	        });

	        $('#request-helper-oAuth2 .request-helper-submit').on("click", function () {
	            var params = {
	                "authorization_url": $("#request-helper-oauth2-authorization-url").val(),
	                "access_token_url": $("#request-helper-oauth2-access-token-url").val(),
	                "client_id": $("#request-helper-oauth2-client-id").val(),
	                "client_secret": $("#request-helper-oauth2-client-secret").val(),
	                "scope": $("#request-helper-oauth2-scope").val(),
	                "local_access_token": $("#request-helper-oauth2-local-token").prop('checked')
	            };

	            view.save();
	            $("#oauth2-debug-url-group").hide();
	            model.trigger("startAuthorization", params);
	        });

	        $('#request-helper-oAuth2 .request-helper-save').on("click", function () {
	            var name = $("#request-helper-oauth2-name").val();
	            var id = $(this).attr("data-id");

	            var params = {
	                "id": id,
	                "name": name
	            };

	            pm.mediator.trigger("updateOAuth2Token", params);
	        });

	        pm.mediator.on("addedOAuth2Token", this.onAddedOAuth2Token, this);
	    },

	    onAddedOAuth2Token: function(params) {
	        // console.log(params);
	        $('#request-helper-oAuth2-access-token-data').text("");
	        $('#request-helper-oAuth2-access-token-data').append(Handlebars.templates.environment_quicklook({"items": params.data}));
	        $("#request-helper-oAuth2 .request-helper-save").attr("data-id", params.id);
	        this.showSaveForm();
	    },

	    showSaveForm: function() {
	        $("#request-helper-oAuth2-access-tokens-container").css("display", "none");
	        $("#request-helper-oAuth2-access-token-form").css("display", "none");
	        $("#request-helper-oAuth2-access-token-save-form").css("display", "block");
	    },

	    showAccessTokens: function() {
	        $("#request-helper-oAuth2-access-tokens-container").css("display", "block");
	        $("#request-helper-oAuth2-access-token-save-form").css("display", "none");
	        $("#request-helper-oAuth2-access-token-form").css("display", "none");
	    },

	    save: function() {
	        var helper = {
	            "id": "oAuth2",
	            "authorization_url": $("#request-helper-oauth2-authorization-url").val(),
	            "access_token_url": $("#request-helper-oauth2-access-token-url").val(),
	            "client_id": $("#request-helper-oauth2-client-id").val(),
	            "client_secret": $("#request-helper-oauth2-client-secret").val(),
	            "scope": $("#request-helper-oauth2-scope").val(),
	            "time": new Date().getTime()
	        };

	        // console.log("Save", helper);

	        this.model.set(helper);
	    },

	    render: function() {
	        $("#request-helper-oauth2-authorization-url").val(this.model.get("authorization_url"));
	        $("#request-helper-oauth2-access-token-url").val(this.model.get("access_token_url"));
	        $("#request-helper-oauth2-client-id").val(this.model.get("client_id"));
	        $("#request-helper-oauth2-client-secret").val(this.model.get("client_secret"));
	        $("#request-helper-oauth2-scope").val(this.model.get("scope"));
	        $("#oauth2-debug-url-group").hide();
	    }
	});

	module.exports = OAuth2Form;


/***/ },
/* 314 */
/***/ function(module, exports) {

	var AWSAuthForm = Backbone.View.extend({
	    initialize: function() {
	        this.model.on("change", this.render, this);
	        this.model.on("updateAwsHelper", this.updateModel, this);

	        var view = this;
	        var model = this.model;

	        $('#request-helper-awsSigV4 .request-helper-clear').on("click", function () {
	            view.clearFields();
	        });

	        $('#request-helper-awsSigV4 input').on("blur", function () {
	            view.updateModel();
	        });

	        $('#request-helper-awsSigV4-saveHelper').change(function() {
	            var saveHelper = $('#request-helper-awsSigV4-saveHelper').prop('checked') ? true : false;
	            model.set("saveHelper", saveHelper);
	        });
	    },

	    updateModel: function() {
	        var view = this;
	        var model = this.model;
	        var helper = {
	            id: "awsSigV4",
	            time: new Date().getTime(),
	            accessKey: $("#request-helper-awsSigV4-accessKey").val(),
	            secretKey: $("#request-helper-awsSigV4-secretKey").val(),
	            region: $("#request-helper-awsSigV4-region").val(),
	            service: $("#request-helper-awsSigV4-service").val(),
	            auto: true,
	            saveHelper: $('#request-helper-awsSigV4-saveHelper').prop('checked') ? true : false
	        };

	        model.set(helper);
	    },

	    clearFields: function () {
	        $("#request-helper-awsSigV4-accessKey").val("");
	        $("#request-helper-awsSigV4-secretKey").val("");
	        $("#request-helper-awsSigV4-region").val("");
	        $("#request-helper-awsSigV4-service").val("");


	        //set values in the model
	        var helper = {
	            id: "digest",
	            time: new Date().getTime(),
	            accessKey: "",
	            secretKey: "",
	            region: "",
	            service: "",
	            auto: true,
	            saveHelper: false
	        };

	        this.model.set(helper);
	    },

	    save: function() {
	        var helper = {
	            id: "digest",
	            time: new Date().getTime(),
	            accessKey: $("#request-helper-awsSigV4-accessKey").val(),
	            secretKey: $("#request-helper-awsSigV4-secretKey").val(),
	            region: $("#request-helper-awsSigV4-region").val(),
	            service: $("#request-helper-awsSigV4-service").val(),
	            auto: true
	        };

	        //Replace this with the call to the model
	        this.model.set(helper);
	    },

	    render: function() {
	        $("#request-helper-awsSigV4-accessKey").val(this.model.get("accessKey"));
	        $("#request-helper-awsSigV4-secretKey").val(this.model.get("secretKey"));
	        $("#request-helper-awsSigV4-region").val(this.model.get("region"));
	        $("#request-helper-awsSigV4-service").val(this.model.get("service"));
	        $('#request-helper-awsSigV4-saveHelper').prop('checked', this.model.get("saveHelper"));
	    }
	});

	module.exports = AWSAuthForm;


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var Response = __webpack_require__(7).Response;

	var TabRequest = Backbone.Model.extend({
		defaults: function() {
			return {
				"uiState": {
					"response" : {
						activeResponseTab: "body",
						activeResponseView: "parsed",
						editorScroll: {
							top: 0,
							left: 0
						}
					}
				},
				"initialRequest": undefined,
				"isTabDirty": false
			}
		}
	});
	//the tab request model is an object with a two props: tabId and request

	var TabManager = Backbone.Collection.extend({
		model: TabRequest,

		initialize: function() {
			//the view will render tabs
			var oldThis = this;
			this.switchingTab = false;

			this.on("openNewTab", this.addNewTab, this);
			this.requestTabMap = {};

			pm.mediator.on("loadRequest", this.loadRequestIntoTab, this);
			pm.mediator.on("loadRequestInNewTab", this.loadRequestInNewTab, this);

			pm.mediator.on("loadNewlySavedRequest", this.loadRequestIntoTab, this);

			pm.mediator.on("resetRequest", this.onResetCurrentTab, this);
			pm.mediator.on("saveSampleResponse", this.saveSampleResponse, this);

			pm.request.on("change:url", this.setCurrentTabURL, this);

	        pm.mediator.on("loadSampleResponse", this.loadSampleResponse, this);
	    	pm.mediator.on("updateCollectionRequest", this.checkIfCurrentRequestIsUpdated, this);

	    	pm.request.on("change", this.checkForDirtyTab, this);
	    	pm.mediator.on("saveRequest", this.saveRequest, this);
		},

		checkIfCurrentRequestIsUpdated: function(request) {
			var tabId = this.requestTabMap[request.id];
			if(tabId) {
				var tab = this.getModelByTabId(tabId);
				var tabName = request.name ? request.name : request.url;
				this.trigger("setTabName", tabId, tabName);

				var initialRequest = tab.get("initialRequest");
				initialRequest.name = request.name;
				initialRequest.description = request.description;

				this.setInitialRequest(tab, initialRequest);
				this.checkForDirtyTab();
			}
		},

		disableDirtyCheck: function() {
			pm.request.off("change", this.checkForDirtyTab);
		},

		enableDirtyCheck: function() {
			if(!pm.settings.getSetting("trackUnsavedRequests")) return;

			pm.request.off("change", this.checkForDirtyTab);
			pm.request.on("change", this.checkForDirtyTab, this);
			this.checkForDirtyTab(pm.request);
		},

		saveRequest: function() {
			this.getCurrentTab().set("initialRequest", pm.request.getAsObject());
			this.checkForDirtyTab(pm.request);
		},

		checkForDirtyTab: function(req) {
			if(!pm.settings.getSetting("trackUnsavedRequests")) return;
			var initial = this.getCurrentTab().get("initialRequest");
			try {
				var current = req.getAsObject(true);
			} catch(e) {
				return;
			}

			if(!initial || !current)
				return;

			if(compareRequests(current, initial)) {
				this.setDirtyTab(this.getCurrentTab(), false);
			} else {
				this.setDirtyTab(this.getCurrentTab(), true);
			}
		},

		turnOffDirtyCheck: function(tab) {
			this.setInitialRequest(tab, null);
			this.setDirtyTab(tab, false);
			this.disableDirtyCheck();
		},

	    loadSampleResponseById: function(responseId) {
	        var responses = pm.request.get("responses");
	        var location = arrayObjectIndexOf(responses, responseId, "id");
	        pm.request.loadSampleResponse(responses[location]);
	    },


		getOldTabs: function() {
			var loadOldTabs = pm.settings.getSetting("saveTabs");
			var oldThis = this;
			/*if(loadOldTabs) {
				pm.indexedDB.tabs.getAllTabs(function(tabs) {
					_.bind(oldThis.loadDBTabs, oldThis)(tabs);
				});
			}
			else {*/
				pm.indexedDB.tabs.deleteAllTabs(function() {});
				this.loadDBTabs([]);
			//}
		},

		loadDBTabs: function(tabs) {
			var tempTabId = null;
			var tempReqId = null;
			var oldThis = this;
			_.each(tabs, function(tab) {
				var tabRequest = oldThis.loadFromJson(tab);
				oldThis.models.add(tabRequest);
				var req = tabRequest.get("request");

				if(req.id) {
					oldThis.requestTabMap[req.id] = tab.id;
					tempReqId = req.id;
				}
				tempTabId = tab.id;

				var name = (req.name)?req.name:req.url;

				oldThis.trigger("addNewTab", tempTabId);
				oldThis.trigger("setTabName", tempTabId, name);
			});

			if(!tempTabId) {
				//add new tab
				tempTabId = guid();
				oldThis.models.add(new TabRequest({
					tabId: tempTabId,
					request: null,
					response: null,
					timestamp: Date.now()
				}));
				oldThis.trigger("addNewTab", tempTabId);
			}

			// setTimeout(function() {
			// 	//oldThis.switchTab(tempTabId);
			// }, 500);

			oldThis.currentTabId = tempTabId;
		},

		getTabAsJSON: function(tabRequest) {
			return {
				id: tabRequest.get("tabId"),
				request: tabRequest.get("request"),
				response: tabRequest.get("response"),
				timestamp: tabRequest.get("timestamp") || Date.now()
			};
		},

		loadFromJson: function(json) {
			if(!json.request.uiState) {
				json.request.uiState = {};
			}
			json.request.uiState.waitingForResponse = false;
			json.request.uiState.waitingForInterceptorResponse = false;

			return new TabRequest({
				tabId: json.id,
				request: json.request,
				response: json.response,
				timestamp: json.timestamp || Date.now()
			});
		},

		onResetCurrentTab: function() {
			pm.request.get("response").clear();
			this.setResponseInTab(this.currentTabId, null);
		},

		getCurrentRequestId: function() {
			var tab = this.getModelByTabId(this.currentTabId);
			if(tab)
			{
				var request = tab.get("request");
				return request.id;
			}
			return null;
		},

		saveSampleResponse: function(r) {
	        //r is a JSON (response)
	        var currTab = this.getModelByTabId(this.currentTabId);
	        var sampleRequest = currTab.get("request");
	        //var sampleRequest = this.getAsObject();
	        var staticRequest = {
	        	"url": sampleRequest.transformedUrl,
	        	"headers": sampleRequest.transformedHeaders,
	        	"data": (sampleRequest.body?sampleRequest.body.transformedData:null),
	        	"method": sampleRequest.method,
	        	"dataMode": sampleRequest.dataMode
	        };
	        var response = r;
	        var collectionRequestId = sampleRequest.id;

	        var resRequest = pm.request.trimJsonForResponse(sampleRequest); //old code. not used anymore
	        response.request = staticRequest;

	        //only save responses IF it's the current request
	        if (collectionRequestId) {
	            if(!sampleRequest.responses) {
	            	sampleRequest.responses = [];
	            }
	            sampleRequest.responses.push(response);
	            currTab.set("request", sampleRequest);
	            pm.request.trigger("change:responses");
	            pm.mediator.trigger("addResponseToCollectionRequest", collectionRequestId, response);
	        }
	    },

	    /*
	    If the path variables object is empty, take the vars from the URL to prevent erranous dirty state
	     */
	    setPathVariables: function(request) {
	    	var oldKeys = getURLPathVariables(request.url);
	    	
	    	for (var key in request.pathVariables) {
	            if (request.pathVariables.hasOwnProperty(key)) {
	                var oldIndex = oldKeys.indexOf(key);
	                if(oldIndex !== -1) {
	                    oldKeys.splice(oldIndex, 1);
	                }
	            }
	        }
			if(!request.pathVariables) {
				request.pathVariables = {};
			}

	        //add all keys that are there in the URL but not in pathVars to pathVars
	         _.each(oldKeys, function(oldKey) {
	            request.pathVariables[oldKey] = null;
	        });
	    },

		loadRequestIntoTab: function(request, isFromCollection) {
			this.setPathVariables(request);

			var url = request.url;
			var name = request.name;
			if(!name || name=="") {
				name = url;
			}

			var tabRequestMap = _.invert(this.requestTabMap);
	    	if(tabRequestMap[this.currentTabId]) {
	    		delete this.requestTabMap[tabRequestMap[this.currentTabId]];
	    	}

			if(request.id) {
				this.requestTabMap[request.id] = this.currentTabId;
			}
			this.trigger("setTabName", this.currentTabId, name);

			this.getCurrentTab().set("request", request);

			if(!pm.settings.getSetting("trackUnsavedRequests")) return;
			if(!this.switchingTab || !this.getCurrentTab().get("initialRequest")) {
				this.setInitialRequest(this.getCurrentTab(), request);
			}

			if(isFromCollection) {
				this.enableDirtyCheck();
			} else {
				this.setInitialRequest(this.getCurrentTab(), null);
				this.disableDirtyCheck();
			}

			this.switchingTab = false;
		},


		resetCurrentTab: function() {
			var tabRequestMap = _.invert(this.requestTabMap);
	    	if(tabRequestMap[this.currentTabId]) {
	    		delete this.requestTabMap[tabRequestMap[this.currentTabId]];
	    	}
			this.trigger("setTabName", this.currentTabId, "New tab");
		},

		loadRequestInNewTab: function(request) {
			this.setPathVariables(request);
			if(this.requestTabMap[request.id]) {
				this.switchTab(this.requestTabMap[request.id]);
			}
			else {
				var newTabId = guid();
				if(!request.uiState) {
					request.uiState = {};
				}
				this.models.add(new TabRequest({
					tabId: newTabId,
					request: request,
					response: null,
					timestamp: Date.now()
				}));
				if(request.id) {
					this.requestTabMap[request.id] = newTabId;
				}

				this.trigger("addNewTab", newTabId);
				this.switchTab(newTabId);
			}
		},

		setInitialRequest: function(tab, request) {
			tab.set("initialRequest", request);
		},

		setDirtyTab: function(tab, isDirty) {
			tab.set("isTabDirty", isDirty);
			this.trigger("setTabDirty", this.currentTabId, isDirty);
		},

		setCurrentTabURL: function(request, newURL) {
			if(!request.get("name")) {
				this.trigger("setTabName", this.currentTabId, newURL);
			}
		},

		/**
		*/
		addNewTab: function() {
			var newTabId = guid();

			var oldTabId = this.currentTabId;

			//don't save if adding a new tab after deleting all
			if(oldTabId) {
				this.saveTab(oldTabId);
			}

			//console.log("Adding tab with id: " +newTabId);

			this.models.add(new TabRequest({
				tabId: newTabId,
				request: null,
				response: null,
				timestamp: Date.now()
			}));

			this.currentTabId = newTabId;

			this.trigger("addNewTab", newTabId);

			pm.tracker.trackEvent("tab", "open");
			delete pm.request.attributes.id;

			pm.mediator.trigger("dismissTooltip", "tabs");

			this.resetTabUI();

		},

		//gets the tab after tabId
		getNextTab: function() {
			var totalTabs = this.models.length;
			var tabIndex = this.indexOf(pm.tabManager.getCurrentTab());
			if(tabIndex==-1) {
				//weird
			}
			else if(tabIndex == totalTabs-1) {
				//no next tab
				//move to first tab
				this.switchTab(this.at(0).get("tabId"));
			}
			else {
				this.switchTab(this.at(tabIndex+1).get("tabId"));
			}
		},

		//gets the tab before tabId
		getPrevTab: function() {
			var totalTabs = this.models.length;
			var tabIndex = this.indexOf(pm.tabManager.getCurrentTab());
			if(tabIndex==-1) {
				//weird
			}
			else if(tabIndex == 0) {
				//no prev
				//move to last tab
				this.switchTab(this.at(totalTabs-1).get("tabId"));
			}
			else {
				this.switchTab(this.at(tabIndex-1).get("tabId"));
			}
		},

		resetTabUI: function() {
			$("#request-actions-reset").click();
			$("#request-builder-tabs li[data-tab='auth'] a").tab("show");
			pm.request.get("response").clear();
			this.setResponseInTab(this.currentTabId, null);
		},

		setResponseInTab: function(tabId, response) {
			var oldModel = this.getModelByTabId(tabId);
	        if(oldModel) {
	        	if(response && response.time == 0 && !response.status) {
	        		response.empty = true;
	        	}
	        	oldModel.set("response", response);
	        }
		},

		addReceivedResponseToTab: function(tabId, response) {
			var oldModel = this.getModelByTabId(tabId);
	        if(oldModel) {
	        	if(response && response.time == 0 && !response.status) {
	        		response.empty = true;
	        	}
	        	oldModel.set("response", response);

	        	var request = oldModel.get("request");
	        	if(!request) {
	        		//if the tab has been deleted or there's no request
	        		return;
	        	}

	        	if(request.uiState && (response && !response.empty)) { //don't add if response is null
	        		request.uiState.waitingForInterceptorResponse = false;
	        		request.uiState.waitingForResponse = false;
	        	}

	        	if(response && this.currentTabId == tabId) {
	        		var request = oldModel.get("request");
					pm.request.get("response").loadSampleResponse(request, response, true);
	        	}

				if(response) {
					if(!(response instanceof Response)) {
						response = new Response(response); //yep
					}
					request.sentFromTab = tabId;
	    			pm.request.get("response").runTestsForRequest(request, response);
	        	}
	        }
		},

		addInterceptorResponseToTab: function(tabId, response) {
			var oldModel = this.getModelByTabId(tabId);
	        if(oldModel) {
	        	if(oldModel.get("request").uiState.waitingForInterceptorResponse) {
		        	if(response && response.time == 0 && !response.status) {
		        		response.empty = true;
		        	}
		        	oldModel.set("response", response);
		        	oldModel.get("request").uiState.waitingForInterceptorResponse =  false;
		        	oldModel.get("request").uiState.waitingForResponse =  false;

		        	if(this.currentTabId == tabId) {
		        		var request = oldModel.get("request");
						pm.request.get("response").loadSampleResponse(request, response, true);
		        	}
	        	}
	        }
		},

		sentRequest: function(tabId, request) {
			var oldModel = this.getModelByTabId(tabId);
			var requestJSON = null;
			if(request) {
				if(!request.get("id")) {
					request.set("id", guid());
				}
				requestJSON = request.getAsObjectForTab();
			}
			request = null;

	        if(!oldModel) {
	        	this.saveTab(tabId);
	        	oldModel = this.getModelByTabId(tabId);
	        }

	        request = oldModel.get("request");
	        if(!requestJSON.uiState) {
	        	requestJSON.uiState = {};
	        }

	    	if(request && requestJSON) {
	    		var useInterceptor = pm.settings.getSetting("useInterceptor");
	    		if(useInterceptor) {
	    			requestJSON.uiState.waitingForInterceptorResponse =  true;
	    		}
	    		requestJSON.uiState.waitingForResponse =  true;
	    	}

	    	if(requestJSON) {
	    		oldModel.set("request", requestJSON);
			}
	    	oldModel.set("response", null);
		},

		cancelRequest: function(tabId) {
			var oldModel = this.getModelByTabId(tabId);
	        if(oldModel) {
	    		oldModel.get("request").uiState.waitingForInterceptorResponse =  false;
	    		oldModel.get("request").uiState.waitingForResponse =  false;
	    		oldModel.set("response", null);
	        }
		},

		switchTab: function(newTabId) {
			var oldTabId = this.currentTabId;
			this.switchingTab = true;

			//don't save if adding a new tab after deleting all
			if(oldTabId) {
				this.saveTab(oldTabId);
			}


			this.currentTabId = newTabId;

			var tabData = this.getModelByTabId(newTabId);
			if(!tabData) {
				pm.syncLogger.error("No such tab: " + newTabId);
				return;
			}
			var request = tabData.get("request");
			var response = tabData.get("response");

			var waiting = false;
			if(request) {
				pm.mediator.trigger("loadRequest", request, !!request.isFromCollection, false, false, true);
				if(request.uiState.waitingForResponse || request.uiState.waitingForInterceptorResponse) {
					pm.request.get("response").trigger("sentRequest", this);
					pm.request.trigger("sentRequest", this);
					waiting = true;
				}

				if(request.isFromCollection) {
					//switch sidebar highlight
					pm.collections.trigger("selectedCollectionRequest", request);
				}
				else {
					pm.collections.trigger("selectedCollectionRequest", null);
				}
			}
			else {
				pm.collections.trigger("selectedCollectionRequest", null);
			}

			var responseToRender = null;
			if(response) {
				if(!response.empty) {
					pm.request.set("action", "display");
					pm.request.get("response").loadSampleResponse(request, response, false);
				}

				if(waiting) {
					pm.request.get("response").trigger("sentRequest", pm.request);
				}
			}
			this.trigger("switchTab", newTabId);
			pm.tracker.trackEvent("tab", "switch");
		},

		getRequestByTabId: function(id) {
			for(var i = 0; i < this.models.length; i++) {
	            if(id===this.models[i].get("tabId")) {
	                return this.models[i].get("request");
	            }
	        }
	        return null;
		},

		getModelByTabId: function(id) {
			for(var i = 0; i < this.models.length; i++) {
	            if(id===this.models[i].get("tabId")) {
	                return this.models[i];
	            }
	        }
	        return null;
		},

		getModelByRequestId: function(id) {
			for(var i = 0, length = this.models.length; i < length; i++) {
				var thisRequest = this.models[i].get("request");
	            if(thisRequest && id===thisRequest.id) {
	                return this.models[i];
	            }
	        }
	        return null;
		},

		getCurrentTab: function() {
			if (this.currentTabId) {
				return this.findWhere({tabId: this.currentTabId});
			}
			else {
				return null;
			}
		},

		//called when a request's tests are run
		updateRequestTests: function(requestJson) {
			var model = this.getModelByTabId(requestJson.sentFromTab);
			if(model) {
				var req = model.get("request");
				req.testResults = requestJson.testResults;
				req.testErrors = requestJson.testErrors;
				model.set("request", req);
				if(this.currentTabId === requestJson.sentFromTab) {
					pm.request.set("testResults", req.testResults);
					pm.request.set("testErrors", req.testErrors);
				}
			}
		},
		/**
		 * This is called when a new tab is opened.
		 * The id of the OLD tab is passed by the view
		 * The OLD tab data will be saved in the manager
		 * The view will then call reset and add a new tab
		 */
		saveTab: function(tabId) {
			pm.request.trigger("updateModel", true);
			var current = pm.request.getAsObjectForTab(true);

			if(!tabId) {
				return;
			}

			var collectionRequest = {
				id: current.id,
				name: current.name,
				description: current.description,
	            headers: current.headers,
	            url: current.url,
	            preRequestScript: pm.request.get("preRequestScript"),
	            pathVariables: current.pathVariables,
	            method: current.method,
	            data: current.data,
	            dataMode: current.dataMode,
	            version: current.version,
	            tests: current.tests,
	            responses: current.responses,
			    currentHelper: current.currentHelper,
			    helperAttributes: current.helperAttributes,
			    isFromCollection: current.isFromCollection,
			    testResults: current.testResults,
			    testErrors: current.testErrors,
			    uiState: current.uiState,
			    responses: current.responses
	        };
	        collectionRequest.uiState.builderScroll = $("#request-builder-view")[0].scrollTop;

	        if(current.isFromCollection) {
	        	collectionRequest.id = current.id;
	        	collectionRequest.collectionId = current.collectionId;
	        	collectionRequest.write = current.write;
	        }


	        if(current.id) {
	        	collectionRequest.id = current.id;
	        }

	        var response = pm.request.get("response").toJSON();
	        if(response.time == 0 && !response.status) {
	        	response.empty = true;
	        }

	        var oldModel = this.getModelByTabId(tabId);
	        if(oldModel) {
	        	var oldRequest= oldModel.get("request");
	        	if(oldRequest) {
	    			collectionRequest.testResults = oldRequest.testResults;
					collectionRequest.testErrors = oldRequest.testErrors;
				}

	        	oldModel.set("tabId", tabId);
	        	oldModel.set("request", collectionRequest);
	        	oldModel.set("response", response);
	        }
	        else {
	        	oldModel = new TabRequest({
					tabId: tabId,
					request: collectionRequest,
					response: response,
					timestamp: Date.now()
				});
	        	this.models.add(oldModel);
	    	}

	    	// var json = this.getTabAsJSON(oldModel);
	    	// pm.indexedDB.tabs.saveTab(json, function() {}); //save tab to db
		},

		updateRequestForTab: function(request, tabId) {
			var oldModel = this.getModelByTabId(tabId);
			var oldRequest = oldModel.get("request");

			if(oldModel) {
				var newRequest = _.merge(oldRequest, request);
				oldModel.set("request", newRequest);
			}
		},

		/* Take in an optional newtab argument */
		deleteTab: function(tabId) {
			var indexToRemove = -1;
			for(var i = 0; i < this.models.length; i++) {
	            if(tabId===this.models[i].get("tabId")) {
	                indexToRemove = i;
	                break;
	            }
	        }

	        var tabToGoTo = null;
	        if(indexToRemove == -1) {
	        	console.error("No tab with this ID found");
	        }
	        else {
	        	var tabIds = this.pluck("tabId");
	        	var request = this.models[indexToRemove].get("request");
	        	if(request && request.collectionId) {
	        		pm.collections.trigger("unselectRequest", request.id);
	        	}

	        	if(tabId!==this.currentTabId) {
	        		//do not swtich tabs
	        	}
	        	else {
		        	if(tabIds && tabIds.length < 2) {
		        		this.addNewTab();
		        	}
		        	else {
		        		var thisTabIndex = tabIds.indexOf(tabId);
		        		if(thisTabIndex>0) {
		        			tabToGoTo = tabIds[thisTabIndex-1];
		        		}
		        		else {
		        			tabToGoTo = tabIds[thisTabIndex+1];
		        		}
		        	}
		        }
	        	this.models.splice(indexToRemove,1);
	    	}

	    	var tabRequestMap = _.invert(this.requestTabMap);
	    	if(tabRequestMap[tabId]) {
	    		delete this.requestTabMap[tabRequestMap[tabId]];
	    	}

	        if(tabId==this.currentTabId) {
	        	this.currentTabId = null;
	    	}

	    	if(tabToGoTo) {
	    		this.switchTab(tabToGoTo);
	    	}

	    	var oldThis = this;
	    	pm.indexedDB.tabs.deleteTab(tabId, function() {
	    		oldThis.trigger("deleteTab", tabId);
	    	});

	    	pm.tracker.trackEvent("tab", "close");

		}
	});

	module.exports = TabManager;


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var ConfirmTabCloseModal = __webpack_require__(317);

	var TabSwitcher = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;
	        model.on("resetTabs", this.resetTabs);
	        model.on("setTabName", this.setTabName);
	        model.on("switchTab", this.onSwitchToTab);
	        model.on("addNewTab", this.onAddNewTab);
	        model.on("deleteTab", this.onDeletedTab);
	        model.on("setTabDirty", this.setTabDirty, this);

	        this.confirmModal = new ConfirmTabCloseModal();
	        this.confirmModal.on("confirmTabClose", this.confirmCloseTab, this);

	        pm.appWindow.trigger("registerInternalEvent", "newRequest", function() {
	            model.addNewTab();
	        }, this);

	        pm.appWindow.trigger("registerInternalEvent", "closeOpenTab", function() {
	            var activeId = $(".request-switch-tab.active").attr('data-id');
	            view.closeTab(activeId);
	        }, this);

	        var $tabWrapper = $("#request-switcher-tab-wrapper");
	        $tabWrapper.on("click", ".request-switch-tab", function() {
	        	var newTabId = $(this).attr('data-id');
	            if(model.currentTabId === newTabId) {
	              return;
	            }
	        	model.switchTab(newTabId);
	        });

	        $tabWrapper.on("click", ".new-request-switch-tab", function() {
	        	model.addNewTab();
	        });

	        $tabWrapper.on("click", ".remove-request-switch-tab", function(e) {
	        	e.stopPropagation();
	            e.preventDefault();
	        	var tabId = $(this).attr('data-id');

	            if(!tabId) {
	              console.error("No tabId found");
	            }

	            view.closeTab(tabId);
	        });

	        $(document).bind('keydown', 'meta+t', function(e) {
	            //only run if you're in the request builder view
	            if(pm.currentMainView === "request-builder-view") {
	                model.addNewTab();
	            }
	            return true;
	        });

	        $(document).bind('keydown', function(e) {
	            if(e.shiftKey && (e.metaKey || e.ctrlKey)) {
	                if(e.which === 219) {
	                    view.moveToPrevTab();
	                } else if(e.which === 221) {
	                    view.moveToNextTab();
	                }
	            }
	            return true;
	        });

	        $(document).bind('keydown', 'ctrl+w', function(e) {
	            if(pm.currentMainView === "request-builder-view") {
	                view.closeCurrentTab();
	            }
	            return false;
	        })

	        /* $(document).bind('keydown', 'meta+w', function(e) {
	            view.closeCurrentTab();
	            return false;
	        });*/

	         // $(".remove-request-switch-tab").addClass('hidden'); //don't show the X button till >1 tabs are open


	        //this.resetTabs();
	        this.initTabs();
	        model.getOldTabs();
	    },

	    moveToNextTab: function() {
	        var nextTab = this.model.getNextTab();
	    },

	    moveToPrevTab: function() {
	        var nextTab = this.model.getPrevTab();
	    },

	    closeTab: function(tabId) {
	        var model = this.model;
	        var view = this;
	        if(model.getModelByTabId(tabId).get("isTabDirty")) {
	            view.confirmModal.showModal(tabId);
	        } else {
	            model.deleteTab(tabId);
	        }
	    },

	    confirmCloseTab: function(tabId) {
	        this.model.deleteTab(tabId);
	    },

	    setTabDirty: function(tabId, isDirty) {
	        var $tabEl = $(".request-switch-tab[data-id='"+ tabId +"']");

	        if(!$tabEl) {
	            return;
	        }

	        if(isDirty) {
	            $tabEl.find(".remove-request-switch-tab").addClass("dirty");
	        } else {
	            $tabEl.find(".remove-request-switch-tab").removeClass("dirty");
	        }
	    },

	    closeCurrentTab: function() {
	        var currentTabId = $(".request-switch-tab.active").attr('data-id');
	        this.closeTab(currentTabId);
	    },

	    onSwitchToTab: function(newTabId) {
	    	var model = this.model;
	        if(this.model.currentTabId === newTabId) {
	            return;
	        }

	    	$(".request-switch-tab").removeClass("active");
	    	$("#request-switch-tab-" + newTabId).addClass("active");
	    	//model.switchTab(newTabId);
	    },

	    resetTabs: function() {
	    	//there is only 1 tab
	    	var currentTab = this.model.models[0];
	    	var tabId = currentTab.get("tabId");


	    	$tab = '<span class="new-request-switch-tab icon-new-tab" id="main-new-request-switch-tab"></span>'
	        +'<div class="active request-switch-tab" id="request-switch-tab-'+tabId+'" data-id="'+tabId+'">'
	    	+'<span class="request-tab-name">New tab</span>'
	    	+'<span class="remove-request-switch-tab hidden icon-tab-close" data-id="'+tabId+'"></span>'
	    	+'</div>';

	    	$("#request-switcher-tabs").html($tab);
	    },

	    initTabs: function() {
	        $tab = '<span class="new-request-switch-tab icon-new-tab" id="main-new-request-switch-tab"></span>';
	        $("#request-switcher-tabs").html($tab);
	    },

	    onAddNewTab: function(tabId) {
	    	$(".request-switch-tab").removeClass("active");
	    	$tab = $('<div class="active request-switch-tab" id="request-switch-tab-'+tabId+'" data-id="'+tabId+'">'
	    		+'<span class="request-tab-name">New tab</span>'
	    		+'<span class="remove-request-switch-tab icon-tab-close" data-id="'+tabId+'"></span>'
	    		+'</div>');

	    	// $("#request-switcher-tabs").prepend($tab);
	        $("#main-new-request-switch-tab").after($tab);
	        //console.log("Adding tab in UI " + tabId);
	        // $(".remove-request-switch-tab.hidden").removeClass('hidden');

	        if(!pm.request.isMethodWithBody($(".request-method-list-item-selected").text())) {
	            /*$("#request-builder-tabs li[data-tab='auth'] a").tab("show");
	            pm.request.get("uiState").activeRequestTab = "auth";*/
	            $("#request-builder-tab-body").addClass("disabled");
	        }
	    },

	    onDeletedTab: function(tabId) {
	        var thisTab = $("#request-switch-tab-" + tabId);
	        thisTab.remove();
	    },

	    setTabName: function(tabId, tabName) {
	        if(!tabName || tabName === "") {
	            tabName = "New tab";
	        }
	        $("#request-switch-tab-" + tabId+" .request-tab-name").text(tabName);
	    }
	});

	module.exports = TabSwitcher;


/***/ },
/* 317 */
/***/ function(module, exports) {

	var ConfirmTabCloseModal = Backbone.View.extend({
	    el: $("#modal-confirm-close-tab"),
	    events: {
	        'click #modal-confirm-close-tab-yes' : 'handleConfirm'
	    },
	    initialize: function() {
	        this.$el.on("shown", function () {
	            pm.app.trigger("modalOpen", "#modal-confirm-close-tab");
	        });

	        this.$el.on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });
	    },

	    showModal: function(tabId) {
	        this.$("#modal-confirm-close-tab-yes").data('id', tabId);
	        this.$el.modal('show');
	    },

	    hideModal: function(tabId) {
	        this.$el.modal('hide');
	    },

	    handleConfirm: function(e) {
	        this.trigger("confirmTabClose", $(e.target).data('id'));
	    }
	});

	module.exports = ConfirmTabCloseModal;


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var AppUpdateNotifier = Backbone.Model.extend({
		initialize: function() {
			var oldThis = this;
			pm.mediator.on("showVersionNotice", this.showVersionNotice, this);
			pm.mediator.on("notifyVersionUpdate", this.notifyVersionUpdate, this);
			pm.appWindow.trigger("registerInternalEvent", "electronUpdateError", this.onUpdateError, this);
			pm.appWindow.trigger("registerInternalEvent", "electronUpdateNotFound", this.noUpdateFound, this);
			pm.appWindow.trigger("registerInternalEvent", "electronUpdateDownloaded", this.onUpdateDownloaded, this);

			console.log("Checking for update notifications...");
			pm.storage.getValue("lastKnownVersion", function (result) {
				if(!result) result = {};
				var currentVersion = "0";
				currentVersion = pm.getVersion();

				if (!result) {
					result = "blank";
				}
				if (result) {
					var lastVersion = result;
					console.log("Stored version: " + lastVersion+", currentVersion: "+currentVersion);
					if (lastVersion !== currentVersion) {
						pm.mediator.trigger("versionUpdate", currentVersion, lastVersion);

						setTimeout(function() {
							pm.mediator.trigger("showVersionNotice", currentVersion);
							pm.mediator.trigger("notifyVersionUpdate");
						},2500);
					}
				}
				pm.storage.setValue({"lastKnownVersion": currentVersion});
			});

			if(postman_electron) {
				setTimeout(function() {
					oldThis.app = __webpack_require__(256).require('app');
					oldThis.version = oldThis.app.getVersion();
					oldThis.userId = pm.user.id;
					oldThis.appId = pm.settings.getSetting("installation_id");
					oldThis.userAgent = navigator.userAgent;
					oldThis.platform = "OSX";
					oldThis.checkForElectronUpdates("auto");
				}, 5000);

				$("#restart-update-electron-app").hide();
			}

			pm.appWindow.trigger("registerInternalEvent", "checkElectronUpdates", function() {
				//should show the noty if triggered from menu bar
				pm.updateNotifier.checkForElectronUpdates("menu");
			}, this);

			//this is in the settings>about modal
			$("#check-electron-updates").click(function() {
				pm.updateNotifier.checkForElectronUpdates("modal");
			});

			$("body").on("click", ".alerts-settings-link", function() {
				//open settings window
				var settingsTab = $(this).attr('data-tab');
				$("#modal-settings").modal('show');
				$(".sync-settings-tab[data-tabname="+settingsTab+"]").tab('show');
				return false;
			});

			if(!postman_electron) {
				$(".electron-updates").hide();
			}
			else {
				$("#update-electron-app").click(function() {
					oldThis.updateVersion();
					$(this).attr('disabled', 'disabled');
					$(".electron-updates .update-notif").text("Postman will download the update and ask you to restart the app to apply the update.");
				});
				$("#restart-update-electron-app").click(function() {
					//restart and apply update
					pm.appWindow.sendToElectron({
						event: "restartAndUpdate"
					});
				});
			}
		},

		onUpdateError: function() {
			$("#update-electron-app").removeAttr('disabled');
			$(".electron-updates .update-notif").text("There was an error while downloading the update. Please try later.");
		},

		onUpdateDownloaded: function(name, notes) {
			console.log("NEW UPDATED DOWNLOADED. Name = " + name + " \nNotes = " + notes);
			$("#restart-update-electron-app").show();
			pm.alerts.info('Update downloaded! Click <a href="#" class="alerts-settings-link" data-tab="about">About</a> to apply', {
				dedupeId: 'electron-update-restart',
				persist: true,
				showAsHtml: true
			});
		},

		notifyVersionUpdate: function() {
			var currentVersion = pm.getVersion();
			pm.api.notifyServerOfVersionChange(currentVersion + "");
		},

		showVersionNotice: function(version) {
			//version should be of the form "1.0.0.1"
			var processedVersion = version.replace(/\./g, "-");
			var templateName = "version_"+processedVersion;
			if(Handlebars.templates.hasOwnProperty(templateName)) {
				console.log("Showing notification for "+templateName);
				$("#modal-update-notif .modal-body").html("").append(Handlebars.templates[templateName]());
				$("#modal-update-notif").modal("show");
			}
		},

		updateVersion: function() {
			pm.appWindow.sendToElectron({
				event: "updateElectronVersion",
				data: {
					version: this.version,
					userId: this.userId,
					appId: this.appId,
					userAgent: this.userAgent,
					platform: this.platform
				}
			});
		},

		noUpdateFound: function(mode) {
			$("#update-electron-app").hide();
			if(mode === "modal") {
				$(".electron-updates .update-notif").text("No updates found");
			}
			else if(mode === "menu") {
				pm.alerts.info('Your version is up-to-date. No new update found.', {
					dedupeId: 'electron-update-not-found',
					persist: true
				});
			}
			//else if mode == auto, don't show alert
		},

		updateFound: function(data, mode) {
			this.updateData = data;
			$("#update-electron-app").show();
			if(mode === "modal") {
				//only show message in the modal if clicked through modal
				$(".electron-updates .update-notif").html("Update found!" + data.notes);
			}
			else {
				$(".electron-updates .update-notif").html("Update found!" + data.notes);
				pm.alerts.info('Update found! Click <a href="#" class="alerts-settings-link" data-tab="about">About</a> to update', {
					dedupeId: 'electron-update',
					persist: true,
					showAsHtml: true
				});
			}
		},

		checkForElectronUpdates: function(mode) {
			if(typeof mode === "undefined") {
				mode = false;
			}
			//make call to
			var oldThis = this;



			var url = pm.apiUrl + "/electron_updates_auto?" +
			 "current_version=" + this.version +
			 "&user_id=" + this.userId +
			 "&app_id=" + this.appId +
			 "&user_agent=" + encodeURIComponent(this.userAgent) +
			 "&platform=" + encodeURIComponent(this.platform);

			$.get(url, function(data, status, xhr) {
				if(xhr.status===204) {
					oldThis.noUpdateFound(mode);
				}
				else if(xhr.status===200) {
					oldThis.updateFound(data, mode);
				}
			});
		}
	});

	module.exports = AppUpdateNotifier;


/***/ },
/* 319 */
/***/ function(module, exports) {

	var Storage = Backbone.Model.extend({
	    defaults: function() {
	    },

	    initialize: function() {
	        //set syncServer and web URL
	        if(postman_env==="sync_dev") {
	            this.getValue('sync_url', function(sync_url) {
	                if(sync_url && sync_url!=="") {
	                    postman_syncserver_url = sync_url;
	                    $("#settings-postman-sync").val(sync_url);
	                }
	            });

	            this.getValue('web_url', function(web_url) {
	                if(web_url && web_url!=="") {
	                    postman_web_url = web_url;
	                    $("#settings-postman-web").val(web_url);
	                }
	            });
	        }        
	    },

	    getValue: function(key, callback) {
	        if (pm.target === pm.targets.CHROME_LEGACY_APP || postman_electron) {
	            callback(localStorage[key]);
	        }
	        else if (pm.target === pm.targets.CHROME_PACKAGED_APP) {
	            var obj = {};
	            obj[key] = null;
	            chrome.storage.local.get(obj, function(result) {
	                callback(result[key]);
	            });
	        }
	    },

	    setValue: function(kvpair, callback) {
	        if (pm.target === pm.targets.CHROME_LEGACY_APP  || postman_electron) {
	            //Implementation here
	            // console.log("Set value for legacy app");
	            for(key in kvpair) {
	                if (kvpair.hasOwnProperty(key)) {
	                    localStorage[key] = kvpair[key];                    
	                }
	            }

	            if (callback) {
	                callback();    
	            }            
	        }
	        else if (pm.target === pm.targets.CHROME_PACKAGED_APP) {
	            chrome.storage.local.set(kvpair, function() {
	                if (callback) {
	                    callback();
	                }                
	            });
	        }
	    }
	});

	module.exports = Storage;


/***/ },
/* 320 */
/***/ function(module, exports) {

	var RequestMethods = Backbone.Model.extend({
	    defaults: function() {
	    	var defaultMethods = [
	    		{"verb": "GET", "hasBody": false},
	    		{"verb": "POST", "hasBody": true},
	    		{"verb": "PUT", "hasBody": true},
	    		{"verb": "PATCH", "hasBody": true},
	    		{"verb": "DELETE", "hasBody": true},
	    		{"verb": "COPY", "hasBody": false},
	    		{"verb": "HEAD", "hasBody": false},
	    		{"verb": "OPTIONS", "hasBody": true},
	    		{"verb": "LINK", "hasBody": true},
	    		{"verb": "UNLINK", "hasBody": true},
	    		{"verb": "PURGE", "hasBody": false},
	            {"verb": "LOCK", "hasBody": true},
	            {"verb": "UNLOCK", "hasBody": false},
	            {"verb": "PROPFIND", "hasBody": true},
	            {"verb": "VIEW", "hasBody": false}
	    	];

	        return {
	            methods: defaultMethods
	        };
	    },

	    initialize: function(callback) {
	    	var model = this;

	    	pm.storage.getValue("requestMethods", function(requestMethods) {
	    		if (requestMethods !== null) {
	    			// model.set("methods", requestMethods);

	    			if (callback) {
	    				callback();
	    			}
	    		}
	    		else {
	    			var o = {"requestMethods": model.get("methods")};
	    			pm.storage.setValue(o, function() {
	    				if (callback) {
	    					callback();
	    				}
	    			});
	    		}

	    	});
		},

	    isMethodWithBody: function(verb) {
	    	var methods = this.get("methods");
	    	var index = arrayObjectIndexOf(methods, verb, "verb");

	    	if (index >= 0) {
	    		return methods[index].hasBody;
	    	}
	    	else {
	    		return false;
	    	}
	    },

	    saveMethods: function() {
	    	var o = {"requestMethods": this.get("methods")};
	    	pm.storage.setValue(o, function() {
	    		if (callback) {
	    			callback();
	    		}
	    	});
	    },

	    addMethod: function(method) {
	    	var index = arrayObjectIndexOf(this.get("methods"), method.verb, "verb");
	    	if (index === -1) {
	    		this.get("methods").push(method);
	    		this.saveMethods();
	    	}
	    },

	    updateMethod: function(method) {
	    	var index = arrayObjectIndexOf(this.get("methods"), method.verb, "verb");
	    	if (index >= 0) {
	    		var methods = this.get("methods");
	    		methods[index] = method;
	    		this.set("methods", methods);
	    		this.saveMethods();
	    	}
	    },

	    deleteMethod: function(verb) {
	    	var index = arrayObjectIndexOf(this.get("methods"), method.verb, "verb");
	    	if (index >= 0) {
	    		var methods = this.get("methods");
	    		methods.splice(index, 1);
	    		this.set("methods", methods);
	    		this.saveMethods();
	    	}
	    }
	});

	module.exports = RequestMethods;


/***/ },
/* 321 */
/***/ function(module, exports) {

	var SidebarState = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            currentSection:"history",
	            isSidebarMaximized:true,
	            sections:[ "history", "collections" ],
	            width:0,
	            animationDuration:250,
	            history:null,
	            collections:null
	        };
	    },

	    initialize: function(options) {
	    }
	});

	module.exports = SidebarState;


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	var HistorySidebar = __webpack_require__(323);
	var CollectionSidebar = __webpack_require__(324);
	var SearchFormState = __webpack_require__(325);
	var SearchForm = __webpack_require__(326);

	var Sidebar = Backbone.View.extend({
	    initialize: function() {
	        var history = this.model.get("history");
	        var collections = this.model.get("collections");
	        var animationDuration = this.model.get("animationDuration");

	    	var historySidebar = new HistorySidebar({model: history});
	    	var collectionSidebar = new CollectionSidebar({model: collections});
	    	var view = this;

	    	view.searchState = new SearchFormState({
	    		history: this.model.get("history"),
	    		collections: this.model.get("collections")
	    	});

	    	var searchForm = new SearchForm({model: view.searchState});

	    	var activeSidebarSection = pm.settings.getSetting("activeSidebarSection");

	        pm.appWindow.trigger("registerInternalEvent", "toggleSidebar", function() {
	            view.toggleSidebar();
	        }, this);

	        $('#sidebar-toggle').on("click", function () {
	            view.toggleSidebar();
	        });

	        this.model.set("width", $('#sidebar').width() + 10);

	    	if (activeSidebarSection) {
	    	    this.select(activeSidebarSection);
	    	}
	    	else {
	    	    this.select("history");
	    	}

	    	$('#sidebar-selectors li').click(function () {
	    	    var id = $(this).attr('data-id');
	    	    view.select(id);
	    	});

	        $("#outer-sidebar").resizable({
	            maxWidth: 450,
	            minWidth: 260,
	            handles: "e",
	            start: function() {
	                //disable showing
	                pm.isDraggingSidebar = true;
	            },
	            resize: function(event, ui) {
	                var newWidth = parseInt(ui.element.css('width'));
	                $("#main-container").css('margin-left', (newWidth)+"px");
	            },
	            stop: function(event, ui) {
	                view.adjustWidthsAfterResize(ui.element);
	                $("#outer-sidebar").css('height', '100%');
	            }
	        });

	        pm.mediator.on("minimizeSidebar", view.minimizeSidebar, this);
	        pm.mediator.on("maximizeSidebar", view.maximizeSidebar, this);

	        pm.mediator.on("resetSidebarItems", this.adjustWidthsAfterResize, this);

	        history.on("loadRequest", this.onLoadHistoryRequest, this);
	        collections.on("addCollectionRequest", this.onAddCollectionRequest, this);

	        history.on("historyRequestAdded", this.onHistoryRequestAdded, this);
	    },

	    adjustWidthsAfterResize: function(elem) {
	        pm.isDraggingSidebar = false;
	    },

	    onHistoryRequestAdded: function() {
	        this.searchState.trigger("change:term");
	    },

	    onLoadHistoryRequest: function() {
	        $('.sidebar-collection-request').removeClass('sidebar-collection-request-active');
	    },

	    onAddCollectionRequest: function() {
	        this.select("collections");
	    },

	    minimizeSidebar:function () {
	        var model = this.model;
	        if(!model.get("isSidebarMaximized")) {
	            return false;
	        }

	        var outerWidth = $("#outer-sidebar").width();
	        model.set("outerwidth", outerWidth);
	        var animationDuration = model.get("animationDuration");

	        $('#sidebar-toggle').velocity({left:"0"}, animationDuration);
	        $('#outer-sidebar').velocity({
	                'margin-left': (- outerWidth - 10)+"px"
	            }, animationDuration);
	        $('#sidebar-toggle').addClass("open");
	        $("#main-container").velocity({
	                'margin-left': "0px"
	            }, animationDuration, function() {
	                model.set("isSidebarMaximized", false);
	        });
	    },

	    maximizeSidebar:function () {
	        var model = this.model;
	        if(model.get("isSidebarMaximized")) {
	            return false;
	        }
	        var animationDuration = model.get("animationDuration");
	        var outerWidth = model.get("outerwidth");

	        $('#sidebar-toggle').velocity({
	                'left': outerWidth+"px"
	            }, animationDuration);
	        $('#outer-sidebar').velocity({
	                'margin-left': "0"
	            }, animationDuration);
	        $('#sidebar-toggle').removeClass("open");

	        $("#main-container").velocity({
	                'margin-left': (outerWidth)+"px"
	            }, animationDuration, function() {
	                model.set("isSidebarMaximized", true);
	        });
	    },

	    toggleSidebar:function () {
	        var model = this.model;
	        var isSidebarMaximized = model.get("isSidebarMaximized");

	        if (isSidebarMaximized) {
	            this.minimizeSidebar();
	        }
	        else {
	            this.maximizeSidebar();
	        }

	        model.set("isSidebarMaximized", !isSidebarMaximized);
	    },

	    select:function (section) {
	        $("#sidebar-selectors li").removeClass("active");
	        $("#sidebar-selectors-" + section).addClass("active");

	        pm.settings.setSetting("activeSidebarSection", section);
	        $('#sidebar-section-data > div').css("display", "none");

	        this.model.set("currentSection", section);

	        $('#sidebar-section-' + section).css("display", "flex");

	        //history options are controlled by an opener
	        if(section != "history") {
	            $('#' + section + '-options').css("display", "block");
	            var resizeHandle = $("#outer-sidebar .ui-resizable-handle");
	            if(resizeHandle.length == 0) {
	                setTimeout(function() {
	                    $("#outer-sidebar .ui-resizable-handle").css("width", "9px").css("right", "-5px");
	                },500);
	            }
	            else {
	                $("#outer-sidebar .ui-resizable-handle").css("width", "9px").css("right", "-5px");
	            }
	        }
	        else {
	            var resizeHandle = $("#outer-sidebar .ui-resizable-handle");
	            if(resizeHandle.length == 0) {
	                setTimeout(function () {
	                    $("#outer-sidebar .ui-resizable-handle").css("width", "9px").css("right", "-5px");
	                }, 500);
	            }
	            else {
	                $("#outer-sidebar .ui-resizable-handle").css("width", "9px").css("right", "-5px");
	            }
	        }
	    }
	});

	module.exports = Sidebar;


/***/ },
/* 323 */
/***/ function(module, exports) {

	var HistorySidebar = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;


	        //Event: Load all
	        //Event: Add request
	        this.model.on("reset", this.render, this);
	        this.model.on("add", this.addOne, this);
	        this.model.on("remove", this.removeOne, this);

	        this.model.on("filter", this.onFilter, this);
	        this.model.on("revertFilter", this.onRevertFilter, this);        

	        $('.history-actions-delete').click(function () {
	            model.clear();
	        });

	        $('.history-actions-delete-selected').click(function () {
	            var selectedRequestDivs = $('.sidebar-history-request-active');
	            var idsToDelete = _.map(selectedRequestDivs, function(div) {return $(div).attr('id').split("sidebar-request-")[1]});
	            model.clearSelected(idsToDelete);
	            $(".history-actions-delete-selected").hide();
	            $(".history-actions-addtocollection").hide();
	        });

	        $('.history-actions-addtocollection').click(function () {
	            var selectedRequestDivs = $('.sidebar-history-request-active');
	            var idsToAdd = _.map(selectedRequestDivs, function(div) {return $(div).attr('id').split("sidebar-request-")[1]});
	            model.addSelectedIdsToCollection(idsToAdd);
	            $(".history-actions-addtocollection").hide();
	        });

	        $('#history-items').on("click", ".request-actions-delete", function () {
	            var nextLi = $(this).parent().parent().next();
	            var request_id = $(this).attr('data-request-id');
	            model.deleteRequest(request_id);
	            nextLi.addClass("hover");
	            nextLi.children(".history-request-actions").show();
	            $(".history-actions-addtocollection").hide();
	        });

	        $('#history-items').on("click", ".request", function (event) {
	            var multiSelect = false;
	            var rangeSelect = false;
	            var didRangeSelect = false;
	            if (event.ctrlKey || event.metaKey) {
	                multiSelect = true;
	            }
	            else if(event.shiftKey) {
	                rangeSelect = true;
	            }

	            var request_id = $(this).attr('data-request-id');

	            if(rangeSelect) {
	                //range action only if an element is already selected
	                var allRequests = $(".sidebar-history-request .request");
	                var numRequests = allRequests.length;
	                if($(".sidebar-history-request-active").length > 0) {
	                    var firstSelectedRequest = $($(".sidebar-history-request-active .request")[0]);
	                    var indexOfPreSelectedElement = -1;
	                    var indexOfThisElement = -1;

	                    for(var i=0;i<numRequests;i++) {
	                        if($(allRequests[i]).attr('data-request-id')==firstSelectedRequest.attr('data-request-id')) {
	                            indexOfPreSelectedElement = i;
	                        }
	                        if($(allRequests[i]).attr('data-request-id')==request_id) {
	                            indexOfThisElement = i;
	                        }
	                    }

	                    var minIndex = Math.min(indexOfThisElement,indexOfPreSelectedElement);
	                    var maxIndex = Math.max(indexOfThisElement,indexOfPreSelectedElement);

	                    for(var i=minIndex;i<=maxIndex;i++) {
	                        $(allRequests[i]).parent().addClass('sidebar-history-request-active');
	                    }
	                    didRangeSelect = true;
	                }
	            }


	            if(!multiSelect && !didRangeSelect) {
	                $('.sidebar-history-request').removeClass('sidebar-history-request-active');
	            }
	            $(this).parent().addClass('sidebar-history-request-active');
	            pm.tracker.trackEvent("history", "view");

	            if(!multiSelect && !didRangeSelect) {
	                $(".main-view").hide();
	                $("#request-builder-view").show();
	                model.loadRequest(request_id);
	            }

	            $(".history-actions-delete-selected").show();
	            $(".history-actions-addtocollection").show();

	        });

	        var clearHistoryHandler = function () {
	            pm.tracker.trackEvent("interaction", "shortcut", "clear_history");
	            if(pm.app.isModalOpen()) {
	                return;
	            }

	            pm.history.clear();
	            return false;
	        };

	        $(document).bind('keydown', 'alt+c', clearHistoryHandler);

	        this.showEmptyMessage();
	        $("#history-options").hide();

	    },

	    addOne: function(model, collection) {
	        var request = model.toJSON();

	        var displayUrl = _.clone(request.url);
	        var method = request.method;
	        var id = request.id;
	        var position = request.position;
	        var timestamp = request.timestamp;

	        if (displayUrl.length > 80) {
	            displayUrl = displayUrl.substring(0, 80) + "...";
	        }

	        //displayUrl = limitStringLineWidth(displayUrl, 40);

	        var request = {
	            url:displayUrl,
	            method:method,
	            id:id,
	            position:position,
	            timestamp: timestamp
	        };

	        var longTimestamp = (new Date(timestamp)).getTime();

	        var dateLabel = this.getDateFromRequest(request.timestamp);
	        request.dateLabel = dateLabel;

	        //if this dateLabel doesn't exist, add an attribute
	        var subGroupList = $(".history-sidebar-dategroup[data-date-label='"+dateLabel+"']");

	        var allSubgroups = $(".history-sidebar-dategroup");
	        if(subGroupList.length == 0) {
	            if(allSubgroups.length == 0) {
	                $('#history-items').append(Handlebars.templates.item_history_sidebar_dategroup({dateLabel: dateLabel, timestamp: ""+longTimestamp}));
	            }
	            else {
	                var added = 0;
	                for(var i=0;i<allSubgroups.length;i++) {
	                    var thisGroup = $(allSubgroups[i]);
	                    var nextTime = parseInt(thisGroup.attr('data-timestamp'));
	                    var nextNextTime = (i<allSubgroups.length-1)?parseInt($(allSubgroups[i+1]).attr('data-timestamp')):0;
	                    if(longTimestamp<nextTime && longTimestamp>nextNextTime) {
	                        thisGroup.after(Handlebars.templates.item_history_sidebar_dategroup({dateLabel: dateLabel, timestamp: longTimestamp}));
	                        added = 1;
	                        break;
	                    }
	                }
	                if(added==0) {
	                    $('#history-items').prepend(Handlebars.templates.item_history_sidebar_dategroup({dateLabel: dateLabel, timestamp: longTimestamp}));
	                }
	            }
	            subGroupList = $(".history-sidebar-dategroup[data-date-label='"+dateLabel+"']");
	        }

	        if (position === "top") {
	            subGroupList.prepend(Handlebars.templates.item_history_sidebar_request(request));
	        }
	        else {
	            subGroupList.append(Handlebars.templates.item_history_sidebar_request(request));
	        }

	        this.hideEmptyMessage();
	        pm.mediator.trigger('resetSidebarItems', $("#outer-sidebar"));
	    },

	    getDateFromRequest: function(timestamp) {
	        var date = new Date(timestamp);
	        var dateFormat = '{d} {Mon}';

	        var dateLabel = date.relative(function(value, unit, ms, loc) {
	            if (ms.abs() > (2).day()) {
	                // Returns an absolute date, but only if the offset is greater than a day.
	                return dateFormat;
	            }
	            else if (ms.abs() > (1).day()) {
	                return 'Yesterday';
	            }
	            else {
	                return 'Today';
	            }
	        });
	        return dateLabel;
	    },

	    showEmptyMessage:function () {
	        $('#history-items').append(Handlebars.templates.message_no_history());
	    },

	    hideEmptyMessage:function () {
	        $('#history-items .empty-message').remove();
	    },

	    removeOne:function (model, collection) {
	        var historyRequest = model.toJSON();
	        var id = historyRequest.id;

	        var elemToRemove = $("#sidebar-request-" + model.id);
	        var dateLabel= elemToRemove.attr('data-date-label');
	        elemToRemove.remove();

	        var requests = collection.toJSON();

	        if (requests.length === 0) {
	            this.showEmptyMessage();
	        }
	        else {
	            this.hideEmptyMessage();
	        }


	        //if there are no requests for this date, remove the dateGroup
	        if($(".sidebar-history-request[data-date-label='"+dateLabel+"']").length == 0) {
	            $(".history-datelabel[data-date-label='"+dateLabel+"']").remove();
	        }
	    },

	    render: function() {
	        var requests = this.model.toJSON();

	        if (requests.length === 0) {
	            $('#history-items').text("");
	            this.showEmptyMessage();
	        }
	        else {
	            console.error("WHY IS THIS CALLLED WITH REQUESTS??");
	            this.hideEmptyMessage();
	            $('#history-items').append(Handlebars.templates.history_sidebar_requests({"items":requests}));
	            $('#history-items').fadeIn();
	        }
	    },

	    onFilter: function(filteredHistoryItems) {
	        var count = filteredHistoryItems.length;
	        for(var i = 0; i < count; i++) {
	            var item = filteredHistoryItems[i];
	            var id = "#sidebar-request-" + item.id;

	            if(item.toShow) {
	                $(id).removeClass("hidden-history-item");
	            }
	            else {
	                $(id).addClass("hidden-history-item");
	            }
	        }
	        this.removeBlankDates();
	    },

	    removeBlankDates: function() {
	        var dateDivs = $(".history-sidebar-dategroup");
	        _.each(dateDivs, function(dateDiv) {
	            var $dateDiv = $(dateDiv);
	            //check if there's a single visible li in it
	            var shownDivs = $dateDiv.children("li").not(".hidden-history-item");
	            var timestamp = $dateDiv.attr('data-timestamp');
	            if(shownDivs.length == 0) {
	                $("#history-datelabel-" + timestamp).addClass("no-dates");
	            }
	            else {
	                $("#history-datelabel-" + timestamp).removeClass("no-dates");
	            }
	        });
	    },

	    onRevertFilter: function() {
	        $("#history-items li").removeClass("hidden-history-item");
	        $(".history-sidebar-datelabel.no-dates").removeClass("no-dates");
	    }
	});

	module.exports = HistorySidebar;


/***/ },
/* 324 */
/***/ function(module, exports) {

	var CollectionSidebar = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        view.isCollectionExpanded = false;
	        view.expandedCollectionId = null;

	        model.on("add", this.renderOneCollection, this);
	        model.on("remove", this.removeOneCollection, this);

	        model.on("reset", this.removeAllCollections, this);

	        model.on("updateCollection", this.renderOneCollection, this);
	        //why this HTML nonsense di - check updateCollectionMeta()
	        //model.on("updateCollectionMeta", this.updateCollectionMeta, this);
	        model.on("updateCollectionMeta", this.renderOneCollection, this);

	        model.on("addCollectionRequest", this.addCollectionRequest, this);
	        model.on("selectedCollectionRequest", this.selectedCollectionRequest, this);
	        model.on("unselectRequest", this.unselectRequest, this);
	        model.on("removeCollectionRequest", this.removeCollectionRequest, this);
	        model.on("updateCollectionRequest", this.updateCollectionRequest, this);
	        model.on("moveRequestToCollection", this.onMoveRequestToCollection, this);
	        model.on("moveRequestToFolder", this.onMoveRequestToFolder, this);

	        model.on("sortRequestContainer", this.onSortRequestContainer, this);

	        model.on("duplicateCollection", this.duplicateCollection, this);
	        model.on("duplicateCollectionRequest", this.duplicateCollectionRequest, this);
	        model.on("duplicateFolder", this.duplicateFolder, this);

	        model.on("addFolder", this.onAddFolder, this);
	        model.on("updateFolder", this.onUpdateFolder, this);
	        model.on("deleteFolder", this.onDeleteFolder, this);

	        model.on("filter", this.onFilter, this);
	        model.on("revertFilter", this.onRevertFilter, this);

	        $('#collection-items').text("");
	        $('#collection-items').append(Handlebars.templates.message_no_collection({}));

	        var $collection_items = $('#collection-items');

	        /**
	         * Shows the overlay
	         */
	        $collection_items.on("click", ".sidebar-collection .collection-head-actions-opener", function () {            
	            var id = $(this).attr('data-id');
	            var c = model.get(id);

	            var collectionHead = $(this).parent().parent();

	            pm.tracker.trackEvent("collection_browser", "open", id);

	            if (collectionHead.hasClass("sidebar-collection-head-selected")) {
	                pm.mediator.trigger("collectionMainViewClose", id);
	            }
	            else {                
	                pm.tracker.trackEvent("collection", "sidebar_open", id);
	                pm.mediator.trigger("collectionMainViewOpen", id);                
	                model.trigger("showCollection", c);
	            }
	                    
	        });

	        /**
	         * Shows the menu
	         */
	        $collection_items.on("click", ".sidebar-collection .collection-actions-more", function () {
	            
	            // Fix for dropdown direction
	            var $collectionItemHead = $(this).parents(".sidebar-collection-head");
	            var itemHeadBottom = $collectionItemHead.offset().top + $collectionItemHead.outerHeight() + 200;
	            var containerBottom = $collection_items.offset().top + $collection_items.outerHeight();

	            var $dropdown = $(this).parents(".collection-more-menu-opener");

	            if(itemHeadBottom > containerBottom) {
	                $dropdown.removeClass("dropdown");
	                $dropdown.addClass("dropup");
	            } else {
	                $dropdown.removeClass("dropup");
	                $dropdown.addClass("dropdown");
	            }
	            // End of dropdown fix

	            var id = $(this).attr('data-id');
	            //the menu is opened through data-attributes
	            view.isOpeningDropdown = true;
	            setTimeout(function() {
	                view.isOpeningDropdown = false;
	            }, 200);
	        });

	        $collection_items.on("click", ".folder-head-actions-opener", function (e) {
	            //Fix for dropdown direction
	            var $folderItemHead = $(this).parents(".folder-head");
	            var itemHeadBottom = $folderItemHead.offset().top + $folderItemHead.outerHeight() + 100;
	            var containerBottom = $collection_items.offset().top + $collection_items.outerHeight();

	            var $dropdown = $(this).parents(".folder-head-actions");

	            if(itemHeadBottom > containerBottom) {
	                $dropdown.removeClass("dropdown");
	                $dropdown.addClass("dropup");
	            } else {
	                $dropdown.removeClass("dropup");
	                $dropdown.addClass("dropdown");
	            }
	            //End of dropdown fix
	        });

	        $collection_items.on("click", ".request-head-actions-opener", function (e) {
	            //Fix for dropdown direction
	            var $requestItemHead = $(this).parents(".sidebar-collection-request");
	            var itemHeadBottom = $requestItemHead.offset().top + $requestItemHead.outerHeight() + 100;
	            var containerBottom = $collection_items.offset().top + $collection_items.outerHeight();

	            var $dropdown = $(this).parents(".request-actions");

	            if(itemHeadBottom > containerBottom) {
	                $dropdown.removeClass("dropdown");
	                $dropdown.addClass("dropup");
	            } else {
	                $dropdown.removeClass("dropup");
	                $dropdown.addClass("dropdown");
	            }
	            //End of dropdown fix
	        });

	        
	        $collection_items.on("mouseleave", ".folder .folder-head", function () {            
	            $("ul.folder-head-actions-menu").parent().removeClass("open");
	        });

	        $collection_items.on("mouseleave", ".sidebar-collection", function () {            
	            $("ul.collection-head-actions-menu").parent().removeClass("open");
	        });

	        $collection_items.on("click", ".sidebar-collection-head-icon", function (e) {            
	            view.expandCollection(this);
	        });

	        $collection_items.on("click", ".sidebar-collection-head-name", function (e) {
	            view.expandCollection(this);
	        });

	        $collection_items.on("click", ".folder-head-name", function () {
	            var id = $(this).attr('data-id');
	            view.toggleSubRequestList(id);
	        });

	        $collection_items.on("click", ".folder-head-icon", function () {
	            var id = $(this).attr('data-id');
	            view.toggleSubRequestList(id);
	        });

	        $collection_items.on("click", ".collection-actions-duplicate", function (event) {
	            console.log("Duplicate");

	            var id = $(this).attr('data-id');
	            var c = model.get(id);
	            model.trigger("duplicateCollection", c);
	            pm.tracker.trackEvent("collection", "duplicate");

	            event.stopPropagation();
	            event.preventDefault();

	        });

	        $collection_items.on("click", ".collection-head-actions .label", function () {
	            var id = $(this).parent().parent().parent().attr('data-id');
	            view.toggleRequestList(id);
	        });

	        $collection_items.on("click", ".collection-actions-add-folder", function (event) {
	            var id = $(this).attr('data-id');
	            var c = model.get(id);
	            model.trigger("showAddFolderModal", c);

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collection_items.on("click", ".collection-actions-edit", function (event) {
	            var id = $(this).attr('data-id');
	            var c = model.get(id);
	            model.trigger("showEditModal", c);

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collection_items.on("click", ".collection-actions-download", function (event) {
	            console.log("Download collection");

	            var id = $(this).attr('data-id');            
	            model.saveCollection(id);

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collection_items.on("click", ".collection-actions-delete", function (event) {                        

	            var id = $(this).attr('data-id');
	            var name = $(this).attr('data-name');
	            var shared = $(this).attr('data-shared');

	            $('#modal-delete-collection-yes').attr('data-id', id);
	            $('#modal-delete-collection-yes').attr('data-shared', shared);
	            var sharedWithTeam = $(this).attr('data-shared');
	            // TODO
	            // Use templates. Do NOT use inline text
	            if(sharedWithTeam === "true" && pm.user.id) {
	                $('#collection-share-warning').
	                    html("This collection has been shared with your team. If you delete this collection, all users who have subscribed to the collection will automatically be unsubscribed");
	            }
	            else {
	                $('#collection-share-warning').text("");
	            }

	            $("#modal-delete-collection-name").text(name);        
	            event.stopPropagation();
	            event.preventDefault();
	            $("#modal-delete-collection").modal('show');
	        });

	        $collection_items.on("click", ".collection-actions-unsubscribe", function (event) {
	            var id = $(this).attr('data-id');
	            var owner = $(this).attr('data-owner');

	            var collectionMeta = {
	                owner: owner,
	                model_id: id
	            };

	            pm.syncManager.addChangeset("collection", "unsubscribe", {owner: collectionMeta.owner}, collectionMeta.model_id, true);
	            var status = pm.collections.deleteCollectionFromDataStoreWithOptSync(collectionMeta.model_id, true, false, function() {});

	            if(pm.currentOverlayCollection === collectionMeta.model_id) {
	                pm.mediator.trigger("collectionMainViewClose");
	            }

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collection_items.on("click", ".folder-actions-edit", function (event) {
	            var id = $(this).attr('data-id');
	            var folder = model.getFolderById(id);
	            model.trigger("showEditFolderModal", folder);

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collection_items.on("click", ".folder-actions-delete", function () {
	            var id = $(this).attr('data-id');
	            var name = $(this).attr('data-name');

	            $('#modal-delete-folder-yes').attr('data-id', id);
	            $('#modal-delete-folder-name').text(name);
	        });

	        $collection_items.on("click", ".collection-actions-share", function (event) {
	            var id = $(this).attr('data-id');
	            model.trigger("shareCollectionModal", id);
	            event.stopPropagation();
	            event.preventDefault();
	        });        

	        $('#collection-items').on("mouseleave", ".sidebar-request", function () {
	            $("ul.request-actions-menu").parent().removeClass("open");
	        });


	        // $('#collection-items').on("mouseleave", ".sidebar-collection-request",function() {
	        //     $(".folder-head-actions,.request-actions").hide();
	        // });

	        $("#sidebar").on('click', "#collection-filters a", function() {
	            $("#collection-filters .selected").removeClass("selected");
	            $(this).addClass("selected");
	            $("#collection-items").attr('data-filter',$(this).attr('data-filter'));
	        });

	        $("#sidebar").on('click', "#collection-sorters a", function(e) {
	            var $this = $(this);
	            var currentDirection = $this.attr('data-direction');
	            var property = $this.attr('data-sort');
	            view.sortCollections(property, currentDirection);
	            model.currentSortMode = property;
	            e.preventDefault();
	            //var newDirection = props[1-props.indexOf(currentDirection)];
	            //$(this).attr('data-direction', newDirection);

	            if(property == "name") {
	                $("#collection-sidebar-sort-icon").removeClass("icon-sort-name icon-sort-time");
	                $("#collection-sidebar-sort-icon").addClass("icon-sort-name");
	            } else {
	                $("#collection-sidebar-sort-icon").removeClass("icon-sort-name icon-sort-time");
	                $("#collection-sidebar-sort-icon").addClass("icon-sort-time");
	            }
	        });


	        $collection_items.on("click", ".request-actions-load", function () {
	            $(".main-view").hide();
	            $("#request-builder-view").show();
	            var id = $(this).attr('data-id');
	            model.loadCollectionRequest(id);
	            $('.sidebar-history-request').removeClass('sidebar-history-request-active');
	            $(".history-actions-addtocollection").hide(); //hide add request from history to collection
	            pm.tracker.trackEvent("request", "sidebar_open", id);
	        });

	        $collection_items.on("click", ".request-actions-delete", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);            
	            model.trigger("deleteCollectionRequest", request);
	        });

	        $collection_items.on("click", ".request-actions-edit", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("editCollectionRequest", request);
	        });

	        $collection_items.on("click", ".request-actions-duplicate", function (event) {
	            var id = $(this).attr('data-id');
	            var request = model.getRequestById(id);
	            model.trigger("duplicateCollectionRequest", request);
	            pm.tracker.trackEvent("request", "duplicate");

	            event.stopPropagation();
	            event.preventDefault();
	        });

	        $collection_items.on("click", ".folder-actions-duplicate", function () {
	            var id = $(this).attr('data-id');
	            var request = model.getFolderById(id);
	            model.trigger("duplicateFolder", request);
	        });

	        this.initializeCollectionMainViewEvents();

	        this.collectionSortTimers = {};
	    },

	    initializeCollectionMainViewEvents: function() {
	        pm.mediator.on("collectionMainViewOpen", function(id) {            
	            $(".sidebar-collection-request-active").removeClass("sidebar-collection-request-active");
	            $(".sidebar-collection-head").removeClass("sidebar-collection-head-selected");

	            // TODO
	            // Change class as well
	            $("#collection-" + id + ".collection-head-actions").css('visibility','visible');            

	            $("#collection-" + id + " .sidebar-collection-head").addClass("sidebar-collection-head-selected");
	        });

	        pm.mediator.on("collectionMainViewClosed", function(id) {   
	            $("#collection-" + id + ".collection-head-actions").css('visibility','hidden');         
	            $("#collection-" + id + " .sidebar-collection-head").removeClass("sidebar-collection-head-selected");
	        });
	    },

	    expandCollection: function(target) {
	        if(this.isOpeningDropdown === true) {
	            return;
	        }
	        //show collection view
	        var $collElem = $(target);
	        var id = $collElem.attr('data-id');
	        var c = this.model.get(id);


	        this.toggleRequestList(id, target);
	        
	        //expand collection
	        $collElem.removeClass("just-subscribed");
	    },

	    _updateSidebar: function() {
	        clearTimeout(pm.globals.updateSidebarTooltips);
	        pm.globals.updateSidebarTooltips = setTimeout(function() {
	            $("#sidebar-section-collections [rel='tooltip']").tooltip({
	                    delay: { "show": 500, "hide": 100 }
	                });
	        },500);
	    },

	    duplicateCollectionRequest: function(oldRequest) {
	        if(!oldRequest) {
	            return;
	        }
	        var collection = this.model.getCollectionById(oldRequest.collectionId);
	        if(!collection) {
	            return;
	        }
	        var oldId = oldRequest.id;
	        
	        this.updateDateForCollection(collection.id);

	        var newRequest = _.clone(oldRequest);
	        this.setNewIdsForResponses(newRequest);
	        newRequest.name = oldRequest.name + " copy";
	        newRequest.id = guid();

	        if(oldRequest.responses) {
	            newRequest.responses = _.cloneDeep(oldRequest.responses);
	            _.each(newRequest.responses, function(response) {
	                response.write=true;
	                response.id = guid();
	            });
	        }

	        var orderRequests = collection.get("order");
	        var folders = collection.get("folders");

	        if(orderRequests.indexOf(oldId)>=0) {
	            this.model.addRequestToCollection(newRequest,collection, true, true);
	            return;
	        }
	        else {
	            var sidebar = this;
	            _.each(folders,function(folder) {
	                if(folder.order.indexOf(oldId)>=0) {
	                    sidebar.model.addRequestToFolder(newRequest, collection.id, folder.id, true, true);
	                    return;
	                }
	            });
	        }
	    },

	    setNewIdsForResponses: function(request) {
	        if(!request.responses) return;
	        var numResponses = request.responses.length;
	        for(var i=0;i<numResponses;i++) {
	            request.responses[i].id = guid();
	        }
	    },

	    duplicateFolder: function(oldFolder) {
	        var collection = this.model.getCollectionById(oldFolder.collection_id);
	        if(!collection) {
	            //error condition
	            return;
	        }

	        var newFolder = this.cloneFolder(oldFolder);
	        newFolder.name = oldFolder.name + " copy";

	        this.model.addExistingFolder(collection.id, newFolder, false, false);

	        if(!collection.subscribed || collection.write) {
	            this.makeFolderNamesEditable("#folders-" + collection.id);
	        }

	        var folderToDuplicate = _.clone(newFolder);
	        folderToDuplicate.requests = [];

	        //clone and add all requests of the folder
	        var sidebar = this;
	        var numOrder = oldFolder.order.length;
	        for(var i=0;i<numOrder;i++) {
	            var requestId = oldFolder.order[i];
	            var oldRequest = sidebar.model.getRequestById(requestId);
	            if(!oldRequest) {
	                //if there's no request with this id, the order is corrupted
	                //you should still be able to duplicate the rest

	                continue;
	            }
	            var newRequest = _.clone(oldRequest);
	            if(oldRequest.responses) {
	                newRequest.responses = _.cloneDeep(oldRequest.responses);
	            }

	            newRequest.folder=newFolder.id;
	            newRequest.id = guid();
	            if(newRequest.dataMode=="raw" && (typeof newRequest.data === "string")) {
	                newRequest.rawModeData = newRequest.data;
	            }

	            folderToDuplicate.requests.push(newRequest);
	            sidebar.model.addRequestToFolderWithOptSync(newRequest,collection.id, newFolder.id, true, false, false);
	        }
	        pm.tracker.trackEvent("folder", "duplicate");

	        //sanitize requests
	        var numReq = folderToDuplicate.requests.length;
	        for(i=0;i<numReq;i++) {
	            var reqi = folderToDuplicate.requests[i];
	            if(reqi.hasOwnProperty("responses")) {
	                if(reqi.responses instanceof Array) {
	                    var numResponses = reqi.responses.length;
	                    for(var j=0;j<numResponses;j++) {
	                        reqi.responses[j].id = guid();
	                        reqi.responses[j].write=true;
	                        if(typeof reqi.responses[j].request === "object" && !reqi.responses[j].requestObject) {
	                            reqi.responses[j].requestObject = JSON.stringify(reqi.responses[j].request);
	                        }
	                        reqi.responses[j].request = reqi.id;
	                    }
	                }
	            }
	            if(typeof reqi.helperAttributes === "object") {
	                reqi.helperAttributes = JSON.stringify(reqi.helperAttributes);
	            }
	        }
	        pm.syncManager.addChangeset("folder", "importFolder", folderToDuplicate, null, true);

	        this.updateDateForCollection(collection.id);
	        this.model.trigger("folderDuplicated", collection);
	    },

	    duplicateCollection: function(collection) {
	        if(!collection) {
	            return;
	        }
	        var newCollection = {};
	        newCollection.id = guid();
	        newCollection.name = collection.get("name") + " copy";
	        newCollection.description = collection.get("description");
	        newCollection.order = [];
	        newCollection.createdAt = newCollection.updatedAt = newCollection.timestamp = Date.now();
	        newCollection.owner = pm.user.id;

	        newCollection.synced = true;

	        var sidebar = this;

	        this.model.addCollectionToDataStore(newCollection, true, true, function() {
	            var newCollection1 = sidebar.model.getCollectionById(newCollection.id);

	            //Add all the folders
	            var folderIdMap = {};
	            _.each(collection.get("folders"),function(folder) {
	                var newFolder = sidebar.cloneFolder(folder);
	                newFolder.write = true; //All duplicated collections will be owned by this user
	                newFolder.owner = pm.user.id;
	                folderIdMap[folder.id] = newFolder.id;
	                sidebar.model.addExistingFolder(newCollection1.id, newFolder, false, false);
	            });

	            //Add add all requests
	            var orderRequests = collection.get("order");
	            var folders = collection.get("folders");
	            var collectionRequests = collection.get("requests");

	            //add root collection requests (those not in folders)
	            _.each(orderRequests, function(requestId) {
	                //find request with Id=requestId
	                var thisRequest = _.find(collectionRequests, function(request){
	                    return request.id==requestId
	                });
	                var newRequest = _.clone(thisRequest);
	                if(!newRequest) {
	                    return;
	                }
	                newRequest.owner = pm.user.id;
	                newRequest.write = true;
	                delete newRequest.folder;
	                if(thisRequest.responses) {
	                    newRequest.responses = _.cloneDeep(thisRequest.responses);
	                    _.each(newRequest.responses, function(response) {
	                        response.write=true;
	                        response.id = guid();
	                    });
	                }
	                newRequest.id = guid();
	                newRequest.collectionId = newCollection1.id;
	                newRequest.collection = newCollection1.id;
	                if(newRequest.dataMode=="raw" && (typeof newRequest.data === "string")) {
	                    newRequest.rawModeData = newRequest.data;
	                }

	                sidebar.model.addRequestToCollectionWithOptSync(newRequest,newCollection1, true, false, false, false);
	                pm.appWindow.trigger("sendMessageObject", "addedCollectionRequest", newRequest);
	            });

	            //add requests in folders
	            _.each(folders, function(folder) {
	                _.each(folder.order, function(requestId) {
	                    var thisRequest = _.find(collectionRequests, function(request){
	                        return request.id==requestId
	                    });
	                    var newRequest = _.clone(thisRequest);
	                    if(newRequest) {
	                        newRequest.id = guid();
	                        newRequest.write = true;
	                        if(thisRequest.responses) {
	                            newRequest.responses = _.cloneDeep(thisRequest.responses);
	                            _.each(newRequest.responses, function(response) {
	                                response.write=true;
	                                response.id = guid();
	                            });
	                        }
	                        newRequest.owner = pm.user.id;
	                        newRequest.collectionId = newCollection1.id;
	                        newRequest.collection = newCollection1.id;
	                        sidebar.model.addRequestToFolderWithOptSync(newRequest, newCollection1.id, folderIdMap[folder.id], true, false, false);
	                        pm.appWindow.trigger("sendMessageObject", "addedCollectionRequest", newRequest);
	                    }
	                });

	                //folder re-ordering is not required as the folder requests aren't sent in realtime
	            });

	            setTimeout(function() { 
	                var newCollection2 = sidebar.model.getCollectionById(newCollection.id);
	                if(newCollection2) {
	                    var cJson = sidebar.model.sanitizeCollection(newCollection2.toJSON());
	                    pm.syncManager.addChangeset("collection", "importCollection", cJson, null, true);
	                }
	            }, 500);
	        });


	    },

	    cloneFolder: function(oldFolder) {
	        var newFolder = _.clone(oldFolder);
	        newFolder.id = guid();
	        newFolder.order = [];
	        return newFolder;
	    },

	    selectedCollectionRequest: function(request) {
	        $('.sidebar-collection-request').removeClass('sidebar-collection-request-active');
	        if(request) {
	            $('#sidebar-request-' + request.id).addClass('sidebar-collection-request-active');
	        }
	    },

	    unselectRequest: function(requestId) {
	        $('#sidebar-request-' + requestId).removeClass('sidebar-collection-request-active');
	    },

	    emptyCollectionInSidebar:function (id) {
	        $('#collection-requests-' + id).text("");
	    },

	    removeOneCollection:function (model, pmCollection) {
	        var collection = model.toJSON();
	        $('#collection-' + collection.id).remove();

	        if(pmCollection.length === 0) {
	            $('#sidebar-section-collections .empty-message').css("display", "block");
	        }
	    },

	    removeAllCollections: function() {
	        $("li.sidebar-collection").remove();
	        $('#sidebar-section-collections .empty-message').css("display", "block");
	    },

	    /**
	     * This also sets the write field correctly
	     * @param collection
	     * @returns {*}
	     */
	    organizeRequestsInFolders: function(collection) {
	        if(!("folders" in collection)) {
	            return collection;
	        }

	        if(!("requests" in collection)) {
	            return collection;
	        }

	        var isWriteable = (collection.write || pm.user.id==collection.owner);

	        var folders = _.clone(collection["folders"]);
	        var requests = _.clone(collection["requests"]);

	        var folderCount = folders.length;
	        var requestCount = requests.length;
	        var folder;
	        var folderOrder;
	        var id;
	        var i,j;
	        var existsInOrder;
	        var folderRequests;

	        var newFolders = [];

	        for(i = 0; i < folderCount; i++) {
	            collection["folders"][i].write = isWriteable;

	            folder = _.clone(folders[i]);
	            folderOrder = folder.order;
	            folderRequests = [];

	            for(var j = 0; j < folderOrder.length; j++) {
	                id = folderOrder[j];

	                var index = arrayObjectIndexOf(requests, id, "id");

	                if(index >= 0) {
	                    folderRequests.push(requests[index]);
	                    requests.splice(index, 1);
	                }
	            }

	            folder["requests"] = this.orderRequests(folderRequests, folderOrder);
	            newFolders.push(folder);
	        }

	        for (i=0;i<requestCount;i++) {
	            collection["requests"][i].write = isWriteable;

	            var responses = collection["requests"][i].responses || [];
	            for(j=0;j<responses.length;j++) {
	                responses[j].write = isWriteable;
	            }
	        }

	        collection.folders = newFolders;
	        collection.requests = requests;

	        collection.requests = this.orderRequests(collection.requests, collection.order);

	        return collection;
	    },

	    orderRequests: function(inRequests, order) {
	        var requests = _.clone(inRequests);

	        function requestFinder(request) {
	            return request.id === order[j];
	        }

	        if (order.length === 0) {
	            requests.sort(sortAlphabetical);
	        }
	        else {
	            var orderedRequests = [];
	            for (var j = 0, len = order.length; j < len; j++) {
	                var element = _.find(requests, requestFinder);
	                if(element) {
	                    orderedRequests.push(element);
	                }
	                else {
	                    element = pm.collections.getRequestById(order[j]);
	                    if(element) {
	                        orderedRequests.push(element);
	                    }
	                }
	            }

	            requests = orderedRequests;
	        }

	        return requests;
	    },

	    renderOneCollection:function (model, pmCollection) {
	        var folders = [];
	        var wasOpen = false;
	        if(!model) {
	            //console.log("Sidebar was not sent a proper collection");
	            return;
	        };

	        var collection = _.clone(model.toJSON());

	        collection.folderCount = collection.folders.length;
	        collection.requestCount = collection.requests.length;
	        collection = this.organizeRequestsInFolders(collection);

	        $('#sidebar-section-collections .empty-message').css("display", "none");

	        var currentEl = $("#collection-" + collection.id + " .sidebar-collection-head-dt");
	        if (currentEl.length) {
	            var currentClass = currentEl.attr("class");
	            wasOpen = currentClass.search("open") >= 0;
	        }

	        wasOpen = $("#collection-children-" + collection.id).css('display')=="block";
	        this.renderCollectionContainerInSidebar(collection);
	        this.renderFoldersInSidebar(collection);

	        var requests = collection.requests;
	        var targetElement = "#collection-requests-" + collection.id;

	        var sortable = true;
	        if(collection.subscribed && !collection.write) {
	            sortable = false;
	        }
	        this.renderRequestsInSidebar(targetElement, requests, sortable);

	        if (wasOpen) {
	            this.openCollection(collection.id, false);
	        }

	        //set collection name as editable
	        var editableName = $("#collection-" + collection.id + " .sidebar-collection-head-cname");
	        if(!collection.subscribed || collection.write) {
	            var oldThis = this;
	            //editableName.editable({
	            //    success: function(response, newValue) {
	            //        oldThis.changeAttributeFromInline(this.getAttribute("class"), this.getAttribute("data-id"), newValue);
	            //    },
	            //    toggle: 'dblclick'
	            //});
	        }

	        this.displayCollectionEmptyMessage(collection.id);
	    },

	    displayCollectionEmptyMessage: function(collectionId) {
	        var collection = this.model.getCollectionById(collectionId);
	        if (!collection) return;

	        var folders = collection.get("folders");
	        var requests = collection.get("requests");

	        if(folders && folders.length || requests && requests.length) {
	            $("#collection-children-empty-"+collection.id).css("display", "none");
	        } else {
	            $("#collection-children-empty-"+collection.id).css("display", "block");
	        }

	    },

	    changeAttributeFromInline: function(elemClass, entityId, newValue) {
	        if(elemClass.indexOf("sidebar-collection-head-cname")!==-1) {
	            this.model.updateCollectionMeta(entityId, newValue, null);
	        }
	        else if(elemClass.indexOf("folder-actual-name")!==-1) {
	            this.model.updateFolderMeta(entityId, newValue, null);
	        }
	    },

	    updateDateForCollection: function(cid) {
	        var c = this.model.get(cid);
	        if(!c) {
	            return;
	        }
	        var d = new Date(c.get("updatedAt"));
	        var dateFormat = '{d} {Mon}';
	        var dateFormat2 = '{h}:{mm} {tt}'
	        var lastUpdatedAt = d.format(dateFormat);
	        var lastUpdatedAt2 = d.format(dateFormat2);
	        $("#collection-"+cid+" .sidebar-collection-head-item-time").text(lastUpdatedAt + " at " + lastUpdatedAt2);
	    },

	    renderCollectionContainerInSidebar: function(collection) {
	        var currentEl = $('#collection-' + collection.id);

	        var collectionSidebarListPosition = -1;
	        var insertionType;
	        var insertTarget;

	        var model = this.model;
	        var view = this;
	        var collections = model.toJSON();
	        var sortMode = "";

	        if(sortMode = model.currentSortMode) {
	            if(sortMode==="name") {
	                model.comparator = model.sorters.nameAsc;
	            }
	            else {
	                model.comparator = model.sorters.lastModifiedDesc;
	            }
	            model.sort();
	            collections = model.toJSON();
	        }

	        collectionSidebarListPosition = arrayObjectIndexOf(collections, collection.id, "id");

	        if (currentEl.length) {
	            if (collectionSidebarListPosition === 0) {
	                if(collections[collectionSidebarListPosition + 1]) {
	                    insertionType = "before";
	                    insertTarget = $('#collection-' + collections[collectionSidebarListPosition + 1].id);
	                }
	                else {
	                    insertionType = "none";
	                }
	            }
	            else {
	                insertionType = "after";
	                insertTarget = $('#collection-' + collections[collectionSidebarListPosition - 1].id);
	            }

	            //in case of multiple collections with the same ID, remove all of them, 
	            //not just the one returned by the ID selector
	            currentEl = $(".sidebar-collection[data-id='"+collection.id+"']");
	            currentEl.remove();
	        }
	        else {
	            //New element
	            if (collectionSidebarListPosition === collections.length - 1) {
	                insertionType = "append";
	            }
	            else {
	                var nextCollectionId = collections[collectionSidebarListPosition + 1].id;
	                insertTarget = $("#collection-" + nextCollectionId);

	                if (insertTarget.length > 0) {
	                    insertionType = "before";
	                }
	                else {
	                    insertionType = "append";
	                }
	            }
	        }

	        var d = new Date();
	        if(collection.updatedAt) {
	            d = new Date(collection.updatedAt);
	        }
	        else if(collection.timestamp && collection.timestamp!==0) {
	            d = new Date(collection.timestamp);
	        }
	        else if(collection.createdAt) {
	            var d = new Date(collection.createdAt);
	        }
	        var dateFormat = '{d} {Mon}';
	        var dateFormat2 = '{h}:{mm} {tt}'
	        collection.lastUpdatedAt = d.format(dateFormat);
	        collection.lastUpdatedAt2 = d.format(dateFormat2);

	        
	        if(collection.requestCount == 1) {
	            collection.requestCountLabel = "request";
	        }
	        else {
	            collection.requestCountLabel = "requests";
	        }


	        if (insertionType) {
	            if (insertionType === "after") {
	                $(insertTarget).after(Handlebars.templates.item_collection_sidebar_head(collection));
	            }
	            else if (insertionType === "before") {
	                $(insertTarget).before(Handlebars.templates.item_collection_sidebar_head(collection));
	            }
	            else {
	                $("#collection-items").append(Handlebars.templates.item_collection_sidebar_head(collection));
	            }
	        } else {
	            $("#collection-items").append(Handlebars.templates.item_collection_sidebar_head(collection));
	        }

	        if(collection.justSubscribed===true) {
	            $("li#collection-"+collection.id+" .sidebar-collection-head-name").addClass("just-subscribed");
	        }

	        // TODO Need a better way to initialize these tooltips
	        setTimeout(function() {
	            $('#collection-items [rel="tooltip"]').tooltip({
	                    delay: { "show": 500, "hide": 100 }
	                });
	        },500);

	        if(collection.write!==false || collection.owner===pm.user.id) {
	            $('#collection-' + collection.id + " .sidebar-collection-head").droppable({
	                accept: ".sidebar-collection-request",
	                hoverClass: "ui-state-hover",
	                drop: _.bind(this.handleRequestDropOnCollection, this)
	            });
	        }
	    },

	    renderFoldersInSidebar: function(collection) {
	        var folders;
	        var targetElement;
	        var folderContainer;
	        var i;

	        if("folders" in collection) {
	            folders = collection["folders"];
	            folders.sort(sortAlphabetical);
	            var numFolders = folders.length;
	            var fRequests,numFreuqest,j;
	            for(var i=0;i<numFolders;i++) {
	                fRequests = folders[i].requests;
	                numFreuqest = fRequests.length;
	            }

	            folderContainer = "#folders-" + collection.id;
	            $(folderContainer).append(Handlebars.templates.collection_sidebar_folders({"folders": folders}));

	            if(!collection.subscribed || collection.write) {
	                this.makeFolderNamesEditable(folderContainer);
	            }

	            if(collection.write!==false || collection.owner===pm.user.id) {
	                $('#collection-' + collection.id + " .folder-head").droppable({
	                    accept: ".sidebar-collection-request",
	                    hoverClass: "ui-state-hover",
	                    drop: _.bind(this.handleRequestDropOnFolder, this)
	                });
	            }

	            for(i = 0; i < folders.length; i++) {
	                targetElement = "#folder-requests-" + folders[i].id;
	                var sortable = folders[i].write;
	                this.renderRequestsInSidebar(targetElement, folders[i].requests, sortable);
	            }
	        }
	    },

	    makeFolderNamesEditable: function(folderContainer) {
	        var oldThis = this;
	        $(folderContainer + " .folder-actual-name").each(function() {
	            var elem = $(this);
	            //TODO: Add editable later
	            //elem.editable({
	            //    success: function(response, newValue) {
	            //        oldThis.changeAttributeFromInline("folder-actual-name", this.getAttribute("data-id"), newValue);
	            //    },
	            //    toggle: 'dblclick'
	            //});
	        });
	    },

	    renderRequestsInSidebar: function(targetElement, requests, sortable) {
	        if (!requests) return;
	        if(typeof sortable === "undefined") {
	            sortable = true;
	        }

	        var view = this;

	        var count = requests.length;
	        var requestTargetElement;

	        if (count > 0) {
	            for (var i = 0; i < count; i++) {
	                if (typeof requests[i].name === "undefined") {
	                    requests[i].name = requests[i].url;
	                }
	                //requests[i].name = limitStringLineWidth(requests[i].name, 40);
	                requestTargetElement = "#sidebar-request-" + requests[i].id;
	                $(requestTargetElement).draggable({});
	            }

	            $(targetElement).text("");

	            $(targetElement).append(Handlebars.templates.collection_sidebar_requests({"items":requests}));
	            if(sortable) {
	                $(targetElement).sortable({
	                    axis: "y",
	                    delay: 150,
	                    update: _.bind(view.onUpdateSortableCollectionRequestList, view)
	                });
	            }
	        }
	    },

	    onUpdateSortableCollectionRequestList: function(event, ui) {
	        //called only when REORDERING requests in a folder or a collection.
	        //no trans collection/folder moves call his function

	        //Hack to prevent sortable being called during a move
	        if(pm.requestTransferInProgress) {
	            return;
	        }

	        var pmCollection = this.model;
	        var oldThis = this;
	        var isInFolder = $(event.target).attr("class").search("folder-requests") >= 0;

	        if(isInFolder) {
	            var folder_id = $(event.target).attr("data-id");
	            var target_parent = $(event.target).parent(".folder-requests");
	            var target_parent_collection = $(event.target).parents(".sidebar-collection");
	            var collection_id = $(target_parent_collection).attr("data-id");
	            var ul_id = $(target_parent.context).attr("id");
	            var collection_requests = $(target_parent.context).children("li");
	            var count = collection_requests.length;
	            var order = [];

	            //this.updateDateForCollection(collection_id);
	            var parentCollection = pm.collections.getCollectionById(collection_id);
	            var existingFolder = pm.collections.getFolderById(folder_id);
	            var existingRequests = existingFolder.order;

	            for (var i = 0; i < count; i++) {
	                var thisRequestDiv = $(collection_requests[i]);
	                if (!thisRequestDiv.hasClass("ui-sortable-placeholder")) {
	                    var li_id = thisRequestDiv.attr("id");
	                    var request_id = $("#" + li_id + " .request").attr("data-id");
	                    //so that no new requests are added
	                    if(existingRequests.indexOf(request_id)!==-1) {
	                        order.push(request_id);
	                    }
	                }
	            }
	            //if there's anything in existing requests that's not there in order, add those too
	            //offerings to jqueryUI
	            order = order.concat(_.difference(existingRequests,order))

	            pmCollection.updateFolderOrder(collection_id, folder_id, order, true);
	            this.model.trigger("folderReordered", parentCollection, existingFolder);
	        }
	        else {
	            var target_parent = $(event.target).parents(".sidebar-collection-requests");
	            var target_parent_collection = $(event.target).parents(".sidebar-collection");
	            var collection_id = $(target_parent_collection).attr("data-id");
	            var ul_id = $(target_parent.context).attr("id");
	            var collection_requests = $(target_parent.context).children("li");
	            var count = collection_requests.length;
	            //this.updateDateForCollection(collection_id);
	            var order = [];

	            var existingCollection = pm.collections.getCollectionById(collection_id);
	            var existingRequests = existingCollection.get("order");

	            for (var i = 0; i < count; i++) {
	                var li_id = $(collection_requests[i]).attr("id");
	                var request_id = $("#" + li_id + " .request").attr("data-id");
	                //so that no new requests are added
	                if(existingRequests.indexOf(request_id)!==-1) {
	                    order.push(request_id);
	                }
	            }

	            //if there's anything in existing requests that's not there in order, add those too
	            //offerings to jqueryUI
	            order = order.concat(_.difference(existingRequests,order));

	            pmCollection.updateCollectionOrder(collection_id, order);
	            this.model.trigger("collectionReordered", existingCollection);
	        }
	        oldThis._updateSidebar();
	    },

	    updateCollectionMeta: function(collection) {
	        var id = collection.get("id");

	        var currentClass = $("#collection-" + id + " .sidebar-collection-head-dt").attr("class");
	        var collectionHeadHtml = '<span class="sidebar-collection-head-dt"><span class="icon-dt"></span></span>';
	        collectionHeadHtml += '\n<span class="sidebar-collection-head-cname">\n' + collection.get("name") + '\n</span>\n';

	        //this else shouldn't be needed
	        //you cannot be subscribed to a collection and have it shared
	        if(collection.get("subscribed")===true) {
	            collectionHeadHtml += '<span class="label label-info" rel="tooltip" data-original-title="You have subscribed to this collection" data-placement="bottom">Sub</span>';
	            if(collection.get("sharedWithTeam")===true) {
	                //fatal
	                //inconsistent data
	                //this probably means that sharedWithTeam is true for some odd reason. The collection is subscribed to by this use
	                //pm.syncLogger.error("Collection " + id +" is both subscribed to and shared by this user. How?");
	            }
	        }
	        else if(collection.get("sharedWithTeam")===true) {
	            collectionHeadHtml += '<span class="label label-success" rel="tooltip" data-original-title="You have shared this collection" data-placement="bottom">Shared</span>';
	        }

	        $('#collection-' + collection.id + " .sidebar-collection-head-name").html(collectionHeadHtml);
	        $('#select-collection option[value="' + collection.get("id") + '"]').text(collection.get("name"));

	        if(currentClass.indexOf("open") >= 0) {
	            $("#collection-" + id + " .sidebar-collection-head-dt").addClass("disclosure-triangle-open");
	        }
	        else {
	            $("#collection-" + id + " .sidebar-collection-head-dt").addClass("disclosure-triangle-close");
	        }

	        this.updateDateForCollection(id);
	    },

	    onAddFolder: function(collection, folder) {
	        var folderContainer = $("#folders-" + collection.id);
	        if(folderContainer.children("#folder-"+folder.id).length!=0) {
	            //console.log("Folder with id: "+folder.id+" already exists. Not adding it to the UI again.");
	            return;
	        }

	        folderContainer.append(Handlebars.templates.item_collection_folder(folder));
	        if(!collection.subscribed || collection.write) {
	            this.makeFolderNamesEditable("#folders-" + collection.id);
	        }

	        this.sortFolderListAlphabetically(folderContainer);

	        if(collection.write!==false || collection.owner===pm.user.id) {
	            $('#collection-' + collection.id + " .folder-head").droppable({
	                accept: ".sidebar-collection-request",
	                hoverClass: "ui-state-hover",
	                drop: _.bind(this.handleRequestDropOnFolder, this)
	            });
	        }
	        this._updateSidebar();
	        this.updateDateForCollection(collection.id);
	        this.displayCollectionEmptyMessage(collection.id);
	    },

	    onUpdateFolder: function(collection, folder) {
	        $("#folder-"  +folder.id).attr('data-name', folder.name);
	        $("#folder-" + folder.id + " .folder-head-name .folder-actual-name").text(folder.name);

	        var folderContainer = $("#folders-" + collection.id);
	        this.sortFolderListAlphabetically(folderContainer);
	        this.updateDateForCollection(collection.id);
	    },

	    onDeleteFolder: function(collection, id) {
	        $("#folder-" + id).remove();
	        this.updateDateForCollection(collection.id);
	        this.displayCollectionEmptyMessage(collection.id);
	        this.setCollectionRequestCount(collection.id);
	    },

	    onMoveRequestToFolder: function(oldLocation, targetCollection, folder, request, toSync, oldRequestId) {
	        //console.log("Request being moved from a collection to a folder in the same OR different collection");
	        //console.log("Transfer API call will be made here, if toSync is true. toSync="+toSync);
	        if(!oldRequestId) {
	            oldRequestId = request.id;
	        }

	        var toNewCollection = false;
	        if(oldLocation.collection_id !== targetCollection.id) {
	            toNewCollection = true;
	        }
	        if(toSync===true) {
	            if(toNewCollection) {
	                pm.syncManager.addChangeset("request","destroy",{id:oldRequestId, owner: oldLocation.owner}, null, true);
	                pm.syncManager.addChangeset("request","create",request, null, true);
	            }
	            else {
	                request.id = oldRequestId;
	                pm.syncManager.addChangeset("request","transfer",
	                    {
	                        "to":
	                        {
	                            model:"folder",
	                            model_id:folder.id,
	                            owner: targetCollection.get("owner")
	                        },
	                        "from": oldLocation,
	                        "owner": oldLocation.owner
	                    }
	                    , request.id, true);
	            }
	        }
	        this.removeCollectionRequest(oldRequestId);
	        var targetElement = $("#folder-requests-" + folder.id);
	        this.addRequestToFolder(folder, request);
	        this._updateSidebar();
	        this.updateDateForCollection(targetCollection.id);
	        this.displayCollectionEmptyMessage(oldLocation.collection_id);
	        this.displayCollectionEmptyMessage(targetCollection.id);
	    },

	    onMoveRequestToCollection: function(oldLocation, targetCollection, request, toSync) {
	        //console.log("Request being moved to a collection. Transfer API called if toSync is true. toSync="+toSync);
	        var newRequestId = guid(); //only used if moved to a new collection
	        var toNewCollection = false;
	        if(oldLocation.collection_id !== targetCollection.id) {
	            toNewCollection = true;
	            request.id = guid();
	        }

	        if(toSync===true) {
	            if(toNewCollection) {
	                pm.syncLogger.error("Fatal - Moving to a new collection should not sync through this method");
	            }
	            else {
	                pm.syncManager.addChangeset("request", "transfer", {
	                        "to": {
	                            model: "collection", model_id: targetCollection.id, owner: targetCollection.get("owner")
	                        }, "from": oldLocation, "owner": oldLocation.owner
	                    },
	                    request.id, true);
	            }
	        }
	        this.removeCollectionRequest(request.id, false);
	        var targetElement = "#collection-requests-" + request.collectionId;
	        this.addRequestToList(targetElement, request, targetCollection.order);
	        this._updateSidebar();
	        this.updateDateForCollection(targetCollection.id);
	        this.displayCollectionEmptyMessage(oldLocation.collection_id);
	        this.displayCollectionEmptyMessage(targetCollection.id);
	    },

	    /**
	     *
	     * @param mode - Can be default , lastUpdated, name
	     * @param direction - asc or desc
	     */
	    sortCollections: function(mode, direction) {
	        var collectionJsons = this.model.toJSON();
	        if(mode === "updatedAt") {
	            if(!direction || direction === "desc") {
	                collectionJsons.sort(function(a, b){return (new Date(b.updatedAt)).getTime() - (new Date(a.updatedAt)).getTime()});
	            }
	            else {
	                collectionJsons.sort(function(a, b){return (new Date(a.updatedAt)).getTime() - (new Date(b.updatedAt)).getTime()});
	            }

	        }
	        else if(mode === "name" || mode==="default") {
	            if(!direction || direction === "desc") {
	                collectionJsons.sort(function(a, b){return b.name.toLowerCase().localeCompare(a.name.toLowerCase())});
	            }
	            else {
	                collectionJsons.sort(function(a, b){return a.name.toLowerCase().localeCompare(b.name.toLowerCase())});
	            }
	        }
	        this._reArrangeCollections(collectionJsons);
	    },

	    _reArrangeCollections: function(sortedArray) {
	        var parentElem = $("ul#collection-items");
	        _.map(sortedArray, function(sortedCollection) {
	            var cElem  = $("li#collection-" + sortedCollection.id);
	            cElem.appendTo(parentElem); 
	        });
	    },

	    onSortRequestContainer: function(type, containerId, orderArray) {
	        var parentElem = $("#"+type+"-requests-"+containerId);
	        this.sortRequestList(parentElem, orderArray);
	    },

	    /**
	     * targetElement must be a <ul> containing <li id=sidebar-request-rid>
	     * @param targetElement
	     * @param orderArray
	     */
	    sortRequestList: function(targetElement, orderArray) {
	        var li = targetElement.children("li");

	        li.detach().sort(function(a,b) {
	            var id_a = $(a).attr('id').split("request-")[1];
	            var id_b = $(b).attr('id').split("request-")[1];
	            return orderArray.indexOf(id_a)-orderArray.indexOf(id_b);
	        });

	        targetElement.append(li);
	    },

	    sortFolderListAlphabetically: function(folderList) {
	        var li = folderList.children("li");

	        li.detach().sort(function(a,b) {
	            var name_a = $(a).attr('data-name');
	            var name_b = $(b).attr('data-name');
	            return sortAlphabeticalSelf(name_a, name_b);
	        });

	        folderList.append(li);
	    },

	    addRequestToList: function(targetElement, request, order) {
	        var view = this;

	        if($('#sidebar-request-' + request.id).length!==0) {
	            return;
	        }

	        if (typeof request.name === "undefined") {
	            request.name = request.url;
	        }

	        $(targetElement).append(Handlebars.templates.item_collection_sidebar_request(request));

	        request.isFromCollection = true;
	        request.collectionRequestId = request.id;

	        if(request.write!==false) {
	            $(targetElement).sortable({
	                axis: "y",
	                delay: 150,
	                update: _.bind(view.onUpdateSortableCollectionRequestList, view)
	            });

	            $('#collection-' + request.collectionId + " .sidebar-collection-heaad").droppable({
	                accept: ".sidebar-collection-request",
	                hoverClass: "ui-state-hover",
	                drop: _.bind(this.handleRequestDropOnCollection, this)
	            });
	        }

	        if(order instanceof Array && (order.indexOf(request.id)!==-1)) {
	            this.sortRequestList($(targetElement), order);
	        }

	        this.displayCollectionEmptyMessage(request.collectionId);
	    },

	    addRequestToFolder: function(folder, request) {
	        var targetElement = "#folder-requests-" + folder.id;
	        this.addRequestToList(targetElement, request, folder.order);

	        //add one to request count
	        var collectionId = request.collectionId;
	        this.setCollectionRequestCount(collectionId);
	    
	        this.updateDateForCollection(collectionId);
	    },

	    setCollectionRequestCount: function(collectionId) {
	        //timeout to prevent the delayed model update
	        //while deleting, sometimes the collection has the old request count
	        setTimeout(function(collectionId) {
	            return function() {
	                var countElement = $("li#collection-" + collectionId +" .collection-request-count");
	                var requestLabel = $("li#collection-" + collectionId +" .sidebar-collection-head-item-count-type");
	                
	                var cModel = pm.collections.get(collectionId);
	                if(cModel) {
	                    var cRequests = cModel.get("requests");
	                    var rLength = 0;
	                    if(cRequests) {
	                        rLength = cRequests.length;
	                    }
	                    if(rLength == 1) {
	                        requestLabel.text("request");
	                    }
	                    else {
	                        requestLabel.text("requests");
	                    }
	                    countElement.text(rLength);
	                }
	            }
	        }(collectionId), 500);
	    },

	    addCollectionRequest: function(request, openCollection, openRequest) {
	        if(!request.collection) {
	            request.collection = request.collectionId;
	        }

	        var targetElement = "#collection-requests-" + request.collection;

	        $('.sidebar-collection-request').removeClass('sidebar-collection-request-active');
	        $('#sidebar-request-' + request.id).addClass('sidebar-collection-request-active');

	        this.addRequestToList(targetElement, request, []);
	        if(!request.hasOwnProperty("collection")) {
	            request["collection"] = request["collectionId"];
	        }

	        //add one to request count

	        var collectionId = request.collection;
	        this.setCollectionRequestCount(collectionId);

	        clearTimeout(this.collectionSortTimers[request.collection]);

	        this.collectionSortTimers[request.collection] = setTimeout(function(collectionId, sidebar) {
	            return function() {
	                clearTimeout(sidebar.collectionSortTimers[collectionId]);
	                var order = pm.collections.getCollectionById(collectionId).get("order");
	                //console.log("Ordering Collection " + collectionId + " with order: " + JSON.stringify(order));
	                sidebar.onSortRequestContainer("collection", collectionId, order);
	            }
	        } (request.collection, this), 300);

	        if(openCollection===true) {
	            this.openCollection(request.collection);
	        }
	        
	        if(openRequest !== false) {
	            pm.mediator.trigger("loadRequest", request, request.isFromCollection);
	        }

	        this.updateDateForCollection(collectionId);
	        this.displayCollectionEmptyMessage(collectionId);
	    },

	    removeCollectionRequest: function(id, decreaseCount) {
	        if(typeof decreaseCount === "undefined") {
	            decreaseCount = true;
	        }

	        var requestElem = $('#sidebar-request-' + id);
	        var cElem = requestElem.parent().parent().parent();
	        if(cElem.hasClass("folders")) {
	            cElem = cElem.parent().parent();
	        }
	        var countElement = cElem.find(".collection-request-count");
	        var requestLabel = cElem.find(".sidebar-collection-head-item-count-type");
	        $('#sidebar-request-' + id).remove();
	        this.setCollectionRequestCount(cElem.attr('data-id'));

	        this.displayCollectionEmptyMessage(cElem.data("id"));
	    },

	    updateCollectionRequest: function(request, noNotif) {
	        if(typeof(noNotif)==='undefined') noNotif = false;

	        var requestName = request.name;
	        $('#sidebar-request-' + request.id + " .request-name").text(requestName);
	        $('#sidebar-request-' + request.id + " .label").text(getAbbrvMethodName(request.method));
	            
	        var labelClasses = ['GET', 'PUT', 'POST', 'DELETE'];

	        for(var i = 0; i < labelClasses.length; i++) {
	            $('#sidebar-request-' + request.id + " .label").removeClass('label-method-' + labelClasses[i]);
	        }        

	        $('#sidebar-request-' + request.id + " .label").addClass('label-method-' + request.method);

	        if(!noNotif) {
	            /*noty({
	                type:'success',
	                text:'Saved request',
	                layout:'topCenter',
	                timeout:750
	            });*/
	        }

	        this.updateDateForCollection(request.collectionId);
	    },

	    openCollection:function (id, toAnimate) {
	        var target = "#collection-children-" + id;

	        if ($(target).css("display") === "none") {
	            if(toAnimate === false) {
	                $(target).css("display", "block");
	            }
	            else {                
	                $(target).velocity("slideDown", { duration: 100 })                
	            }
	        }
	    },

	    toggleRequestList:function (id, target) {
	        var targetId = "#collection-children-" + id;
	        var $collElem = $(target);

	        if ($(targetId).css("display") === "none") {
	            var collectionHead = $collElem.parent().parent().find(".sidebar-collection-head");
	            collectionHead.addClass("sidebar-collection-head-active");

	            $(targetId).velocity("slideDown", { duration: 100 })
	        }
	        else {
	            var collectionHead = $collElem.parent().parent().find(".sidebar-collection-head");
	            collectionHead.removeClass("sidebar-collection-head-active");

	            $(targetId).velocity("slideUp", { duration: 100 })
	        }
	    },

	    toggleSubRequestList: function(id) {
	        var target = "#folder-requests-" + id;

	        if ($(target).css("display") === "none") {
	            $("#folder-" + id + " .folder-head").addClass("folder-head-active");
	            $(target).velocity("slideDown", { duration: 100 })
	        }
	        else {
	            $("#folder-" + id + " .folder-head").removeClass("folder-head-active");
	            $(target).velocity("slideUp", { duration: 100 })
	        }
	    },

	    handleRequestDropOnCollection: function(event, ui) {
	        var id = ui.draggable.context.id;
	        var requestId = $('#' + id + ' .request').attr("data-id");
	        var targetCollectionId = $($(event.target).find('.sidebar-collection-head-name')[0]).attr('data-id');
	        this.model.moveRequestToCollection(requestId, targetCollectionId);
	    },

	    handleRequestDropOnFolder: function(event, ui) {
	        var id = ui.draggable.context.id;
	        var requestId = $('#' + id + ' .request').attr("data-id");
	        var targetFolderId = $($(event.target).find('.folder-head-name')[0]).attr('data-id');        
	        this.model.moveRequestToFolder(requestId, targetFolderId);
	    },

	    onFilter: function(filteredCollectionItems) {
	        var collectionsCount = filteredCollectionItems.length;        

	        for(var i = 0; i < collectionsCount; i++) {
	            var c = filteredCollectionItems[i];
	            var collectionDomId = "#collection-" + c.id;
	            var collectionFoldersDomId = "#folders-" + c.id;
	            var collectionChildrenDomId = "#collection-children-" + c.id;
	            var dtDomId = "#collection-" + c.id + " .sidebar-collection-head-dt";

	            if(c.toShow) {
	                $(collectionDomId).removeClass("not-search-match");
	                $(collectionChildrenDomId).removeClass("not-search-match");

	                $(dtDomId).removeClass("disclosure-triangle-close");
	                $(dtDomId).addClass("disclosure-triangle-open");

	                var requests = c.requests;

	                if(requests) {
	                    var requestsCount = requests.length;
	                    for(var j = 0; j < requestsCount; j++) {
	                        var r = requests[j];
	                        var requestDomId = "#sidebar-request-" + r.id;
	                        if(r.toShow) {
	                            $(requestDomId).removeClass("not-search-match");
	                        }
	                        else {
	                            $(requestDomId).addClass("not-search-match");
	                        }
	                    }
	                }

	                if("folders" in c) {
	                    var folders = c["folders"];
	                    for(var k = 0; k < folders.length; k++) {
	                        var folderDomId = "#folder-" + folders[k].id;
	                        var folderRequestsDomId = folderDomId + " .folder-requests";
	                        var dtFolderDomId = folderDomId + " .folder-head .folder-head-dt";

	                        if(folders[k].toShow) {
	                            $(folderDomId).removeClass("not-search-match");
	                            $(folderRequestsDomId).removeClass("not-search-match");
	                            $(dtFolderDomId).removeClass("disclosure-triangle-close");
	                            $(dtFolderDomId).addClass("disclosure-triangle-open");
	                        }
	                        else {
	                            $(folderDomId).addClass("not-search-match");
	                            $(folderRequestsDomId).addClass("not-search-match");
	                            $(dtFolderDomId).addClass("disclosure-triangle-close");
	                            $(dtFolderDomId).removeClass("disclosure-triangle-open");
	                        }
	                    }
	                }
	            }
	            else {
	                $(collectionDomId).addClass("not-search-match");
	                $(collectionChildrenDomId).addClass("not-search-match");
	                $(dtDomId).removeClass("disclosure-triangle-open");
	                $(dtDomId).addClass("disclosure-triangle-close");
	            }
	        }
	    },

	    onRevertFilter: function() {
	        //$(".sidebar-collection").css("display", "block");
	        //$(".folder").css("display", "block");
	        //$(".sidebar-collection-request").css("display", "block");
	        $(".not-search-match").removeClass("not-search-match");
	    }
	});

	module.exports = CollectionSidebar;


/***/ },
/* 325 */
/***/ function(module, exports) {

	var SearchFormState = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            term: "",            
	            history: null,
	            collections: null
	        };
	    },

	    initialize: function(options) {
	        this.on("change:term", this.onChangeSearchTerm, this);
	    },

	    onChangeSearchTerm: function() {
	        this.filterSidebar(this.get("term"));
	    },

	    filterSidebar: function(term) {
	        var history = this.get("history");
	        var collections = this.get("collections");

	        if (term === "") {
	            history.revert();
	            collections.revert();
	        }
	        else {
	            history.filter(term);
	            collections.filter(term);
	        }
	    } 
	});

	module.exports = SearchFormState;


/***/ },
/* 326 */
/***/ function(module, exports) {

	var SearchForm = Backbone.View.extend({
	    initialize: function() {
	    	var wait;

	    	var view = this;
	    	var model = this.model;

	    	$("#sidebar-search").on("keyup", function(event) {

	            if ($("#sidebar-search").val()) {
	                $("#sidebar-search-container").addClass("searching");
	            } else {
	                $("#sidebar-search-container").removeClass("searching");
	            }
	            
	    		clearTimeout(wait);
	    		wait = setTimeout(function() {
	    			var searchTerm = $("#sidebar-search").val();

	    			if (searchTerm !== model.get("term")) {
	    				model.set("term", searchTerm);
	    			}

	                if (searchTerm === "") {
		                $("#collection-items").removeClass("in-search-mode");
	                }
				    else {
		                $("#collection-items").addClass("in-search-mode");
				    }
	    		}, 250);
	    	});

	    	$("#sidebar-search-cancel").on("click", function() {
	    		$("#sidebar-search").val("");
	            $("#sidebar-search-container").removeClass("searching");
	            $("#collection-items").removeClass("in-search-mode");
	    		view.revertSidebar();
	    	});
	    },

	    revertSidebar: function() {
	    	var history = this.model.get("history");
	    	var collections = this.model.get("collections");
	    	history.revert();
	    	collections.revert();
	    }
	});

	module.exports = SearchForm;


/***/ },
/* 327 */
/***/ function(module, exports) {

	var DirectoryCollection = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "",
	            "name": "",
	            "user_id": 0,
	            "user_name": "",
	            "description": "",
	            "order": [],
	            "folders": [],
	            "requests": [],
	            "timestamp": 0,
	            "updated_at": "",
	            "updated_at_formatted": ""
	        };
	    }
	});

	var Directory = Backbone.Collection.extend({
	    model: DirectoryCollection,

	    startId: 0,
	    endId: 0,
	    fetchCount: 44,
	    lastCount: 0,
	    totalCount: 0,
	    order: "descending",

	    isInitialized: false,

	    reload: function() {
	        this.startId = 0;
	        this.fetchCount = 44;
	        this.lastCount = 0;
	        this.totalCount = 0;
	        this.getCollections(this.startId, this.fetchCount, "descending");
	    },

	    comparator: function(a, b) {
	        var aName = a.get("timestamp");
	        var bName = b.get("timestamp");

	        return aName > bName;
	    },

	    initialize: function() {
	    	pm.mediator.on("initializeDirectory", this.onInitializeDirectory, this);
	        pm.mediator.on("getDirectoryCollection", this.onGetDirectoryCollection, this);
	        pm.mediator.on("showNextDirectoryPage", this.onShowNextDirectoryPage, this);
	        pm.mediator.on("showNextDirectoryPage", this.onShowNextDirectoryPage, this);
	    },

	    onInitializeDirectory: function() {
	    	if (!this.isInitialized) {
	    		this.isInitialized = true;
	    	}

	        this.getCollections(this.startId, this.fetchCount, "descending");
	    },

	    onGetDirectoryCollection: function(link_id) {
	        this.downloadCollection(link_id);
	    },

	    loadNext: function() {
	        this.getCollections(this.endId, this.fetchCount, "descending");
	    },

	    loadPrevious: function() {
	        this.getCollections(this.startId, this.fetchCount, "ascending");
	    },

	    getCollections: function(startId, count, order) {
	    	var collection = this;

	        // console.log("Getting collections", startId, "Count", count, "Order", order);

	    	pm.api.getDirectoryCollections(startId, count, order, function (collections) {
	            var c;
	            var i;
	            var updated_at_formatted;

	            if(!collections.length) {
	                console.log("No public APIs returned");
	                return;
	            }

	            if (order === "descending") {
	                collection.totalCount += collections.length;
	            }
	            else {
	                collection.totalCount -= collection.lastCount;
	            }

	            collection.lastCount = collections.length;

		    	if(collections.hasOwnProperty("message")) {
		    		// Signal error
		    	}
		    	else {
	                var startId = collections[0].id, endId = collections[0].id;
	                for(i = 0; i < collections.length; i++) {
	                    c = collections[i];
	                    updated_at_formatted = new Date(c.updated_at).toDateString();
	                    c.updated_at_formatted = updated_at_formatted;
	                    c.timestamp = new Date(c.updated_at).getTime();

	                    if(c.id > endId) {
	                        endId = c.id;
	                    }
	                    if(c.id<startId) {
	                        startId = c.id;
	                    }
	                }

	                collections.sort(sortById);

	                //collection.reset([]);
	                collection.add(collections, {merge: true});

	                //only load collections after this
	                collection.startId = endId;
	                collection.endId = endId;
		    	}
	        });
	    },

	    downloadCollection: function(linkId) {
	        // TODO Check if the collection is uploaded by the user
	        // TODO Download using remote ID
	        var remoteId = pm.user.getRemoteIdForLinkId(linkId);

	        // console.log("Found remoteId", remoteId);
	        if (remoteId) {
	            pm.user.downloadSharedCollection(remoteId, function() {

	                pm.alerts.success("Download successful");
	            });
	        }
	        else {
	            pm.api.downloadDirectoryCollection(linkId, function (data) {
	                try {
	                    var collection = data;
	                    pm.alerts.success("Download successful");

	                    pm.mediator.trigger("addDirectoryCollection", collection);
	                }
	                catch(e) {
	                    pm.alerts.error("Failed to download collection");
	                    pm.mediator.trigger("failedCollectionImport");
	                }
	            });
	        }
	    }

	});

	module.exports = Directory;


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var DirectoryCollectionViewer = __webpack_require__(329);

	var DirectoryBrowser = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        this.directoryCollectionViewer = new DirectoryCollectionViewer({model: this.model});

	        model.on("add", this.addDirectoryCollection, this);
	        model.on("remove", this.removeDirectoryCollection, this);
	        model.on("reset", this.render, this);

	        $(".directory-browser-header").on("click", function() {
	            model.reload();
	        });

	        $("#directory-collections").on("click", ".directory-collection-action-view", function() {
	            var id = $(this).attr("data-id");
	            var collection = model.get(id);
	            view.directoryCollectionViewer.showCollection(collection);
	        });

	        $("#directory-collections").on("click", ".directory-collection-action-download", function() {
	            var link_id = $(this).attr("data-link-id");
	            pm.mediator.trigger("getDirectoryCollection", link_id);
	            pm.tracker.trackEvent("collection", "import", "api_directory");
	        });

	        $(".directory-browser-navigator-next").on("click", function() {
	            if(!$(this).hasClass("disabled")) {
	                model.loadNext();
	            }
	        });

	        $(".directory-browser-navigator-previous").on("click", function() {
	            if(!$(this).hasClass("disabled")) {
	                model.loadPrevious();
	            }
	        });
	    },

	    render: function() {
	        $("#directory-collections").text("");
	    },

	    renderNavigator: function() {
	        var model = this.model;
	        var startId = model.startId;
	        var length = model.length;

	        if (model.lastCount < model.fetchCount) {
	            // Disable next
	            $(".directory-browser-navigator-next").removeClass("enabled");
	            $(".directory-browser-navigator-next").addClass("disabled");
	        }
	        else {
	            $(".directory-browser-navigator-next").removeClass("disabled");
	            $(".directory-browser-navigator-next").addClass("enabled");
	        }

	        if (model.totalCount <= model.fetchCount) {
	            $(".directory-browser-navigator-previous").removeClass("enabled");
	            $(".directory-browser-navigator-previous").addClass("disabled");
	        }
	        else {
	            $(".directory-browser-navigator-previous").removeClass("disabled");
	            $(".directory-browser-navigator-previous").addClass("enabled");
	        }

	        var start = model.totalCount - model.lastCount + 1;

	        if (start < 0) {
	            start = 1;
	        }

	        var end = model.totalCount;

	        $(".directory-browser-navigator-status .start").text(start);
	        $(".directory-browser-navigator-status .end").text(end);
	    },

	    addDirectoryCollection: function(collection) {
	        this.renderNavigator();
	        var c = _.clone(collection.toJSON());
	        if(!c.desctiption) {
	            c.description = "";
	        }
	        c.description = marked(c.description);
	        $("#directory-collections").append(Handlebars.templates.item_directory_collection(c));
	    },

	    removeDirectoryCollection: function(collection) {
	        this.renderNavigator();
	    },
	});

	module.exports = DirectoryBrowser;


/***/ },
/* 329 */
/***/ function(module, exports) {

	var DirectoryCollectionViewer = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;

	        $("#directory-collection-viewer").on("click", ".btn-primary", function() {
	        	var link_id = $(this).attr("data-link-id");
	        	pm.mediator.trigger("getDirectoryCollection", link_id);
	        });
	    },

	    showCollection: function(collection) {
	    	$("#directory-collection-viewer-name").text(collection.get("name"));
	        $("#directory-collection-viewer-user-name").text(collection.get("user_name"));

	        if(!collection.get("description")) {
	            collection.set("description", "");
	        }
	    	$("#directory-collection-viewer-description").html(marked(collection.get("description")));
	    	$("#directory-collection-viewer-updated-at").text("Last updated: " + collection.get("updated_at_formatted"));
	    	$("#directory-collection-viewer-count-requests").text(collection.get("count_requests") + " endpoints");
	    	$("#directory-collection-viewer-download").attr("data-id", collection.get("id"));
	    	$("#directory-collection-viewer-download").attr("data-link-id", collection.get("link_id"));

	    	$("#directory-collection-viewer").modal("show");
	    }
	});

	module.exports = DirectoryCollectionViewer;


/***/ },
/* 330 */
/***/ function(module, exports) {

	var TeamDirectoryCollection = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            "id": "",
	            "collection_name": "",
	            "collection_id": "",
	            "collection_description": "",
	            "collection_owner_id": 0,
	            "collection_owner_name": "",
	            "timestamp": 0,
	            "updated_at": "",
	            "updated_at_formatted": ""
	        };
	    }
	});

	var TeamDirectory = Backbone.Collection.extend({
	    model: TeamDirectoryCollection,

	    startId: 0,
	    endId: 0,
	    fetchCount: 44,
	    lastCount: 0,
	    totalCount: 0,
	    order: "descending",

	    isInitialized: false,

	    isTeamMember: false,
	    isSocketConnected: false,

	    team: null,

	    reload: function() {
	        this.startId = 0;
	        this.fetchCount = 44;
	        this.lastCount = 0;
	        this.totalCount = 0;
	        this.getTeamCollections();
	    },

	    comparator: function(a) {
	      return a.get("name");
	    },

	    initialize: function() {
	      pm.mediator.on("initializeTeamDirectory", this.onInitializeTeamDirectory, this);
	      pm.mediator.on("getDirectoryCollection", this.onGetDirectoryCollection, this);

	      pm.mediator.on("successfulSubscribe", this.onSuccessfulSubscribe, this);
	      pm.mediator.on("successfulUnsubscribe", this.onSuccessfulUnsubscribe, this);
	      pm.mediator.on("unsuccessfulUnsubscribe", this.onUnsuccessfulUnsubscribe, this);
	      pm.mediator.on("alreadySubscribed", this.onAlreadySubscribed, this);
	      pm.mediator.on("tempSubscribeError", this.onTempSubscribeError, this);

	      pm.mediator.on("socketConnected", function() {
	        this.isSocketConnected = true;
	        if(this.isTeamMember) {
	            this.getTeamCollections();
	        }
	      }, this);

	      pm.mediator.on("isTeamMember", function(isTeamMember) {
	        this.isTeamMember = isTeamMember;
	        if(isTeamMember) {
	          if(this.isSocketConnected) {
	              this.getTeamCollections();
	          }
	        } else {
	          this.reset();
	        }
	      }.bind(this));

	      pm.mediator.on('socket:share', function(data) {
	        this.getTeamCollections();
	      }.bind(this));

	      pm.mediator.on('api-library:show:collection', function(collectionId) {
	        $("#nav-team-directory").click();
	        setTimeout(function(){
	          this.trigger('highlightCollection', collectionId);
	        }.bind(this), 1000);
	      }.bind(this));
	    },

	    clearData: function() {
	      this.reset();
	      this.team = null;
	    },

	    searchCollections: function(searchTerm) {
	        searchTerm = searchTerm.toLowerCase();
	        //go through models
	        var numC = this.models.length;
	        for(i=0;i<numC;i++) {
	            var json = this.models[i].toJSON();
	            var name = (json.name)?json.name.toLowerCase():"";
	            var desc = (json.description)?json.description.toLowerCase():"";
	            var owner = (json.owner && json.owner.username)?json.owner.username.toLowerCase():"";
	            if(name.indexOf(searchTerm) !== -1 ||
	                desc.indexOf(searchTerm) !== -1 ||
	                owner.indexOf(searchTerm) !== -1) {
	                this.models[i].set("isInSearch", true);
	            } else {
	                this.models[i].set("isInSearch", false);
	            }
	        }
	        if(searchTerm) {
	          this.inSearchMode = true;
	        } else {
	          this.inSearchMode = false;
	        }
	        this.searchTerm = searchTerm;
	        this.trigger("changed");
	    },

	    subscribeToCollection: function(collectionId, ownerId) {
	        var collectionToSubscibe = this.where({collectionId: collectionId});
	        pm.syncManager.addChangeset("collection", "subscribe", {
	          collectionId: collectionId,
	          owner: ownerId
	        }, collectionId, true);
	    },

	    unsubscribeFromCollection: function(collectionId, ownerId) {
	        pm.syncManager.addChangeset("collection", "unsubscribe", {
	          collectionId: collectionId,
	          owner: ownerId
	        }, collectionId, true);
	        var status = pm.collections.deleteCollectionFromDataStoreWithOptSync(collectionId, true, false, function() {});
	    },

	    onSuccessfulSubscribe: function(res) {
	        if (res.data && res.data.model_id) {
	            var collection = this.get(res.data.model_id);
	            if(!collection) {
	              return
	            }
	            collection.set("canSubscribeTo", false);
	            this.set(collection, {remove: false});
	            this.trigger("subscribedTo", res.data.model_id);
	        }
	    },

	    onSuccessfulUnsubscribe: function(res) {
	        if (res.data && res.data.model_id) {
	            var collection = this.get(res.data.model_id);
	            if(collection) {
	                collection.set("canSubscribeTo", true);
	                this.set(collection, {remove: false});
	                this.trigger("unsubscribedFrom", res.data.model_id);
	            }
	        }
	    },

	    onAlreadySubscribed: function(id) {
	        if(id) {
	            var collection = this.get(id);
	            if(collection) {
	                collection.set("canSubscribeTo", false);
	                this.set(collection, {remove: false});
	                this.trigger("subscribedTo", id);
	            }
	        }
	    },

	    onTempSubscribeError: function(id) {
	        this.trigger("tempSubscribeError", id);
	    },

	    onUnsuccessfulUnsubscribe: function(id) {
	        var collection = this.get(id);
	        if(collection) {
	            collection.set("canSubscribeTo", true);
	            this.set(collection, {remove: false});
	            this.trigger("unsubscribedFrom", id);
	        }
	    },

	    onInitializeTeamDirectory: function() {
	    	if (!this.isInitialized) {
	    		this.isInitialized = true;
	    	}

	        this.getTeamCollections();
	    },

	    onGetDirectoryCollection: function(link_id) {
	        this.downloadCollection(link_id);
	    },

	    loadNext: function() {
	        this.getCollections(this.endId, this.fetchCount, "descending");
	    },

	    loadPrevious: function() {
	        this.getCollections(this.startId, this.fetchCount, "ascending");
	    },

	    getTeamCollectionsOld: function() {
	        var collection = this;
	        if(_.isEmpty(collection.models)) {
	          collection.trigger("loading");
	        }
	        $("#team-no-collections").hide();
	        // console.log("Getting collections", startId, "Count", count, "Order", order);
	        var orgs = pm.user.get("organizations");
	        if(orgs.length <= 0) {
	            //error
	            console.warn("You are not a member of a team");
	            collection.reset();
	            return;
	        }
	        var orgId = orgs[0].id;
	        pm.api.getTeamCollections(pm.user.id, pm.user.get("access_token"), orgId, function(team) {
	            if(team.data) {
	                team.collections= team.data.collections;
	            }
	            if(team.collections) {
	                var collections = team.collections;
	                if(collections.error) {
	                    console.log("Collections could not be added. Reason: " + collections.result);
	                    return;
	                }

	                collection.reset();
	                collection.trigger('changed');
	                if(collections.length === 0) {
	                    $("#team-no-collections").show();
	                } else {
	                    var collectionsToAdd = _.map(collections, function(collection) {
	                        if(collection.id.indexOf("#")!==-1) {
	                            collection.id = collection.id.substring(collection.id.indexOf("#")+1); //TEMPORARY
	                        }
	                        if(pm.subscriptionManger.isSubscribedTo(collection.id)) {
	                            collection.canSubscribeTo=false;
	                        } else {
	                            collection.canSubscribeTo=true;
	                        }

	                        collection.isOwn=false;
	                        if(pm.user.id===collection.owner.id) {
	                            collection.canSubscribeTo=false;
	                            collection.isOwn=true;
	                        }

	                        if(collection.access === "write" || collection.access === "own" || collection.write === true) {
	                          collection.userWrite=true;
	                        } else {
	                          collection.userWrite=false;
	                        }
	                        return collection;
	                    });
	                    collection.add(collectionsToAdd);
	                    if(collection.inSearchMode) {
	                      collection.searchCollections(collection.searchTerm);
	                    } else {
	                      collection.trigger('changed');
	                    }
	                }
	            }
	            collection.setTeamDetails(team);
	            pm.mediator.trigger('teamLoaded');
	            collection.trigger("loaded");
	        },
	        function() {
	            collection.trigger("loaded");
	        });
	    },

	    getTeamCollections: function() {
	        var collection = this;
	        if(_.isEmpty(collection.models)) {
	          collection.trigger("loading");
	        }
	        $("#team-no-collections").hide();
	        // console.log("Getting collections", startId, "Count", count, "Order", order);
	        var orgs = pm.user.get("organizations");
	        if(orgs.length <= 0) {
	            //error
	            console.warn("You are not a member of a team");
	            collection.reset();
	            return;
	        }
	        var orgId = orgs[0].id;
	        pm.syncManager.getTeamCollections(pm.user.id, pm.user.get("access_token"), orgId, function(team) {
	            if(team.data) {
	                team.collections= team.data.collections;
	            }
	            if(team.collections) {
	                var collections = team.collections;
	                if(collections.error) {
	                    console.log("Collections could not be added. Reason: " + collections.result);
	                    return;
	                }

	                collection.reset();
	                collection.trigger('changed');
	                if(collections.length === 0) {
	                    $("#team-no-collections").show();
	                } else {
	                    var collectionsToAdd = _.map(collections, function(collection) {
	                        if(collection.id.indexOf("#")!==-1) {
	                            collection.id = collection.id.substring(collection.id.indexOf("#")+1); //TEMPORARY
	                        }
	                        if(pm.subscriptionManger.isSubscribedTo(collection.id)) {
	                            collection.canSubscribeTo=false;
	                        } else {
	                            collection.canSubscribeTo=true;
	                        }

	                        collection.isOwn=false;
	                        if(pm.user.id===collection.owner.id) {
	                            collection.canSubscribeTo=false;
	                            collection.isOwn=true;
	                        }

	                        if(collection.access === "write" || collection.access === "own" || collection.write === true) {
	                          collection.userWrite=true;
	                        } else {
	                          collection.userWrite=false;
	                        }
	                        return collection;
	                    });
	                    collection.add(collectionsToAdd);
	                    if(collection.inSearchMode) {
	                      collection.searchCollections(collection.searchTerm);
	                    } else {
	                      collection.trigger('changed');
	                    }
	                }
	            }
	            collection.setTeamDetails(team);
	            pm.mediator.trigger('teamLoaded');
	            collection.trigger("loaded");
	        },
	        function() {
	            collection.trigger("loaded");
	        });
	    },

	    setTeamDetails: function(team) {
	      this.team = {
	        admin: team.data.admin,
	        members: team.data.members.concat([team.data.admin]),
	        name: team.data.name,
	        id: team.data.id
	      }
	    },

	    getTeam: function() {
	      if(this.team) {
	        return this.team;
	      } else {
	        return null;
	      }
	    },

	    isTeamAdmin: function(userId) {
	      if(!this.team) {
	        return null;
	      }

	      return this.team.admin.id === userId;
	    },

	    downloadCollection: function(linkId) {
	        // TODO Check if the collection is uploaded by the user
	        // TODO Download using remote ID
	        var remoteId = pm.user.getRemoteIdForLinkId(linkId);

	        // console.log("Found remoteId", remoteId);
	        if (remoteId) {
	            pm.user.downloadSharedCollection(remoteId, function() {

	                pm.alerts.success("Download successful");
	            });
	        } else {
	            pm.api.downloadDirectoryCollection(linkId, function (data) {
	                try {
	                    var collection = data;
	                    pm.alerts.success("Download successful");

	                    pm.mediator.trigger("addDirectoryCollection", collection);
	                } catch(e) {
	                    pm.alerts.error("Failed to download collection");
	                    pm.mediator.trigger("failedCollectionImport");
	                }
	            });
	        }
	    }

	});

	module.exports = TeamDirectory;


/***/ },
/* 331 */
/***/ function(module, exports) {

	// var TeamDirectoryCollectionViewer = require("./TeamDirectoryCollectionViewer.js");

	var TeamDirectoryBrowser = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var cmodel = pm.collections;
	        var view = this;
	        view.searchTimeout = null;

	        model.collSubscribeErrors = {};

	        // this.directoryCollectionViewer = new TeamDirectoryCollectionViewer({model: this.model});

	        // this.directoryCollectionViewer.on("show", function(){
	        //     $("#team-directory-team").css("display", "none");
	        //     $("#team-directory-collection").css("display", "flex");
	        // });
	        //
	        // this.directoryCollectionViewer.on("hide", function(){
	        //     $("#team-directory-collection").css("display", "none");
	        //     $("#team-directory-team").css("display", "flex");
	        // });

	        model.on("changed", this.render, this);

	        model.on("loading", this.showLoading, this);
	        model.on("loaded", this.hideLoading, this);

	        model.on("subscribedTo", this.onSubscribedTo, this);
	        model.on("unsubscribedFrom", this.onUnsubscribedFrom, this);

	        model.on("tempSubscribeError", this.tempSubscribeError, this);

	        model.on("highlightCollection", this.highlightCollection, this);

	        pm.mediator.on("isTeamMember", this.showTeamLink, this);

	        var $collectionsDiv = $("#team-directory-collections");

	        // $collectionsDiv.on("click", ".team-directory-collection-list, .team-directory-collection", function() {
	        //     var id = $(this).attr("data-id");
	        //     var collection = model.get(id);
	        //     view.directoryCollectionViewer.showCollection(collection);
	        // });

	        $collectionsDiv.on("click", ".team-directory-collection-action-subscribe", function(e) {
	            var collectionId = $(this).attr("data-id");
	            var ownerId = $(this).attr("data-owner-id");
	            var thisElem = $(this);
	            thisElem.find(".subscribe-button-text")
	                .removeClass("unsubscribing")
	                .addClass("subscribing")
	                .text("Subscribing...");
	            thisElem.attr('disabled', 'disabled');
	            model.subscribeToCollection(collectionId, ownerId);
	            $("#team-directory-collection-list-" + collectionId +" .team-directory-collection-docs").removeClass("docs-link-hidden");
	            e.stopPropagation();

	            //in case there's no response from the server, show some sort of error message
	            model.collSubscribeErrors[collectionId] = setTimeout(function() {
	                view.tempSubscribeError(collectionId);
	            }, 10000);
	        });

	        $collectionsDiv.on("click", ".team-directory-collection-action-unsubscribe", function(e) {
	            var collectionId = $(this).attr("data-id");
	            var ownerId = $(this).attr("data-owner-id");
	            var thisElem = $(this);
	            thisElem.removeClass("subscribed");
	            thisElem.find(".subscribe-button-text")
	                .removeClass("subscribing")
	                .addClass("unsubscribing")
	                .text("Unsubscribing...");

	            thisElem.attr('disabled', 'disabled');
	            model.unsubscribeFromCollection(collectionId, ownerId);
	            $("#team-directory-collection-list-" + collectionId +" .team-directory-collection-docs").addClass("docs-link-hidden");

	            e.stopPropagation();
	        });

	        // $(".team-directory-browser-navigator-next").on("click", function() {
	        //     if(!$(this).hasClass("disabled")) {
	        //         model.loadNext();
	        //     }
	        // });

	        // $(".team-directory-browser-navigator-previous").on("click", function() {
	        //     if(!$(this).hasClass("disabled")) {
	        //         model.loadPrevious();
	        //     }
	        // });

	        $collectionsDiv.on("click", ".collection-actions-duplicate", function () {
	            var id = $(this).attr('data-id');
	            var c = cmodel.get(id);
	            cmodel.trigger("duplicateCollection", c);
	            pm.tracker.trackEvent("collection", "duplicate");
	        });

	        $collectionsDiv.on("click", ".collection-actions-edit", function () {
	            var id = $(this).attr('data-id');
	            var c = cmodel.get(id);
	            cmodel.trigger("showEditModal", c);
	        });

	        $collectionsDiv.on("click", ".collection-actions-download", function () {
	            var id = $(this).attr('data-id');
	            cmodel.trigger("shareCollectionModal", id);
	        });

	        $("#apidir-search-cancel").click(function() {
	            $("#apidir-search").val("").keyup();
	        });

	        $("#apidir-search").keyup(function(event) {
	            if(event.which !== 27) {
	              var newVal = $(this).val();
	              if(newVal.length>0) {
	                  $("#apidir-search-container").addClass("searching");
	              } else {
	                  $("#apidir-search-container").removeClass("searching");
	              }
	              clearTimeout(view.searchTimeout);
	              view.searchTimeout = setTimeout(function() {
	                  view.searchCollections(newVal);
	              }, 200);
	            } else {
	              $(this).val('');
	              $("#apidir-search-container").removeClass("searching");
	              clearTimeout(view.searchTimeout);
	              view.searchCollections('');
	            }
	        });
	    },

	    searchCollections: function(searchTerm) {
	      this.model.searchCollections(searchTerm);
	    },

	    highlightCollection: function(collectionId) {
	      var $el = $('.team-directory-collection-list[data-id="'+collectionId+'"]');
	      if($el) {
	        $el.addClass('highlighted');
	      }
	    },

	    render: function() {
	      this.renderMeta();
	      this.renderCollections();
	    },

	    renderMeta: function() {
	      if(pm.user.get("organizations") && pm.user.get("organizations")[0]) {
	        $("#team-name").css("display", "block");
	        $("#team-settings-link").attr('href', pm.webUrl + "/profile/teams");
	        $("#team-settings-wrapper").css("display", "block");
	        $("#team-name").text(pm.user.get("organizations")[0].name);
	      }
	    },

	    renderCollections: function() {
	      $('#team-directory-collections').empty();
	      this.model.each(function(collection) {
	        if(!this.model.inSearchMode) {
	          this.addDirectoryCollection(collection);
	        } else {
	          if(!!collection.get("isInSearch")) {
	            this.addDirectoryCollection(collection);
	            this.highlightTermInCollection(this.model.searchTerm, $("#team-directory-collection-list-" + collection.id));
	          }
	        }
	      }, this);
	    },

	    // renderNavigator: function() {
	    //     var model = this.model;
	    //     var startId = model.startId;
	    //     var length = model.length;

	    //     if (model.lastCount < model.fetchCount) {
	    //         // Disable next
	    //         $(".directory-browser-navigator-next").removeClass("enabled");
	    //         $(".directory-browser-navigator-next").addClass("disabled");
	    //     }
	    //     else {
	    //         $(".directory-browser-navigator-next").removeClass("disabled");
	    //         $(".directory-browser-navigator-next").addClass("enabled");
	    //     }

	    //     if (model.totalCount <= model.fetchCount) {
	    //         $(".directory-browser-navigator-previous").removeClass("enabled");
	    //         $(".directory-browser-navigator-previous").addClass("disabled");
	    //     }
	    //     else {
	    //         $(".directory-browser-navigator-previous").removeClass("disabled");
	    //         $(".directory-browser-navigator-previous").addClass("enabled");
	    //     }

	    //     var start = model.totalCount - model.lastCount + 1;

	    //     if (start < 0) {
	    //         start = 1;
	    //     }

	    //     var end = model.totalCount;

	    //     $(".directory-browser-navigator-status .start").text(start);
	    //     $(".directory-browser-navigator-status .end").text(end);
	    // },

	    showTeamLink: function(isMember) {
	      var organizations = pm.user.get('organizations');
	        if(isMember) {
	            if(organizations && organizations.length > 0) {
	              $("#nav-team-directory").text(organizations[0].name);
	            }
	            $("#team-directory-opener").show();
	        } else {
	            $("#team-directory-opener").hide();
	            $("#nav-team-directory").text("API Library");
	            //move to request builder
	            $(".navbar-main-navigation .active").removeClass("active");
	            $("#nav-request-builder-view").addClass("active");
	            pm.mediator.trigger("switchMainView", "request-builder-view");
	        }
	    },

	    showLoading: function() {
	        $("#team-directory-browser").addClass("loading");
	    },

	    hideLoading: function() {
	        $("#team-directory-browser").removeClass("loading");
	    },

	    addDirectoryCollection: function(collection) {
	        var view = this;
	        // this.renderNavigator();
	        var c = _.clone(collection.toJSON());
	        if(!c.description) {
	            c.description = "No description added";
	        }
	        c.description = marked(c.description);
	        var d = new Date(c.updatedAt);
	        c.lastUpdatedAt = d.format('{Mon} {d}, {yyyy}');
	        c.lastUpdatedAt2 = d.format('{h}:{mm} {tt}');

	        if(!c.owner) {
	            c.owner = {};
	        }
	        if(!c.owner.username) {
	            c.owner.username = "Owner name unavailable"
	        }

	        c.docsLink = pm.webUrl + "/dashboard/documentation?collection_id=" + c.id + "&owner=" + c.owner.id+"&user_id="+pm.user.id+"&access_token="+pm.user.get("access_token");

	        //show the docs link for all collections, including (shared+not subscribed) ones
	        c.docsLinkShown = true;

	        var $newElems = $(Handlebars.templates.item_team_directory_collection_list(c));
	        $newElems.find(".description").html(c.description);
	        $newElems.find(".description a").each(function() {
	            $(this).attr('target', '_blank');
	        });
	        $("#team-directory-collections").append($newElems);
	    },

	    highlightTermInCollection: function(searchTerm, collectionDiv) {
	        if(searchTerm === "") {
	            return;
	        }
	        var nameDiv, ownerDiv, descDiv;
	        nameDiv = collectionDiv.find(".team-directory-collection-name");
	        ownerDiv = collectionDiv.find(".team-directory-collection-username");
	        descDiv = collectionDiv.find(".team-directory-collection-description");

	        this.highlightTermInDiv(searchTerm, nameDiv);
	        this.highlightTermInDiv(searchTerm, ownerDiv);
	        this.highlightTermInDiv(searchTerm, descDiv);
	    },

	    highlightTermInDiv: function(searchTerm, div) {
	        var html = div.html();
	        var regex = new RegExp(searchTerm, "ig");
	        var newHtml = html.replace(regex, function(str) {
	          return '<span class="highlighted-search-result">'+str+'</span>'
	        });
	        div.html(newHtml);
	    },

	    onSubscribedTo: function(collectionId) {
	        var parentContainer;
	        clearTimeout(this.model.collSubscribeErrors[collectionId]);
	        parentContainer = $("#team-directory-collection-list-"+collectionId);
	        parentContainer.find(".subscribe-button")
	            .removeClass("team-directory-collection-action-subscribe")
	            .addClass("team-directory-collection-action-unsubscribe")
	            .addClass("subscribed").removeAttr('disabled')
	            .find(".subscribe-button-text")
	            .removeClass("subscribing")
	            .removeClass("unsubscribing")
	            .text("Unsubscribe");
	    },

	    tempSubscribeError: function(id) {
	        var parentContainer;
	        parentContainer = $("#team-directory-collection-list-"+id);
	        parentContainer.find(".subscribe-button-text")
	            .text("Error subscribing");
	        $("#team-directory-collection-list-" + collectionId +" .team-directory-collection-docs").addClass("docs-link-hidden");
	    },

	    onUnsubscribedFrom: function(collectionId) {
	        var parentContainer;
	        parentContainer = $("#team-directory-collection-list-"+collectionId);
	        parentContainer.find(".subscribe-button")
	            .removeClass("team-directory-collection-action-unsubscribe")
	            .addClass("team-directory-collection-action-subscribe")
	            .removeClass("subscribed").removeAttr('disabled')
	            .find(".subscribe-button-text")
	            .removeClass("unsubscribing")
	            .removeClass("subscribing")
	            .text("Subscribe");
	    }
	});

	module.exports = TeamDirectoryBrowser;


/***/ },
/* 332 */
/***/ function(module, exports) {

	var Tracker = Backbone.Model.extend({
		defaults: function() {
			return {
			}
		},

		initialize: function() {
			pm.mediator.once("onTrialStart", this.onTrialStart, this);
			pm.mediator.once("onTrialEnd", this.onTrialEnd, this);
			pm.mediator.on("onStartPurchase", this.onStartPurchase, this);

			//for collection_runner events
			pm.appWindow.trigger("registerInternalEvent", "test_runner_event", this.onAddTestRunnerEvent, this);
		},

		onAddTestRunnerEvent: function(event) {
			this.trackEvent(event.category, event.action, event.label, event.value);
		},

		onStartPurchase: function() {
			if (tracker) {
				this.trackEvent('test_runner', 'collection_runner', 'buy');
			}
		},

		onTrialStart: function() {
			if (tracker) {
				this.trackEvent('test_runner', 'collection_runner', 'trial_start');
			}
		},

		onTrialEnd: function() {
			if (tracker) {
				console.log("trial_end event fired");
				this.trackEvent('test_runner', 'collection_runner', 'trial_end');
			}
		},

		sendAppView: function(url) {
			var analyticsEnabled = pm.settings.getSetting("googleAnalytics");
			if (analyticsEnabled) {
				if(window.hasOwnProperty("tracker")) {
					//chrome
					tracker.sendAppView(url);
				}
				else if(window.hasOwnProperty("electronTracker")) {
					//electron
					electronTracker.screenView(url);
				}
			}
		},

		trackEvent: function(category, action, label, value) {
			//if this is the collection runner
			if(!pm["syncManager"]) {
				pm.appWindow.sendMessageWrapper({
					id: pm.appWindow.get("id"),
					event: "test_runner_event",
					object: {
						category: category,
						action: action,
						label: label,
						value: value
					}
				});
				return;
			}

			//Only send tracking events if Sync is enabled
			if(!pm.syncManager.syncEnabled) {
				return;
			}

			this.forceTrackEvent(category, action, label, value);
		},

		forceTrackEvent: function(category, action, label, value) {
			var analyticsEnabled = pm.settings.getSetting("googleAnalytics");
			if (analyticsEnabled) {
				if(window.tracker) {
					if(value) {
						tracker.sendEvent(category, action, label, value);
					}
					else if(label) {
						tracker.sendEvent(category, action, label);
					}
					else {
						tracker.sendEvent(category, action);
					}
				}
				else if(window.electronTracker) {
					if(value) {
						electronTracker.event(category, action, label, value);
					}
					else if(label) {
						electronTracker.event(category, action, label);
					}
					else {
						electronTracker.event(category, action);
					}
				}
			}
		}
	});

	module.exports = Tracker;


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var InterceptorStatus = __webpack_require__(334);
	var FEATURES = __webpack_require__(1).FEATURES;
	var NotificationFeed = __webpack_require__(335);
	var React = __webpack_require__(29);

	var Header = Backbone.View.extend({
		initialize: function initialize() {
			var donated = pm.settings.getSetting("haveDonated");
			var view = this;

			var interceptorStatus = new InterceptorStatus({ model: {} });

			if (donated) {
				$("#donate-link").css("display", "none");
			} else {
				$("#donate-link").css("display", "inline-block");
			}

			var instantModals = pm.settings.getSetting("instantModals");
			if (instantModals) {
				$(".fade").removeClass("fade").addClass("fade_disable");
			}

			//Hide by default. Only show if getOrgsForUser returns syncEnabled=true
			$("#team-directory-opener").hide();

			pm.mediator.on("donatedStatusChanged", function (donated) {
				if (donated) {
					$("#donate-link").css("display", "none");
				} else {
					$("#donate-link").css("display", "inline-block");
				}
			});

			pm.mediator.on("loadedPurchases", function (purchases) {
				if (purchases.isUpgradeAvailable("collection-runner")) {
					view.removeSupportersMenu();
				}
			});

			pm.mediator.on("teamSyncEnabled", function () {
				view.removeSupportersMenu();
			});

			$("#add-on-directory").on("click", function () {
				pm.mediator.trigger("openModule", "directory");
				pm.mediator.trigger("initializeDirectory");
				pm.tracker.trackEvent("collection", "list", "api_directory");
			});

			$("#nav-team-directory").on("click", function () {
				if ($(this).hasClass("active")) {
					return true;
				}
				//pm.mediator.trigger("openModule", "teamDirectory");
				// Add active tab
				$(".navbar-main-navigation .active").removeClass("active");
				$(this).addClass("active");

				pm.mediator.trigger("switchMainView", "team-directory");
				pm.mediator.trigger("initializeTeamDirectory");
			});

			$("#open-new-postman").click(function () {
				pm.app.openRequester();
			});

			$("#nav-collection-view").click(function () {
				pm.mediator.trigger("switchMainView", "collection-view");
			});

			$("#nav-request-builder-view").click(function () {
				$(".navbar-main-navigation .active").removeClass("active");
				$(this).addClass("active");

				pm.mediator.trigger("switchMainView", "request-builder-view");
			});

			$("#add-on-test-runner").on("click", function () {
				pm.mediator.trigger("openModule", "test_runner");
				pm.mediator.trigger("dismissTooltip", "runner");
			});

			$("#new-postman-window").on("click", function () {
				pm.mediator.trigger("openModule", "requester");
			});

			$("#back-to-request").on("click", function () {
				pm.mediator.trigger("openModuleSection", "requester");
			});

			$('a[data-toggle="popover"]').popover({
				animation: true,
				placement: "bottom",
				trigger: "hover"
			});

			$("#twitter-profile").on("click", function () {
				pm.tracker.trackEvent('social', 'profileview', 'twitter');
			});

			$("#postman-docs").on("click", function () {
				pm.tracker.trackEvent('docs', 'view');
			});

			$("#toggle-import-bar").on("click", function () {
				$("#modal-importer").modal('show');
			});

			$("#postman-navbar-more-opener").click(function () {
				$("#postman-navbar-more").toggle();
			});

			$("#postman-navbar-more").mouseout(function () {
				$('#donate-link').popover('hide');
			});

			pm.mediator.on("loadedPurchases", function (purchases) {
				view.updateJetpacksTrialStatus(purchases);
			});

			pm.mediator.on("switchMainView", function (target) {
				view.switchMainView(target);
			});

			pm.mediator.on("showEnableSyncButton", function () {
				view.showEnableSyncButton();
			});

			$("#enable-sync, .enable-sync-settings").on("click", function () {
				pm.mediator.trigger("showSyncInvitePopup");
				pm.tracker.trackEvent("sync", "view", "click_modal");
			});

			$(".reviews-link").on("click", function () {
				pm.tracker.trackEvent("support", "love");
			});

			this.render();

			if (pm.features.isEnabled(FEATURES.NOTIFICATIONS)) {
				this.mountNotificationFeed();
			}

			pm.mediator.on('feature:enabled:' + FEATURES.NOTIFICATIONS, (function () {
				this.mountNotificationFeed();
			}).bind(this));

			pm.mediator.on('feature:disabled:' + FEATURES.NOTIFICATIONS, (function () {
				this.unmountNotificationFeed();
			}).bind(this));
		},

		mountNotificationFeed: function mountNotificationFeed() {
			React.render(React.createElement(NotificationFeed, null), $('#notification-container')[0]);
		},

		unmountNotificationFeed: function unmountNotificationFeed() {
			React.unmountComponentAtNode($('#notification-container')[0]);
		},

		showEnableSyncButton: function showEnableSyncButton() {
			var syncEnabled = pm.settings.getSetting("enableSync");
			var syncInviteEnabled = pm.settings.getSetting("syncInviteShown");

			if (!syncEnabled) {
				$(".sync-enable").show();
				$(".sync-disable").hide();
			} else {
				$(".sync-enable").hide();
				$(".sync-disable").show();
			}
		},

		removeSupportersMenu: function removeSupportersMenu() {
			$(".supporters.dropdown").remove();
			$("#settings-dropdown").addClass("no-supporters");
		},

		switchMainView: function switchMainView(target) {
			//requestbuilder / collection
			$(".navbar-main-navigation a").removeClass("depressed-main-navigation");
			$(".navbar-main-navigation a#nav-" + target).addClass("depressed-main-navigation");
			pm.currentMainView = target;
			if (target === "collection-view") {
				$(".sidebar-section-data>div").hide();
				$(".sidebar-section-data>div#sidebar-section-collections").css("display", "flex");
				if ($(".sidebar-collection-request-active").length === 0) {
					$(".main-view").hide();
					$(".main-view#" + target).show();
				}
			} else if (target === "request-builder-view") {
				$(".main-view").hide();
				$(".main-view#" + target).show();
				$('#nav-request-builder-view').tooltip('hide');
				$("#request-context").show();
				pm.app.trigger("modalClose");
				pm.mediator.trigger("maximizeSidebar");
				$('#sidebar-toggle').show();
			} else if (target === "team-directory") {
				$(".main-view").hide();
				$("#team-directory-browser").css("display", "flex");
				$('#nav-team-directory').tooltip('hide');
				$("#request-context").hide();
				pm.app.trigger("modalOpen");
				pm.mediator.trigger("minimizeSidebar");
				$('#sidebar-toggle').hide();
			} else {
				console.error("Unknown main view");
			}
		},

		createSupporterPopover: function createSupporterPopover() {
			var supportContent = "<div class='supporters-content'><div class='supporter clearfix'>";
			supportContent += "<div class='supporter-image supporter-image-mashape'>";
			supportContent += "<a href='http://www.getpostman.com/r?url=https://www.mashape.com/?utm_source=chrome%26utm_medium=app%26utm_campaign=postman' target='_blank'>";
			supportContent += "<img src='img/supporters/mashape.png'/></a></div>";
			supportContent += "<div class='supporter-tag'>Consume or provide cloud services with the Mashape API Platform</div></div>";

			supportContent += "<div class='supporter clearfix'>";
			supportContent += "<div class='supporter-image supporter-image-mashape'>";
			supportContent += "<a href='http://www.getpostman.com/r?url=http://restlet.com/?utm_source=POSTMAN' target='_blank'>";
			supportContent += "<img src='img/supporters/restlet-new.png'/></a></div>";
			supportContent += "<div class='supporter-tag'>The all-in-one platform for web APIs</div></div>";

			var donateTimeout;
			$('.supporters-link').popover({
				animation: false,
				content: supportContent,
				placement: "bottom",
				trigger: "manual",
				html: true,
				title: "Postman is supported by amazing companies"
			}).on("mouseenter", function () {
				var _this = this;
				$(this).popover("show");
				$(".supporters .popover").css('left', '-200px');
				$(".supporters .popover").css('margin-right', '10px');
				$(".supporters .popover .arrow").css('left', 'auto').css('right', '5%');
				$(this).siblings(".popover").on("mouseleave", function () {
					$(_this).popover('hide');
				});
				donateTimeout = setTimeout(function () {
					pm.tracker.trackEvent('sponsors', 'view');
				}, 1000);
			}).on("mouseleave", function () {
				var _this = this;
				clearTimeout(donateTimeout);
				setTimeout(function () {
					if (!$(".popover:hover").length) {
						$(_this).popover("hide");
					}
				}, 100);
			});
		},

		updateJetpacksTrialStatus: function updateJetpacksTrialStatus(purchases) {
			var jetpacks = purchases.get("collection-runner");
			if (jetpacks) {
				if (jetpacks.isPurchased()) {
					$("#header-trial-status").css("display", "none");
				} else if (jetpacks.isTrialValid()) {
					var daysLeft = jetpacks.getDaysLeft();
					$("#header-trial-status").css("display", "block");
					$("#header-trial-status").text("Upgrade (" + daysLeft + " days left)");
				} else if (jetpacks.isTrialCompleted()) {
					$("#header-trial-status").css("display", "block");
					$("#header-trial-status").attr("data-content", "Your trial period has expired");
					$("#header-trial-status").text("Upgrade");
				} else {
					$("#header-trial-status").css("display", "none");
				}
			}
		},

		render: function render() {
			//this.createSupporterPopover();
			//no support menu
		}

	});

	module.exports = Header;

/***/ },
/* 334 */
/***/ function(module, exports) {

	var InterceptorStatus = Backbone.View.extend({
		initialize: function() {
			var model = this.model;
			var view = this;

			$(".interceptor-status-trigger").on("click", function() {
				view.toggleInterceptor();
			});

			$(".postman-interceptor-status-toggle").on("click", function(event) {
				view.toggleInterceptor();
				event.stopPropagation();
			  	event.preventDefault();
			});

			$("#interceptor-toggle-switch").change(function(event, state) {
	            var state = $(this).is(":checked");
	            if(state!==pm.settings.getSetting("useInterceptor")) {
	                view.toggleInterceptor();
	            }
	            event.stopPropagation();
	        });

			pm.mediator.on("enableInterceptor", this.enableInterceptor, this);

			this.setIcon();
		},

		enableInterceptor: function() {
			var foundExtension = false;
			var view = this;
			var message = {
				"postmanMessage": {
					"type": "detectExtension"
				}
			}

			chrome.runtime.sendMessage(postman_interceptor_id, message, function (extResponse) {
					if (typeof extResponse === "undefined") {
						foundExtension = false;
						$("#modal-interceptor-intro").modal("show");
						pm.settings.setSetting("useInterceptor", false);
						view.setIcon();
					}
					else {
						foundExtension = true;
						var status = pm.settings.getSetting("useInterceptor");

						if (status === true) {
							pm.settings.setSetting("useInterceptor", false);
						}
						else {
							pm.settings.setSetting("useInterceptor", true);
						}

						view.setIcon();
					}
			});

		},

		setIcon: function() {
			var status = pm.settings.getSetting("useInterceptor");

			if (status === false) {
				$("#postman-interceptor-status img").attr("src", "img/svg/navbar/interceptor.svg");
				$('#interceptor-toggle-switch').prop('checked',false);
				if(!pm.tcpReader || pm.tcpReader.get("status")==="disconnected") {
					$(".icon-navbar-interceptor").removeClass("active");
				}
			}
			else {
				$("#postman-interceptor-status img").attr("src", "img/v2/interceptor_connected.png");
				$('#interceptor-toggle-switch').prop('checked',true);
				$(".icon-navbar-interceptor").addClass("active");
			}
		},

		toggleInterceptor: function() {
			if(postman_webkit || postman_macgap || postman_brackets || postman_electron) {
				console.log("Interceptor won't work in webkit apps");
				return;
			}

			var foundExtension = false;
			var view = this;
			var message = {
				"postmanMessage": {
					"type": "detectExtension"
				}
			}
			//allow disabling the interceptor without it being installed
			var status = pm.settings.getSetting("useInterceptor");
			if (status === true) {
				pm.settings.setSetting("useInterceptor", false);
				view.setIcon();
			}
			else {
				view.enableInterceptor();
			}
		}
	});

	module.exports = InterceptorStatus;


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _modelsNotificationFeedModel = __webpack_require__(336);

	var _modelsNotificationFeedModel2 = _interopRequireDefault(_modelsNotificationFeedModel);

	var _NotificationFeed = __webpack_require__(337);

	var _NotificationFeed2 = _interopRequireDefault(_NotificationFeed);

	var NavbarNotification = (function (_React$Component) {
	  _inherits(NavbarNotification, _React$Component);

	  function NavbarNotification(props) {
	    _classCallCheck(this, NavbarNotification);

	    _get(Object.getPrototypeOf(NavbarNotification.prototype), 'constructor', this).call(this, props);

	    this.state = {
	      loading: false,
	      error: false,
	      items_unread: [],
	      items_read: [],
	      isPanelOpen: false,
	      isReadPanelActive: false,
	      reachedEndOfFeed: false
	    };

	    this.initializeModel();
	  }

	  _createClass(NavbarNotification, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _this = this;

	      this._closePanelIfClickedOutside = function (event) {
	        if (!_this.state.isPanelOpen) {
	          return;
	        }

	        if (_this.clickedOutsideElement(_react2['default'].findDOMNode(_this), event)) {
	          _this.closePanel();
	        }
	      };

	      this._bindClosePanelIfClickedOutside = function () {
	        if (!document.addEventListener && document.attachEvent) {
	          document.attachEvent('onclick', _this._closePanelIfClickedOutside);
	        } else {
	          document.addEventListener('click', _this._closePanelIfClickedOutside);
	        }
	      };
	      this._unbindClosePanelIfClickedOutside = function () {
	        if (!document.removeEventListener && document.detachEvent) {
	          document.detachEvent('onclick', _this._closePanelIfClickedOutside);
	        } else {
	          document.removeEventListener('click', _this._closePanelIfClickedOutside);
	        }
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.fetchNotifications();
	    }
	  }, {
	    key: 'fetchNotifications',
	    value: function fetchNotifications() {
	      this.setState({
	        loading: true,
	        error: false
	      });
	      this.model.fetchNotifications();
	    }
	  }, {
	    key: 'initializeModel',
	    value: function initializeModel(collectionId) {
	      this.detachModelEvents();

	      this.model = new _modelsNotificationFeedModel2['default']();

	      this.attachModelEvents();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.detachModelEvents();
	      delete this.model;
	    }
	  }, {
	    key: 'attachModelEvents',
	    value: function attachModelEvents() {
	      if (this.model) {
	        this.model.on('change', this.handleModelChange, this);
	        this.model.on('error', this.handleModelError, this);
	      }
	    }
	  }, {
	    key: 'detachModelEvents',
	    value: function detachModelEvents() {
	      if (this.model) {
	        this.model.off('change', this.handleModelChange, this);
	        this.model.off('error', this.handleModelError, this);
	      }
	    }
	  }, {
	    key: 'handleModelChange',
	    value: function handleModelChange() {
	      var unreadCount = this.model.getUnreadCount();
	      this.setState({
	        items_unread: this.model.getNotifications('unread'),
	        items_read: this.model.getNotifications('read'),
	        unreadCount: unreadCount,
	        reachedEndOfFeed: this.model.reachedEndOfFeed,
	        error: false,
	        loading: false
	      });
	      pm.mediator.trigger('notifications:change:unread', unreadCount);
	    }
	  }, {
	    key: 'handleModelError',
	    value: function handleModelError() {
	      this.setState({
	        error: true
	      });
	    }
	  }, {
	    key: 'togglePanel',
	    value: function togglePanel() {
	      this.state.isPanelOpen ? this.closePanel() : this.openPanel();
	    }
	  }, {
	    key: 'closePanel',
	    value: function closePanel() {
	      this.setState({
	        isPanelOpen: false,
	        isReadPanelActive: false
	      }, this._unbindClosePanelIfClickedOutside);
	    }
	  }, {
	    key: 'openPanel',
	    value: function openPanel() {
	      var _this2 = this;

	      this.setState({
	        isPanelOpen: true
	      }, function () {
	        _this2._bindClosePanelIfClickedOutside();
	        _this2.model.fetchLatestServerNotifications();
	      });
	    }
	  }, {
	    key: 'handleActions',
	    value: function handleActions(payload) {
	      switch (payload.type) {
	        case 'SUBSCRIBE_TO_COLLECTION':
	          pm.subscriptionManger.subscribeToCollection(payload.id, payload.ownerId);
	          break;
	        case 'collection:share':
	          pm.mediator.trigger('api-library:show:collection', payload.instance.id);
	          break;
	        default:
	          console.error('Unhandled action from component', payload);
	      }
	    }
	  }, {
	    key: 'toggleReadPanel',
	    value: function toggleReadPanel() {
	      this.setState({
	        isReadPanelActive: !this.state.isReadPanelActive
	      });
	    }
	  }, {
	    key: 'loadMore',
	    value: function loadMore() {
	      this.model.fetchPreviousServerNotifications();
	    }
	  }, {
	    key: 'markAllAsRead',
	    value: function markAllAsRead() {
	      this.model.markAllNotificationsAsRead();
	    }
	  }, {
	    key: 'markNotificationAsRead',
	    value: function markNotificationAsRead(id) {
	      this.model.markNotification(id);
	    }
	  }, {
	    key: 'clickedOutsideElement',
	    value: function clickedOutsideElement(element, event) {
	      var eventTarget = event.target ? event.target : event.srcElement;
	      if (eventTarget && eventTarget.className === 'icon-delete') {
	        return false;
	      }
	      while (eventTarget != null) {
	        if (eventTarget === element) {
	          return false;
	        }
	        eventTarget = eventTarget.parentElement;
	      }
	      return true;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(_NotificationFeed2['default'], _extends({}, this.state, {
	        actionHandler: this.handleActions.bind(this),
	        togglePanel: this.togglePanel.bind(this),
	        toggleReadPanel: this.toggleReadPanel.bind(this),
	        markAllAsRead: this.markAllAsRead.bind(this),
	        markNotificationAsRead: this.markNotificationAsRead.bind(this),
	        loadMore: this.loadMore.bind(this)
	      }));
	    }
	  }]);

	  return NavbarNotification;
	})(_react2['default'].Component);

	exports['default'] = NavbarNotification;
	module.exports = exports['default'];

/***/ },
/* 336 */
/***/ function(module, exports) {

	var NotificationModel = Backbone.Model.extend({
	  /* ID ATTRIBUTE FOR SOURCE AND CLIENT */
	});

	var NotificationFeedModel = Backbone.Collection.extend({
	  model: NotificationModel,
	  SOURCE_SERVER: 'SERVER',
	  SOURCE_CLIENT: 'CLIENT',
	  BASE_API_ENDPOINT: '/api/notification',
	  DEFAULT_COUNT: 10,
	  socketConnected: false,
	  reachedEndOfFeed: false,
	  unreadServerCount: 0,

	  initialize: function(models, options) {
	    /****** REMOVE THIS ******/
	    pm.not = this;
	    $(document).bind('keydown', 'meta+r', function(e) {
	        chrome.runtime.reload();
	        return true;
	    });
	    /****** REMOVE THIS ******/

	    pm.mediator.on('socket:connected', function() {
	      this.socketConnected = true;
	      this.fetchLatestServerNotifications();
	    }.bind(this));

	    pm.mediator.on('socket:share', function(data) {
	      this.fetchLatestServerNotifications();
	    }.bind(this));

	    pm.mediator.on('socket:unshare', function(data) {
	      this.fetchLatestServerNotifications();
	    }.bind(this));

	    pm.mediator.on('notification:add', function(payload) {
	      this._addClientNotification(payload);
	    }.bind(this));

	    pm.subscriptionManger.on('change', function() {
	      this.trigger('change');
	    }.bind(this));

	    pm.mediator.on('deleteSyncedData', function() {
	      this._nukeEverything();
	    }.bind(this));
	  },

	  comparator: function(model) {
	    var source = model.get('source')
	      , data = model.get('data')
	      , date;

	    if(source === this.SOURCE_SERVER) {
	      date = new Date(data.meta.createdAt);
	    } else if(source === this.SOURCE_CLIENT) {
	      date = new Date(data.timestamp);
	    } else {
	      console.error('corrupted data');
	    }

	    return (-date.getTime());
	  },

	  fetchNotifications: function() {
	    this.fetchLatestServerNotifications();
	    this.fetchClientNotifications();
	  },

	  _getServerUrl: function(sinceId, maxId) {
	    var url = this.BASE_API_ENDPOINT +
	              '?count=' + this.DEFAULT_COUNT;

	    if(maxId) {
	      url += '&max_id=' + maxId;
	    }
	    if(sinceId) {
	      url += '&since_id=' + sinceId;
	    }

	    return url;
	  },

	  fetchLatestServerNotifications: function() {
	    if(!pm.syncSocket || !this.socketConnected) {
	      return;
	    }

	    var headers = {};
	    pm.syncManager.addUserAgent(headers);
	    pm.syncSocket.getWithHeaders(
	      this._getServerUrl(this.getSinceId() || 0, null),
	      null,
	      headers,
	      function(res) {

	        if(!res.data) {
	          this.trigger('server fetch error');
	          return;
	        }

	        var notifications = _.map(res.data, function(data) {
	          return this.prepareNotification(data, this.SOURCE_SERVER)
	        }.bind(this));

	        this.add(notifications);
	        this.unreadServerCount = res.meta.unread;

	        if(res.data.length < this.DEFAULT_COUNT) {
	          this.reachedEndOfFeed = true;
	        } else {
	          this.reachedEndOfFeed = false;
	        }

	        this.trigger('change');

	      }.bind(this)
	    )
	  },

	  fetchPreviousServerNotifications: function() {
	    if(!pm.syncSocket || !this.socketConnected) {
	      return;
	    }

	    var headers = {};
	    pm.syncManager.addUserAgent(headers);
	    pm.syncSocket.getWithHeaders(
	      this._getServerUrl(0, this.getMaxId()),
	      null,
	      headers,
	      function(res) {

	        if(!res.data) {
	          this.trigger('server fetch error');
	          return;
	        }

	        var notifications = _.map(res.data, function(data) {
	          return this.prepareNotification(data, this.SOURCE_SERVER)
	        }.bind(this));

	        this.add(notifications);

	        if(res.data.length < this.DEFAULT_COUNT) {
	          this.reachedEndOfFeed = true;
	        } else {
	          this.reachedEndOfFeed = false;
	        }

	        this.trigger('change');

	      }.bind(this)
	    )
	  },

	  fetchClientNotifications: function() {
	    pm.indexedDB.clientNotifications.getAllNotifications(
	      function(results) {
	        var notifications = _.map(results, function(result) {
	          return this.prepareNotification(result, this.SOURCE_CLIENT);
	        }.bind(this));

	        this.add(notifications);
	        this.trigger('change');
	      }.bind(this)
	    );
	  },

	  _addClientNotificationToStore: function(notification) {
	    pm.indexedDB.clientNotifications.addNotification(notification, function() {
	      // check only for error case?
	    });
	  },

	  _markClientNotificationAsReadInStore: function(notification) {
	    notification.read = true;
	    pm.indexedDB.clientNotifications.updateNotification(notification, function() {
	      // check only for error case?
	    });
	  },

	  getNotifications: function(type, source) {
	    var notifications = this.toJSON();

	    return _.chain(notifications)
	            .filter(function(notification) {
	              if(source) {
	                if(notification.source !== source) {
	                  return false;
	                }
	              }

	              var read;
	              if(notification.source === this.SOURCE_SERVER) {
	                read = notification.data.meta.read;
	              } else if(notification.source === this.SOURCE_CLIENT) {
	                read = notification.data.read;
	              } else {
	                console.error('Something went wrong');
	                return false;
	              }

	              if(read === undefined) {
	                return false;
	              }

	              if( (read && type === "read") ||
	                  (!read && type === "unread")) {
	                return true;
	              }
	            }.bind(this))
	            .map(function(notification) {
	              if (notification.source === this.SOURCE_SERVER &&
	                  notification.data.meta.action === 'share' &&
	                  notification.data.meta.model === 'collection') {
	                    notification.data.meta.isAlreadySubscribed = !(pm.subscriptionManger.subscribedTo.indexOf(notification.data.meta.instance.id) === -1)
	              }
	              return notification
	            }.bind(this))
	            .value()
	  },

	  _addClientNotification: function(payload, options) {
	    var unreadNotification = this._getUnreadClientNotificationOfType(payload.type);
	    if(unreadNotification) {
	      this._groupClientNotification(unreadNotification, payload);
	    } else {
	      var notification = {
	        type: payload.type,
	        id: payload.id,
	        data: [payload.id],
	        timestamp: payload.timestamp,
	        read: false
	      }
	      var annotatedNotification = this.prepareNotification(notification, this.SOURCE_CLIENT);
	      this.add(annotatedNotification);
	      this._addClientNotificationToStore(notification);
	    }

	    if(options && options.silent === false) {
	      return;
	    }
	    this.trigger('change');
	  },

	  _groupClientNotification: function(existingNotification, newPayload) {
	    var data = existingNotification.get('data');
	    data.data.push(newPayload.id);
	    data.timestamp = newPayload.timestamp
	    existingNotification.set('data', data);

	    // Updating local store
	    pm.indexedDB.clientNotifications.updateNotification(data, function() {
	    });
	  },

	  getUnreadCount: function() {
	    return _.reduce(this.models, function(total, notification) {
	      var source = notification.get('source');
	      var data = notification.get('data');
	      if(source === this.SOURCE_CLIENT) {
	        return total + (data.read ? 0 : 1);
	      } else {
	        return total;
	      }
	    }.bind(this), this.unreadServerCount);
	  },

	  _getUnreadClientNotificationOfType: function(type) {
	    // supports only client notifications now
	    if(!type) {
	      return false;
	    }

	    return _.find(this.models, function(notification){
	      if (notification.get('source') !== this.SOURCE_CLIENT ||
	          notification.get('data').type !== type ||
	          notification.get('data').read !== false ) {
	        return false;
	      }
	      return true;
	    }.bind(this));
	  },

	  _getNotification: function(id) {
	    return _.find(this.models, function(model) {
	      if(model.get('source') === this.SOURCE_SERVER) {
	        return (model.id === id);
	      } else {
	        return (model.id === id);
	      }
	    }.bind(this))
	  },

	  // mark a single notification as read or unread
	  markNotification: function(id, isUnread) {
	    if(!id) {
	      return
	    }

	    var notification = this._getNotification(id)
	    if(!notification) {
	      return;
	    }

	    var source = notification.get('source');
	    if(source === this.SOURCE_SERVER) {
	      return this._markServerNotification(id, isUnread);
	    } else if(source === this.SOURCE_CLIENT) {
	      return this._markClientNotification(id, isUnread);
	    } else {
	      console.error('corrupted notification data', notification);
	    }
	  },

	  _updateServerNotificationAsRead: function(id, isUnread) {
	    var notification = this._getNotification(id);
	    var data = notification.get('data');
	    data.meta.read = !isUnread;
	    notification.set('data', data);
	  },

	  _updateClientNotificationAsRead: function(id, isUnread) {
	    var notification = this._getNotification(id);
	    var data = notification.get('data');
	    data.read = !isUnread;
	    notification.set('data', data);
	  },

	  _markServerNotification: function(id, isUnread) {
	    var endpoint = this.BASE_API_ENDPOINT + '/' + id;
	    var body = {
	      'read': !isUnread
	    };
	    this._updateServerNotificationAsRead(id, isUnread);
	    this.unreadServerCount--;
	    this.trigger('change');
	    pm.syncSocket.put(
	      endpoint,
	      body,
	      function(res, jwr) {
	        if(jwr.statusCode !== 200) {
	          pm.alerts.error("Unable to mark notification as read");
	        }
	      }.bind(this)
	    )
	  },

	  _markClientNotification: function(id, isUnread) {
	    this._updateClientNotificationAsRead(id, isUnread);
	    this.trigger('change');
	    var notification = this._getNotification(id);
	    this._markClientNotificationAsReadInStore(notification.get('data'));
	  },

	  _getNotificationIds: function(type, source) {
	    var notifications = this.getNotifications(type, source);

	    return _.map(notifications, function(notification) {
	      return notification.id;
	    }.bind(this))
	  },

	  // mark all as read
	  markAllNotificationsAsRead: function() {
	    this._markAllServerNotificationsAsRead();
	    this._markAllClientNotificationsAsRead();
	  },

	  _markAllServerNotificationsAsRead: function() {
	    var unreadServerIds = this._getNotificationIds('unread', this.SOURCE_SERVER);

	    if(_.isEmpty(unreadServerIds)) {
	      return;
	    }

	    _.each(unreadServerIds, function(id){
	      this._updateServerNotificationAsRead(id, false);
	    }.bind(this));

	    this.unreadServerCount -= unreadServerIds.length;

	    this.trigger('change');

	    var body = {
	      revisions: unreadServerIds,
	      read: true
	    }

	    pm.syncSocket.put(
	      this.BASE_API_ENDPOINT,
	      body,
	      function(res, jwr) {
	        if(jwr.statusCode !== 200) {
	          pm.alerts.error("Unable to mark all notifications as read");
	        }
	      }.bind(this)
	    )
	  },

	  _markAllClientNotificationsAsRead: function() {
	    var unreadClientIds = this._getNotificationIds('unread', this.SOURCE_CLIENT);

	    if(_.isEmpty(unreadClientIds)) {
	      return;
	    }

	    _.each(unreadClientIds, function(id){
	      this._updateClientNotificationAsRead(id, false);
	    }.bind(this));

	    this.trigger('change');

	    _.each(unreadClientIds, function(id){
	      var notification = this._getNotification(id);
	      this._markClientNotificationAsReadInStore(notification.get('data'));
	    }.bind(this));
	  },

	  prepareNotification: function(data, source) {
	    var id;
	    if(source === this.SOURCE_SERVER) {
	      id = data.revision;
	    } else {
	      id = data.id;
	    }

	    return {
	      id: id,
	      source: source,
	      data: data
	    }
	  },

	  _getAllServerNotifications: function() {
	    return _.chain(this.toJSON())
	            .filter(function(notification) {
	              return notification.source === this.SOURCE_SERVER
	            }.bind(this))
	            .map(function(notification) {
	              return notification.id
	            }.bind(this))
	            .value()
	  },

	  getSinceId: function() {
	    return _.first(this._getAllServerNotifications())
	  },

	  getMaxId: function() {
	    return _.last(this._getAllServerNotifications())
	  },

	  _nukeClientNotificationsInStore: function() {
	    pm.indexedDB.clientNotifications.deleteAllNotifications();
	  },

	  _nukeEverything: function() {
	    this.reset();
	    this._nukeClientNotificationsInStore();
	  },

	});

	module.exports = NotificationFeedModel;


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _reactAddons = __webpack_require__(210);

	var _reactAddons2 = _interopRequireDefault(_reactAddons);

	var _NotificationIcon = __webpack_require__(338);

	var _NotificationIcon2 = _interopRequireDefault(_NotificationIcon);

	var _NotificationPanel = __webpack_require__(339);

	var _NotificationPanel2 = _interopRequireDefault(_NotificationPanel);

	var NotificationFeed = (function (_React$Component) {
	  _inherits(NotificationFeed, _React$Component);

	  function NotificationFeed(props) {
	    _classCallCheck(this, NotificationFeed);

	    _get(Object.getPrototypeOf(NotificationFeed.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(NotificationFeed, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {}
	  }, {
	    key: 'render',
	    value: function render() {
	      return _reactAddons2['default'].createElement(
	        'div',
	        { className: 'notification-feed' },
	        _reactAddons2['default'].createElement(_NotificationIcon2['default'], {
	          unreadCount: this.props.unreadCount,
	          togglePanel: this.props.togglePanel
	        }),
	        _reactAddons2['default'].createElement(_NotificationPanel2['default'], this.props)
	      );
	    }
	  }]);

	  return NotificationFeed;
	})(_reactAddons2['default'].Component);

	exports['default'] = NotificationFeed;
	module.exports = exports['default'];

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var NotificationIcon = (function (_React$Component) {
	  _inherits(NotificationIcon, _React$Component);

	  function NotificationIcon(props) {
	    _classCallCheck(this, NotificationIcon);

	    _get(Object.getPrototypeOf(NotificationIcon.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(NotificationIcon, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'notification-icon', onClick: this.props.togglePanel },
	        this.props.unreadCount ? _react2['default'].createElement(
	          'div',
	          { className: 'notification-unread-wrapper' },
	          _react2['default'].createElement(
	            'span',
	            { className: 'unread-count' },
	            this.props.unreadCount
	          )
	        ) : _react2['default'].createElement(
	          'div',
	          { className: 'notification-icon-wrapper' },
	          _react2['default'].createElement('span', { className: 'icon-navbar-notifications' })
	        )
	      );
	    }
	  }]);

	  return NotificationIcon;
	})(_react2['default'].Component);

	exports['default'] = NotificationIcon;
	module.exports = exports['default'];

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(183);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _NotificationItem = __webpack_require__(340);

	var _NotificationItem2 = _interopRequireDefault(_NotificationItem);

	var NotificationPanel = (function (_React$Component) {
	  _inherits(NotificationPanel, _React$Component);

	  function NotificationPanel(props) {
	    _classCallCheck(this, NotificationPanel);

	    _get(Object.getPrototypeOf(NotificationPanel.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(NotificationPanel, [{
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      var panelContainerClasses = (0, _classnames2['default'])('notification-panel', {
	        'panel-open': this.props.isPanelOpen
	      });

	      var readPanelClasses = (0, _classnames2['default'])('panel-read', {
	        'active': this.props.isReadPanelActive
	      });

	      var markAllReadClasses = (0, _classnames2['default'])('mark-all-read', {
	        'hidden': !this.props.items_unread.length
	      });

	      return _react2['default'].createElement(
	        'div',
	        { className: panelContainerClasses },
	        _react2['default'].createElement(
	          'div',
	          { className: 'panel-unread' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'panel-header' },
	            _react2['default'].createElement(
	              'span',
	              { className: 'panel-heading' },
	              'Notifications'
	            ),
	            _react2['default'].createElement(
	              'span',
	              { className: markAllReadClasses, onClick: this.props.markAllAsRead },
	              'mark all as read'
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'panel-content' },
	            !_.isEmpty(this.props.items_unread) && this.props.items_unread.map(function (item) {
	              var key = item.source === 'SERVER' ? item.data.meta.revision : item.data.id;
	              return _react2['default'].createElement(_NotificationItem2['default'], {
	                notification: item,
	                key: key,
	                actionHandler: _this.props.actionHandler,
	                markNotificationAsRead: _this.props.markNotificationAsRead
	              });
	            }),
	            !_.isEmpty(this.props.items_unread) && !this.props.reachedEndOfFeed && _react2['default'].createElement(
	              'div',
	              { className: 'load-more' },
	              _react2['default'].createElement(
	                'span',
	                { onClick: this.props.loadMore },
	                'load more'
	              )
	            ),
	            _.isEmpty(this.props.items_unread) && _react2['default'].createElement(
	              'div',
	              { className: 'notification-empty-message' },
	              'No new notifications'
	            )
	          ),
	          _react2['default'].createElement('div', { className: 'panel-spacer' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: readPanelClasses },
	          _react2['default'].createElement(
	            'div',
	            { className: 'panel-header', onClick: this.props.toggleReadPanel },
	            _react2['default'].createElement(
	              'span',
	              { className: 'panel-heading' },
	              'Previously read'
	            ),
	            _react2['default'].createElement('span', { className: 'icon-delete close-panel', onClick: this.props.toggleReadPanel })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'panel-content' },
	            !_.isEmpty(this.props.items_read) && this.props.items_read.map(function (item) {
	              var key = item.source === 'SERVER' ? item.data.meta.revision : item.data.id;
	              return _react2['default'].createElement(_NotificationItem2['default'], {
	                notification: item,
	                key: key,
	                actionHandler: _this.props.actionHandler,
	                markNotificationAsRead: _this.props.markNotificationAsRead
	              });
	            }),
	            !_.isEmpty(this.props.items_read) && !this.props.reachedEndOfFeed && _react2['default'].createElement(
	              'div',
	              { className: 'load-more' },
	              _react2['default'].createElement(
	                'span',
	                { onClick: this.props.loadMore },
	                'load more'
	              )
	            ),
	            _.isEmpty(this.props.items_read) && _react2['default'].createElement(
	              'div',
	              { className: 'notification-empty-message' },
	              'No read notifications'
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return NotificationPanel;
	})(_react2['default'].Component);

	exports['default'] = NotificationPanel;
	module.exports = exports['default'];

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _ServerNotification = __webpack_require__(341);

	var _ClientNotification = __webpack_require__(343);

	var NotificationItem = (function (_React$Component) {
	  _inherits(NotificationItem, _React$Component);

	  function NotificationItem(props) {
	    _classCallCheck(this, NotificationItem);

	    _get(Object.getPrototypeOf(NotificationItem.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(NotificationItem, [{
	    key: 'render',
	    value: function render() {
	      var notification = this.props.notification;
	      if (notification.source === 'SERVER' && notification.data.meta.model === 'collection' && notification.data.meta.action === 'share') {
	        return _react2['default'].createElement(_ServerNotification.CollectionShare, _extends({}, notification.data, {
	          actionHandler: this.props.actionHandler,
	          markNotificationAsRead: this.props.markNotificationAsRead
	        }));
	      }

	      if (notification.source === 'SERVER' && notification.data.meta.model === 'collection' && notification.data.meta.action === 'unshare') {
	        return _react2['default'].createElement(_ServerNotification.CollectionUnshare, _extends({}, notification.data, {
	          actionHandler: this.props.actionHandler,
	          markNotificationAsRead: this.props.markNotificationAsRead
	        }));
	      }

	      if (notification.source === 'CLIENT' && notification.data.type === 'INTERCEPTOR_CAPTURE_HISTORY') {
	        return _react2['default'].createElement(_ClientNotification.InterceptorCaptureHistory, _extends({}, notification.data, {
	          actionHandler: this.props.actionHandler,
	          markNotificationAsRead: this.props.markNotificationAsRead
	        }));
	      }

	      return false;
	    }
	  }]);

	  return NotificationItem;
	})(_react2['default'].Component);

	exports['default'] = NotificationItem;

	NotificationItem.propTypes = {
	  notification: _react2['default'].PropTypes.object.isRequired
	};
	module.exports = exports['default'];

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _NotificationItemComponents = __webpack_require__(342);

	var CollectionShare = (function (_React$Component) {
	  _inherits(CollectionShare, _React$Component);

	  function CollectionShare(props) {
	    _classCallCheck(this, CollectionShare);

	    _get(Object.getPrototypeOf(CollectionShare.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(CollectionShare, [{
	    key: 'handleClick',
	    value: function handleClick(e) {
	      var payload = {
	        type: 'collection:share',
	        instance: this.props.meta.instance,
	        owner: this.props.meta.owner
	      };
	      if (this.props.actionHandler) {
	        this.props.actionHandler(payload);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'notification-item-wrapper collection-share', onClick: this.handleClick.bind(this) },
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-1' },
	          _react2['default'].createElement(_NotificationItemComponents.Icon, { type: 'user' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-2' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'notification-item-body' },
	            _react2['default'].createElement(_NotificationItemComponents.User, this.props.meta.user),
	            _react2['default'].createElement(
	              'span',
	              null,
	              ' shared a collection'
	            ),
	            _react2['default'].createElement(
	              'span',
	              { className: 'notification-item-collection-name' },
	              ' ',
	              this.props.meta.instance.name
	            ),
	            _react2['default'].createElement(
	              'span',
	              null,
	              ' with you'
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'notification-item-body' },
	            _react2['default'].createElement(_NotificationItemComponents.SubscribeButton, {
	              actionHandler: this.props.actionHandler,
	              id: this.props.meta.instance.id,
	              ownerId: this.props.meta.owner.id,
	              isAlreadySubscribed: this.props.meta.isAlreadySubscribed
	            })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'notification-item-meta' },
	            _react2['default'].createElement(_NotificationItemComponents.Time, { timestamp: this.props.meta.createdAt })
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-3' },
	          _react2['default'].createElement(_NotificationItemComponents.DismissButton, {
	            id: this.props.revision,
	            markNotificationAsRead: this.props.markNotificationAsRead
	          })
	        )
	      );
	    }
	  }]);

	  return CollectionShare;
	})(_react2['default'].Component);

	var CollectionUnshare = (function (_React$Component2) {
	  _inherits(CollectionUnshare, _React$Component2);

	  function CollectionUnshare(props) {
	    _classCallCheck(this, CollectionUnshare);

	    _get(Object.getPrototypeOf(CollectionUnshare.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(CollectionUnshare, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'notification-item-wrapper collection-share' },
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-1' },
	          _react2['default'].createElement(_NotificationItemComponents.Icon, { type: 'user' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-2' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'notification-item-body' },
	            _react2['default'].createElement(_NotificationItemComponents.User, this.props.meta.user),
	            _react2['default'].createElement(
	              'span',
	              null,
	              ' made collection '
	            ),
	            _react2['default'].createElement(
	              'span',
	              { className: 'notification-item-collection-name' },
	              ' ',
	              this.props.meta.instance.name
	            ),
	            _react2['default'].createElement(
	              'span',
	              null,
	              ' private'
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'notification-item-meta' },
	            _react2['default'].createElement(_NotificationItemComponents.Time, { timestamp: this.props.meta.createdAt })
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-3' },
	          _react2['default'].createElement(_NotificationItemComponents.DismissButton, {
	            id: this.props.revision,
	            markNotificationAsRead: this.props.markNotificationAsRead
	          })
	        )
	      );
	    }
	  }]);

	  return CollectionUnshare;
	})(_react2['default'].Component);

	exports.CollectionShare = CollectionShare;
	exports.CollectionUnshare = CollectionUnshare;

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(183);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Icon = (function (_React$Component) {
	  _inherits(Icon, _React$Component);

	  function Icon(props) {
	    _classCallCheck(this, Icon);

	    _get(Object.getPrototypeOf(Icon.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Icon, [{
	    key: 'render',
	    value: function render() {
	      var icon = undefined;
	      switch (this.props.type) {
	        case 'user':
	          icon = _react2['default'].createElement('span', { className: 'icon-user-avatar-default' });break;
	        case 'interceptor':
	          icon = _react2['default'].createElement('span', { className: 'icon-interceptor-avatar' });break;
	      }
	      return _react2['default'].createElement(
	        'div',
	        { className: 'notification-item-icon-wrapper' },
	        icon
	      );
	    }
	  }]);

	  return Icon;
	})(_react2['default'].Component);

	var User = (function (_React$Component2) {
	  _inherits(User, _React$Component2);

	  function User(props) {
	    _classCallCheck(this, User);

	    _get(Object.getPrototypeOf(User.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(User, [{
	    key: 'render',
	    value: function render() {
	      var displayName = this.props.name || this.props.username;
	      return _react2['default'].createElement(
	        'span',
	        { className: 'notification-item-user' },
	        displayName
	      );
	    }
	  }]);

	  return User;
	})(_react2['default'].Component);

	var Time = (function (_React$Component3) {
	  _inherits(Time, _React$Component3);

	  function Time(props) {
	    _classCallCheck(this, Time);

	    _get(Object.getPrototypeOf(Time.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Time, [{
	    key: 'render',
	    value: function render() {
	      var date = new Date(this.props.timestamp),
	          formattedDate = undefined;

	      if (date.isToday()) {
	        formattedDate = date.format('Today at {h}:{mm}{tt}');
	      } else if (date.isYesterday()) {
	        formattedDate = date.format('Yesterday at {h}:{mm}{tt}');
	      } else {
	        formattedDate = date.format('{Month} {d}, {yyyy} at {h}:{mm}{tt}');
	      }
	      return _react2['default'].createElement(
	        'span',
	        { className: 'notification-item-time' },
	        formattedDate
	      );
	    }
	  }]);

	  return Time;
	})(_react2['default'].Component);

	var DismissButton = (function (_React$Component4) {
	  _inherits(DismissButton, _React$Component4);

	  function DismissButton(props) {
	    _classCallCheck(this, DismissButton);

	    _get(Object.getPrototypeOf(DismissButton.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(DismissButton, [{
	    key: 'handleClick',
	    value: function handleClick(e) {
	      e.stopPropagation();
	      if (this.props.markNotificationAsRead) {
	        this.props.markNotificationAsRead(this.props.id);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'span',
	        { className: 'notification-item-dismiss', onClick: this.handleClick.bind(this) },
	        _react2['default'].createElement('span', { className: 'icon-delete' })
	      );
	    }
	  }]);

	  return DismissButton;
	})(_react2['default'].Component);

	var SubscribeButton = (function (_React$Component5) {
	  _inherits(SubscribeButton, _React$Component5);

	  function SubscribeButton(props) {
	    _classCallCheck(this, SubscribeButton);

	    _get(Object.getPrototypeOf(SubscribeButton.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(SubscribeButton, [{
	    key: 'handleClick',
	    value: function handleClick(e) {
	      e.stopPropagation();
	      var payload = {
	        id: this.props.id,
	        ownerId: this.props.ownerId,
	        type: 'SUBSCRIBE_TO_COLLECTION'
	      };

	      if (this.props.actionHandler) {
	        this.props.actionHandler(payload);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var isAlreadySubscribed = !!this.props.isAlreadySubscribed;
	      var buttonClasses = (0, _classnames2['default'])('notification-item-subscribe-button', {
	        'subscribed': isAlreadySubscribed
	      });
	      return _react2['default'].createElement(
	        'span',
	        { className: buttonClasses },
	        isAlreadySubscribed ? _react2['default'].createElement(
	          'span',
	          { className: 'notification-item-button-text subscribed' },
	          'You subscribed'
	        ) : _react2['default'].createElement(
	          'span',
	          { className: 'notification-item-button-text subscribe', onClick: this.handleClick.bind(this) },
	          'Subscribe'
	        )
	      );
	    }
	  }]);

	  return SubscribeButton;
	})(_react2['default'].Component);

	exports.Icon = Icon;
	exports.DismissButton = DismissButton;
	exports.SubscribeButton = SubscribeButton;
	exports.User = User;
	exports.Time = Time;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(29);

	var _react2 = _interopRequireDefault(_react);

	var _NotificationItemComponents = __webpack_require__(342);

	var InterceptorCaptureHistory = (function (_React$Component) {
	  _inherits(InterceptorCaptureHistory, _React$Component);

	  function InterceptorCaptureHistory(props) {
	    _classCallCheck(this, InterceptorCaptureHistory);

	    _get(Object.getPrototypeOf(InterceptorCaptureHistory.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(InterceptorCaptureHistory, [{
	    key: 'handleClick',
	    value: function handleClick(e) {
	      var payload = {
	        type: 'interceptor:capture_history',
	        id: this.props.id,
	        data: this.props.data
	      };
	      if (this.props.actionHandler) {
	        this.props.actionHandler(payload);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var count = this.props.data.length;
	      var requests = count === 1 ? 'request' : 'requests';
	      return _react2['default'].createElement(
	        'div',
	        { className: 'notification-item-wrapper collection-share', onClick: this.handleClick.bind(this) },
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-1' },
	          _react2['default'].createElement(_NotificationItemComponents.Icon, { type: 'interceptor' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-2' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'notification-item-body' },
	            _react2['default'].createElement(
	              'span',
	              null,
	              'Interceptor added ',
	              count,
	              ' ',
	              requests,
	              ' to History'
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'notification-item-meta' },
	            _react2['default'].createElement(_NotificationItemComponents.Time, { timestamp: this.props.timestamp })
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'notification-item-column-3' },
	          _react2['default'].createElement(_NotificationItemComponents.DismissButton, {
	            id: this.props.id,
	            markNotificationAsRead: this.props.markNotificationAsRead
	          })
	        )
	      );
	    }
	  }]);

	  return InterceptorCaptureHistory;
	})(_react2['default'].Component);

	exports.InterceptorCaptureHistory = InterceptorCaptureHistory;

/***/ },
/* 344 */
/***/ function(module, exports) {

	var User = Backbone.Model.extend({
		defaults: function() {
			return {
				"id": 0,
				"name": "",
				"username_email": "",
				"access_token": "",
				"refresh_token": "",
				"expires_in": 0,
				"logged_in_at": 0,
				"link": "",
				"retrievedData": false,
				"expiredToken": true,
				"collections": [],
				"organizations": [],
				"teamSyncEnabled": false,
				"syncEnabled": false,
				"syncInvited": false,
				"baseEulaAccepted": false,
				"syncserver_url": null
			};
		},

		setDefaults: function() {
			this.set("id", 0);
			this.set("name", "");
			this.set("username_email", "");
			this.set("access_token", "");
			this.set("refresh_token", "");
			this.set("expires_in", 0);
			this.set("link", "");
			this.set("retrievedData", false);

	        var defaultSync = false;
	        if(postman_env === "sync_dev") {
	            defaultSync = true;
	        }
			this.set("baseEulaAccepted", defaultSync);
			this.set("syncEnabled", defaultSync);
			this.set("syncInvited", defaultSync);
			this.set("teamSyncEnabled", false);
			this.set("syncserver_url", null);

			this.saveUserObject(this.toJSON());
		},

		//not used
		renewToken: function() {
			var model = this;
			pm.api.exchangeRefreshToken(function() {
				model.set("expiredToken",false);
				model.fetchUserData();
				model.setupSync();
			});
		},

		initialize: function() {
			var model = this;
			this.freshSignIn = false; //used to determine whether to force sync or not
			if(!pm.hasOwnProperty("user")) {
				pm.user = model;
			}
			pm.storage.getValue("user", function(ustring) {
				if (ustring) {
					var u = {};
					if(postman_electron || (typeof ustring === "string")) {
						try {
							u = JSON.parse(ustring);
						}
						catch (e) {
							console.log("Could not parse user data");
							return;
						}
					}
					else {
						u = ustring;
					}

					model.set("id", u.id);
					model.set("name", u.name);
					model.set("access_token", u.access_token);
					model.set("refresh_token", u.refresh_token);
					model.set("retrievedData", false);

					//never take syncserver URL from settings. always wait for godserver to return the correct URL
					//model.set("syncserver_url", u.syncserver_url);

					/*if(model.get("syncserver_url") && model.get("syncserver_url").indexOf("http")==0) {
	            		postman_syncserver_url = model.get("syncserver_url");
	        		}*/

					if(u.hasOwnProperty("username_email")) {
						model.set("username_email", u.username_email);
					}
					else {
						model.set("username_email", "");
					}

	                if(postman_env === "sync_dev" || postman_env === "sync_stage") {
	                    model.set("syncInvited", true);
	                    model.set("syncEnabled", true);
	                    model.set("baseEulaAccepted", true);
	                }
	                else {
	                    model.set("syncInvited", u.syncInvited);
	                    model.set("syncEnabled", u.syncEnabled);
	                    model.set("baseEulaAccepted", u.baseEulaAccepted);
	                }

	                model.set("teamSyncEnabled", u.teamSyncEnabled);
	                if(u.teamSyncEnabled) {
	                    pm.mediator.trigger("teamSyncEnabled");
	                }

	                pm.mediator.trigger("isTeamMember", model.get("teamSyncEnabled") && model.get("syncEnabled"));

					var expires_in = parseInt(u.expires_in, 10);

					model.set("expires_in", expires_in);
					model.set("logged_in_at", u.logged_in_at);

					var isTokenValid = model.isTokenValid();

					if(!isTokenValid) {
						model.set("expiredToken",true);
					}
					else {
						model.set("expiredToken",false);
					}

					//if sync was enabled, set status to offline instead of sync off
					//but don't start to sync
					if(model.get("syncEnabled")) {
						pm.mediator.trigger("showStatus:notConnected");
					} 

					if (u.id !== 0) {
						//always refresh token on login (to check for sync)
						if(!isTokenValid) {
							pm.api.exchangeRefreshToken(function() {
								model.set("expiredToken",false);
								model.fetchUserData();
							});
						}
						else {
							model.fetchUserData();
						}
					}
					else {
						model.logoutFromGoogle();
					}
				}
				else {
					model.logoutFromGoogle();
				}
				pm.mediator.trigger("showPostman3Splash", false);
			});

			pm.mediator.on("receiveTokenFromPurchaseFlow", this.receiveTokenFromPurchaseFlow, this);
			pm.mediator.on("refreshSharedCollections", this.getCollections, this);
			pm.mediator.on("downloadSharedCollection", this.onDownloadSharedCollection, this);
			pm.mediator.on("deleteSharedCollection", this.onDeleteSharedCollection, this);
			pm.mediator.on("invalidAccessToken", this.onTokenNotValid, this);
			pm.mediator.on("invalidRefreshToken", this.onTokenNotValid, this);
			pm.mediator.on("downloadAllSharedCollections", this.onDownloadAllSharedCollections, this);
			pm.mediator.on("reenteredPassword", this.useNewPassword, this);
			pm.mediator.on("appOnline",this.onAppOnline, this);

			pm.appWindow.trigger("registerInternalEvent", "loggedIn", this.onLoginFromNewWindow, this);
			pm.appWindow.trigger("registerInternalEvent", "loggedOut", this.onLogoutFromNewWindow, this);

			this.on("startGoogleLogin", this.loginWithGoogle, this);
			this.on("signinSuccess", this.handleSuccessfulLogin, this);

			pm.mediator.on("onMessageExternal", function(request, sender, sendResponse) {
				if (request) {
					if (request.postmanMessage) {
						if (request.postmanMessage.type === "token") {
							pm.mediator.trigger("receiveTokenFromPurchaseFlow", request.postmanMessage.token);
							sendResponse({"result":"success"});
						}
					}
				}
			});
		},

		onAppOnline: function() {
			if(this.get("retrievedData") == false) {
				this.fetchUserData();
			}
		},

		saveUserObject: function(tojson) {
			if(postman_electron) {
				var strToSave;
				strToSave = JSON.stringify(tojson);

				var user = {
					"user": strToSave
				};

				pm.storage.setValue(user, function() {
					console.log("User saved");
				})
			}
			else {
				var user = {
					"user": tojson
				};
				pm.storage.setValue(user, function() {
					console.log("User saved");
				})
			}
		},
		onLoginFromNewWindow: function() {
			this.initialize();
		},

		onLogoutFromNewWindow: function() {
			this.logout(false);
		},

		isTokenValid: function() {
			var expiresIn = this.get("expires_in"); //this is in seconds!
			var loggedInAt = this.get("logged_in_at");

			var now = new Date().getTime();

			//convert to millis
			expiresIn *= 1000;

			if (loggedInAt + expiresIn > now) {
				return true;
			}
			else {
				console.log("Old access token not valid.");
				console.log("Expires_in: " + expiresIn);
				console.log("LoggedInAt: " + loggedInAt);
				console.log("Now: " + now);
				return false;
			}
		},

		onTokenNotValid: function() {
			// Indicate error
			var oldThis = this;
			if(pm.user.id != "0") {
				pm.api.getUsernameEmailForId(pm.user.id, function(data) {
					if(data && data.result !== "fail") {
						oldThis.trigger("startReenterPassword", data.id, data.username);
					}
				});
			}
			pm.tracker.forceTrackEvent("account", "signed_out_unintentional", pm.user.id);
		},

		isLoggedIn: function() {
			return (this.get("id") !== 0 && this.get("expiredToken") !== true);
		},

		useNewPassword: function(username, password, id) {
			var model = this;

			pm.api.signInUser(username, password, id, function(data) {
				model.set("id", data.user_id);
				model.set("name", data.name);
				model.set("access_token", data.access_token);
				if(data.refresh_token) {
					model.set("refresh_token", data.refresh_token);
				}

				if(data.username_email) {
					//the username or email used to sign in
					model.set("username_email", data.username_email);
				}

				model.set("expires_in", data.expires_in);
				model.set("logged_in_at", new Date().getTime());
				model.set("expiredToken", false);

				if(postman_env==="sync_stage" || postman_env=="sync_dev") {
					data.sync_invited="1";
					data.sync_enabled="1";
				}
				model.set("syncInvited", (data.sync_invited+"")=="1");
				model.set("syncEnabled", (data.sync_enabled+"")=="1");
				model.set("baseEulaAccepted", data.base_eula_accepted=="1");
				pm.mediator.trigger("setSync",model.get("syncEnabled"));

				model.saveUserObject(model.toJSON());

				model.fetchUserData();

				pm.tracker.trackEvent('user', 'login', 'header');
				pm.appWindow.trigger("sendMessageObject", "loggedIn");
			});
		},

		setAccessToken: function(data) {
			var model = this;

			var expires_in = parseInt(data.expires_in, 10);

			model.set("access_token", data.access_token);
			if(data.refresh_token) {
				model.set("refresh_token", data.refresh_token);
			}
			model.set("expires_in", expires_in);
			model.set("logged_in_at", new Date().getTime());
			model.set("expiredToken",false);

			if(postman_env=="sync_stage" || postman_env=="sync_dev") {
				data.syncEnabled = 1;
				data.syncInvited = 1;
			}
			model.set("syncInvited", data.syncInvited=="1");
			model.set("syncEnabled", data.syncEnabled=="1");
			pm.mediator.trigger("setSync",model.get("syncEnabled"));

			model.set("baseEulaAccepted", data.baseEulaAccepted=="1");

			this.saveUserObject(model.toJSON());
		},

		setSyncEnabled: function(syncEnabled) {
			var model = this;
			model.set("syncEnabled", syncEnabled);
			this.saveUserObject(model.toJSON());
		},

		setBaseEulaAccepted: function(bea) {
			var model = this;
			model.set("baseEulaAccepted", bea);
			this.saveUserObject(model.toJSON());
		},

		getRemoteIdForCollection: function(id) {
			var collections = this.get("collections");
			var index = arrayObjectIndexOf(collections, id, "id");

			if (index >= 0) {
				return collections[index].remote_id;
			}
			else {
				return 0;
			}
		},

		fetchUserData: function() {
			var model = this;
			model.set("retrievedData", false);
			model.getCollections();
			model.getPurchases();
			model.getSyncData();
			model.getOrganizations();
			model.checkBaseEula();
			model.trigger("login", model);
		},

		/**
		* ONLY called when the user enters his password and signs in
		*/
		handleSuccessfulLogin: function(data) {
			var model = this;
			this.freshSignIn = true;
			model.set("id", data.user_id);
			model.set("name", data.name);
			model.set("access_token", data.access_token);
			if(data.refresh_token) {
				model.set("refresh_token", data.refresh_token);
			}

			if(data.username_email) {
				//the username or email used to sign in
				model.set("username_email", data.username_email);
			}

			//reset sync to 0
			pm.indexedDB.deleteAllSince(function() {});
			pm.indexedDB.updateLastSynced(1, function(){});
			pm.settings.setSetting("enableSync", false);
			pm.settings.setSetting("syncedOnce", false);
			pm.settings.setSetting("syncedEver", false);

			model.set("expires_in", data.expires_in);
			model.set("logged_in_at", new Date().getTime());
			model.set("expiredToken", false);

			if(postman_env==="sync_stage" || postman_env=="sync_dev") {
				data.sync_invited="1";
				data.sync_enabled="1";
			}
			model.set("syncInvited", (data.sync_invited+"")=="1");
			model.set("syncEnabled", (data.sync_enabled+"")=="1");
			model.set("baseEulaAccepted", data.base_eula_accepted=="1");


			model.saveUserObject(model.toJSON());
			model.fetchUserData();

			pm.tracker.trackEvent('user', 'login', 'header');
			pm.appWindow.trigger("sendMessageObject", "loggedIn");
		},

		loginWithURL: function(url) {
			var model = this;
			var appId = getAppId();
			pm.browserLogin.openLoginFlow(url, function(redirect_url) {
					model.trigger("revertGoogleButtonText");
					if (window.chrome && window.chrome.runtime && window.chrome.runtime.error) {
						model.trigger("logout", model);
						pm.alerts.error("Could not complete login flow. Please ensure network connectivity.");
					}
					else if(!redirect_url) {
						pm.alerts.error("Could not complete OAuth2.0 sign in.");
					}
					else {
						//reset sync to 0
						model.freshSignIn = true;
						pm.indexedDB.deleteAllSince(function() {});
						pm.indexedDB.updateLastSynced(1, function(){});
						pm.settings.setSetting("enableSync", false);
						pm.settings.setSetting("syncedOnce", false);
						pm.settings.setSetting("syncedEver", false);

						model.trigger("closeSignInModal");
						var params = getUrlVars(redirect_url, true);

						model.set("syncEnabled", pm.settings.getSetting("enableSync"));
						pm.mediator.trigger("setSync", model.get("syncEnabled"));


						model.set("id", params.user_id);
						model.set("name", decodeURIComponent(params.name));
						model.set("access_token", decodeURIComponent(params.access_token));
						if(params.refresh_token) {
							model.set("refresh_token", decodeURIComponent(params.refresh_token));
						}
						model.set("expires_in", parseInt(params.expires_in, 10));
						model.set("logged_in_at", new Date().getTime());
						model.set("expiredToken", false);
						model.set("syncInvited", params.sync_invited=="1");
						model.set("syncEnabled", params.sync_enabled=="1");
						model.set("baseEulaAccepted", params.base_eula_accepted=="1");

						if(params.new_user === "1") {
							//show enable sync modal
							//user created an account through google
							pm.mediator.trigger("showSyncInvitePopup");
						}

						pm.mediator.trigger("setSync",model.get("syncEnabled"));

						model.saveUserObject(model.toJSON());

						model.fetchUserData();

						pm.tracker.trackEvent('user', 'login', 'header');
						pm.appWindow.trigger("sendMessageObject", "loggedIn");
						
						/* Extract token from redirect_url */
					}
				}
			);
		},

		//Call this to login with Google directly
		loginWithGoogle: function() {
			try {
				this.loginWithURL(pm.webUrl + '/client-login-appid?app_id=' + getAppId());
			}
			catch(e) {
				//user auth required. can ignore
			}
		},

		logoutFromGoogle: function() {
			try {
				chrome.identity.launchWebAuthFlow({'url': 'https://accounts.google.com/Logout?continue=http://google.com', 'interactive': false}, function(){
					if (chrome.runtime.lastError) {
						console.log("Google logout");
					}
				});
			}
			catch(e) {
				//now what?
			}
		},

		//Call this to show the old sign in page
		login: function() {
			var appId = getAppId();
			this.loginWithURL(pm.webUrl + '/signup?appId=' + appId);
		},

		receiveTokenFromPurchaseFlow: function(params) {
			var model = this;

			model.set("id", params.user_id);
			model.set("name", params.name);
			model.set("access_token", params.access_token);
			if(params.refresh_token) {
				model.set("refresh_token", params.refresh_token);
			}
			model.set("syncInvited", (params.syncInvited+"")==1);
			model.set("syncEnabled", (params.syncEnabled+"")==1);
			pm.mediator.trigger("setSync",model.get("syncEnabled"));

			model.set("expires_in", parseInt(params.expires_in, 10));
			model.set("logged_in_at", new Date().getTime());
			model.set("baseEulaAccepted", params.baseEulaAccepted=="1");

			this.saveUserObject(model.toJSON());

			model.fetchUserData();
		},

		/**
		 *
		 * @param fromThisWindow - true if the user logged out by a UI action in this window. will send a message to other windows if true
		 * if false, it means that the logout came through another window
	     */
		logout: function(fromThisWindow) {
			var model = this;

			//Need to check if there are unsynced changes
			pm.api.logoutUser(this.get("id"), this.get("access_token"), function() {
				model.setDefaults();
				model.logoutFromGoogle();

				//Delete all sync-settings
				pm.settings.setSetting("syncInviteEnabled", false);
				pm.settings.setSetting("syncInviteShown", false);
				pm.settings.setSetting("enableSync", false);
				pm.settings.setSetting("syncedOnce", false);
				pm.settings.setSetting("syncedEver", false);

				pm.mediator.trigger("showEnableSyncButton");

				//model.trigger("logout", {message: "Manual logout"});
				$("#user-status-not-logged-in").text("Log in");
				$("#sync-settings-form").hide();

				model.trigger("onLogout");
				if(fromThisWindow) {
					pm.appWindow.trigger("sendMessageObject", "loggedOut");
				}
				pm.syncManager.signOut();
				pm.mediator.trigger("isTeamMember", false);
				pm.indexedDB.tabs.deleteAllTabs();
				//delete last request so it doesn't come back
	        	pm.settings.setSetting("lastRequest", null);


				//pm.mediator.trigger("setSync",model.get("syncEnabled"));
			});

			pm.tracker.trackEvent("account", "sign_out");

		},

		getUserDataForSync: function(callback) {
			var model = this;
			pm.api.getUserData(function(data) {
				if(data.result == "fail" && pm.user.id != "0") {
					//user login failed
					//ask to re-enter password or sign out
					//show modal
					pm.api.getUsernameEmailForId(pm.user.id, function(newData) {
						if(newData && newData.result !== "fail") {
							model.trigger("startReenterPassword", newData.id, newData.username);
						}
					});
					return;
				}
				model.set("syncInvited", (data.syncInvited+"")==="1");
				model.set("syncEnabled", (data.syncEnabled+"")==="1");
				model.set("baseEulaAccepted", (data.baseEulaAccepted+"")==="1");

				if(postman_env === "sync_dev" || postman_env === "sync_stage") {
					model.set("syncInvited", true);
					model.set("syncEnabled", true);
					model.set("baseEulaAccepted", true);
					if(data.adminMigrateLink) {
						pm.mediator.trigger('banner:show:beta_sync_launched', {
				            isAdmin: true,
				            link: data.adminMigrateLink
		          		});
					}
					else {
			          	pm.mediator.trigger('banner:show:beta_sync_launched', {
				            isAdmin: false,
				            link: "http://www.getpostman.com/plans/cloud-basic?source=beta_app"
				        });
					}
				}

				if(!model.get("syncEnabled")) {
					//show sync off
					$(".disable-sync-message").hide();
	                pm.settings.setSetting("enableSync", false);
	                pm.settings.setSetting("syncedOnce", false);
	                pm.mediator.trigger("setSync",false);
	                pm.user.setSyncEnabled(false);
	                $("#disable-sync-settings").hide();
	                $(".enable-sync-settings").show();
				}
				else {
	                $("#disable-sync-settings").show();
	                $(".enable-sync-settings").hide();
				}

				if(data.hasOwnProperty("syncserver_url") && postman_env!=="sync_dev") {
					postman_syncserver_url = data.syncserver_url;
					model.set("syncserver_url", postman_syncserver_url);
					model.saveUserObject(model.toJSON());
					if(model.get("syncEnabled")) {
						pm.mediator.trigger("setSync", true);
					}
				}

				callback();
			});
		},

		getCollections: function(callback) {
			var model = this;

			if (this.isLoggedIn()) {
				pm.api.getUserCollections(function(data) {
					model.set("retrievedData", true);
					if (data.hasOwnProperty("collections")) {
						for(var i = 0; i < data.collections.length; i++) {
							c = data.collections[i];
							c.is_public = c.is_public === "1" ? true : false;
							c.updated_at_formatted = new Date(c.updated_at).toDateString();
						}

						model.set("collections", data.collections);
						model.trigger("change:collections");
						if (typeof(callback) == "function") {
							callback();
						}
					}
				}, function() {
					console.log("Could not get collections");
					model.set("retrievedData", false);
					if (typeof(callback) == "function") {
						callback();
					}
				});
			}
		},

		getPurchases: function() {
			var model = this;

			if (this.isLoggedIn()) {
				pm.api.getUserPurchases(function(data) {
					if (data.hasOwnProperty("purchases")) {
						pm.mediator.trigger("loadedPurchasesFromServer", data);
					}
				});
			}
		},

		getOrganizations: function() {
			var model = this;

			if (this.isLoggedIn()) {
				pm.api.getUserOrganizations(function(data) {
					if (data.hasOwnProperty("organizations") && data.organizations.length>0) {
						model.set("organizations", data.organizations);
						var teamSync = false;
						for(i=0;i<data.organizations.length;i++) {
							if(data.organizations[i].sync_enabled === true) {
								teamSync = true;
								break;
							}
						}
						if(postman_env === "sync_stage" || postman_env === "sync_dev") {
							teamSync = true;
						}

						model.set("teamSyncEnabled", teamSync);
						if(teamSync) {
							pm.mediator.trigger("teamSyncEnabled");
						}

						if(!teamSync) {
							if (data.adminTrialLink) {
								pm.mediator.trigger('banner:show:jp_cloud_trial_launched', {
									isAdmin: true,
									link: data.adminTrialLink
								});
							}
							else if(data.adminTrialLinkBeta) {
								pm.mediator.trigger('banner:show:jp_cloud_trial_launched', {
									isAdmin: false,
									link: data.adminTrialLinkBeta
								});
							}
						}

						pm.mediator.trigger("isTeamMember", model.get("teamSyncEnabled") && model.get("syncEnabled"));
					}
					else {
						model.set("organizations", []);
						model.set("teamSyncEnabled", false);
						pm.mediator.trigger("isTeamMember", false);
					}

					model.saveUserObject(model.toJSON());
				});
			}
		},

		isTeamMember: function() {
			var teamSync = this.get("teamSyncEnabled");
			return teamSync;
		},

		onDeleteSharedCollection: function(id) {
			var model = this;
			pm.api.deleteSharedCollection(id, function(data) {
				var collections = model.get("collections");
				var index = arrayObjectIndexOf(collections, id, "id");
				var collection = _.clone(collections[index]);

				if (index >= 0) {
					collections.splice(index, 1);
				}

				pm.mediator.trigger("deletedSharedCollection", collection);

				model.trigger("change:collections");
			});
		},

		downloadSharedCollection: function(id, callback) {
			pm.api.getCollectionFromRemoteId(id, function(data) {
				pm.mediator.trigger("overwriteCollection", data);
				pm.alerts.success("Download successful");

				if (callback) {
					callback();
				}
			});
		},

		onDownloadSharedCollection: function(id) {
			this.downloadSharedCollection(id);
			pm.tracker.trackEvent("collection", "import", "download");
		},

		onDownloadAllSharedCollections: function() {
			var collections = this.get("collections");

			for(var i = 0; i < collections.length; i++) {
				this.downloadSharedCollection(collections[i].remote_id);
			}

			pm.tracker.trackEvent("collection", "import", "download_all", collections.length);
		},

		getRemoteIdForLinkId: function(linkId) {
			var link = pm.webUrl + "/collections/" + linkId;

			var collections = this.get("collections");
			var index = arrayObjectIndexOf(collections, link, "link");

			if (index >= 0) {
				return collections[index].remote_id;
			}
			else {
				return 0;
			}
		},

		getSyncData: function() {
			var model = this;
			model.getUserDataForSync(_.bind(model.setupSync, model));
		},

		setupSync: function() {
			var model = this;
			pm.mediator.trigger("notifyVersionUpdate");
			$("#sync-settings-form").show();
			if(!model.get("syncInvited") && !model.get("syncEnabled")) {
				$("#sync-settings-form").hide();
			}

			//if syncEnabled is true
			if(model.get("syncEnabled")) {
				pm.settings.setSetting("enableSync", true);
				pm.mediator.trigger("setSync", true);
				return;
			}
			else {
				pm.mediator.trigger("setSync", false);
			}

			//if syncInvited is true and syncInviteShown is false, nuffink..he can enable it later
			if(model.get("syncInvited") && !model.get("syncEnabled") && !pm.settings.getSetting("syncInviteShown")) {
				//pm.mediator.trigger("showSyncInvitePopup");
				//pm.settings.setSetting("syncInviteShown", true);
				//pm.tracker.trackEvent("sync", "view", "launch_modal");
				//transfer control to Legal
				//end of story
				//if he accepts, enableSync will be set to true, and an API call will be made to set eulaAccepted to true
				return;
			}

			else if(model.get("syncInvited") && !pm.settings.getSetting("enableSync")) {
				//dont do anything. The "Enable Sync" button will show in the navbar
				pm.mediator.trigger("showEnableSyncButton");
				return;
			}
		},

		checkBaseEula: function() {
			//no base eula-ing
			return;
			var model = this;
			if(model.get("baseEulaAccepted")!==true) {
				//Either the user as
				//pm.mediator.trigger("showBaseEula");
				return;
			}
			else {
				//pm.settings.setSetting("baseEulaAccepted", true);
			}
		}
	});

	module.exports = User;


/***/ },
/* 345 */
/***/ function(module, exports) {

	var ReenterPasswordModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        
	        $('#modal-reenter-password-submit').on("click", function () {
	            var username = model.get("username_email");
	            var password = $("#reenter-password-password").val();
	            var id = model.get("id");
	            
	            console.log("Re-signin for -  " + username + " and id = " + id);

	            pm.mediator.trigger("reenteredPassword", null, password, id);
	            $('#modal-reenter-password').modal("hide");
	        });

	        //model.on("startReenterPassword", this.render, this);
	    },

	    render: function() {
	        var username = this.model.get("username_email");
	        if(!username || username=="") {
	            username = this.model.get("name");
	        }
	        if(!username || username=="") {
	            username = "The signed in user"
	        }
	        $("#reenter-password-username").val(username);
	        $("#reenter-password-username-placeholder").text(username);
	        $("#reenter-password-password").attr('placeholder', 'Password').val("");
	        $('#modal-reenter-password').modal("show");
	    }
	});
	module.exports = ReenterPasswordModal;


/***/ },
/* 346 */
/***/ function(module, exports) {

	var UserSyncDataDeleteModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model; 
	        var view = this;
	        
	        model.on("logout", this.onLogout, this);

	        $('#modal-syncdata-delete-yes').on("click", function (e) {
	            pm.mediator.trigger("deleteSyncedData");
	            $("#request-actions-reset").click();
	            model.logout(true);
	            $("#modal-syncdata-delete").modal('hide');
	            e.preventDefault();
	        });

	        $('#modal-syncdata-delete-no').on("click", function (e) {
	            //do not sign out
	            //pm.mediator.trigger("checkForUnsyncedChangesBeforeLogout");
	            $("#modal-syncdata-delete").modal('hide');
	            e.preventDefault();
	        });

	        $("#modal-windows-close-yes").on("click", function() {
	            //force close all windows
	            pm.appWindow.closeAllOtherWindows();

	            //retrigger logout
	            setTimeout(function() {
	                view.onLogout({message:"Manual logout"});
	            },100);
	        });
	    },

	    onLogout: function(obj) {
	        if(!this.model.get("syncEnabled") && postman_env!=="sync_dev") {
	            //sync is not enabled. do normal logout
	            this.model.logout(true);
	        }
	        else if(window.pmWindowsOpen>1) {
	            //other windows are open
	            //show a message that they will be closed
	            $("#modal-windows-close").modal('show');
	        }
	        else if(obj.message === "Manual logout") {
	            var currentUnsynced = pm.localChanges.get("unsyncedChanges");
	            var warning = "";
	            if (currentUnsynced && currentUnsynced.length > 0) {
	                warning = "You currently have unsynced changes!. "; 
	                warning += "If you choose to delete your data, these changes will be lost. " 
	                warning += "To resync these changes, ensure that your internet connection is working, and try restarting the app without logging out. " 
	                warning += "However, you can export a data dump locally by going to Settings > Data.";
	            }

	            $("#modal-syncdata-warning").text(warning);
	            $("#modal-syncdata-delete").modal('show');
	        }
	    }
	});

	module.exports = UserSyncDataDeleteModal;


/***/ },
/* 347 */
/***/ function(module, exports) {

	var UserUnsyncedDataDeleteModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model; 
	        
	        pm.mediator.on("showUnsyncedDeletetionModal", this.showModal, this);

	        $('#modal-unsynced-delete-yes').on("click", function () {
	            pm.mediator.trigger("deleteUnsyncedData");
	            $("#modal-unsynced-delete").modal('hide');
	        });
	    },

	    showModal: function() {
	        $("#modal-unsynced-delete").modal('show');
	    }
	});

	module.exports = UserUnsyncedDataDeleteModal;


/***/ },
/* 348 */
/***/ function(module, exports) {

	var UserStatus = Backbone.View.extend({
		initialize: function() {
			var view = this;
			var model = this.model;

			model.on("login", this.render, this);
			model.on("onLogout", this.render, this);
			model.on("logout", this.render, this);

			$("#user-status-shared-collections").on("click", function() {
				$("#modal-user-collections").modal("show");
				pm.tracker.trackEvent("account", "my_collections");
				return false;
			});

			$("#user-status-not-logged-in").on("click", function() {
				//$("#user-status-not-logged-in").text("Loading...");
				//model.login();
				model.trigger("startLoginFlow", "signin");
				return false;
			});

			$("#user-status-manage-profile").on("click", function() {
				view.openProfile();
				pm.tracker.trackEvent("account", "manage_profile");
				return false;
			});

			//this is shown in the sync helper card
			$(".sign-up-now-helpercard").click(function() {
				model.trigger("startLoginFlow", "signup");
			});

			$(".sign-in-now-helpercard").click(function() {
				model.trigger("startLoginFlow", "signin");
			});

			$("#user-status-logout").on("click", function() {
				model.trigger("logout", {message: "Manual logout"});
				return false;
			});

			this.render();

		},

		openProfile: function() {
			var url = pm.webUrl + '/signin-client';
			url += "?user_id=" + pm.user.get("id");
	    	url += "&access_token=" + pm.user.get("access_token");
	    	pm.app.openWindow(url);
		},

		render: function() {
			// console.log("UserStatus change triggered", this.model.get("id"));

			var id = this.model.get("id");
			var name = this.model.get("name");
	        var expiredToken = this.model.get("expiredToken");

			// $("#user-status-not-logged-in").tooltip();

			if (id !== 0 && expiredToken === false) {
				$("#user-status-false").css("display", "none");
				$("#user-status-true").css("display", "block");

				var nameToShow = name;

				if(nameToShow==null || (typeof nameToShow === "undefined")) {
					nameToShow = "Me"; //for users with no name. blank names are allowed
				}

				var sp = nameToShow.indexOf(" ");
				if(sp!==-1) {
					nameToShow = nameToShow.substring(0,sp);
				}
				else {
					if(nameToShow.length>8) {
						nameToShow = nameToShow.substring(0,8) + "...";
					}
				}
				$("#user-status-username").text(nameToShow);

				//$("#team-directory-opener").show();
				$("#share-collection-team-directory-features").show();
				$("#user-signed-in-name").text(nameToShow);

				//the items in the sync helper card
				$(".sync-signed-in").show();
				$(".sync-not-signed-in").hide();

			}
			else {
				$("#user-status-not-logged-in").text("Sign in");
				$("#user-status-false").css("display", "block");
				$("#user-status-true").css("display", "none");
				$("#user-status-username").empty();

				//$("#team-directory-opener").hide();
				$("#share-collection-team-directory-features").hide();

				//the items in the sync helper card
				$(".sync-signed-in").hide();
				$(".sync-not-signed-in").show();

			}
		}
	});

	module.exports = UserStatus;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var DeleteUserCollectionModal = __webpack_require__(350);

	var UserCollections = Backbone.View.extend({
		initialize: function() {
			var model = this.model;

			model.on("login", this.render, this);
			model.on("logout", this.render, this);
			model.on("change:collections", this.render, this);

			var deleteUserCollectionModal = new DeleteUserCollectionModal();

			$("#user-collections-actions-upload-all").on("click", function() {
				// console.log("Upload all collections");
				pm.mediator.trigger("uploadAllLocalCollections");
			});

			$("#user-collections-actions-download-all").on("click", function() {
				// console.log("Download all collections");
				pm.mediator.trigger("downloadAllSharedCollections");
			});

			$("#user-collections-list").on("click", ".user-collection-action-download", function() {
				var id = parseInt($(this).attr("data-remote-id"), 10);
				pm.mediator.trigger("downloadSharedCollection", id);
			});

			$("#user-collections-list").on("click", ".user-collection-action-delete", function() {
				var id = $(this).attr("data-id");
				pm.mediator.trigger("confirmDeleteSharedCollection", id);
			});

			this.render();
		},

		render: function() {
			var id = this.model.get("id");
			var name = this.model.get("name");
	        var expiredToken = this.model.get("expiredToken");

			if (id !== 0 && expiredToken===false) {
				//the user has been logged in here
				//pm.syncManager.signIn();

				$('#user-collections-list tbody').empty();
				$('#user-collections-list tbody').append(Handlebars.templates.user_collections_list({"items":this.model.get("collections")}));
			}
			else {
				//pm.syncManager.signOut(); //WHY IS this needed?
				$('#user-collections-list tbody').empty();
			}
		}
	});

	module.exports = UserCollections;


/***/ },
/* 350 */
/***/ function(module, exports) {

	var DeleteUserCollectionModal = Backbone.View.extend({
	    initialize: function() {
	        $('#modal-delete-user-collection-yes').on("click", function () {
	            var id = $(this).attr('data-collection-id');
	            pm.mediator.trigger("deleteSharedCollection", id)
	        });

	        $("#modal-delete-user-collection").on("shown", function () {
	            pm.app.trigger("modalOpen", "#modal-delete-user-collection");
	        });

	        $("#modal-delete-user-collection").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $("#modal-delete-user-collection").on('keydown', 'div.input', function (event) {
	            if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
	                $("#modal-delete-user-collection-yes").click();
	                event.preventDefault();
	                return false;
	            }
	            return true;
	        });

	        pm.mediator.on("confirmDeleteSharedCollection", this.render, this);
	    },

	    render: function(id) {
	        $('#modal-delete-user-collection-yes').attr("data-collection-id", id);
	        $('#modal-delete-user-collection').modal("show");
	    }
	});

	module.exports = DeleteUserCollectionModal;


/***/ },
/* 351 */
/***/ function(module, exports) {

	var UserSigninModal = Backbone.View.extend({
	    el: $("#modal-user-signin"),

	    events : {
	        'click #show-signup-button': "showSignUpForm",
	        'click #show-signin-button': "showSignInForm",
	        'click #sign-in-need-help': "toggleSignInHelp",
	        'click #sign-in-button': "signInClickHandler",
	        'click #sign-up-button': "signUpClickHandler",
	        'click #sign-in-button-password': "signInPasswordClickHandler",
	        'click .signin-google-button': "signInGoogleClickHandler",
	    },

	    initialize: function() {
	        var view = this;

	        _.bindAll(this, 
	            "onSignInResponse", 
	            "onSignUpResponse");

	        var model = this.model;
	        model.on("startLoginFlow", this.onStartLoginFlow, this);
	        model.on("closeSignInModal", this.closeSignInModal, this);

	        //this should show the signin page only!
	        model.on("startReenterPassword", this.showPasswordOnlyForm, this);

	        model.on("revertGoogleButtonText", function() {
	            this.$(".google-button-text-in").text("Sign in with Google");
	            this.$(".google-button-text-up").text("Sign up with Google");
	        }, this);

	        if(postman_env!=="production") {
	            //dont need the enable checkbox for sync
	            $("#sync-enable-flex").remove();
	            this.$(".signin-google, .signin-google-or").remove();
	        }

	        this.$el.on('keydown', 'input', function (event) {
	            if (event.keyCode === 13) {
	                if($("#modal-user-signin #signup-container").css('display')=="block") {
	                    //signup
	                    view.signUpClickHandler();
	                }
	                else {
	                    view.signInClickHandler();
	                }
	                event.preventDefault();
	                return false;
	            }

	            return true;
	        });

	        this.$el.on('hidden', function() {
	            pm.app.trigger("modalClose");
	        });

	         this.$el.on('shown', function() {
	            pm.app.trigger("modalOpen", "#modal-user-signin");
	            view.$("#sign-in-username").focus();
	        });

	         $("#modal-user-signin .cancel-modal").click(function() {
	            view.$el.modal('hide');
	         });
	    

	        $("#sign-in-help-fp")[0].href = pm.webUrl + "/forgot-password";
	        $("#sign-in-help-fu")[0].href = pm.webUrl + "/forgot-username";
	    },

	    //mode is signin or signup
	    onStartLoginFlow: function(mode) {
	        this.clearForms();
	        this.changeToNormalMode();

	        if(mode==="signup") {
	            this.showSignUpForm();
	            pm.tracker.sendAppView("virtualScreen/splash/signup");
	        }
	        else {
	            this.showSignInForm();
	            pm.tracker.sendAppView("virtualScreen/splash/signin");
	        }
	    },

	    showPasswordOnlyForm: function(id, username) {
	        this.clearForms();
	        this.showSignInForm();
	        this.changeToPasswordOnlyMode(id, username);
	        pm.tracker.sendAppView("virtualScreen/splash/reenterPassword");
	    },

	    changeToPasswordOnlyMode: function(id, username) {
	        $(".show-signup-button-container, #sign-in-button").hide();
	        $("#password-only-message-wrapper, #sign-in-button-password").show();
	        $("#sign-in-userid").val(id);

	        $("#sign-in-username").attr('disabled', 'disabled').val(username);
	    },

	    changeToNormalMode: function() {
	        $("#show-signup-button, #sign-in-button").show();
	        $("#password-only-message-wrapper, #sign-in-button-password").hide();

	        $("#sign-in-username").removeAttr('disabled').val("");
	    },

	    closeSignInModal: function() {
	        this.$el.modal('hide');
	    },

	    clearForms: function() {
	        this.$(".google-button-text-in").text("Sign in with Google");
	        this.$(".google-button-text-up").text("Sign up with Google");
	        this.$("#sign-in-username, #sign-in-password").val("");
	        this.$("#sign-up-email, #sign-up-username, #sign-up-password").val("");
	    },

	    showSignInForm: function() {
	        //this.$el.css('min-height', '520px');
	        this.$el.modal('show');
	        /*.css({'margin-top': function () { //vertical centering
	                return -($(this).height() / 2);
	            },
	            'margin-left': function () { //Horizontal centering
	                return -($(this).width() / 2);
	            }});*/
	        this.$("#sign-in-button").text("Sign in");
	        this.$("#signup-container").css("display", "none");
	        this.$("#signin-container").css("display", "block");

	        var modalHeight = this.$el.height();
	        var bodyHeight = this.$(".modal-body").height();
	        var margin = (modalHeight-bodyHeight)/2;
	        this.$(".modal-body").css('margin-top', margin-40 + "px");
	    },

	    showSignUpForm: function() {
	        //this.$el.css('min-height', '600px');
	        this.$el.modal('show');
	       /* .css({'margin-top': function () { //vertical centering
	                return -($(this).height() / 2);
	            },
	            'margin-left': function () { //Horizontal centering
	                return -($(this).width() / 2);
	            }})*/
	        this.$("#sign-up-button").text("Sign Up (it's free)");
	        this.$("#sign-in-button").text("Sign In");

	        this.hideSignInError();
	        this.hideSignUpError();

	        this.$("#signin-container").css("display", "none");
	        this.$("#signup-container").css("display", "block");

	        var modalHeight = this.$el.height();
	        var bodyHeight = this.$(".modal-body").height();
	        var margin = (modalHeight-bodyHeight)/2;
	        this.$(".modal-body").css('margin-top', margin-40 + "px");
	    },

	    toggleSignInHelp: function() {
	        this.$(".sign-in-need-help-specific").toggle();
	    },

	    signInClickHandler: function() {
	        if(!this.validateSignInData()) {
	            return false;
	        }
	    },

	    signInPasswordClickHandler: function() {
	        var id = $("#sign-in-userid").val();
	        var password = $("#sign-in-password").val();
	        var username = $("#sign-in-username").val();
	        pm.mediator.trigger("reenteredPassword", username, password, id)
	        this.changeToNormalMode();
	        this.$el.modal('hide');
	        return false;
	    },

	    signUpClickHandler: function() {
	        if(!this.validateSignUpData()) {
	            return false;
	        }
	    },

	    validateSignInData: function() {
	        var username = this.$("#sign-in-username").val();
	        var password = this.$("#sign-in-password").val();

	        if(!username || !password) {
	            this.showSignInError("All fields are required");
	            return false;
	        }

	        pm.api.signInUser(username, password, null, _.bind(this.onSignInResponse, this));
	        $(this.el).find("#sign-in-button").text("Signing in...");
	        $(this.el).find("#sign-in-button-password").text("Signing in...");
	    },

	    onSignInResponse: function(data) {
	        var view = this;
	        if(!data) {
	            this.showSignInError("Something went wrong. Please try again later.")
	            return;
	        }

	        if(data.result == "fail") {
	            this.showSignInError(data.message)
	            return;
	        }

	        this.$el.modal('hide');
	        this.logInUser(data);
	        this.hideSignInError();
	    },

	    onSignUpResponse: function(data) {
	        var view = this;

	        if(!data) {
	            this.showSignUpError("Something went wrong. Please try again later.")
	            return;
	        }

	        if(data.result == "fail") {
	            this.showSignUpError(data.message)
	            return;
	        }

	        this.$el.modal('hide');
	        this.logInUser(data);
	        this.hideSignUpError();
	    },

	    validateSignUpData: function() {
	        var email = this.$("#sign-up-email").val();
	        var username = this.$("#sign-up-username").val();
	        var name = username;
	        var password = this.$("#sign-up-password").val();
	        var syncEnabled = true; //this.$("#sign-up-sync-enable").is(":checked"); //always enabled for new sign ins

	        var email_regex = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;

	        //if(!email_regex.has(email)) {
	        if(!email.has("@")) {            
	            this.showSignUpError("Please provide a valid email");
	            return false;
	        }

	        if(!email || !username || !password) {
	            this.showSignUpError("All fields are required");
	            return false;
	        }

	        if(syncEnabled) {
	            pm.tracker.sendAppView("virtualScreen/splash/syncEnabled");
	        }

	        pm.api.signUpUser(name, email, username, password, syncEnabled, _.bind(this.onSignUpResponse, this));
	        $(this.el).find("#sign-in-button").text("Signing up...");
	    },

	    showSignInError: function(msg) {
	        if(msg) {
	            this.$("#signin-error").find(".message").text(msg);
	            $(this.el).find("#sign-in-button").text("Sign in");
	        }
	        if(this.$("#signin-error").is(':hidden')) {
	            this.$("#signin-error").velocity("slideDown", {duration: 300});
	        }
	    },

	    hideSignInError: function() {
	        this.$("#signin-error").velocity("slideUp", {duration: 300});
	    },

	    showSignUpError: function(msg) {
	        if(msg) {
	            this.$("#signup-error").find(".message").text(msg);
	            $(this.el).find("#sign-in-button").text("Sign up");
	        }
	        if(this.$("#signup-error").is(':hidden')) {
	            this.$("#signup-error").velocity("slideDown", {duration: 300});
	        }
	    },

	    hideSignUpError: function() {
	        this.$("#signin-error").velocity("slideUp", {duration: 300});
	    },

	    signInGoogleClickHandler: function() {
	        this.$(".google-button-text").text("Connecting to Google...");
	        this.model.trigger("startGoogleLogin");
	    },

	    logInUser: function(data) {
	        this.model.trigger("signinSuccess", data)
	    }
	});

	module.exports = UserSigninModal;


/***/ },
/* 352 */
/***/ function(module, exports) {

	var Postman3Splash = Backbone.Model.extend({
		initialize: function() {

			pm.mediator.on("showPostman3Splash", function(force) {
				if(postman_env==="sync_stage" || postman_env==="sync_dev") {
					return;
				}
				var alreadyShown = pm.settings.getSetting("postman3SpashShown");
			
				if(!alreadyShown || force) {
					var isSignedIn = pm.user.id!==0;
					var hasSync = pm.user.get("syncEnabled");
					if(isSignedIn) {
						$("#modal-postman3-splash .not-signed-in").hide();
						$("#modal-postman3-splash .signed-in").show();
						$("#modal-postman3-splash .has-sync").hide();

						if(hasSync) {
							$("#modal-postman3-splash .signed-in").hide();
							$("#modal-postman3-splash .always-section").hide(); //oh the irony
							$("#modal-postman3-splash .has-sync").show();
						}
					}
					else {
						$("#modal-postman3-splash .not-signed-in").show();
						$("#modal-postman3-splash .signed-in").hide();
						$("#modal-postman3-splash .has-sync").hide();
					}
					
					$("#modal-postman3-splash").modal("show").css('display', 'block');
					var modalHeight = $("#modal-postman3-splash").height();
					var bodyHeight = $("#modal-postman3-splash .modal-body").height();
					var margin = (modalHeight-bodyHeight)/2;
					$("#modal-postman3-splash .modal-body").css('margin-top', margin-20 + "px");

					pm.app.trigger("modalOpen", "#modal-postman3-splash");
					pm.tracker.sendAppView("virtualScreen/splash");
				}
			});

			$("#modal-postman3-splash #p3-signup").click(function() {
				$("#modal-postman3-splash").modal('hide');
				pm.user.trigger("startLoginFlow", "signup");
			});
			$("#modal-postman3-splash #p3-signin").click(function(e) {
				$("#modal-postman3-splash").modal('hide');
				pm.user.trigger("startLoginFlow", "signin");
				e.preventDefault();
			});
			$("#modal-postman3-splash .go-to-app").click(function(e) {
				$("#modal-postman3-splash").modal('hide');
				pm.tracker.sendAppView("virtualScreen/splash/gotoapp");
			});
			$("#modal-postman3-splash #p3-enable").click(function(e) {
				pm.mediator.trigger("showSyncInvitePopup");
				$("#modal-postman3-splash").modal('hide');
			});
			$("#modal-postman3-splash").on('hidden', function() {
				pm.settings.setSetting("postman3SpashShown", true);
	            pm.app.trigger("modalClose");
	        });

	         $("#modal-postman3-splash").on('shown', function() {
	            pm.app.trigger("modalOpen", "#modal-postman3-splash");
	        });
		}
	});

	module.exports = Postman3Splash;


/***/ },
/* 353 */
/***/ function(module, exports) {

	var Mediator = _.extend({}, Backbone.Events);
	module.exports = Mediator;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var AppWindow = Backbone.Model.extend({
	    defaults: function() {
	        return {
	        	id:0,
	            internalEvents: {}
	        };
	    },

	    //throws exception
	    setWindowCloseHandler: function() {
	        if(postman_electron) {
	            this.set("id", this.id)
	        }
	        var oldThis = this;
	        var currWin = chrome.app.window.current();
	        if(currWin) {
	            this.set("id", currWin.id);
	            this.currWin = currWin;
	            currWin.onClosed.addListener(function () {
	                pm.appWindow.trigger("sendMessageObject", "pmWindowClosed", oldThis.get("id"));
	            });
	        }
	        else {
	            throw "Window not initialized";
	        }
	    },

	    initialize: function(options) {
	        var oldThis = this;

	        if(postman_electron) {
	            this.ipc = __webpack_require__(254);
	        }

	        if(typeof pmThisWindowId !== "undefined") {
	            this.set("id", pmThisWindowId);
	        }

	    	this.initializeInternalMessaging();
	        this.trigger("registerInternalEvent", "pmWindowOpened", this.onPmWindowOpened, this);
	        this.trigger("registerInternalEvent", "pmWindowClosed", this.onPmWindowClosed, this);
	        this.trigger("registerInternalEvent", "pmWindowPrimaryChanged", this.onPmWindowPrimaryChanged, this);
	        this.trigger("registerInternalEvent", "forceOtherWindowClose", this.onForceWindowClose, this);

	        var tryLater = false;
	        var oldThis = this;

	        if(!postman_electron) {
	            try {
	                this.setWindowCloseHandler();
	            } catch(e) {
	                tryLater = true;
	            }

	            if(tryLater) {
	                setTimeout(function() {
	                    try {
	                        oldThis.setWindowCloseHandler();
	                    } catch(e) {
	                        console.error("Could not attach handler for window.close()")
	                    }
	                }, 1000);
	            }
	        }
	    },

	    isPrimaryWindow: function() {
	        if(window.pmPrimaryWindowId === undefined) {
	            return true;
	        }
	        return (window.pmPrimaryWindowId === this.get("id"));
	    },

	    closeAllOtherWindows: function() {
	        window.pmWindowsOpenList = [window.pmPrimaryWindowId];
	        window.pmWindowsOpen = 1;
	        pm.appWindow.trigger("sendMessageObject", "forceOtherWindowClose");
	    },

	    onPmWindowPrimaryChanged: function(newPrimaryId) {
	        window.pmPrimaryWindowId = newPrimaryId;
	        if(newPrimaryId === this.get("id")) {
	            pm.syncManager.initialize();
	        }
	    },

	    onForceWindowClose: function() {
	        //close this window
	        //no questions asked
	        //not needed - main process can close
	        chrome.app.window.current().close();
	    },

	    onPmWindowOpened: function(id) {
	        if(window.pmWindowsOpenList.indexOf(id)==-1) {
	            window.pmWindowsOpen++;
	            window.pmWindowsOpenList.push(id);
	            console.log("New window opened");
	        }

	        //if this is the main window, update sync state
	        var currentId = this.get("id");
	        if(window.pmPrimaryWindowId === currentId) {
	            setTimeout(function() {
	                pm.syncManager.updateStateToAllWindows();
	            },10000);
	        }
	    },

	    onPmWindowClosed: function(id) {
	        var x = window.pmWindowsOpenList.indexOf(id);
	        if(x!==-1) {
	            window.pmWindowsOpenList.splice(x,1);
	            window.pmWindowsOpen--;
	            var currentId = this.get("id");
	            if(window.pmPrimaryWindowId!==currentId && window.pmWindowsOpenList[0]==currentId) {
	                //change this to the primary window
	                window.pmPrimaryWindowId = currentId;
	                pm.appWindow.trigger("sendMessageObject", "pmWindowPrimaryChanged", window.pmPrimaryWindowId);
	                pm.syncManager.attachSyncStatusTriggers();
	                pm.syncManager.initialize();
	            }
	        }
	    },

	    onRegisterInternalEvent: function(e, func, context) {
	        var internalEvents = this.get("internalEvents");
	        internalEvents[e] = {
	            "handler": func,
	            "context": context
	        }
	    },

	    sendToElectron: function(message) {
	        if(postman_electron) {
	            this.ipc.send("messageToElectron",message);
	        }
	    },

	    sendSyncMessage: function(message, arg1) {
	        if(postman_electron) {
	            return this.ipc.sendSync(message,arg1);
	        }
	    },

	    sendMessageObject: function(e, object, object2, object3,
	        object4, object5, object6, object7) {

	        if(postman_electron) {
	            if(object && (typeof object["toJSON"] === "function")) object = object.toJSON();
	            if(object2 && (typeof object2["toJSON"] === "function")) object2 = object2.toJSON();
	            if(object3 && (typeof object3["toJSON"] === "function")) object3 = object3.toJSON();
	            if(object4 && (typeof object4["toJSON"] === "function")) object4 = object4.toJSON();
	            if(object5 && (typeof object5["toJSON"] === "function")) object5 = object5.toJSON();
	            if(object6 && (typeof object6["toJSON"] === "function")) object6 = object6.toJSON();
	            if(object7 && (typeof object7["toJSON"] === "function")) object7 = object7.toJSON();
	        }

	        /*if(window.pmWindowsOpen === 1) {
	            return;
	        }*/
	        var message = {
	            "id": this.get("id"),
	            "event": e,
	            "object": object,
	            "object2": object2,
	            "object3": object3,
	            "object4": object4,
	            "object5": object5,
	            "object6": object6,
	            "object7": object7,
	        };

	        if(postman_electron) {
	            this.ipc.send("sendToAllWindows",JSON.stringify(message));
	        }
	        else {
	            chrome.runtime.sendMessage(message);
	        }
	    },

	    sendMessageWrapper: function(message) {
	      if(postman_electron) {
	        this.ipc.send("sendToAllWindows",JSON.stringify(message));
	      }
	      else {
	        chrome.runtime.sendMessage(message);
	      }
	    },

	    initializeInternalMessaging: function() {
	    	var model = this;
	      this.on("registerInternalEvent", this.onRegisterInternalEvent, this);
	    	this.on("sendMessageObject", this.sendMessageObject, this);

	        if(postman_electron) {
	            model.ipc.on('electronWindowMessage', function(message) {
	                model.handleElectronMessage(message);
	            });

	            if(pm.isTestRunner) {
	                model.ipc.on("setTestRunnerAttrs", function(msg) {
	                    try {
	                        msg = JSON.parse(msg);
	                        window.collectionId = msg.collectionId;
	                        window.folderId = msg.folderId;
	                        window.environmentId = msg.environmentId;
	                    } catch(e) {

	                    }
	                });
	            }

	            //received as confirmation of a new window opening
	            //Why?
	            /*model.ipc.on("openNewWindowConfirmation", function(message) {
	                var newWindowId = message.id;
	                model.trigger("sendMessageObject", "pmWindowOpened", newWindowId);
	            });*/
	        }
	        else {
	        	chrome.runtime.onMessage.addListener(function(message) {
	                model.handleInternalMessage(message);
	        	});
	        }
	    },

	    handleInternalMessage: function(message) {
	        var model = this;
	        if (model.get("id") !== message.id) {
	            var internalEvents = model.get("internalEvents");
	            if (message.event in internalEvents) {
	                var e = message.event;
	                var object = message.object,
	                object2 = message.object2,
	                object3 = message.object3,
	                object4 = message.object4,
	                object5 = message.object5,
	                object6 = message.object6,
	                object7 = message.object7;
	                _.bind(internalEvents[e].handler, internalEvents[e].context)(object, object2, object3, object4, object5, object6, object7);
	            }
	        }
	    },

	    handleElectronMessage: function(message) {
	        var mName = message.name;
	        if(mName === "setWindowIds") {
	            var thisId = message.data.thisId;
	            var primaryId = message.data.primaryId;
	            var allIds = message.data.allIds;
	            pm.electronVersion = message.data.thisVersion;
	            this.set("id", thisId);
	            pmWindowsOpenList = allIds;
	            pmPrimaryWindowId = primaryId;
	            pmWindowsOpen = pmWindowsOpenList.length;
	        }
	        else if(mName==="otherWindowClosed") {
	            var id = message.data.id;
	            this.onPmWindowClosed(id);
	        }
	        else if(mName==="internalEvent") {
	            this.handleInternalMessage(message.data);
	        }
	        else if(mName==="capturedInterceptorRequest") {
	            pm.mediator.trigger("onMessageExternal", message.data);
	        }
	    }
	});

	module.exports = AppWindow;


/***/ },
/* 355 */
/***/ function(module, exports) {

	var Settings = Backbone.Model.extend({
	    defaults: function() {
	        return {
	            lastRequest:"",
	            autoSaveRequest:true,
	            selectedEnvironmentId:"",
	            type: "chromeStorageArea",
	            items: {}
	        };
	    },

	    resetSettings: function() {
	        this.setSetting("historyCount", 100);
	        this.setSetting("autoSaveRequest", true);
	        this.setSetting("selectedEnvironmentId", true);
	        this.setSetting("lineWrapping", true);
	        this.setSetting("previewType", "parsed");
	        this.setSetting("trimKeysAndValues", false);
	        this.setSetting("retainLinkHeaders", false);
	        this.setSetting("sendNoCacheHeader", true);
	        this.setSetting("sendPostmanTokenHeader", true);
	        this.setSetting("usePostmanProxy", false);
	        this.setSetting("useInterceptor", false);
	        this.setSetting("proxyURL", "");
	        this.setSetting("lastRequest", "");
	        this.setSetting("launcherNotificationCount", 0);
	        this.setSetting("xhrTimeout", 0);
	        this.setSetting("variableDelimiter", "{{...}}");
	        this.setSetting("languageDetection", "auto");
	        this.setSetting("haveDonated", false);
	        this.setSetting("instantModals",true);
	        this.setSetting("responseFontSize",12);

	        //Sync Settings
	        this.setSetting("enableSync", false);
	        this.setSetting("syncInviteShown", false);
	        this.setSetting("baseEulaAccepted", false);
	        //---Sync Settings

	        this.setSetting("postmanTheme", "light");
	        this.setSetting("postmanCodeMirrorTheme", "eclipse");

	        this.setSetting("responsePreviewDataSection", "body");
	        this.setSetting("requestBodyEditorContainerType", "editor");

	        this.setSetting("hideSnippets", false);
	        this.setSetting("hidePrscriptSnippets", false);

	        this.setSetting("historyDateFormat", "{Month} {d}, {yyyy}");
	        this.setSetting("interceptorRedirect", true);

	        /*tabs*/
	        this.setSetting("saveTabs", true);
	        this.setSetting("requestNewTab", false);
	        this.setSetting("trackUnsavedRequests", true);

	        /*googleanalytics*/
	        this.setSetting("googleAnalytics", true);

	        this.setSetting("uiScale", 0);
	    },

	    initValues: function(callback) {
	        this.set({"items": {}});

	        var func = function(settingsJson) {
	            if (settingsJson !== null) {
	                try {
	                    this.set({"items": JSON.parse(settingsJson)});
	                }
	                catch (e) {
	                    console.log("Couldnt parse settings to JSON. String: "+settingsJson);
	                }
	            }

	            if(pm.isTesting) {
	                this.setSetting("requestNewTab", false);
	                this.setSetting("trackUnsavedRequests", false);
	            }

	            this.create("historyCount", 100);
	            this.create("autoSaveRequest", true);
	            this.create("selectedEnvironmentId", true);
	            this.create("lineWrapping", true);
	            this.create("previewType", "parsed");
	            this.create("trimKeysAndValues", false);
	            this.create("retainLinkHeaders", false);
	            this.create("sendNoCacheHeader", true);
	            this.create("sendPostmanTokenHeader", true);
	            this.create("usePostmanProxy", false);
	            this.create("useInterceptor", false);
	            this.create("proxyURL", "");
	            this.create("lastRequest", "");
	            this.create("xhrTimeout", 0);
	            this.create("launcherNotificationCount", 0);
	            this.create("variableDelimiter", "{{...}}");
	            this.create("languageDetection", "auto");
	            this.create("haveDonated", false);
	            this.create("instantModals",true);

	            this.create("postmanTheme", "light");
	            this.create("postmanCodeMirrorTheme", "eclipse");

	            this.create("responsePreviewDataSection", "body");
	            this.create("requestBodyEditorContainerType", "editor");

	            this.create("responseFontSize", 13)
	            this.create("syncedHeaderPresets", false);

	            this.create("hideSnippets", false);
	            this.create("hidePrscriptSnippets", false);

	            this.create("historyDateFormat", "{yyyy}-{MM}-{dd}");

	            this.create("interceptorRedirect", true);
	            this.create("saveTabs", true);
	            this.create("requestNewTab", false);
	            this.create("trackUnsavedRequests", true);
	            this.create("googleAnalytics", true);

	            this.create("uiScale", 0);

	            if (pm.isTesting) {
	                this.resetSettings();
	            }

	            callback();
	        };

	        func = _.bind(func, this);
	        pm.storage.getValue("settings", func);

	        if(!pm.testRunner) {
	            pm.appWindow.trigger("registerInternalEvent", "setSettingFromRunner", this.setSetting, this);
	        }
	    },

	    //This moves to the view initialize script?
	    initListeners: function() {
	    },

	    test: function() {
	        // console.log("Testing the function");
	    },

	    init:function (callback) {
	        this.initValues(callback);
	    },

	    create:function (key, defaultVal) {
	        if (!(key in this.get("items"))) {
	            if (defaultVal !== "undefined") {
	                this.setSetting(key, defaultVal);
	            }
	        }
	    },

	    setSetting:function (key, value) {
	        if(pm.testRunner) {
	            //also send setting to main window so it's persisted
	            pm.appWindow.trigger("sendMessageObject", "setSettingFromRunner", key, value);
	        }

	        //Need to clone otherwise Backbone will not fire the correct event
	        var newItems = _.clone(this.get("items"));
	        newItems[key] = value;
	        this.set({items: newItems});

	        var o = {'settings': JSON.stringify(this.get("items"))};
	        pm.storage.setValue(o, function () {
	        });

	    },

	    getSetting:function (key) {
	        var val = this.get("items")[key];

	        if (val === "true") {
	            return true;
	        }
	        else if (val === "false") {
	            return false;
	        }
	        else {
	            return val;
	        }
	    },

	    update: function(settings) {
	        this.setSetting("historyCount", settings.historyCount, false);
	        this.setSetting("autoSaveRequest", settings.autoSaveRequest, false);
	        this.setSetting("retainLinkHeaders", settings.retainLinkHeaders, false);
	        this.setSetting("sendNoCacheHeader", settings.sendNoCacheHeader, false);
	        this.setSetting("variableDelimiter", settings.variableDelimiter, false);
	        this.setSetting("languageDetection", settings.languageDetection, false);
	        this.setSetting("haveDonated", settings.haveDonated, false);
	        this.setSetting("instantModals",settings.instantModals, false);

	        this.setSetting("enableSync", settings.enableSync, false);
	        this.setSetting("baseEulaAccepted", settings.baseEulaAccepted, false);

	        this.setSetting("responseFontSize", settings.responseFontSize, false);
	        this.setSetting("interceptorRedirect", settings.interceptorRedirect, true);
	        this.setSetting("saveTabs", settings.saveTabs, true);
	        this.setSetting("requestNewTab", settings.requestNewTab, false);
	        this.setSetting("trackUnsavedRequests", settings.trackUnsavedRequests, true);
	        this.setSetting("googleAnalytics", settings.googleAnalytics, true);
	        this.setSetting("uiScale", settings.uiScale, 0);

	        this.initValues();
	        this.initListeners();
	    },

	    getAsJson: function() {
	        var settings = {
	            historyCount: this.getSetting("historyCount"),
	            autoSaveRequest: this.getSetting("autoSaveRequest"),
	            retainLinkHeaders: this.getSetting("retainLinkHeaders"),
	            sendNoCacheHeader: this.getSetting("sendNoCacheHeader"),
	            variableDelimiter: this.getSetting("variableDelimiter"),
	            languageDetection: this.getSetting("languageDetection"),
	            haveDonated: this.getSetting("haveDonated"),
	            instantModals: this.getSetting("instantModals"),
	            responseFontSize: this.getSetting("responseFontSize"),
	            enableSync: this.getSetting("enableSync"),
	            historyDateFormat: this.getSetting("historyDateFormat"),
	            interceptorRedirect: this.getSetting("interceptorRedirect"),
	            saveTabs: this.getSetting("saveTabs"),
	            requestNewTab: this.getSetting("requestNewTab"),
	            trackUnsavedRequests: this.getSetting("trackUnsavedRequests"),
	            googleAnalytics: this.getSetting("googleAnalytics"),
	            uiScale: this.getSetting("uiScale")
	        };

	        return settings;
	    }
	});

	module.exports = Settings;


/***/ },
/* 356 */
/***/ function(module, exports) {

	var Legal = Backbone.Model.extend({
		initialize: function() {
			var view = this;
			view.eulaUrls = {
				//syncEula: pm.webUrl + "/licenses/postman_sync_addendum",
				syncTerms: pm.webUrl + "/privacy",
				syncEulas: pm.webUrl + "/privacy#using-postman",
				syncDocs:  pm.webUrl + "/docs/sync_overview"
				//baseEula: pm.webUrl + "/licenses/postman_base_app",
				//jetpacksEula: pm.webUrl + "/licenses/postman_jetpacks_addendum"
			};

			pm.mediator.on("showSyncInvitePopup", function() {
				view.showSyncPopup(true);
			});

			/*pm.mediator.on("showPostman3Splash", function(force) {
				view.showSyncPopup(force);
			});*/

			//pm.mediator.on("showBaseEula", function() {
			//	console.log("Showing base eula");
			//	pm.app.trigger("modalOpen", "#modal-eula-notif");
			//	$("#modal-eula-notif .modal-body").html(Handlebars.templates["base_eula"](eulaUrls));
			//	$("#modal-eula-notif").modal('show');
			//});

			$("body").on("click", "#sync-eula-accept", function() {
				pm.settings.setSetting("enableSync", true);
				pm.mediator.trigger("setSync",true);
				pm.user.setSyncEnabled(true);
				pm.mediator.trigger("showEnableSyncButton");

				pm.api.acceptSyncEula(pm.user.get("id"), pm.user.get("access_token"), function() {
					pm.user.freshSignIn = true; //to ensure that a force sync happens
					pm.syncManager.signIn();
					pm.user.getOrganizations();
				});
				$("#modal-eula-notif .modal-body").empty();
				pm.app.trigger("modalClose");
				$("#modal-eula-notif").modal("hide");
				pm.tracker.trackEvent("sync", "enable");
				pm.tracker.sendAppView("virtualScreen/splash/syncEnabled");
			});

			$("body").on("click", "#sync-eula-reject", function() {
				//close modal
				//cannot use sync yet
				$("#modal-eula-notif .modal-body").empty();
				$("#modal-eula-notif").modal("hide");
				pm.app.trigger("modalClose");
				pm.user.setSyncEnabled(false);
				pm.settings.setSetting("enableSync", false);
				pm.mediator.trigger("setSync",false);
				pm.mediator.trigger("showEnableSyncButton");
				pm.tracker.trackEvent("sync", "reject");
			});

			$("body").on("click", "#sync-eula-link", function() {
				pm.tracker.trackEvent("sync", "view", "eula");
			});

			$("body").on("click", "#sync-toc-link", function() {
				pm.tracker.trackEvent("sync", "view", "toc");
			});

			$("body").on("click", "#sync-docs-link", function() {
				pm.tracker.trackEvent("sync", "view", "documentation");
			});



			//$("body").on("click", "#base-eula-accept", function() {
			//	pm.settings.setSetting("baseEulaAccepted", true);
			//	pm.user.setBaseEulaAccepted(true);
			//	pm.api.acceptBaseEula(pm.user.get("id"), pm.user.get("access_token"), function() {
			//		console.log("Base eula accepted");
			//	});
			//	$("#modal-eula-notif .modal-body").empty();
			//	pm.app.trigger("modalClose");
			//	$("#modal-eula-notif").modal("hide");
			//});

			$("body").on("click", "#sign-up-for-sync", function() {
				$("#modal-eula-notif").modal("hide");
				pm.user.trigger("startLoginFlow", "signup");
			});
		},

		showSyncPopup: function(force) {
			if(postman_env !== "production") {
				return;
			}
			var shown = pm.settings.getSetting("syncInviteShown");
			if(!shown || force) {
				$("#modal-eula-notif .modal-body").html(Handlebars.templates["sync_eula"](this.eulaUrls));
				$("#modal-eula-notif").modal("show");
				if(pm.user.id) {
					//keep enable sync
					$("#sync-eula-accept").show();
					$("#sign-up-for-sync").hide();
				}
				else {
					$("#sync-eula-accept").hide();
					$("#sign-up-for-sync").show();
				}
				pm.app.trigger("modalOpen", "#modal-eula-notif");
				pm.settings.setSetting("syncInviteShown", true);
			}
		}
	});

	module.exports = Legal;


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var DebugInfo = __webpack_require__(358);
	var ThemeSettingsTab = __webpack_require__(359);

	var SettingsModal = Backbone.View.extend({
	    el: $("#modal-settings"),

	    initialize: function() {
	        var settings = this.model;
	        var debugInfo = new DebugInfo({model: this.model});

	        var themeSettingsTab = new ThemeSettingsTab({model: settings});

	        this.model.on('change:items', this.render, this);

	        pm.mediator.on("isTeamMember", this.setTeamSettings, this);

	        pm.appWindow.trigger("registerInternalEvent", "openSettings", function() {
	            $("#modal-settings").modal('show');
	        }, this);

	        if(postman_env !== "production") {
	            $("#sync-settings-form .sync-enable").remove();
	            $("#sync-settings-form .sync-disable").remove();
	        }

	        $("#modal-settings").on("shown", function () {
	            $("#history-count").focus();
	            pm.app.trigger("modalOpen", "#modal-settings");
	        });

	        $("#modal-settings").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });

	        $('#history-count').change(function () {
	            settings.setSetting("historyCount", $('#history-count').val());
	        });


	        $('#save-tabs').change(function () {
	            val = $(this).val();
	            if (val === "true") {
	                settings.setSetting("saveTabs", true);
	            }
	            else {
	                settings.setSetting("saveTabs", false);
	            }
	        });

	        $('#request-new-tab').change(function () {
	            settings.setSetting("requestNewTab", $('#request-new-tab').val());
	        });

	        $('#track-unsaved-requests').change(function () {
	            settings.setSetting("trackUnsavedRequests", $('#track-unsaved-requests').val());
	        });

	        $('#auto-save-request').change(function () {
	            var val = $('#auto-save-request').val();
	            if (val === "true") {
	                settings.setSetting("autoSaveRequest", true);
	            }
	            else {
	                settings.setSetting("autoSaveRequest", false);
	            }
	        });

	        $('#trim-keys-and-values').change(function () {
	            var val = $('#trim-keys-and-values').val();
	            if (val === "true") {
	                settings.setSetting("trimKeysAndValues", true);
	            }
	            else {
	                settings.setSetting("trimKeysAndValues", false);
	            }
	        });

	        $('#retain-link-headers').change(function () {
	            var val = $('#retain-link-headers').val();
	            if (val === "true") {
	                settings.setSetting("retainLinkHeaders", true);
	            }
	            else {
	                settings.setSetting("retainLinkHeaders", false);
	            }
	        });

	        $('#history-date-format').change(function () {
	            var val = $('#history-date-format').val();
	            settings.setSetting("historyDateFormat", val);
	        });

	        $('#send-no-cache-header').change(function () {
	            var val = $('#send-no-cache-header').val();
	            if (val === "true") {
	                settings.setSetting("sendNoCacheHeader", true);
	            }
	            else {
	                settings.setSetting("sendNoCacheHeader", false);
	            }
	        });

	        $('#send-postman-token-header').change(function () {
	            var val = $('#send-postman-token-header').val();
	            if (val === "true") {
	                settings.setSetting("sendPostmanTokenHeader", true);
	            }
	            else {
	                settings.setSetting("sendPostmanTokenHeader", false);
	            }
	        });

	        $('#use-postman-proxy').change(function () {
	            var val = $('#use-postman-proxy').val();
	            if (val === "true") {
	                settings.setSetting("usePostmanProxy", true);
	            }
	            else {
	                settings.setSetting("usePostmanProxy", false);
	            }
	        });

	        $("#auto-follow-interceptor-redirects").change(function () {
	            var val = $("#auto-follow-interceptor-redirects").val();
	            if (val === "true") {
	                settings.setSetting("interceptorRedirect", true);
	            }
	            else {
	                settings.setSetting("interceptorRedirect", false);
	            }
	        });

	        $('#postman-proxy-url').change(function () {
	            settings.setSetting("postmanProxyUrl", $('#postman-proxy-url').val());
	        });

	        $('#response-font-size').change(function () {
	            var newSize = parseInt($('#response-font-size').val(), 10);
	            settings.setSetting("responseFontSize", newSize);
	            pm.mediator.trigger("updateResponseFontSize", newSize);
	        });

	        $('#ui-scale').change(function () {
	            var newSize = parseInt($('#ui-scale').val());
	            var oldSize = settings.getSetting("uiScale");
	            settings.setSetting("uiScale", newSize);
	            //pm.mediator.trigger("updateUIScale", newSize, oldSize);
	            $("#scale-change-warning").show();
	        });

	        $('#xhr-timeout').change(function () {
	            settings.setSetting("xhrTimeout", parseInt($('#xhr-timeout').val(), 10));
	        });

	        $('#variable-delimiter').change(function () {
	            settings.setSetting("variableDelimiter", $('#variable-delimiter').val());
	        });

	        $('#language-detection').change(function () {
	            settings.setSetting("languageDetection", $('#language-detection').val());
	        });


	        $('#have-donated').change(function () {
	            var val = $('#have-donated').val();
	            // console.log("Donated status changed");
	            if (val === "true") {
	                settings.setSetting("haveDonated", true);
	                pm.mediator.trigger("donatedStatusChanged", true);
	            }
	            else {
	                settings.setSetting("haveDonated", false);
	                pm.mediator.trigger("donatedStatusChanged", false);
	            }
	        });

	        $('#force-windows-line-endings').change(function () {
	            var val = $('#force-windows-line-endings').val();
	            if (val === "true") {
	                settings.setSetting("forceWindowsLineEndings", true);
	            }
	            else {
	                settings.setSetting("forceWindowsLineEndings", false);
	            }
	        });

	        // TODO
	        // This needs to be moved somewhere else
	        $("#instant-modals").change(function () {
	            var val = $('#instant-modals').val();
	            if (val === "true") {
	                settings.setSetting("instantModals", true);
	                $(".fade").removeClass("fade").addClass("fade_disable");
	            }
	            else {
	                settings.setSetting("instantModals", false);
	                $(".modal-backdrop.in").addClass("fade");
	                $(".fade_disable").removeClass("fade_disable").addClass("fade");
	            }
	        });

	        $('#google-analytics').change(function () {
	            var val = $(this).val();
	            if (val === "true") {
	                settings.setSetting("googleAnalytics", true);
	            }
	            else {
	                settings.setSetting("googleAnalytics", false);
	            }
	            pm.mediator.trigger('settings:change:googleAnalytics', 'googleAnalytics', val === "true");
	        });

	        $("#download-all-data").on("click", function() {
	            pm.tracker.trackEvent("account", "download_dump");
	            var currentUserId = "0";
	            var onlyMine = $(".download-data-filter:checked").attr('data-filter');

	            if(onlyMine === "all" || !pm.user.isTeamMember()) {
	                currentUserId = "0";
	            }
	            else if(onlyMine === "mine") {
	                currentUserId = pm.user.id;
	            }

	            pm.indexedDB.downloadAllData(currentUserId, function() {
	              pm.alerts.success('Saved');
	            });
	        });

	        $("#import-all-data-files-input").on("change", function(event) {
	            // console.log("Process file and import data");
	            var files = event.target.files;
	            pm.tracker.trackEvent("account", "import_dump");
	            pm.indexedDB.importAllData(files, function() {
	                $("#import-all-data-files-input").val("");
	                pm.alerts.success('Import successful');
	            }, function(msg) {
	                //failure callback
	                $("#import-all-data-files-input").val("");
	                pm.alerts.error('Error parsing JSON: ' + msg);
	            });
	        });

	        if (this.model.getSetting("usePostmanProxy") === true) {
	            $('#postman-proxy-url-container').css("display", "block");
	        }
	        else {
	            $('#postman-proxy-url-container').css("display", "none");
	        }

	        //DEV ONLY
	        $("#update-postman-web-url").click(function() {
	            var newUrl = $("#settings-postman-web").val();
	            pm.storage.setValue({web_url: newUrl});
	        });

	        if(postman_env === "sync_dev") {
	            $(".settings-dev-only").show();
	        }

	        $("#update-postman-sync-url").click(function() {
	            var newUrl = $("#settings-postman-sync").val();
	            pm.storage.setValue({sync_url: newUrl});
	        });

	        this.render();
	    },

	    setTeamSettings: function(isTeamMember) {
	        if(!isTeamMember) {
	            $("#download-only-mine").prop('checked', true);
	        }
	    },

	    render: function() {
	        $('#history-count').val(this.model.getSetting("historyCount"));
	        $('#auto-save-request').val(this.model.getSetting("autoSaveRequest") + "");
	        $('#trim-keys-and-values').val(this.model.getSetting("trimKeysAndValues") + "");
	        $('#retain-link-headers').val(this.model.getSetting("retainLinkHeaders") + "");
	        $('#send-no-cache-header').val(this.model.getSetting("sendNoCacheHeader") + "");
	        $('#send-postman-token-header').val(this.model.getSetting("sendPostmanTokenHeader") + "");
	        $('#use-postman-interceptor').val(this.model.getSetting("useInterceptor") + "");
	        $('#use-postman-proxy').val(this.model.getSetting("usePostmanProxy") + "");
	        $('#postman-proxy-url').val(this.model.getSetting("postmanProxyUrl"));
	        $('#xhr-timeout').val(this.model.getSetting("xhrTimeout"));
	        $('#variable-delimiter').val(this.model.getSetting("variableDelimiter"));
	        $('#language-detection').val(this.model.getSetting("languageDetection"));
	        $('#have-donated').val(this.model.getSetting("haveDonated") + "");
	        $("#instant-modals").val(this.model.getSetting("instantModals")+ "");
	        $('#response-font-size').val(this.model.getSetting("responseFontSize")+ "");
	        $("#history-date-format").val(this.model.getSetting("historyDateFormat"));
	        $("#save-tabs").val(this.model.getSetting("saveTabs")+ "");
	        $("#request-new-tab").val(this.model.getSetting("requestNewTab") + "");
	        $("#track-unsaved-requests").val(this.model.getSetting("trackUnsavedRequests") + "");
	        $("#google-analytics").val(this.model.getSetting("googleAnalytics") + "");
	        $("#ui-scale").val(this.model.getSetting("uiScale"));
	    }
	});

	module.exports = SettingsModal;


/***/ },
/* 358 */
/***/ function(module, exports) {

	var DebugInfo = Backbone.View.extend({
		initialize: function() {
			var model = this.model;
			var view = this;

			this.render();
		},

		render: function() {
			if(postman_webkit || postman_macgap || postman_brackets || postman_electron) {
				//wait for main.js to set the version
				setTimeout(function() {
					var version = pm.electronVersion;
					$('.postman-version').text("Postman (" + version+")");
					var osInfo = "OSX";
					$('.postman-os-info').html(osInfo);
				},5000)
				return;
			}
			var manifest = chrome.runtime.getManifest();
			$('.postman-version').text("Version " + manifest.version + " (packaged)");

			chrome.runtime.getPlatformInfo(function(platformInfo) {
				var osInfo = "OS: <strong>" + platformInfo.os + "</strong><br/>";
				osInfo += "Architecture: <strong>" + platformInfo.arch + "</strong><br/>";
				osInfo += "Native client architecture: <strong>" + platformInfo.nacl_arch + "</strong><br/>";

				$('.postman-os-info').html(osInfo);
			});
		}
	});

	module.exports = DebugInfo;


/***/ },
/* 359 */
/***/ function(module, exports) {

	var ThemeSettingsTab = Backbone.View.extend({
		initialize: function() {
			var model = this.model;
			var view = this;		

			$('#postman-theme').change(function () {
	            pm.mediator.trigger("switchTheme", $("#postman-theme").val());
	            view.hideSettings();
	        });

	        $("body").on("click",".theme-thumbnail", function() {            
	            $(".theme-thumbnail").removeClass("selected-theme-thumb");
	            $(this).addClass("selected-theme-thumb");
	            
	            var theme = $(this).attr('data-theme');

	            $("#modal-settings").modal("hide");
	            pm.mediator.trigger("switchTheme", theme);
	            
	        });

	        pm.mediator.on("purchaseComplete", function(newPurchase) {
	            if (newPurchase.id === "collection-runner") {
	                view.hidePurchaseMessage();
	            }
	        });

	        pm.mediator.on("loadedPurchases", function(purchases) {
	            if (purchases.isUpgradeAvailable("collection-runner")) {
	                console.log("ThemeSettingsTab: Purchase is available");

	                view.hidePurchaseMessage();
	            }
	            else {
	                console.log("ThemeSettingsTab: Purchase is not available");

	                // TODO: Theme can be activated
	                view.hidePurchaseMessage();

	                // view.showPurchaseMessage();

	                if (pm.purchases.isTrialCompleted("collection-runner")) {
	                    console.log("ThemeSettingsTab: Trial completed");
	                }
	            }
	        });

	        this.render();
		},

		hideSettings: function() {
			$("#modal-settings").modal("hide");
		},

		hidePurchaseMessage: function() {
			$("#settings-theme-buy-message").css("display", "none");
	        $("#settings-theme-form").css("display", "block");
		},

		showPurchaseMessage: function() {		
	        $("#settings-theme-form").css("display", "none");
	        $("#settings-theme-buy-message").css("display", "block");
		},

		render: function() {
			$('#postman-theme').val(this.model.getSetting("postmanTheme"));
	        $(".theme-thumbnail").removeClass("selected-theme-thumb");
	        $(".theme-thumbnail[data-theme='"+this.model.getSetting("postmanTheme")+"']").addClass("selected-theme-thumb");
		}
	});

	module.exports = ThemeSettingsTab;


/***/ },
/* 360 */
/***/ function(module, exports) {

	var ThemeManager = Backbone.Model.extend({
		defaults: function() {
			return {
				"theme": "light",
				"bootstrap_theme": "default",
				"codemirror_theme": "eclipse"
			}
		},

		initialize: function() {
			console.log("Initialized ThemeManager");

			pm.mediator.on("switchTheme", this.onSwitchTheme, this);

			this.initializeTheme();
		},

		initializeTheme: function() {
			var theme = pm.settings.getSetting("postmanTheme");
			this.switchTheme(theme);
		},

		getCodeMirrorTheme: function() {
			return this.get("codemirror_theme");
		},

		addStylesheet: function(id, file) {
			var head  = document.getElementsByTagName('head')[0];
		    var link  = document.createElement('link');
		    link.setAttribute('id', id);
		    link.setAttribute('rel', 'stylesheet');
		    link.setAttribute('type', 'text/css');
		    link.setAttribute('href', file);
		    link.setAttribute('media', 'all');
		    head.appendChild(link);
		},

		onSwitchTheme: function(theme) {
			this.switchTheme(theme);
		},

		switchTheme: function(theme) {
			$("#container").hide();
			$("#loader").show();

			if (theme === 'light') {
				this.set("theme", theme);
				this.set("bootstrap_theme", "default");
				this.set("codemirror_theme", "eclipse");

				$('link[rel=stylesheet][href~="css/requester/styles.css"]').remove();
				$('link[rel=stylesheet][href~="css/test_runner/styles.css"]').remove();
				$('link[rel=stylesheet][href~="css/requester/styles.dark.css"]').remove();
				$('link[rel=stylesheet][href~="css/test_runner/styles.dark.css"]').remove();
				$('link[rel=stylesheet][href~="css/bootstrap-modal.css"]').remove();

				this.addStylesheet("bootstrap-modal", "css/bootstrap-modal.css");
				this.addStylesheet("postman-theme-light", "css/requester/styles.css");
				if(pm.testRunner) {
					this.addStylesheet("postman-theme-light-test", "css/test_runner/styles.css");
				}

				pm.settings.setSetting("postmanTheme", "light");
				pm.settings.setSetting("postmanCodeMirrorTheme", "clouds");
			}
			else {
				this.set("theme", theme);
				this.set("bootstrap_theme", "slate");
				this.set("codemirror_theme", "dark");

				$('link[rel=stylesheet][href~="css/requester/styles.css"]').remove();
				$('link[rel=stylesheet][href~="css/test_runner/styles.css"]').remove();
				$('link[rel=stylesheet][href~="css/requester/styles.dark.css"]').remove();
				$('link[rel=stylesheet][href~="css/test_runner/styles.dark.css"]').remove();
				$('link[rel=stylesheet][href~="css/bootstrap-modal.css"]').remove();

				this.addStylesheet("bootstrap-modal", "css/bootstrap-modal.css");
				this.addStylesheet("postman-theme-dark", "css/requester/styles.dark.css");

				if(pm.testRunner) {
					this.addStylesheet("postman-theme-dark-test-runner", "css/test_runner/styles.dark.css");
				}

				pm.mediator.trigger("switchCodeMirrorTheme", "monokai");
				pm.settings.setSetting("postmanTheme", "dark");
				pm.settings.setSetting("postmanCodeMirrorTheme", "monokai");
			}

			setTimeout(function() {
				$("#container").velocity("fadeIn", { duration: 500 });
				$("#loader").velocity("fadeOut", { duration: 500 });

				if (theme === 'light') {
					pm.mediator.trigger("switchCodeMirrorTheme", "eclipse");
				}
				else {
					pm.mediator.trigger("switchCodeMirrorTheme", "monokai");
				}

				/* Set overridden scale value on load */
	        	pm.mediator.trigger("updateUIScale", pm.settings.getSetting("uiScale"), 0);
			}, 1000);
		}
	});

	module.exports = ThemeManager;


/***/ },
/* 361 */
/***/ function(module, exports) {

	var Onboarding = Backbone.Model.extend({
		initialize: function() {
			var onboarding = this;
			this.allTooltips = {
				"tabs" : {
					"selector": ".request-switch-tab:first",
					"placement": "bottom",
					"title": "Tabs",
					"content": "Now you can work on multiple requests at the same time",
					"order": 1
				},
				"env-dropdown" : {
					"selector": "#environment-selector",
					"placement": "bottom",
					"title": "Environments",
					"content": "Switch contexts easily. Use presets to ease speed up your workflow",
					"order": 1
				},
				"code-gen" : {
					"selector": ".preview-request",
					"placement": "left",
					"title": "Code Generator",
					"content": "Create code snippets of your request in multiple languages",
					"order": 1
				},
				"save-response" : {
					"selector": "#response-sample-save-start-container",
					"placement": "bottom",
					"title": "Save response",
					"content": "Save response for future reference",
					"order": 2
				},
				"pr-script" : {
					"selector": "#request-builder-tab-prscript a",
					"placement": "bottom",
					"title": "Pre-request scripts",
					"content": "Run a script that is called before a request is called",
					"order": 2
				},
				"runner" : {
					"selector": "#add-on-test-runner",
					"placement": "bottom",
					"title": "Collection runner",
					"content": "Run all requests in a collection",
					"order": 2
				},
			};

			//this._loadActiveTooltips();
			//this._renderActiveTooltips();

			pm.mediator.on("versionUpdate", function(currentVersion, previousVersion){
				/*this._setAvailableTooltips(currentVersion, previousVersion);
				this.__removeAllTooltips();
				this._loadActiveTooltips();
				this._renderActiveTooltips();*/
			}, this);

			pm.mediator.on("dismissTooltip", function(tooltip){
				this.dismissTooltip(tooltip);
			}, this);

			pm.mediator.on("loadedCollectionsFromDB", function() {
				if(!pm.settings.getSetting('importedOnboardingCollection') && !pm.isTesting) {
					pm.settings.setSetting('importedOnboardingCollection', true);
					(pm.collections.length === 0) && onboarding._importOnboardingCollection();
				}
			});
		},

		_importOnboardingCollection: function() {
			$.ajax({
				type: 'GET',
				// This url is defined in config.
				url: demo_collection_url,
				success: function(data) {
				// Importing data into a collection without overwriting any ids.
				  pm.collections.setSelfOwnerForCollection(data);
				  pm.collections.importWholeCollectionWithOptSync(data,true, false, false, null);
				},
				error: function(e) {
					console.log('Error while importing onboarding collection', e);
				}
			});
		},

		_setAvailableTooltips: function(currentVersion, previousVersion) {
			if(currentVersion[0] == '3' && (previousVersion[0] == '2' || previousVersion == "blank")) {
				this.availableTooltips = [];
				_.forEach(this.allTooltips, function(option, tooltip){
					this.availableTooltips.push(tooltip);
				}, this);

				pm.settings.setSetting("availableTooltips", this.availableTooltips);
			}
		},

		_loadActiveTooltips: function() {
			this._loadDismissedTooltips();
			this._loadAvailableTooltips();
			this.activeTooltips = [];

			var currentOrder = this._getCurrentActiveOrder();
			_.forEach(this._getAllTooltipsOfOrder(currentOrder), function(tooltip){
				if(!_.contains(this.dismissedTooltips, tooltip)) {
					this.activeTooltips.push(tooltip);
				}
			}, this);
		},

		_getCurrentActiveOrder: function() {
			var dismissedTooltipOrders = [];
			_.forEach(this.dismissedTooltips, function(tooltip){
				dismissedTooltipOrders.push(this.getTooltipOption(tooltip, "order"));
			}, this);

			if(_.isEmpty(dismissedTooltipOrders)) {
				return 1;
			}

			var maxDismissedOrder = _.max(dismissedTooltipOrders);
			var activeTooltipsWithMaxDismissedOrder = [];
			_.forEach(this._getAllTooltipsOfOrder(maxDismissedOrder), function(tooltip){
				if(!_.contains(this.dismissedTooltips, tooltip)) {
					activeTooltipsWithMaxDismissedOrder.push(tooltip);
				}
			}, this);

			if(_.isEmpty(activeTooltipsWithMaxDismissedOrder)) {
				return maxDismissedOrder + 1;
			} else {
				return maxDismissedOrder;
			}
		},

		_getAllTooltipsOfOrder: function(order) {
			return _.filter(this.availableTooltips, function(tooltip){
				return this.getTooltipOption(tooltip, "order") == order;
			}, this);
		},

		_renderActiveTooltips: function() {
			_.forEach(this.activeTooltips, function(activeTooltip){
				this.renderTooltip(activeTooltip);
			}, this);
		},

		renderTooltip: function(tooltip) {
			var options = this.getTooltipOption(tooltip);
			if(!options) return false;

			var selector = options.selector;
			if(!selector) return false;

			this._addTooltip(tooltip);
			this._attachPopover(tooltip);
			this._attachDismissListener(tooltip);
		},

		getTooltipTemplate: function(tooltip) {
			return '<span class="icon-onboarding-tooltip" data-id="' + tooltip + '"></span>';
		},

		getTooltipElement: function(tooltip) {
			return $(".icon-onboarding-tooltip[data-id=" + tooltip + "]");
		},

		getTooltipOption: function(tooltip, option) {
			if(!tooltip) return null;

			var options = this.allTooltips[tooltip];
			if(!options) return null;

			if(option) {
				if(!options[option]) return null;
				return options[option];
			}
			return options;
		},

		getTooltipContent: function(tooltip) {
			return Handlebars.templates.onboarding_popover({
				tooltip: tooltip,
				content: this.getTooltipOption(tooltip, "content"),
				title: this.getTooltipOption(tooltip, "title"),
			});
		},

		_addTooltip: function(tooltip) {
			var $tooltipEl = $(this.getTooltipTemplate(tooltip));
			$(this.getTooltipOption(tooltip, "selector")).append($tooltipEl);
			$(this.getTooltipOption(tooltip, "selector")).css("position", "relative");
		},

		_attachPopover: function(tooltip) {
			var $tooltip = this.getTooltipElement(tooltip);
			$tooltip.popover({
				html: true,
				placement: this.getTooltipOption(tooltip, "placement"),
				trigger: "manual",
				content: this.getTooltipContent(tooltip),
				container: "body"
			});

			this._addClickListener(tooltip);
		},

		_addClickListener: function(tooltip) {
			this.getTooltipElement(tooltip).on("click", this._handleClickEvent.bind(this));
		},

		_removeClickListener: function(tooltip) {
			this.getTooltipElement(tooltip).off("click", this._handleClickEvent.bind(this));
		},

		_showPopover: function(tooltip) {
			if (this.getTooltipElement(tooltip).hasClass('shown')) return false;

			this.getTooltipElement(tooltip).popover('show');
			this.getTooltipElement(tooltip).addClass('shown');
			this._addCloseListeners();
		},

		_hidePopover: function(tooltip) {
			this.getTooltipElement(tooltip).popover('hide');
			this.getTooltipElement(tooltip).removeClass('shown');
			this._removeCloseListeners();
		},

		_hideAllPopovers: function(excludeList) {
			excludeList = excludeList || [];
			_.forEach(this.activeTooltips, function(tooltip){
				if(this.getTooltipElement(tooltip).hasClass('shown') && !_.contains(excludeList, tooltip)) {
					this._hidePopover(tooltip);
				}
			}, this);
		},

		_attachDismissListener: function(tooltip) {
			$("body").on("click", ".onboarding-dismiss[data-id=" + tooltip + "]", this._handleDismissEvent.bind(this));
		},

		_handleDismissEvent: function(event) {
			var tooltip = $(event.target).data('id');
			this.dismissTooltip(tooltip);
		},

		dismissTooltip: function(tooltip) {
			this._hidePopover(tooltip);
			this.removeTooltip(tooltip);
			this._dismissTooltip(tooltip);
			pm.tracker.trackEvent("onboarding", "got_it_click", tooltip);
		},

		_handleClickEvent: function(event) {
			event.stopPropagation();
			var tooltip = $(event.target).data('id');
			if (this.getTooltipElement(tooltip).hasClass('shown')) {
				this._hideAllPopovers();
			} else {
				this._hideAllPopovers([tooltip]);
				this._showPopover(tooltip);
			}
			pm.tracker.trackEvent("onboarding", "circle_click", tooltip);
		},

		_addCloseListeners: function() {
			$('body').on('click', this.__closeHandler.bind(this));
			$('body').on('click', '.onboarding-content', this.__preventEventPropagation.bind(this));
		},

		_removeCloseListeners: function() {
			$('body').off('click', this.__closeHandler.bind(this));
			$('body').off('click', '.onboarding-content', this.__preventEventPropagation.bind(this));
		},

		__closeHandler: function() {
			this._hideAllPopovers();
		},

		__preventEventPropagation: function(e) {
			e.stopPropagation();
		},

		removeTooltip: function(tooltip) {
			this._hidePopover(tooltip);
			this.getTooltipElement(tooltip).popover('destroy');
			this.getTooltipElement(tooltip).remove();
		},

		_loadDismissedTooltips: function() {
			this.dismissedTooltips = pm.settings.getSetting("dismissedTooltips") || [];
		},

		_loadAvailableTooltips: function() {
			this.availableTooltips = pm.settings.getSetting("availableTooltips") || [];
		},

		_dismissTooltip: function(tooltip) {
			this._loadDismissedTooltips();
			var isAlreadyDismissed = _.contains(this.dismissedTooltips, tooltip);

			if(!isAlreadyDismissed) {
				this.dismissedTooltips.push(tooltip);
			}

			pm.settings.setSetting("dismissedTooltips", this.dismissedTooltips);
		},

		__resetTooltips: function(){
			this.__removeAllTooltips();
			this.__clearDismissedTooltips();
			this._loadDismissedTooltips();
			this._loadActiveTooltips();
			this._renderActiveTooltips();
		},

		__clearDismissedTooltips: function() {
			pm.settings.setSetting("dismissedTooltips", []);
		},

		__clearAvailableTooltips: function() {
			pm.settings.setSetting("availableTooltips", []);
		},

		__dismissAllTooltips: function() {
			_.forEach(this.activeTooltips, function(tooltip){
				this._dismissTooltip(tooltip);
			}, this);
		},

		__removeAllTooltips: function() {
			_.forEach(this.activeTooltips, function(tooltip){
				this.removeTooltip(tooltip);
			}, this);
		},

	});

	module.exports = Onboarding;


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	var BrowserLogin = Backbone.Model.extend({
		initialize: function() {
	    if(postman_electron) {
	      this.ipc = __webpack_require__(254);
	      pm.appWindow.trigger("registerInternalEvent", "browserLoginCallback", this.onBrowserLoginCallback, this);
	      pm.appWindow.trigger("registerInternalEvent", "browserLoginError", this.onBrowserLoginCallback, this);
	    }
		},

	  /**
	  * Opens a browser window with the URL, calls callback(redirect_url) when redirect_url is of the form fhb.chromiumapp.org
	  * wrapper for
	  */
	  openLoginFlow: function(url, callback) {
	    if(postman_electron) {
	      this.callback = callback;
	      this.ipc.send("startBrowserLogin", url);
	    }
	    else {
	      chrome.identity.launchWebAuthFlow({'url': url, 'interactive': true}, callback);
	    }
	  },

	  /**
	  * Electron only: called when the BrowserWindow from the main Process redirects to fhb.chromiumapp.org
	  */
	  onBrowserLoginCallback: function(url) {
	    if(typeof this.callback === "function") {
	    	this.callback(url);
	      this.callback = null;
	    }
	  },

	  onBrowserLoginCallbackError: function() {
	      this.callback = null;
	      pm.mediator.trigger("browserLoginError");
	  }
	});

	module.exports = BrowserLogin;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var CookieManager = Backbone.Model.extend({
		initialize: function() {
			this.cookies = {};
			this.win = __webpack_require__(256).getCurrentWindow();
			this.loadCookies();
		},

		//when the app loads
		//load all session cookies into this.cookies

		//when a request is being sent
		//if the cookies header is present > (call webContent.cookies.set)
		//and add to this.cookies

		//when a response is received
		//for each set cookie header, parse the Set-Cookie header and add it to .set and the store > NOTE- this might never be called
		//also get the cookies for the request's domain, and re-add to this.cookies (if electron parses response headers on it's own)

		loadCookies: function() {
			var oldThis = this;
			this.win.webContents.session.cookies.get({},
			    function(error, cookies) {
			    if (error) throw error;
			    _.each(cookies, function(cookie) {
			    	var domain = cookie.domain;
			    	if(domain[0]=='.') {
			    		domain = domain.substring(1);
			    	}
			    	if(!oldThis.cookies.hasOwnProperty(domain)) {
			    		oldThis.cookies[domain] = {};
			    	}
			    	oldThis.cookies[domain][cookie.name] = cookie;
			    });
			    /*console.log("Loaded cookies: ");
		    	console.log(oldThis.cookies);*/
			    oldThis.trigger("loadedCookies", oldThis.getDomainList());
			});
		},

		/**
		* requestUrl must start with http[s]://
		*/
		reloadCookiesForUrl: function(requestUrl, callback) {
			var oldThis = this;
			this.win.webContents.session.cookies.get({url: requestUrl},
			    function(error, cookies) {
			    if (error) throw error;
			    _.each(cookies, function(cookie) {
			    	if(!oldThis.cookies.hasOwnProperty(cookie.domain)) {
			    		oldThis.cookies[cookie.domain] = {};
			    	}
			    	oldThis.cookies[cookie.domain][cookie.name] = cookie;
			    });
			    //console.log("Loaded cookies: ");
		    	//console.log(oldThis.cookies);
				callback();
			});
		},

		getCookiesForDomain: function(domain) {
			return this.cookies[domain];
		},

		getDomainList: function() {
			var retVal = [];
			for(var domain in this.cookies) {
				if(this.cookies.hasOwnProperty(domain)) {
					retVal.push(domain);
				}
			}
			return retVal;
		},

		getCookiesForUrl: function(url, callback) {
			if(!url) {
				callback([]);
			}
			var cookieManager = this;
			url = ensureProperUrl(url);
			try {
				var urlObject = new URL(url);
				var host  = urlObject.host;
				this.reloadCookiesForUrl(url, function() {
					callback(_.values(cookieManager.getCookiesForDomain(host)));
				});
			} catch(e) {
				//invalid URL
				callback([]);
			}
		},

		/*
		* cookie string is the value of the Cookies header
		* add these cookies to URL
		*/
		addCookies: function(url, cookieString) {
			var oldThis = this;
			try {
				var urlObject = new URL(url);
				var host  = urlObject.host;
				var cookies = this._parseCookieHeader(host, cookieString);
				_.each(cookies, function(cookie) {
					oldThis.addSingleCookie(url, host, cookie);
				});
			}
			catch(e) {
				console.error("Could not add cookies for invalid URL");
				console.error(e);
			}
		},

		addSingleCookie: function(url, host, cookie) {
			var oldThis = this;
			var urlKey = host;
			if(!oldThis.cookies.hasOwnProperty(urlKey)) {
				oldThis.cookies[urlKey] = {};
			}
			//cookie will be loaded once the callback is successful
			//oldThis.cookies[urlKey][cookie.name] = cookie;
			console.log("Setting cookie with url="+cookie.url+", name="+cookie.name+", domain="+host);
			if(cookie.url.indexOf("http://")!==0 && cookie.url.indexOf("https://")!==0) {
				cookie.url = "http://" + cookie.url;
			}

			if(!cookie.domain) {
				cookie.domain = host;
			}
			if(!cookie.path) {
				cookie.path = '/';
			}

			oldThis.win.webContents.session.cookies.set({
				url: cookie.url,
				name: cookie.name,
				value: cookie.value,
				domain: host,
				//session: cookie.HttpOnly,
				secure: cookie.Secure,
				expirationDate: cookie.expires,
				//expirationDate: 2497736186
			},
			function(error) {
				if(error)
					throw error;
				console.log("Cookie set");
				oldThis.loadCookies();
				oldThis.trigger("loadedCookies", oldThis.getDomainList());
			});
		},

		/**
		* Called when a New domain is added from the Cookie Modal
		*/
		addNewDomain: function(domainName) {
			domainName = domainName.toLowerCase();
			if(!this.cookies.hasOwnProperty(domainName)) {
				this.cookies[domainName] = {};
			}
		},

		deleteDomain: function(domain) {
			var cookiesForDomain = this.cookies[domain];
			var oldThis = this;
			delete this.cookies[domain];
			var url = domain;
			for(var cookieName in cookiesForDomain) {
				if(url.indexOf("http://")!==0 && url.indexOf("https://")!==0) {
					url = "http://" + url;
				}
				oldThis.win.webContents.session.cookies.remove({url: url, name: cookieName}, function(error) {
					if(error)
						throw error;
					console.log("Cookie removed");
					oldThis.trigger("loadedCookies", oldThis.getDomainList());
				});
			}

		},

		deleteCookie: function(url, cookieName) {
			var oldThis = this;
			var urlKey = url;
			delete oldThis.cookies[urlKey][cookieName];
			if(url[0]==='.') {
				url = "www" + url;
			}
			if(url.indexOf("http:")!==0 && url.indexOf("https:")!==0) {
				url = "http://" + url;
			}
			oldThis.win.webContents.session.cookies.remove({url: url, name: cookieName}, function(error) {
				if(error)
					throw error;
				console.log("Cookie removed");
				oldThis.trigger("loadedCookies", oldThis.getDomainList());
			});
		},

		/**
		* returns array of cookie objects comaptible with electron
		*/
		_parseCookieHeader: function(host, cookieString) {
			if(!cookieString) return [];

			var cookies = cookieString.split(";");
			var numCookies = cookies.length;
			var retVal = [];
			for(var i=0;i<numCookies;i++) {
				retVal.push(this._parseSingleCookieString(host, cookies[i]));
			}
			return retVal;
		},

		_parseSingleCookieString: function(host, cookieString) {
			//if this was set using the cookie manager, it might have path and domain too
			var thisCookieParts = cookieString.split(";");
			var len = thisCookieParts.length;
			var retVal = {};
			var i=0;


			var thisCookie = thisCookieParts[i].trim().split("=");
			if(thisCookie.length>=1) {
				//Added this to allow cookie values to have '='
				//Zendesk 1344
				try {
					var cName = thisCookie.splice(0,1)[0]; //this is the part before the first =
					var cValue = thisCookie.join("="); //part after the first =
					retVal.url = host;
					retVal.name = cName;
					retVal.value = cValue;
				}
				catch(e) {
					console.log("Error setting cookie: " + e);
				}
			}

			//process all the other parts
			retVal.secure = false;
			retVal.HttpOnly = false;
			i++;
			for(;i<len;i++) {
				//session: cookie.HttpOnly,
				//secure: cookie.Secure,
				//expirationDate: cookie.Expiry,
				//handle special cases for httponly/secure
				var thisParts = thisCookieParts[i].trim().split("=");
				var propName = thisParts.splice(0,1)[0];
				var propVal = thisParts.join("=");

				if(propName==="Secure") {
					retVal.secure = true;
					continue;
				}
				if(propName==="HttpOnly") {
					retVal.session = true;
					continue;
				}
				if(propName==="Expires") {
					var date = new Date(propVal);
					if(date) {
						retVal.expirationDate = date.getTime()/1000;
					}
					continue;
				}

				retVal[propName] = propVal;
			}

			return retVal;
		}
	});

	module.exports = CookieManager;


/***/ },
/* 364 */
/***/ function(module, exports) {

	var CookieModal = Backbone.View.extend({
	    initialize: function() {
	        var model = this.model;
	        var view = this;
	        $("#cookie-domain-list").on("change", function() {
	            view.selectDomain($(this).val());
	        });

	        $("#cookie-list").on("change", function() {
	            var cookieName = $(this).val();
	            var cookieValue = $("#cookie-list option[value="+cookieName+"]").text();
	            view.selectCookie(cookieName, cookieValue);
	        });

	        $("#add-new-domain").on("click", function() {
	            var domainName = $("#new-domain-name").val();
	            view.addDomain(domainName);
	            $("#new-domain-name").val("");
	        });

	        $("#remove-domain").click(function() {
	            var selectedDomain = $("#cookie-domain-list").val();
	            if(selectedDomain) {
	                model.deleteDomain(selectedDomain);
	            }
	        });

	        $("#add-new-cookie").on("click", function() {
	            var cookieString = $("#new-cookie").val();
	            view.saveCookie(cookieString);
	        });

	        $("#delete-cookie").on("click", function() {
	            var cookieName = $("#cookie-list").val();
	            if(_.isEmpty($("#new-cookie").val())) {
	                return;
	            }
	            $("#new-cookie").val("");
	            view.deleteCookie(cookieName);
	        });


	        model.on("loadedCookies", _.bind(this.loadDomainList, this));

	        $("#modal-cookies").on("shown", function () {
	            pm.app.trigger("modalOpen", "#modal-cookies");
	            model.loadCookies();
	            //view.loadDomainList(model.cookies);
	            //var currDomain = $("#cookie-domain-list").val();
	            //view.selectDomain(currDomain);
	        });

	        $("#modal-cookies").on("hidden", function () {
	            pm.app.trigger("modalClose");
	        });
	    },

	    clearCookieEditor: function() {
	        $("#cookie-list").text("");
	    },

	    loadDomainList: function(list) {
	        if(!(list instanceof Array)) {
	            return
	        }
	        var htmlString = "";
	        var dLen = list.length;
	        for(var i=0;i<dLen;i++) {
	            htmlString += "<option data-domain=\""+list[i]+"\" value=\""+list[i]+"\">"+escape(list[i])+"</option>";
	        }
	        $("#cookie-domain-list").html(htmlString).attr("size", Math.max(dLen,20)); 
	        /*console.log("Loaded domain list: ");
	        console.log(list);*/
	        this.clearCookieEditor();
	    },

	    addDomain: function(domain) {
	        if(domain=="") {
	            return;
	        }
	        domain = domain.toLowerCase();
	        this.model.addNewDomain(domain);
	        $("#cookie-domain-list").append("<option data-domain=\""+domain+"\" value=\""+domain+"\">"+escape(domain)+"</option>");
	    },

	    //called when a domain is selected. this should fetch the relevant cookies from the model and loadCookiesIntoEditor()
	    selectDomain: function(domain) {
	        var cookieList = this.model.getCookiesForDomain(domain);
	        this.loadCookiesIntoEditor(cookieList);
	        var domainToUse = backslashSpecial(domain);
	        $("#cookie-domain-list option[data-domain="+domainToUse+"]").attr('selected', 'selected');
	    },

	    loadCookiesIntoEditor: function(cookieList) {
	        //cookieList is an object
	        //each key is cookie name
	        //each value is an object. needs to be converted to string
	        var view = this;
	        view.clearCookieEditor();
	        var numCookies = 0;
	        for(var cookieName in cookieList) {
	            if(cookieList.hasOwnProperty(cookieName)) {
	                var thisCookie = cookieList[cookieName];
	                if(!_.isEmpty(cookieName)) {
	                    view.addCookieToEditor(thisCookie, view.stringifyCookieObject(thisCookie));
	                    numCookies++;
	                }
	            }
	        }
	        $("#cookie-list").attr("size", Math.max(numCookies,20));
	    },

	    addCookieToEditor: function(cookie, string) {
	        var cookieNameToAdd = backslashSpecial(cookie.name);
	        $("#cookie-list option[data-cookiename="+cookieNameToAdd + "]").remove();
	        $("#cookie-list").append('<option data-cookiename="'+cookieNameToAdd+'" value="'+cookie.name+'">'+string+'</option>');
	    },

	    stringifyCookieObject: function(co) {
	        var retVal = co.name+"="+co.value+"; path="+co.path+"; domain="+co.domain+";";
	        if(co.secure) {
	            retVal += " Secure;";
	        }
	        /*if(co.session)  {
	            retVal += " HttpOnly;";
	        }*/
	        return retVal;
	    },

	    selectCookie: function(cookieName, cookieValue) {
	        $("#new-cookie").val(cookieValue);
	    },

	    saveCookie: function(cookieString) {
	        var oldThis = this;
	        var domain = $("#cookie-domain-list").val();
	        var selectedCookieName = $("#cookie-list").val();

	        //if the name of the old cookie=selectedCookieName, update. Else, add

	        //parse cookieString
	        var cookieObject = this.model._parseSingleCookieString(domain, cookieString);
	        this.model.addSingleCookie(domain, cookieObject.url, cookieObject);
	        setTimeout(function() {
	            oldThis.selectDomain(domain);
	        }, 200);
	    },

	    deleteCookie: function(cookieName) {
	        var oldThis = this;
	        var domain = $("#cookie-domain-list").val();
	        this.model.deleteCookie(domain, cookieName);
	        setTimeout(function() {
	            oldThis.selectDomain(domain);
	        }, 200);
	    }

	});

	module.exports = CookieModal;

/***/ },
/* 365 */
/***/ function(module, exports) {

	var InterceptorInstaller = Backbone.Model.extend({
		initialize: function() {
			return;
			var installed = pm.settings.getSetting("interceptorManifestInstalled");
			if(!installed || installed=="false") {
				this.installManifest();
				pm.settings.setSetting("interceptorManifestInstalled", true)
			}
		},

		installManifest: function() {
			//copy the interceptor manifest file to the correct location
			//send message to main
			pm.appWindow.sendToElectron({
	            event: "installInterceptorManifest"
	        });
		}
	});

	module.exports = InterceptorInstaller;

/***/ },
/* 366 */
/***/ function(module, exports) {

	var ElectronTCPReader = Backbone.Model.extend({
		defaults: function() {
			return {
				"socketId": null,
				"socketInfo": null,
				"port": "5005",
				"target_type": "history",
				"target_id": "",
				"status": "disconnected",
				"filters": {
					"url": "",
					"url_disabled": "",
					"methods": "",
					"status_codes": "",
					"content_type": ""
				}
			}
		},

		initialize: function() {
			var model = this;
			$("#modal-tcp-manager").remove();
			pm.storage.getValue("readerSettings", function(settings) {
				if (settings) {
					if(typeof settings === "string") {
						settings = JSON.parse(settings);
					}
					model.set("port", settings.port);
					model.set("target_type", settings.target_type);
					model.set("target_id", settings.target_id);

					model.set("filters", settings.filters);
				}
			});

			pm.appWindow.trigger("registerInternalEvent", "proxyRequestCaptured", this.onProxyRequestCaptured, this);
			pm.appWindow.trigger("registerInternalEvent", "proxyClosed", this.onProxyClosed, this);
			pm.appWindow.trigger("registerInternalEvent", "proxyStarted", this.onProxyStarted, this);
		},

		save: function() {
			var readerSettings = {
				"readerSettings": JSON.stringify({
					"port": this.get("port"),
					"target_type": this.get("target_type"),
					"target_id": this.get("target_id"),
					"filters": this.get("filters")
				})
			};

			pm.storage.setValue(readerSettings, function() {
			});

		},

		onProxyClosed: function() {
			this.stopListening();
			this.set("status", "disconnected");
		},

		onProxyStarted: function(ret) {
			if(ret == "0") {
				this.set("status", "connected");
			}
		},

	    onProxyRequestCaptured: function(requestObject) {
	        var url = requestObject.url,
	            method = requestObject.method,
	            headers = requestObject.headers,
	            data = requestObject.data;

	    	var requestObject = {
	    		url: url, method: method, headers: headers, data: data, name: url
	    	};

	        console.log("Recd request from proxy: " + url + ", " + method);
	        this.addRequestObject(requestObject);
	    },


		isAllowed: function(request) {
			var filters = this.get("filters");
			var methods = filters.methods.split(",");

			function trim(s) {
				return s.trim().toUpperCase();
			}

			var filterMethods = _.each(methods, trim);

			var flagUrlContains = true;
			var flagUrlDisabled = true;
			var flagUrlMethods = true;

			var result;

			// console.log("Filters are", filters);

			if (filters.url === "") {
				flagUrlContains = true;
			}
			else {
				if (request.url.search(filters.url) >= 0) {
					flagUrlContains = true;
				}
				else {
					flagUrlContains = false;
				}
			}

			if (filters.url_disabled === "") {
				flagUrlDisabled = true;
			}
			else {
				if (request.url.search(filters.url_disabled) < 0) {
					flagUrlDisabled = true;
				}
				else {
					flagUrlDisabled = false;
				}
			}

			if (filterMethods.length > 0) {
				flagUrlMethods = _.indexOf(filterMethods, request.method.toUpperCase());
			}
			else {
				flagUrlMethods = true;
			}

			result = flagUrlMethods && flagUrlDisabled && flagUrlContains;
			return result;
		},

		addRequestObject: function(request) {
			var target_type = this.get("target_type");
			var collection;
			var target_id;

			// console.log("Settings are", this.toJSON());

			if (this.isAllowed(request)) {
				//modify request for sync
				request.headers = pm.request.packHeaders(request.headers);
				if (target_type === "history") {
					pm.history.addRequestFromObject(request);
				}
				else {
					target_id = this.get("target_id");
					pm.collections.addRequestToCollectionId(request, target_id);
				}
			}
		},

		startListening: function() {
			var model = this;

			var portToUse = this.get("port");

			pm.appWindow.sendToElectron({
	            event: "startProxy",
	            data: {
	                port: portToUse
	            }
	        });
	        model.set("status", "connected");
		},

		stopListening: function() {
			pm.appWindow.sendToElectron({
	            event: "stopProxy",
	            data: {}
	        });
			this.set("status", "disconnected");
		},

		connect: function() {
			this.startListening();
			this.set("status", "connected");
		},

		disconnect: function() {
			this.stopListening();
			this.set("status", "disconnected");
			if(!pm.settings.getSetting("useInterceptor")) {
				$(".icon-navbar-interceptor").removeClass("active");
			}
		}
	});

	module.exports = ElectronTCPReader;


/***/ },
/* 367 */
/***/ function(module, exports) {

	filesystem = {
	    fs:{},

	    onInitFs:function (filesystem) {
	        pm.filesystem.fs = filesystem;
	    },

	    errorHandler:function (e) {
	        var msg = '';

	        switch (e.code) {
	        case FileError.QUOTA_EXCEEDED_ERR:
	            msg = 'QUOTA_EXCEEDED_ERR';
	            break;
	        case FileError.NOT_FOUND_ERR:
	            msg = 'NOT_FOUND_ERR';
	            break;
	        case FileError.SECURITY_ERR:
	            msg = 'SECURITY_ERR';
	            break;
	        case FileError.INVALID_MODIFICATION_ERR:
	            msg = 'INVALID_MODIFICATION_ERR';
	            break;
	        case FileError.INVALID_STATE_ERR:
	            msg = 'INVALID_STATE_ERR';
	            break;
	        default:
	            msg = 'Unknown Error';
	            break;
	        }

	        console.log('Error: ' + msg);
	    },

	    init:function () {
	        window.requestFileSystem(window.TEMPORARY, 5 * 1024 * 1024, this.onInitFs, this.errorHandler);
	    },

	    //electron
	    removeFileIfExists:function (name, callback) {
	        try {
	            if(postman_electron) {
	                fs.unlink(name, function (err) {
	                  callback();
	                });
	            }
	            else {
	                pm.filesystem.fs.root.getFile(name,
	                    {create:false}, function (fileEntry) {
	                        fileEntry.remove(function () {
	                            callback();
	                        }, function () {
	                            callback();
	                        });
	                    }, function () {
	                        callback();
	                    });
	                }
	            }
	        catch(e) {
	            callback();
	        }
	    },

	    renderResponsePreview:function (name, data, type, callback) {
	        name = encodeURI(name);
	        name = name.replace("/", "_");
	        pm.filesystem.removeFileIfExists(name, function () {
	            if(postman_electron) {
	                //write to the file
	                var pathForElectron = pm.mainProcessApp.getPath("appData")+"/"+name;
	                fs.writeFile(pathForElectron, data, function(err) {
	                    if(err) {
	                      pm.filesystem.errorHandler(err);
	                    }
	                    else {
	                        callback(pathForElectron);
	                    }
	                });
	            }
	            else {
	                pm.filesystem.fs.root.getFile(name,
	                    {create:true},
	                    function (fileEntry) {
	                        fileEntry.createWriter(function (fileWriter) {

	                            fileWriter.onwriteend = function (e) {
	                                var properties = {
	                                    url:fileEntry.toURL()
	                                };

	                                callback(properties.url);
	                            };

	                            fileWriter.onerror = function (e) {
	                                callback(false);
	                            };

	                            var blob;
	                            if (type === "pdf") {
	                                blob = new Blob([data], {type:'application/pdf'});
	                            }
	                            else {
	                                blob = new Blob([data], {type:'text/plain'});
	                            }
	                            fileWriter.write(blob);


	                        }, pm.filesystem.errorHandler);


	                    }, pm.filesystem.errorHandler
	                );
	            }
	        });
	    },

	    //works with electron
	    saveAndOpenFile:function (name, data, type, callback) {
	        name = encodeURIComponent(name);

	        if(postman_electron) {
	            var path = pm.appWindow.sendSyncMessage("getSaveTarget");
	            if(!path) {
	                console.log("Save aborted");
	            }
	            else {
	                console.log("Saving file to " + path);
	                fs.writeFile(path, data, function(err) {
	                    if(err) pm.filesystem.errorHandler(err);
	                    else {
	                        callback();
	                    }
	                });
	            }
	            return;
	        }


	        chrome.fileSystem.chooseEntry({type: 'saveFile', suggestedName: name}, function(writableFileEntry) {
	            if (!writableFileEntry) {
	                return;
	            }

	            writableFileEntry.createWriter(function(writer) {
	                var truncated = false;

	                writer.onerror = function (e) {
	                    callback();
	                };

	                writer.onwriteend = function(e) {
	                    if (!truncated) {
	                        truncated = true;
	                        this.truncate(this.position);
	                        return;
	                    }

	                    // console.log('write complete');
	                    callback();
	                };

	                var blob;
	                if (type === "pdf") {
	                    blob = new Blob([data], {type:'application/pdf'});
	                }
	                else {
	                    blob = new Blob([data], {type:'text/plain'});
	                }

	                writer.write(blob);
	            }, pm.filesystem.errorHandler);
	        });
	    }
	};

	module.exports = filesystem;


/***/ },
/* 368 */
/***/ function(module, exports) {

	PMindexedDB = {
	    TABLE_HEADER_PRESETS: "header_presets",
	    TABLE_HELPERS: "helpers",
	    TABLE_DRIVE_FILES: "drive_files",
	    TABLE_DRIVE_CHANGES: "drive_changes",
	    TABLE_OAUTH2_ACCESS_TOKENS: "oauth2_access_tokens",
	    TABLE_TEST_RUNS: "test_runs",

	    onTransactionComplete: function(callback) {
	        if (pm.isTesting) {
	            pm.indexedDB.clearAllObjectStores(function() {
	                callback();
	            });
	        }
	        else {
	            callback();
	        }
	    },

	    onerror:function (event, callback) {
	        console.log("Could not load DB", event);
	        pm.alerts.error('Could not load DB');
	    },

	    open_v21:function (callback) {
	        var request = indexedDB.open(pm.databaseName, "POSTman request history");
	        request.onsuccess = function (e) {
	            var v = "0.7.10";
	            pm.indexedDB.db = e.target.result;
	            var db = pm.indexedDB.db;

	            //We can only create Object stores in a setVersion transaction
	            if (v !== db.version) {
	                var setVrequest = db.setVersion(v);

	                setVrequest.onfailure = function (e) {
	                    console.log(e);
	                };

	                setVrequest.onsuccess = function (event) {
	                    //Only create if does not already exist
		                if (!db.objectStoreNames.contains("requests")) {
			                var requestStore = db.createObjectStore("requests", {keyPath:"id"});
			                requestStore.createIndex("timestamp", "timestamp", { unique:false});
		                }

		                if (!db.objectStoreNames.contains("systemValues")) {
			                var requestStore = db.createObjectStore("systemValues", {keyPath:"name"});
			                requestStore.createIndex("name", "name", { unique:true});
		                }

	                    if (!db.objectStoreNames.contains("collections")) {
	                        var collectionsStore = db.createObjectStore("collections", {keyPath:"id"});
	                        collectionsStore.createIndex("timestamp", "timestamp", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains("collection_requests")) {
	                        var collectionRequestsStore = db.createObjectStore("collection_requests", {keyPath:"id"});
	                        collectionRequestsStore.createIndex("timestamp", "timestamp", { unique:false});
	                        collectionRequestsStore.createIndex("collectionId", "collectionId", { unique:false});
	                    }

		                if (!db.objectStoreNames.contains("unsynced_changes")) {
			                var unsyncedChanges = db.createObjectStore("unsynced_changes", {keyPath:"id"});
			                unsyncedChanges.createIndex("timestamp", "timestamp", { unique:false});
		                }


		                if (db.objectStoreNames.contains("collection_responses")) {
	                        db.deleteObjectStore("collection_responses");
	                    }

	                    if (!db.objectStoreNames.contains("environments")) {
	                        var environmentsStore = db.createObjectStore("environments", {keyPath:"id"});
	                        environmentsStore.createIndex("timestamp", "timestamp", { unique:false});
	                        environmentsStore.createIndex("id", "id", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains("header_presets")) {
	                        var headerPresetsStore = db.createObjectStore("header_presets", {keyPath:"id"});
	                        headerPresetsStore.createIndex("timestamp", "timestamp", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_HELPERS)) {
	                        var helpersStore = db.createObjectStore(pm.indexedDB.TABLE_HELPERS, {keyPath:"id"});
	                        helpersStore.createIndex("timestamp", "timestamp", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_DRIVE_FILES)) {
	                        var driveFilesStore = db.createObjectStore(pm.indexedDB.TABLE_DRIVE_FILES, {keyPath:"id"});
	                        driveFilesStore.createIndex("timestamp", "timestamp", { unique:false});
	                        driveFilesStore.createIndex("fileId", "fileId", { unique:false});
	                    }
	                    else {
	                        var driveFilesStoreForIndex = request.transaction.objectStore(pm.indexedDB.TABLE_DRIVE_FILES);
	                        driveFilesStoreForIndex.createIndex("fileId", "fileId", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_DRIVE_CHANGES)) {
	                        var driveChangesStore = db.createObjectStore(pm.indexedDB.TABLE_DRIVE_CHANGES, {keyPath:"id"});
	                        driveChangesStore.createIndex("timestamp", "timestamp", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS)) {
	                        var accessTokenStore = db.createObjectStore(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS, {keyPath:"id"});
	                        accessTokenStore.createIndex("timestamp", "timestamp", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_TEST_RUNS)) {
	                        var environmentsStore = db.createObjectStore(pm.indexedDB.TABLE_TEST_RUNS, {keyPath:"id"});
	                        environmentsStore.createIndex("timestamp", "timestamp", { unique:false});
	                    }

	                    if (!db.objectStoreNames.contains("client_notifications")) {
	                        var notificationsStore = db.createObjectStore("client_notifications", {keyPath:"id"});
	                        notificationsStore.createIndex("timestamp", "timestamp", { unique:false});
	                    }

	                    var transaction = event.target.result;
	                    transaction.oncomplete = pm.indexedDB.onTransactionComplete;
	                };

	                setVrequest.onupgradeneeded = function (evt) {
	                };
	            }
	        };

	        request.onfailure = pm.indexedDB.onerror;
	    },

	    open_latest:function (callback) {
	        var v = 43;
	        var request = indexedDB.open(pm.databaseName, v);
	        request.onupgradeneeded = function (e) {
	            console.log("Upgrade DB");
	            var db = e.target.result;
	            pm.indexedDB.db = db;

	            if (!db.objectStoreNames.contains("requests")) {
	                var requestStore = db.createObjectStore("requests", {keyPath:"id"});
	                requestStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            if (!db.objectStoreNames.contains("systemValues")) {
	                var requestStore = db.createObjectStore("systemValues", {keyPath:"name"});
	                requestStore.createIndex("name", "name", { unique:true});
	            }

	            if (!db.objectStoreNames.contains("sinceIds")) {
	                var requestStore = db.createObjectStore("sinceIds", {keyPath:"id"});
	                requestStore.createIndex("id", "id", { unique:true});
	            }

	            if (!db.objectStoreNames.contains("requestTabs")) {
	                var requestStore = db.createObjectStore("requestTabs", {keyPath:"id"});
	                requestStore.createIndex("id", "id", { unique:true});
	                requestStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            if (!db.objectStoreNames.contains("domainCookies")) {
	                var requestStore = db.createObjectStore("domainCookies", {keyPath:"domain"});
	                requestStore.createIndex("domain", "domain", { unique:false});
	                //requestStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            //this table will have userId:collectionId values. That's it
	            if (!db.objectStoreNames.contains("subscriptions")) {
	                var requestStore = db.createObjectStore("subscriptions", {keyPath:"id"});
	                requestStore.createIndex("id", "id", { unique:true});
	            }

	            if (!db.objectStoreNames.contains("collections")) {
	                var collectionsStore = db.createObjectStore("collections", {keyPath:"id"});
	                collectionsStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

				if (!db.objectStoreNames.contains("unsynced_changes")) {
					var unsyncedChanges = db.createObjectStore("unsynced_changes", {keyPath:"id"});
					unsyncedChanges.createIndex("timestamp", "timestamp", { unique:false});
				}

	            if (!db.objectStoreNames.contains("sync_conflicts")) {
	                //here, id will be request:<request_id>[:transfer]
	                var unsyncedChanges = db.createObjectStore("sync_conflicts", {keyPath:"id"});
	                unsyncedChanges.createIndex("id", "id", { unique:true});
	            }

	            if (!db.objectStoreNames.contains("collection_requests")) {
	                var collectionRequestsStore = db.createObjectStore("collection_requests", {keyPath:"id"});
	                collectionRequestsStore.createIndex("timestamp", "timestamp", { unique:false});
	                collectionRequestsStore.createIndex("collectionId", "collectionId", { unique:false});
					collectionRequestsStore.createIndex("folderId", "folderId", { unique:false});
	            }

	            if (!db.objectStoreNames.contains("environments")) {
	                var environmentsStore = db.createObjectStore("environments", {keyPath:"id"});
	                environmentsStore.createIndex("timestamp", "timestamp", { unique:false});
	                environmentsStore.createIndex("id", "id", { unique:false});
	            }

	            if (!db.objectStoreNames.contains("header_presets")) {
	                var headerPresetsStore = db.createObjectStore("header_presets", {keyPath:"id"});
	                headerPresetsStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_HELPERS)) {
	                var helpersStore = db.createObjectStore(pm.indexedDB.TABLE_HELPERS, {keyPath:"id"});
	                helpersStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_DRIVE_FILES)) {
	                var driveFilesStore = db.createObjectStore(pm.indexedDB.TABLE_DRIVE_FILES, {keyPath:"id"});
	                driveFilesStore.createIndex("timestamp", "timestamp", { unique:false});
	                driveFilesStore.createIndex("fileId", "fileId", { unique:false});
	            }

	            if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_DRIVE_CHANGES)) {
	                var driveChangesStore = db.createObjectStore(pm.indexedDB.TABLE_DRIVE_CHANGES, {keyPath:"id"});
	                driveChangesStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS)) {
	                var accessTokenStore = db.createObjectStore(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS, {keyPath:"id"});
	                accessTokenStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            if (!db.objectStoreNames.contains(pm.indexedDB.TABLE_TEST_RUNS)) {
	                var environmentsStore = db.createObjectStore(pm.indexedDB.TABLE_TEST_RUNS, {keyPath:"id"});
	                environmentsStore.createIndex("timestamp", "timestamp", { unique:false});
	            }

	            if (!db.objectStoreNames.contains("client_notifications")) {
	                var notificationStore = db.createObjectStore("client_notifications", {keyPath:"id"});
	                notificationStore.createIndex("timestamp", "timestamp", { unique:false});
	            }
	        };


	        request.onsuccess = function (e) {
	                setTimeout(function() {
	                    pm.indexedDB.db = e.target.result;
	                    pm.indexedDB.onTransactionComplete(callback);
	                },200);
	        };

	        request.onerror = pm.indexedDB.onerror;
	    },

	    open:function (callback) {
	        if (parseInt(navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./)[2]) < 23) {
	            pm.indexedDB.open_v21(callback);
	        }
	        else {
	            console.log("Open latest DB");
	            pm.indexedDB.open_latest(callback);
	        }

	        pm.mediator.on("initiateBackup", pm.indexedDB.downloadAllData);
	    },



		getSince: function(callback) {
	        //will return an array
	        //[{own:0},{"u1:c1":2}...]
			var db = pm.indexedDB.db;
			var trans = db.transaction(["sinceIds"], "readwrite");
			var store = trans.objectStore("sinceIds");


	        var keyRange = IDBKeyRange.only("own");
	        var index = store.index("id");
	        var cursorRequest = index.openCursor(keyRange);
	        var sinces = [];

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                if(sinces.length === 0) {
	                    console.log("Since not found...resetting to 0");
	                    var request2 = store.put({"id": "own", "value": 0});
	                    sinces = [{"id": "own", "value": 0}];
	                }
	                if (callback) {
	                    callback(sinces);
	                }

	                return;
	            }

	            var change = result.value;
	            sinces.push(change);

	            //This wil call onsuccess again and again until no more request is left
	            result['continue']();
	        };

	        cursorRequest.onerror = pm.indexedDB.onerror;
		},

	    getLastSynced: function(callback) {
	        //will return an array
	        //[{own:0},{"u1:c1":2}...]

	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["sinceIds"], "readwrite");
	        var store = trans.objectStore("sinceIds");


	        var keyRange = IDBKeyRange.only("ownLastSynced");
	        var index = store.index("id");
	        var cursorRequest = index.openCursor(keyRange);
	        var sinces = [];

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                if(sinces.length === 0) {
	                    console.log("LastSynced not found...resetting to 0");
	                    var request2 = store.put({"id": "ownLastSynced", "value": 1});
	                    sinces = [{"id": "ownLastSynced", "value": 1}];
	                }
	                if (callback) {
	                    callback(sinces);
	                }

	                return;
	            }

	            var change = result.value;
	            if(!change.value) {
	                store.put({"id": "ownLastSynced", "value": 1});
	                change.value = -1;
	            }
	            sinces.push(change);

	            //This wil call onsuccess again and again until no more request is left
	            result['continue']();
	        };

	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    updateSince: function(value, timestamp, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["sinceIds"], "readwrite");
	        var store = trans.objectStore("sinceIds");

	        var boundKeyRange = IDBKeyRange.only("own");
	        var request = store.put({id:"own", value:value});

	        request.onsuccess = function (e) {
	            callback(value);
	        };

	        request.onerror = function (e) {
	            callback(value);
	        };
	    },

	     updateLastSynced: function(value, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["sinceIds"], "readwrite");
	        var store = trans.objectStore("sinceIds");

	        var boundKeyRange = IDBKeyRange.only("ownLastSynced");
	        var request = store.put({id:"ownLastSynced", value:value});

	        request.onsuccess = function (e) {
	            callback(value);
	        };

	        request.onerror = function (e) {
	            callback(value);
	        };
	    },


	    deleteAllSince: function(callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["sinceIds"], "readwrite");
	        var store = trans.objectStore("sinceIds");
	        var request = store.clear();
	    },

	    updateLocalSince: function(value, timestamp, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["sinceIds"], "readwrite");
	        var store = trans.objectStore("sinceIds");

	        var boundKeyRange = IDBKeyRange.only("own");
	        var request = store.put({id:"own", value:value});

	        request.onsuccess = function (e) {
	            callback(value);
	        };

	        request.onerror = function (e) {
	            console.log(e.value);
	        };
	    },

	    updateSubscribedSince: function(subscriptionId, value, timestamp, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["sinceIds"], "readwrite");
	        var store = trans.objectStore("sinceIds");

	        var boundKeyRange = IDBKeyRange.only(subscriptionId);
	        var request = store.put({"id":"subscriptionId",value: value});

	        request.onsuccess = function (e) {
	            callback(value);
	        };

	        request.onerror = function (e) {
	            console.log(e.value);
	        };
	    },

	    deleteAllSyncValues: function(callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["systemValues"], "readwrite");
	        var store = trans.objectStore("systemValues");
	        var request = store.clear();
	        request.onsuccess = function () {
	            callback();

	        };
	    },

	    addSyncConflict: function(conflict, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["sync_conflicts"], "readwrite");
	        var store = trans.objectStore("sync_conflicts");

	        var request;

	        request = store.put(conflict);

	        request.onsuccess = function () {
	            callback(conflict);

	        };

	        request.onerror = function (e) {
	            console.log(e.value);
	        };
	    },

	    getAllConflicts: function(callback) {
	        var db = pm.indexedDB.db;
	        if (db === null) {
	            return;
	        }

	        var trans = db.transaction(["sync_conflicts"], "readwrite");
	        var store = trans.objectStore("sync_conflicts");

	        //Get everything in the store
	        var keyRange = IDBKeyRange.lowerBound(0);
	        var index = store.index("id");
	        var cursorRequest = index.openCursor(keyRange);
	        var changes = [];

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                if (callback) {
	                    callback(changes);
	                }

	                return;
	            }

	            var change = result.value;
	            changes.push(change);

	            //This wil call onsuccess again and again until no more request is left
	            result['continue']();
	        };

	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    updateSyncConflict:function (conflict, callback) {
	        try {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["sync_conflicts"], "readwrite");
	            var store = trans.objectStore(["sync_conflicts"]);

	            var boundKeyRange = IDBKeyRange.only(conflict.id);
	            var request = store.put(conflict);

	            request.onsuccess = function () {
	                callback(changeset);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        }
	        catch (e) {
	            console.log(e);
	        }
	    },

	    clearSyncConflicts: function() {
	        var db = pm.indexedDB.db;
	        if (db === null) {
	            return;
	        }

	        var trans = db.transaction(["sync_conflicts"], "readwrite");
	        var store = trans.objectStore("sync_conflicts");

	        store.clear();
	    },

		addUnsyncedChange: function(unsyncedChange, callback) {
			var db = pm.indexedDB.db;
			var trans = db.transaction(["unsynced_changes"], "readwrite");
			var store = trans.objectStore("unsynced_changes");

			var request;

			request = store.put(unsyncedChange);
	        //console.log("Adding unsynced change to DB: " + unsyncedChange.id);

			request.onsuccess = function () {
				callback(unsyncedChange);
			};

			request.onerror = function (e) {
				console.log(e.value);
			};
		},

	    addUnsyncedChanges: function(changeArray, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["unsynced_changes"], "readwrite");
	        var store = trans.objectStore("unsynced_changes");

	        var request;
	        var numChanges = changeArray.length;
	        for(var i=0;i<numChanges;i++) {
	            var unsyncedChange = changeArray[i];
	            request = store.put(unsyncedChange);
	            //console.log("Adding unsynced change to DB: " + unsyncedChange.id);
	        }
	        request.onsuccess = function () {
	            if(typeof callback === "function") {
	                callback();
	            }
	        };
	        request.onerror = function (e) {
	            console.log(e.value);
	        };
	    },

		getUnsyncedChanges:function (callback) {
			var db = pm.indexedDB.db;
			if (db === null) {
				return;
			}

			var trans = db.transaction(["unsynced_changes"], "readwrite");
			var store = trans.objectStore("unsynced_changes");

			//Get everything in the store
			var keyRange = IDBKeyRange.lowerBound(0);
			var index = store.index("timestamp");
			var cursorRequest = index.openCursor(keyRange);
			var changes = [];

			cursorRequest.onsuccess = function (e) {
				var result = e.target.result;

				if (!result) {
					if (callback) {
						callback(changes);
					}

					return;
				}

				var change = result.value;
				changes.push(change);

				//This wil call onsuccess again and again until no more request is left
				result['continue']();
			};

			cursorRequest.onerror = pm.indexedDB.onerror;
		},

		updateUnsyncedChange:function (changeset, callback) {
			try {
				var db = pm.indexedDB.db;
				var trans = db.transaction(["unsynced_changes"], "readwrite");
				var store = trans.objectStore(["unsynced_changes"]);

				var boundKeyRange = IDBKeyRange.only(changeset.id);
				var request = store.put(changeset);
	            //console.log("Updating unsynced change to DB: " + changeset.id);

				request.onsuccess = function () {
	                if(callback) {
	                    callback(changeset);
	                }
				};

				request.onerror = function (e) {
					console.log(e);
				};
			}
			catch (e) {
				console.log(e);
			}
		},

	    deleteUnsyncedChange:function (id, callback) {
	        try {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["unsynced_changes"], "readwrite");
	            var store = trans.objectStore(["unsynced_changes"]);

	            var request = store['delete'](id);
	            //console.log("Deleting unsynced change from DB: " + id);

	            request.onsuccess = function () {
	                if(typeof callback === "function") {
	                    callback(id);
	                }
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        }
	        catch (e) {
	            console.log(e);
	        }
	    },

		clearUnsyncedChanges: function() {
			var db = pm.indexedDB.db;
			if (db === null) {
				return;
			}

			var trans = db.transaction(["unsynced_changes"], "readwrite");
			var store = trans.objectStore("unsynced_changes");

			store.clear();
		},

		getAllSyncNotifs:function (callback) {
			var db = pm.indexedDB.db;
			if (db === null) {
				return;
			}

			var trans = db.transaction(["systemValues"], "readwrite");
			var store = trans.objectStore("systemValues");

			var cursorRequest = store.get("syncNotifs");

			cursorRequest.onsuccess = function (e) {
				if(e===undefined || e.target.result===undefined) {
					console.log("No notifs found");
					var boundKeyRange = IDBKeyRange.only("syncNotifs");
					var request2 = store.put({"name":"syncNotifs",value: []});
					callback({name: "syncNotifs", value: []});
				}
				else {
					var result = e.target.result;
					callback(result);
				}
			};
		},

	    updateSyncNotifs: function(syncNotifs, callback) {

	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["systemValues"], "readwrite");
	        var store = trans.objectStore("systemValues");

	        var boundKeyRange = IDBKeyRange.only("syncNotifs");
	        var objToStore = {
	            "name": "syncNotifs",
	            "value": syncNotifs
	        };
	        var request = store.put(objToStore);

	        request.onsuccess = function (e) {
	            callback(syncNotifs);
	        };

	        request.onerror = function (e) {
	            console.log(e.value);
	        };
	    },

	    addCollection:function (collection, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collections"], "readwrite");
	        var store = trans.objectStore("collections");

	        var request;

	        try {
	            request = store.put(collection);
	        }
	        catch(e) {
	            pm.syncLogger.error("Error adding collection to DB - " + e.value + ". CollectionJSON: " + JSON.stringify(collection));
	            console.error("Error adding collection to DB: " + e.value);
	        }

	        request.onsuccess = function () {
	            callback(collection);
	        };

	        request.onerror = function (e) {
	            pm.syncLogger.error("Error adding collection to DB - " + e.value + ". CollectionJSON: " + JSON.stringify(collection));
	            console.error("Error adding collection to DB: " + e.value);
	        };
	    },

	    updateCollection:function (collection, oldCollection, toSync, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collections"], "readwrite");
	        var store = trans.objectStore("collections");

	        var boundKeyRange = IDBKeyRange.only(collection.id);
	        var request = store.put(collection);
	        request.onsuccess = function (e) {
	            callback(collection);

	        };

	        request.onerror = function (e) {
	            console.error("Error: ", e.value);
	            callback(collection);
	        };
	    },

	    addCollectionRequest:function (req, toSync, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collection_requests"], "readwrite");
	        var store = trans.objectStore("collection_requests");


	        var collectionRequest = store.put(req);
		    var oldThis=this;
	        collectionRequest.onsuccess = function () {
	            callback(req);
	        };

	        collectionRequest.onerror = function (e) {
	            console.error(e.value);
	        };
	    },

	    updateCollectionRequest:function (req, oldRequest, toSync, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collection_requests"], "readwrite");
	        var store = trans.objectStore("collection_requests");

	        var boundKeyRange = IDBKeyRange.only(req.id);
	        var request = store.put(req);
	        request.onsuccess = function (e) {
	            callback(req);
	        };

	        request.onerror = function (e) {
	            console.log("Error: ", e.value);
	            callback(req);
	        };
	    },

	    getCollection:function (id, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collections"], "readwrite");
	        var store = trans.objectStore("collections");

	        //Get everything in the store
	        var cursorRequest = store.get(id);

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;
	            callback(result);
	        };
	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    getCollections:function (callback) {
	        var db = pm.indexedDB.db;

	        if (db === null) {
	            return;
	        }

	        var trans = db.transaction(["collections"], "readwrite");
	        var store = trans.objectStore("collections");

	        //Get everything in the store
	        var keyRange = IDBKeyRange.lowerBound(0);
	        var cursorRequest = store.openCursor(keyRange);
	        var numCollections = 0;
	        var items = [];
	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;
	            if (!result) {
	                callback(items);
	                return;
	            }

	            var collection = result.value;
	            numCollections++;

	            items.push(collection);

	            result['continue']();
	        };

	        cursorRequest.onerror = function (e) {
	            console.log(e);
	        };
	    },

	    deleteAllCollections: function(cb) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collections"], "readwrite");
	        var store = trans.objectStore("collections");
	        var request = store.clear();
	        request.onsuccess = function() {
	            cb();
	        }
	    },

	    getAllCollectionRequests:function (callback) {
	        var db = pm.indexedDB.db;
	        if (db === null) {
	            return;
	        }

	        var trans = db.transaction(["collection_requests"], "readwrite");
	        var store = trans.objectStore("collection_requests");

	        //Get everything in the store
	        var keyRange = IDBKeyRange.lowerBound(0);
	        var index = store.index("timestamp");
	        var cursorRequest = index.openCursor(keyRange);
	        var collectionRequests = [];

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                if (callback) {
	                    callback(collectionRequests);
	                }

	                return;
	            }

	            var request = result.val
	            collectionRequests.push(request);

	            //This wil call onsuccess again and again until no more request is left
	            result['continue']();
	        };

	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    getAllRequestsForCollectionId:function (id, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collection_requests"], "readwrite");

	        //Get everything in the store
	        var keyRange = IDBKeyRange.only(id);
	        var store = trans.objectStore("collection_requests");

	        var index = store.index("collectionId");
	        var cursorRequest = index.openCursor(keyRange);

	        var requests = [];

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                callback(requests);
	                return;
	            }

	            var request = result.value;
	            requests.push(request);

	            //This wil call onsuccess again and again until no more request is left
	            result['continue']();
	        };
	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    getAllRequestsInCollection:function (collection, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collection_requests"], "readwrite");

	        //Get everything in the store
	        var keyRange = IDBKeyRange.only(collection.id);
	        var store = trans.objectStore("collection_requests");

	        var index = store.index("collectionId");
	        var cursorRequest = index.openCursor(keyRange);

	        var requests = [];

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                callback(collection, requests);
	                return;
	            }

	            var request = result.value;
	            requests.push(request);

	            //This wil call onsuccess again and again until no more request is left
	            result['continue']();
	        };
	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    addRequest:function (historyRequest, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["requests"], "readwrite");
	        var store = trans.objectStore("requests");
	        var request = store.put(historyRequest);

	        request.onsuccess = function (e) {
	            callback(historyRequest);
	        };

	        request.onerror = function (e) {
	            console.log(e.value);
	        };
	    },

	    getRequest:function (id, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["requests"], "readwrite");
	        var store = trans.objectStore("requests");

	        //Get everything in the store
	        var cursorRequest = store.get(id);

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;
	            if (!result) {
	                return;
	            }

	            callback(result);
	        };
	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    deleteAllHistoryRequests: function(cb) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["requests"], "readwrite");
	        var store = trans.objectStore("requests");
	        var request = store.clear();
	        request.onsuccess = cb;
	    },

	    getCollectionRequest:function (id, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collection_requests"], "readwrite");
	        var store = trans.objectStore("collection_requests");

	        if(typeof id !== "string") {
	            //incorrect input passed
	            var error = new Error();
	            pm.syncLogger.error("Bad request id = " +JSON.stringify(id) +"  . Stack: " + error.stack);
	            callback(null);
	            return null;
	        }

	        //Get everything in the store
	        var cursorRequest = store.get(id);

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;
	            if (!result) {
	                //pm.syncLogger.error("Could not find a request with this ID: " + id);
	                callback(null);
	                return;
	            }

	            callback(result);
	            return result;
	        };
	        cursorRequest.onerror = function(e) {
	            //pm.syncLogger.error("Could not find a request with this ID: " + id);
	            callback(null);
	        }
	    },


	    getAllRequestItems:function (callback) {
	        var db = pm.indexedDB.db;
	        if (db === null) {
	            return;
	        }

	        var trans = db.transaction(["requests"], "readwrite");
	        var store = trans.objectStore("requests");

	        //Get everything in the store
	        var keyRange = IDBKeyRange.lowerBound(0);
	        var index = store.index("timestamp");
	        var cursorRequest = index.openCursor(keyRange);
	        var historyRequests = [];

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                callback(historyRequests);
	                return;
	            }

	            var request = result.value;
	            historyRequests.push(request);

	            //This wil call onsuccess again and again until no more request is left
	            result['continue']();
	        };

	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

		deleteRequest:function (id, callback) {
			try {
				var db = pm.indexedDB.db;
				var trans = db.transaction(["requests"], "readwrite");
				var store = trans.objectStore(["requests"]);

				var request = store['delete'](id);

				request.onsuccess = function () {
					callback(id);
				};

				request.onerror = function (e) {
					console.log(e);
				};
			}
			catch (e) {
				console.log(e);
			}
		},

	    deleteHistory:function (callback) {
	        var db = pm.indexedDB.db;
	        var clearTransaction = db.transaction(["requests"], "readwrite");
	        var clearRequest = clearTransaction.objectStore(["requests"]).clear();
	        clearRequest.onsuccess = function (event) {
	            callback();
	        };
	    },

	    deleteCollectionRequestWithOptSync: function(id, toSync, callback) {
	        //pm.indexedDB.getCollectionRequest(id, function(collectionRequest) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["collection_requests"], "readwrite");
	            var store = trans.objectStore(["collection_requests"]);

	            var request = store['delete'](id);

	            request.onsuccess = function (e) {
	                callback(id);
	            };

	            request.onerror = function (e) {
	                console.log("Error: ",e);
	                callback(id);
	            };
	        //});
	    },

	    deleteCollectionRequest:function (id, callback) {
	        this.deleteCollectionRequestWithOptSync(id,true,callback);
	    },

	    //in a collection
	    deleteAllCollectionRequests:function (id) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collection_requests"], "readwrite");

	        //Get everything in the store
	        var keyRange = IDBKeyRange.only(id);
	        var store = trans.objectStore("collection_requests");

	        var index = store.index("collectionId");
	        var cursorRequest = index.openCursor(keyRange);

	        cursorRequest.onsuccess = function (e) {
	            var result = e.target.result;

	            if (!result) {
	                return;
	            }

	            var request = result.value;
	            pm.indexedDB.deleteCollectionRequest(request.id, function() {
	            });
	            result['continue']();
	        };
	        cursorRequest.onerror = pm.indexedDB.onerror;
	    },

	    deleteEachCollectionRequest: function() {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collection_requests"], "readwrite");
	        var store = trans.objectStore("collection_requests");
	        var request = store.clear();
	    },

	    deleteCollectionWithOptSync:function (id, toSync, callback) {
	        var db = pm.indexedDB.db;
	        var trans = db.transaction(["collections"], "readwrite");
	        var store = trans.objectStore(["collections"]);

	        var request = store['delete'](id);


	        request.onsuccess = function () {
	            // pm.indexedDB.deleteAllCollectionRequests(id);
	            callback(id);
	        };

	        request.onerror = function (e) {
	            console.log("Error: ", e);
	            callback(id);
	        };
	    },

	    subscriptions: {
	        addSubscription: function(subscription, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["subscriptions"], "readwrite");
	            var store = trans.objectStore("subscriptions");
	            var request = store.put(subscription);

	            request.onsuccess = function (e) {
	                callback(subscription);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        deleteSubscription:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["subscriptions"], "readwrite");
	            var store = trans.objectStore(["subscriptions"]);

	            var request = store['delete'](id);

	            request.onsuccess = function () {
	                callback(id);
	            };

	            request.onerror = function (e) {
	                console.log("Error: ", e);
	                callback(id);
	            };
	        },

	        deleteAllSubscriptions: function(cb) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["subscriptions"], "readwrite");
	            var store = trans.objectStore("subscriptions");
	            var request = store.clear();
	            request.onsuccess = function () {
	                cb();
	            };
	        },

	        getAllSubscriptions: function(cb) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction(["subscriptions"], "readwrite");
	            var store = trans.objectStore("subscriptions");

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("id");
	            var cursorRequest = index.openCursor(keyRange);
	            var subscriptions = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    cb(subscriptions);
	                    return;
	                }

	                var request = result.value;
	                subscriptions.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        isSubscribedTo: function(subscriptionId) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["subscriptions"], "readwrite");
	            var store = trans.objectStore("subscriptions");

	            //Get everything in the store
	            var cursorRequest = store.get(subscriptionId);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                if (!result) {
	                    return;
	                }

	                callback(result);
	                return result;
	            };
	            cursorRequest.onerror = pm.indexedDB.onerror;
	        }
	    },

	    environments:{
	        addEnvironment:function (environment, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["environments"], "readwrite");
	            var store = trans.objectStore("environments");
	            var request = store.put(environment);

	            request.onsuccess = function (e) {
	                callback(environment);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getEnvironment:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["environments"], "readwrite");
	            var store = trans.objectStore("environments");

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                callback(result);
	            };
	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        deleteEnvironment:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["environments"], "readwrite");
	            var store = trans.objectStore(["environments"]);

	            var request = store['delete'](id);

	            request.onsuccess = function () {
	                callback(id);
	            };

	            request.onerror = function (e) {
	                console.log("Error: ", e);
	                callback(id);
	            };
	        },

	        getAllEnvironments:function (callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction(["environments"], "readwrite");
	            var store = trans.objectStore("environments");

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var environments = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    callback(environments);
	                    return;
	                }

	                var request = result.value;
	                environments.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        updateEnvironment:function (environment, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["environments"], "readwrite");
	            var store = trans.objectStore("environments");

	            var boundKeyRange = IDBKeyRange.only(environment.id);
	            var request = store.put(environment);

	            request.onsuccess = function (e) {
	                callback(environment);
	            };

	            request.onerror = function (e) {
	                console.log("Error: ", e.value);
	                callback(environment);
	            };
	        },

	        deleteAllEnvironments: function(cb) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["environments"], "readwrite");
	            var store = trans.objectStore("environments");
	            var request = store.clear();
	            request.onsuccess = function () {
	                cb();
	            };
	        },
	    },

	    helpers:{
	        addHelper:function (helper, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_HELPERS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_HELPERS);
	            var request = store.put(helper);

	            request.onsuccess = function (e) {
	                callback(helper);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getHelper:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_HELPERS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_HELPERS);

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                callback(result);
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        }
	    },

	    headerPresets:{
	        addHeaderPreset:function (headerPreset, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_HEADER_PRESETS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_HEADER_PRESETS);
	            var request = store.put(headerPreset);

	            request.onsuccess = function (e) {
	                callback(headerPreset);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getHeaderPreset:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_HEADER_PRESETS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_HEADER_PRESETS);

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                callback(result);
	            };
	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        deleteHeaderPreset:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_HEADER_PRESETS], "readwrite");
	            var store = trans.objectStore([pm.indexedDB.TABLE_HEADER_PRESETS]);

	            var request = store['delete'](id);

	            request.onsuccess = function () {
	                callback(id);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        deleteAllHeaderPresets: function(cb) {
	            var db = pm.indexedDB.db;

	            var trans = db.transaction([pm.indexedDB.TABLE_HEADER_PRESETS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_HEADER_PRESETS);
	            var request = store.clear();
	            request.onsuccess = function() {
	                cb();
	            }
	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getAllHeaderPresets:function (callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction([pm.indexedDB.TABLE_HEADER_PRESETS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_HEADER_PRESETS);

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var headerPresets = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    callback(headerPresets);
	                    return;
	                }

	                var request = result.value;
	                headerPresets.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        updateHeaderPreset:function (headerPreset, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_HEADER_PRESETS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_HEADER_PRESETS);

	            var boundKeyRange = IDBKeyRange.only(headerPreset.id);
	            var request = store.put(headerPreset);

	            request.onsuccess = function (e) {
	                callback(headerPreset);
	            };

	            request.onerror = function (e) {
	                console.log(e.value);
	            };
	        }
	    },

	    driveFiles: {
	        addDriveFile:function (driveFile, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_FILES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_FILES);
	            var request = store.put(driveFile);

	            request.onsuccess = function (e) {
	                callback(driveFile);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getDriveFile:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_FILES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_FILES);

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                callback(result);
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        getDriveFileByFileId:function (fileId, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_FILES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_FILES);

	            //Get everything in the store
	            var keyRange = IDBKeyRange.only(fileId);
	            var index = store.index("fileId");
	            var cursorRequest = index.openCursor(keyRange);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                if(result) {
	                    callback(result.value);
	                }
	                else {
	                    callback(null);
	                }

	            };

	            cursorRequest.onerror = function(e) {
	                callback(null);
	            };
	        },

	        deleteDriveFile:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_FILES], "readwrite");
	            var store = trans.objectStore([pm.indexedDB.TABLE_DRIVE_FILES]);

	            var request = store['delete'](id);

	            request.onsuccess = function () {
	                callback(id);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getAllDriveFiles:function (callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_FILES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_FILES);

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var driveFiles = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    callback(driveFiles);
	                    return;
	                }

	                var request = result.value;
	                driveFiles.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        updateDriveFile:function (driveFile, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_FILES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_FILES);

	            var boundKeyRange = IDBKeyRange.only(driveFile.id);
	            var request = store.put(driveFile);

	            request.onsuccess = function (e) {
	                callback(driveFile);
	            };

	            request.onerror = function (e) {
	                console.log(e.value);
	            };
	        }
	    },


	    driveChanges: {
	        addDriveChange:function (driveChange, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_CHANGES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_CHANGES);
	            var request = store.put(driveChange);

	            request.onsuccess = function (e) {
	                callback(driveChange);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getDriveChange:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_CHANGES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_CHANGES);

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                callback(result);
	            };
	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        deleteDriveChange:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_CHANGES], "readwrite");
	            var store = trans.objectStore([pm.indexedDB.TABLE_DRIVE_CHANGES]);

	            var request = store['delete'](id);

	            request.onsuccess = function () {
	                callback(id);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getAllDriveChanges:function (callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_CHANGES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_CHANGES);

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var driveChanges = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    driveChanges.sort(sortAscending);
	                    callback(driveChanges);
	                    return;
	                }

	                var request = result.value;
	                driveChanges.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        updateDriveChange:function (driveChange, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_DRIVE_CHANGES], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_DRIVE_CHANGES);

	            var boundKeyRange = IDBKeyRange.only(driveChange.id);
	            var request = store.put(driveChange);

	            request.onsuccess = function (e) {
	                callback(driveChange);
	            };

	            request.onerror = function (e) {
	                console.log(e.value);
	            };
	        }
	    },

	    oAuth2AccessTokens: {
	        addAccessToken: function(token, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS);
	            var request = store.put(token);

	            request.onsuccess = function (e) {
	                callback(token);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        deleteAccessToken: function(id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS);

	            //Get everything in the store
	            var request = store['delete'](id);

	            request.onsuccess = function (e) {
	                callback(id);
	            };
	            request.onerror = pm.indexedDB.onerror;
	        },

	        getAllAccessTokens: function(callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction([pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS);

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var accessTokens = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    callback(accessTokens);
	                    return;
	                }

	                var request = result.value;
	                accessTokens.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        updateAccessToken:function (accessToken, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS);

	            var boundKeyRange = IDBKeyRange.only(accessToken.id);
	            var request = store.put(accessToken);

	            request.onsuccess = function (e) {
	                callback(accessToken);
	            };

	            request.onerror = function (e) {
	                console.log(e.value);
	            };
	        },

	        getAccessToken: function(id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_OAUTH2_ACCESS_TOKENS);

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                callback(result);
	            };
	            cursorRequest.onerror = pm.indexedDB.onerror;
	        }
	    },

	    tabs: {
	        saveTab: function(tab, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["requestTabs"], "readwrite");
	            var store = trans.objectStore("requestTabs");
	            var request = store.put(tab);

	            request.onsuccess = function (e) {
	                callback(tab);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        deleteTab: function(tabId, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["requestTabs"], "readwrite");
	            var store = trans.objectStore("requestTabs");
	            var request = store['delete'](tabId);

	            request.onsuccess = function (e) {
	                callback(tabId);
	            };
	            request.onerror = pm.indexedDB.onerror;
	        },

	        deleteAllTabs: function(callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["requestTabs"], "readwrite");
	            var store = trans.objectStore("requestTabs");
	            var request = store.clear();
	        },

	        getAllTabs: function(callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction(["requestTabs"], "readwrite");
	            var store = trans.objectStore("requestTabs");

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var tabs = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    callback(tabs);
	                    return;
	                }

	                var request = result.value;
	                tabs.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        }
	    },

	    testRuns: {
	        addTestRun: function(testRun, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_TEST_RUNS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_TEST_RUNS);
	            var request = store.put(testRun);

	            request.onsuccess = function (e) {
	                callback(testRun);
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        deleteTestRun: function(id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_TEST_RUNS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_TEST_RUNS);

	            //Get everything in the store
	            var request = store['delete'](id);

	            request.onsuccess = function (e) {
	                callback(id);
	            };
	            request.onerror = pm.indexedDB.onerror;
	        },

	        deleteAllTestRuns: function(callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_TEST_RUNS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_TEST_RUNS);
	            var request = store.clear();
	        },

	        getAllTestRuns: function(callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction([pm.indexedDB.TABLE_TEST_RUNS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_TEST_RUNS);

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var testRuns = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    callback(testRuns);
	                    return;
	                }

	                var request = result.value;
	                testRuns.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        updateTestRun:function (testRun, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_TEST_RUNS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_TEST_RUNS);

	            var boundKeyRange = IDBKeyRange.only(testRun.id);
	            var request = store.put(testRun);

	            request.onsuccess = function (e) {
	                callback(testRun);
	            };

	            request.onerror = function (e) {
	                console.log(e.value);
	            };
	        },

	        getTestRun: function(id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction([pm.indexedDB.TABLE_TEST_RUNS], "readwrite");
	            var store = trans.objectStore(pm.indexedDB.TABLE_TEST_RUNS);

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                callback(result);
	            };
	            cursorRequest.onerror = pm.indexedDB.onerror;
	        }
	    },

	    // TODO Refactor this. Needs to reduce dependencies
	    downloadAllData: function(userId, callback) {
	        //if userId!=0, download data only for that user
	        console.log("Starting to download all data");

	        //Get globals
	        var totalCount = 0;
	        var currentCount = 0;
	        var collections = [];
	        var globals = [];
	        var environments = [];
	        var headerPresets = [];

	        var onFinishGettingCollectionRequests = function(collection) {
	            collections.push(collection);

	            currentCount++;

	            if (currentCount === totalCount) {
	                onFinishExportingCollections(collections);
	            }
	        }

	        var onFinishExportingCollections = function(c) {
	            console.log(pm.envManager);

	            globals = pm.envManager.get("globals").get("globals");

	            //Get environments
	            pm.indexedDB.environments.getAllEnvironments(function (e) {
	                environments = e;
	                pm.indexedDB.headerPresets.getAllHeaderPresets(function (hp) {
	                    headerPresets = hp;
	                    onFinishExporttingAllData(callback);
	                });
	            });
	        }

	        var onFinishExporttingAllData = function() {
	            console.log("collections", collections);
	            console.log("environments", environments);
	            console.log("headerPresets", headerPresets);
	            console.log("globals", globals);

	            var dump = {
	                version: 1,
	                collections: collections,
	                environments: environments,
	                headerPresets: headerPresets,
	                globals: globals
	            };

	            var name = "Backup.postman_dump";
	            var filedata = JSON.stringify(dump, null, '\t');
	            var type = "application/json";
	            pm.filesystem.saveAndOpenFile(name, filedata, type, function () {
	                if (callback) {
	                    callback();
	                }
	            });
	        }

	        //Get collections
	        //Get header presets
	        pm.indexedDB.getCollections(function (items) {
	            //do not dump subscribed collections
	            if(userId!=="0" && userId!==0) {
	                items = _.filter(items, function(item) {
	                    return (!item.owner || (item.owner == userId));
	                });
	            }

	            totalCount = items.length;
	            pm.collections.items = items;
	            var itemsLength = items.length;

	            function onGetAllRequestsInCollection(collection, requests) {
	                collection.requests = requests;
	                onFinishGettingCollectionRequests(collection);
	            }

	            if (itemsLength !== 0) {
	                for (var i = 0; i < itemsLength; i++) {
	                    var collection = items[i];
	                    pm.indexedDB.getAllRequestsInCollection(collection, onGetAllRequestsInCollection);
	                }
	            }
	            else {
	                globals = pm.envManager.get("globals").get("globals");

	                pm.indexedDB.environments.getAllEnvironments(function (e) {
	                    environments = e;
	                    pm.indexedDB.headerPresets.getAllHeaderPresets(function (hp) {
	                        headerPresets = hp;
	                        onFinishExporttingAllData(callback);
	                    });
	                });
	            }
	        });
	    },

	    importAllData: function(files, callback, failCallback) {
	        if (files.length !== 1) {
	            return;
	        }

	        var f = files[0];
	        var reader = new FileReader();

	        // Closure to capture the file information.
	        reader.onload = (function (theFile) {
	            return function (e) {
	                // Render thumbnail.
	                var data = e.currentTarget.result;
	                var j = "";
	                try {
	                    j = JSON.parse(data);
	                }
	                catch(e) {
	                    failCallback(e.message);
	                    return;
	                }
	                var version = j.version;
	                pm.indexedDB.importDataForVersion(version, j, callback);
	            };
	        })(files[0]);

	        // Read in the image file as a data URL.
	        reader.readAsText(files[0]);
	    },

	    importDataForVersion: function(version, data, callback) {
	        if (version === 1) {
	            var environments = pm.envManager.get("environments");
	            var globals = pm.envManager.get("globals");

	            //Send all through unsynced changes
	            if ("globals" in data) {
	                console.log("Import globals");
	                globals.mergeGlobals(data.globals, true, true);
	            }

	            if ("environments" in data) {
	                console.log("Import environments");
	                environments.mergeEnvironments(data.environments);
	            }

	            if ("headerPresets" in data) {
	                console.log("Import headerPresets");
	                pm.headerPresets.mergeHeaderPresets(data.headerPresets);
	            }

	            if ("collections" in data) {
	                console.log("Import collections");
	                pm.collections.mergeCollections(data.collections);
	            }
	        }

	        callback();
	    },
	    clientNotifications:{
	        addNotification:function (notification, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["client_notifications"], "readwrite");
	            var store = trans.objectStore("client_notifications");
	            var request = store.put(notification);

	            request.onsuccess = function (e) {
	                if(callback) {
	                  callback(notification);
	                }
	            };

	            request.onerror = function (e) {
	                console.log(e);
	            };
	        },

	        getNotification:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["client_notifications"], "readwrite");
	            var store = trans.objectStore("client_notifications");

	            //Get everything in the store
	            var cursorRequest = store.get(id);

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;
	                if(callback) {
	                  callback(result);
	                }
	            };
	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        deleteNotification:function (id, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["client_notifications"], "readwrite");
	            var store = trans.objectStore(["client_notifications"]);

	            var request = store['delete'](id);

	            request.onsuccess = function () {
	                if(callback) {
	                  callback(id);
	                }
	            };

	            request.onerror = function (e) {
	                console.log("Error: ", e);
	                if(callback) {
	                  callback(id);
	                }
	            };
	        },

	        getAllNotifications:function (callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction(["client_notifications"], "readwrite");
	            var store = trans.objectStore("client_notifications");

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("timestamp");
	            var cursorRequest = index.openCursor(keyRange);
	            var notifications = [];

	            cursorRequest.onsuccess = function (e) {
	              var result = e.target.result;

	              if (!result) {
	                  if(callback) {
	                    callback(notifications);
	                  }
	                  return;
	              }

	              var request = result.value;
	              notifications.push(request);

	              //This wil call onsuccess again and again until no more request is left
	              result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        updateNotification:function (notification, callback) {
	          var db = pm.indexedDB.db;
	          var trans = db.transaction(["client_notifications"], "readwrite");
	          var store = trans.objectStore("client_notifications");

	          var boundKeyRange = IDBKeyRange.only(notification.id);
	          var request = store.put(notification);

	          request.onsuccess = function (e) {
	            if(callback) {
	              callback(notification);
	            }
	          };

	          request.onerror = function (e) {
	            console.log("Error: ", e.value);
	            if(callback) {
	              callback(notification);
	            }
	          };
	        },

	        deleteAllNotifications: function(callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["client_notifications"], "readwrite");
	            var store = trans.objectStore("client_notifications");
	            var request = store.clear();
	            request.onsuccess = function () {
	              if(callback) {
	                callback();
	              }
	            };
	        },
	    },
	    cookies: {
	        getAllCookies: function(callback) {
	            var db = pm.indexedDB.db;
	            if (db === null) {
	                return;
	            }

	            var trans = db.transaction(["domainCookies"], "readwrite");
	            var store = trans.objectStore("domainCookies");

	            //Get everything in the store
	            var keyRange = IDBKeyRange.lowerBound(0);
	            var index = store.index("domain");
	            var cursorRequest = index.openCursor(keyRange);
	            var testRuns = [];

	            cursorRequest.onsuccess = function (e) {
	                var result = e.target.result;

	                if (!result) {
	                    callback(testRuns);
	                    return;
	                }

	                var request = result.value;
	                testRuns.push(request);

	                //This wil call onsuccess again and again until no more request is left
	                result['continue']();
	            };

	            cursorRequest.onerror = pm.indexedDB.onerror;
	        },

	        saveCookies: function(cookiesArray, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["domainCookies"], "readwrite");
	            var store = trans.objectStore("domainCookies");

	            var request;
	            var numChanges = cookiesArray.length;
	            for(var i=0;i<numChanges;i++) {
	                var cookie = cookiesArray[i];
	                request = store.put(cookie);
	            }
	            request.onsuccess = function () {
	                if(typeof callback === "function") {
	                    callback();
	                }
	            };
	            request.onerror = function (e) {
	                console.log(e.value);
	            };
	        },

	        saveCookie: function(cookie, callback) {
	            var db = pm.indexedDB.db;
	            var trans = db.transaction(["domainCookies"], "readwrite");
	            var store = trans.objectStore("domainCookies");

	            var request;
	            var numChanges = cookiesArray.length;
	            request = store.put(cookie);
	            request.onsuccess = function () {
	                if(typeof callback === "function") {
	                    callback();
	                }
	            };
	            request.onerror = function (e) {
	                console.log(e.value);
	            };
	        },
	    },

	    clearAllObjectStores: function(callback) {
	        console.log("Clearing all object stores");
	        //WARNING: Make sure we are testing and the database is not postman
	        if (pm.isTesting && pm.databaseName !== "postman") {
	            var stores = [
	                "requests", "collections", "header_presets",
	                "collection_requests", "environments",
	                "systemValues", "unsynced_changes", "sync_conflicts",
	                pm.indexedDB.TABLE_HELPERS,
	                pm.indexedDB.TABLE_DRIVE_FILES,
	                pm.indexedDB.TABLE_DRIVE_CHANGES
	            ];

	            var db = pm.indexedDB.db;
	            var transaction = db.transaction(stores, "readwrite");
	            transaction.objectStore("requests").clear();
	            transaction.objectStore("collections").clear();
	            transaction.objectStore("collection_requests").clear();
	            transaction.objectStore("environments").clear();
	            transaction.objectStore("header_presets").clear();
	            transaction.objectStore("systemValues").clear();
	            transaction.objectStore("unsynced_changes").clear();
	            transaction.objectStore("sync_conflicts").clear();
	            transaction.objectStore(pm.indexedDB.TABLE_HELPERS).clear();
	            transaction.objectStore(pm.indexedDB.TABLE_DRIVE_FILES).clear();
	            transaction.objectStore(pm.indexedDB.TABLE_DRIVE_CHANGES).clear();

	            transaction.oncomplete = function(event) {
	                console.log("Cleared the database");
	                if (callback) {
	                    callback();
	                }
	            };
	        }
	    }
	};

	module.exports = PMindexedDB;


/***/ },
/* 369 */
/***/ function(module, exports) {

	broadcasts = {
	    items: [],

	    init:function () {
	        pm.storage.getValue("broadcasts", function(broadcasts) {
	            pm.storage.getValue("broadcast_last_update_time", function(last_update_time) {
	                var today = new Date();

	                pm.broadcasts.showBlank();
	                pm.broadcasts.fetch();
	                if (last_update_time) {
	                    var last_update = new Date(last_update_time);
	                    pm.broadcasts.setLastUpdateTime(today);
	                }
	                else {
	                    pm.broadcasts.setLastUpdateTime(today);
	                }

	                $("#broadcasts-count").on("click", function () {
	                    pm.broadcasts.markAllAsRead();
	                });
	            });
	        });
	    },

	    showBlank:function() {
	        var $broadcasts_count = $("#broadcasts-count");
	        $broadcasts_count.removeClass();
	        $broadcasts_count.addClass("no-new-broadcasts");
	        $broadcasts_count.text("0");
	    },

	    fetch:function () {
	        var broadcast_url = "https://www.getpostman.com/broadcasts";
	        $.get(broadcast_url, function (data) {
	            pm.broadcasts.setBroadcasts(data["broadcasts"]);
	            pm.broadcasts.renderBroadcasts();
	        });
	    },

	    setLastUpdateTime:function (last_update) {
	        pm.storage.setValue({"broadcast_last_update_time": last_update.toUTCString()});
	    },

	    setBroadcasts:function (broadcasts) {
	        var old_broadcasts;
	        var broadcastsJson;
	        var b;

	        function oldBroadCastsFinder(br) {
	            return br.id === b.id;
	        }

	        pm.storage.getValue("broadcasts", function(broadcastsJson) {
	            if (broadcastsJson) {
	                old_broadcasts = JSON.parse(broadcastsJson);
	            }
	            else {
	                old_broadcasts = [];
	            }

	            var i, c, count;
	            if (old_broadcasts.length === 0) {
	                c = broadcasts.length;
	                for (i = 0; i < c; i++) {
	                    broadcasts[i]["status"] = "unread";
	                }
	                count = broadcasts.length;
	                broadcastsJson = JSON.stringify(broadcasts);
	                pm.storage.setValue({"broadcasts": broadcastsJson}, function() {
	                });
	            }
	            else {
	                c = broadcasts.length;
	                var new_broadcasts = [];
	                for (i = 0; i < c; i++) {
	                    b = broadcasts[i];

	                    var existing = _.find(old_broadcasts, oldBroadCastsFinder);

	                    if (!existing) {
	                        b["status"] = "unread";
	                        new_broadcasts.push(b);
	                    }
	                }

	                count = new_broadcasts.length;
	                old_broadcasts = _.union(new_broadcasts, old_broadcasts);
	                broadcastsJson = JSON.stringify(old_broadcasts);
	                pm.storage.setValue({"broadcasts": broadcastsJson}, function() {
	                });
	            }

	            var $broadcasts_count = $("#broadcasts-count");
	            $broadcasts_count.text(count);
	            $broadcasts_count.removeClass();
	            if (count > 0) {
	                $broadcasts_count.addClass("new-broadcasts");
	            }
	            else {
	                $broadcasts_count.addClass("no-new-broadcasts");
	            }
	        });
	    },

	    markAllAsRead:function () {
	        var $broadcasts_count = $("#broadcasts-count");
	        $broadcasts_count.removeClass();
	        $broadcasts_count.addClass("no-new-broadcasts");
	        $broadcasts_count.text("0");

	        pm.storage.getValue("broadcasts", function(broadcastsJson) {
	            var broadcasts;

	            if (broadcastsJson) {
	                broadcasts = JSON.parse(broadcastsJson);
	            }
	            else {
	                broadcasts = [];
	            }

	            var c = broadcasts.length;
	            for (var i = 0; i < c; i++) {
	                broadcasts[i]["status"] = "read";
	            }

	            var outBroadcastsJsons = JSON.stringify(broadcasts);
	            pm.storage.setValue({"broadcasts": outBroadcastsJsons}, function() {
	            });

	            pm.broadcasts.renderBroadcasts();
	        });
	    },

	    renderBroadcasts:function () {
	        pm.storage.getValue("broadcasts", function(broadcastsJson) {
	            try {
	                var broadcasts = JSON.parse(broadcastsJson);
	                $("#broadcasts .dropdown-menu").text("");
	                $("#broadcasts .dropdown-menu").append(Handlebars.templates.broadcasts({"items": broadcasts}));
	            }
	            catch (e) {
	                console.log("Could not parse broadcasts");
	            }
	        });
	    }
	};

	module.exports = broadcasts;


/***/ },
/* 370 */
/***/ function(module, exports) {

	var Alerts = _.extend({
	  _dedupedAlerts: [],

	  _getBaseOptions: function (persist, timeout) {
	    return {
	      theme: 'custom',
	      layout: 'topCenter',
	      timeout: persist ? false : timeout,
	      closeWith: persist ? ['button'] : ['click'],
	      dismissQueue: true,
	      maxVisible: 7,
	      animation: {
	          open: {height: 'toggle'}, // jQuery animate function property object
	          close: {height: 'toggle'}, // jQuery animate function property object
	          easing: 'swing', // easing
	          speed: 0 // disable animations
	      }
	    }
	  },

	  _isDedupedAlert: function(id) {
	    var index = this._dedupedAlerts.indexOf(id);
	    return index > -1 ? true : false;
	  },

	  _addDedupedAlert: function(id) {
	    var index = this._dedupedAlerts.indexOf(id);
	    if(index > -1) {
	      console.error('dedupe failure', id);
	    } else {
	      this._dedupedAlerts.push(id);
	    }
	  },

	  _removeDedupedAlert: function(id) {
	    var index = this._dedupedAlerts.indexOf(id);
	    if(index > -1) {
	      this._dedupedAlerts.splice(index, 1);
	    }
	  },

	  _show: function(options) {
	    var type = options.type;
	    var message = options.message;
	    var dedupeId = options.dedupeId;
	    var persist = options.persist || false;
	    var timeout = options.timeout || 3000;
	    var layout = options.layout || 'topCenter';
	    var showAsHtml = options.showAsHtml || false;
	    var afterCloseCallback = options.afterClose || null;

	    var dedupeOptions = {}
	    var typeDedupeId;

	    if(dedupeId) {
	      typeDedupeId = type + "-" + dedupeId;
	      if(this._isDedupedAlert(typeDedupeId)) {
	        return;
	      }

	      dedupeOptions = {
	        callback: {
	          onShow: function() {
	            this._addDedupedAlert(typeDedupeId);
	          }.bind(this),
	          afterClose: function() {
	            this._removeDedupedAlert(typeDedupeId);
	            if(typeof afterCloseCallback === "function") {
	              afterCloseCallback();
	            }
	          }.bind(this)
	        },
	        layout: layout
	      }
	    }

	    if(!showAsHtml) {
	      message = htmlEncode(message);
	    }

	    noty(
	      _.extend(
	        this._getBaseOptions(persist, timeout), {
	          type: type,
	          text: message
	        },
	        dedupeOptions
	      )
	    );

	  },

	  error: function(message, options) {

	    message || (message = "Something went wrong. Please try again.");
	    options || (options = {});

	    this._show(
	      _.extend(options, {
	        type: 'error',
	        message: message
	      })
	    );
	  },

	  info: function(message, options) {
	    if(!message) {
	      return;
	    }

	    options || (options = {});

	    this._show(
	      _.extend(options, {
	        type: 'info',
	        message: message
	      })
	    );
	  },

	  success: function(message, options) {
	    if(!message) {
	      return;
	    }

	    options || (options = {});

	    this._show(
	      _.extend(options, {
	        type: 'success',
	        message: message
	      })
	    )
	  },

	  warning: function(message, options) {
	    if(!message) {
	      return;
	    }

	    options || (options = {});

	    this._show(
	      _.extend(options, {
	        type: 'warning',
	        message: message
	      })
	    )
	  }

	}, Backbone.Events);

	module.exports = Alerts;


/***/ }
/******/ ]);